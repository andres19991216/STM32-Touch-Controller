
SOMA_VER2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f334  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009ccc  0801f4e4  0801f4e4  0002f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080291b0  080291b0  000400a4  2**0
                  CONTENTS
  4 .ARM          00000008  080291b0  080291b0  000391b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080291b8  080291b8  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080291b8  080291b8  000391b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080291bc  080291bc  000391bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080291c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400a4  2**0
                  CONTENTS
 10 .bss          0001e5a8  200000a4  200000a4  000400a4  2**2
                  ALLOC
 11 ._user_heap_stack 00005004  2001e64c  2001e64c  000400a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004fd1f  00000000  00000000  00040117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b296  00000000  00000000  0008fe36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000033d0  00000000  00000000  0009b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003180  00000000  00000000  0009e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033560  00000000  00000000  000a1620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e224  00000000  00000000  000d4b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108e7b  00000000  00000000  00122da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ddc8  00000000  00000000  0022bc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  002399e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0000c720  00000000  00000000  00239a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f4cc 	.word	0x0801f4cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0801f4cc 	.word	0x0801f4cc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <fillReadBuffer>:

const int16_t q_buf_zero[I2S_BUF_LEN*2] = {0, };


static int fillReadBuffer(uint8_t *read_buf, uint8_t *read_ptr, int buf_size, int bytes_left, FILE *infile)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
  int nRead;

  /* move last, small chunk from end of buffer to start, then fill with new data */
  memmove(read_buf, read_ptr, bytes_left);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f01d fd4f 	bl	801e680 <memmove>
  nRead = fread( read_buf + bytes_left, 1, buf_size - bytes_left, infile);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	18d0      	adds	r0, r2, r3
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	f001 faad 	bl	8002152 <ob_fread>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	617b      	str	r3, [r7, #20]
  /* zero-pad to avoid finding false sync word after last frame (from old data in readBuf) */
  if (nRead < buf_size - bytes_left)
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	da0d      	bge.n	8000c24 <fillReadBuffer+0x5c>
  {
    memset(read_buf + bytes_left + nRead, 0, buf_size - bytes_left - nRead);
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	18d0      	adds	r0, r2, r3
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f01d fd48 	bl	801e6b4 <memset>
  }
  return nRead;
 8000c24:	697b      	ldr	r3, [r7, #20]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <i2sStart>:

bool i2sStart(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  I2S_HandleTypeDef *p_i2s = &hi2s2;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <i2sStart+0x48>)
 8000c38:	607b      	str	r3, [r7, #4]

  q_in  = 0;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <i2sStart+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
  q_out = 0;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <i2sStart+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]

  status = HAL_I2S_Transmit_DMA(p_i2s, (uint16_t *)q_buf_zero, q_buf_len*2);
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <i2sStart+0x54>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <i2sStart+0x58>)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f007 fd0d 	bl	8008674 <HAL_I2S_Transmit_DMA>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	70fb      	strb	r3, [r7, #3]
  if (status == HAL_OK)
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <i2sStart+0x3a>
  {
    is_started = true;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <i2sStart+0x5c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
  }

  return is_started;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <i2sStart+0x5c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000e4d4 	.word	0x2000e4d4
 8000c7c:	200021f4 	.word	0x200021f4
 8000c80:	200021f8 	.word	0x200021f8
 8000c84:	20002200 	.word	0x20002200
 8000c88:	08021590 	.word	0x08021590
 8000c8c:	200021f0 	.word	0x200021f0

08000c90 <i2sStop>:

bool i2sStop(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  is_started = false;
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <i2sStop+0x18>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]

  return true;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200021f0 	.word	0x200021f0

08000cac <i2sSetSampleRate>:

bool i2sSetSampleRate(uint8_t ch, uint32_t freq)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
	bool ret = true;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]

	i2s_sample_rate = freq;
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <i2sSetSampleRate+0x78>)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	6013      	str	r3, [r2, #0]

	q_buf_len = (i2s_sample_rate * 1) / (1000/I2S_BUF_MS);
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <i2sSetSampleRate+0x78>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <i2sSetSampleRate+0x7c>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <i2sSetSampleRate+0x80>)
 8000cd0:	6013      	str	r3, [r2, #0]
	q_in  = 0;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <i2sSetSampleRate+0x84>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
	q_out = 0;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <i2sSetSampleRate+0x88>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
	q_len = I2S_BUF_LEN / q_buf_len;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <i2sSetSampleRate+0x80>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <i2sSetSampleRate+0x8c>)
 8000cec:	6013      	str	r3, [r2, #0]



	hi2s2.Init.AudioFreq = freq;
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <i2sSetSampleRate+0x90>)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	6153      	str	r3, [r2, #20]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <i2sSetSampleRate+0x90>)
 8000cf6:	f007 fb7d 	bl	80083f4 <HAL_I2S_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <i2sSetSampleRate+0x58>
	{
		ret = false;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
	}

	i2sStart();
 8000d04:	f7ff ff94 	bl	8000c30 <i2sStart>
	i2sStop();
 8000d08:	f7ff ffc2 	bl	8000c90 <i2sStop>

	sgtl5000_set_freq(freq);
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f004 fba9 	bl	8005464 <sgtl5000_set_freq>

	HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f005 fc46 	bl	80065a4 <HAL_Delay>

	return ret;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000000 	.word	0x20000000
 8000d28:	51eb851f 	.word	0x51eb851f
 8000d2c:	20002200 	.word	0x20002200
 8000d30:	200021f4 	.word	0x200021f4
 8000d34:	200021f8 	.word	0x200021f8
 8000d38:	200021fc 	.word	0x200021fc
 8000d3c:	2000e4d4 	.word	0x2000e4d4

08000d40 <PlayAudioFile>:

void PlayAudioFile(char* fileName, char* fileType)
{
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	b0a9      	sub	sp, #164	; 0xa4
 8000d46:	af02      	add	r7, sp, #8
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
	bool ret = true;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (strcmp(fileType, "playWAV") == 0)
 8000d52:	49c0      	ldr	r1, [pc, #768]	; (8001054 <PlayAudioFile+0x314>)
 8000d54:	6838      	ldr	r0, [r7, #0]
 8000d56:	f7ff fa4b 	bl	80001f0 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 8155 	bne.w	800100c <PlayAudioFile+0x2cc>
	{
 8000d62:	466b      	mov	r3, sp
 8000d64:	461e      	mov	r6, r3
		FILE *fp;
		wavfile_header_t header;
		uint32_t r_len;

		printf("FileName      : %s\n", fileName);
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	48bb      	ldr	r0, [pc, #748]	; (8001058 <PlayAudioFile+0x318>)
 8000d6a:	f01d fb1b 	bl	801e3a4 <iprintf>

		fp = fopen(fileName, "r");
 8000d6e:	49bb      	ldr	r1, [pc, #748]	; (800105c <PlayAudioFile+0x31c>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f001 f981 	bl	8002078 <ob_fopen>
 8000d76:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if (fp == NULL)
 8000d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d108      	bne.n	8000d94 <PlayAudioFile+0x54>
		{
			printf("fopen fail : %s\n", fileName);
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	48b6      	ldr	r0, [pc, #728]	; (8001060 <PlayAudioFile+0x320>)
 8000d86:	f01d fb0d 	bl	801e3a4 <iprintf>
			SetPlayState(PLAY_NONE);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f002 f8ce 	bl	8002f2c <SetPlayState>
			return;
 8000d90:	46b5      	mov	sp, r6
 8000d92:	e315      	b.n	80013c0 <PlayAudioFile+0x680>
		}
		fread(&header, sizeof(wavfile_header_t), 1, fp);
 8000d94:	f107 000c 	add.w	r0, r7, #12
 8000d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	212c      	movs	r1, #44	; 0x2c
 8000da0:	f001 f9d7 	bl	8002152 <ob_fread>

		printf("ChunkSize     : %d\n", header.ChunkSize);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4619      	mov	r1, r3
 8000da8:	48ae      	ldr	r0, [pc, #696]	; (8001064 <PlayAudioFile+0x324>)
 8000daa:	f01d fafb 	bl	801e3a4 <iprintf>
		printf("Format        : %c%c%c%c\n", header.Format[0], header.Format[1], header.Format[2], header.Format[3]);
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	4619      	mov	r1, r3
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	461a      	mov	r2, r3
 8000db6:	7dbb      	ldrb	r3, [r7, #22]
 8000db8:	4618      	mov	r0, r3
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	48a9      	ldr	r0, [pc, #676]	; (8001068 <PlayAudioFile+0x328>)
 8000dc2:	f01d faef 	bl	801e3a4 <iprintf>
		printf("Subchunk1Size : %d\n", header.Subchunk1Size);
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	48a8      	ldr	r0, [pc, #672]	; (800106c <PlayAudioFile+0x32c>)
 8000dcc:	f01d faea 	bl	801e3a4 <iprintf>
		printf("AudioFormat   : %d\n", header.AudioFormat);
 8000dd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	48a6      	ldr	r0, [pc, #664]	; (8001070 <PlayAudioFile+0x330>)
 8000dd8:	f01d fae4 	bl	801e3a4 <iprintf>
		printf("NumChannels   : %d\n", header.NumChannels);
 8000ddc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000de0:	4619      	mov	r1, r3
 8000de2:	48a4      	ldr	r0, [pc, #656]	; (8001074 <PlayAudioFile+0x334>)
 8000de4:	f01d fade 	bl	801e3a4 <iprintf>
		printf("SampleRate    : %d\n", header.SampleRate);
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	48a2      	ldr	r0, [pc, #648]	; (8001078 <PlayAudioFile+0x338>)
 8000dee:	f01d fad9 	bl	801e3a4 <iprintf>
		printf("ByteRate      : %d\n", header.ByteRate);
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	4619      	mov	r1, r3
 8000df6:	48a1      	ldr	r0, [pc, #644]	; (800107c <PlayAudioFile+0x33c>)
 8000df8:	f01d fad4 	bl	801e3a4 <iprintf>
		printf("BlockAlign    : %d\n", header.BlockAlign);
 8000dfc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	489f      	ldr	r0, [pc, #636]	; (8001080 <PlayAudioFile+0x340>)
 8000e04:	f01d face 	bl	801e3a4 <iprintf>
		printf("BitsPerSample : %d\n", header.BitsPerSample);
 8000e08:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	489d      	ldr	r0, [pc, #628]	; (8001084 <PlayAudioFile+0x344>)
 8000e10:	f01d fac8 	bl	801e3a4 <iprintf>
		printf("Subchunk2Size : %d\n", header.Subchunk2Size);
 8000e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e16:	4619      	mov	r1, r3
 8000e18:	489b      	ldr	r0, [pc, #620]	; (8001088 <PlayAudioFile+0x348>)
 8000e1a:	f01d fac3 	bl	801e3a4 <iprintf>


		i2sSetSampleRate(DEF_I2S2, header.SampleRate);
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	2002      	movs	r0, #2
 8000e24:	f7ff ff42 	bl	8000cac <i2sSetSampleRate>

		i2sStart();
 8000e28:	f7ff ff02 	bl	8000c30 <i2sStart>

		r_len = q_buf_len;
 8000e2c:	4b97      	ldr	r3, [pc, #604]	; (800108c <PlayAudioFile+0x34c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		int16_t buf_frame[q_buf_len*2];
 8000e34:	4b95      	ldr	r3, [pc, #596]	; (800108c <PlayAudioFile+0x34c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0059      	lsls	r1, r3, #1
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e42:	2300      	movs	r3, #0
 8000e44:	4688      	mov	r8, r1
 8000e46:	4699      	mov	r9, r3
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000e54:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000e58:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	461d      	mov	r5, r3
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	012b      	lsls	r3, r5, #4
 8000e6c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e70:	0122      	lsls	r2, r4, #4
 8000e72:	004b      	lsls	r3, r1, #1
 8000e74:	3307      	adds	r3, #7
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7e:	ab02      	add	r3, sp, #8
 8000e80:	3301      	adds	r3, #1
 8000e82:	085b      	lsrs	r3, r3, #1
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	67fb      	str	r3, [r7, #124]	; 0x7c

		fseek(fp, sizeof(wavfile_header_t), SEEK_SET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	212c      	movs	r1, #44	; 0x2c
 8000e8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000e90:	f001 f97e 	bl	8002190 <ob_fseek>

		while(playState == PLAY_STARTED)
 8000e94:	e0ab      	b.n	8000fee <PlayAudioFile+0x2ae>
		{
			uint32_t buf_len;
			int len;

			buf_len = ((q_len + q_in - q_out) % q_len);
 8000e96:	4b7e      	ldr	r3, [pc, #504]	; (8001090 <PlayAudioFile+0x350>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b7e      	ldr	r3, [pc, #504]	; (8001094 <PlayAudioFile+0x354>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	4b7d      	ldr	r3, [pc, #500]	; (8001098 <PlayAudioFile+0x358>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a7a      	ldr	r2, [pc, #488]	; (8001090 <PlayAudioFile+0x350>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eae:	fb01 f202 	mul.w	r2, r1, r2
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	67bb      	str	r3, [r7, #120]	; 0x78
			buf_len = (q_len - buf_len) - 1;
 8000eb6:	4b76      	ldr	r3, [pc, #472]	; (8001090 <PlayAudioFile+0x350>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	67bb      	str	r3, [r7, #120]	; 0x78

			if (buf_len > 0)
 8000ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 8092 	beq.w	8000fee <PlayAudioFile+0x2ae>
			{
				HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4873      	ldr	r0, [pc, #460]	; (800109c <PlayAudioFile+0x35c>)
 8000ed0:	f006 fa4e 	bl	8007370 <HAL_GPIO_WritePin>
				len = fread(buf_frame, r_len, 2*header.NumChannels, fp);
 8000ed4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	461a      	mov	r2, r3
 8000edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ee0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000ee4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000ee6:	f001 f934 	bl	8002152 <ob_fread>
 8000eea:	4603      	mov	r3, r0
 8000eec:	677b      	str	r3, [r7, #116]	; 0x74

				if (len != r_len*2*header.NumChannels)
 8000eee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	005a      	lsls	r2, r3, #1
 8000efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d003      	beq.n	8000f0c <PlayAudioFile+0x1cc>
				{
					SetPlayState(PLAY_NONE);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 f811 	bl	8002f2c <SetPlayState>
					break;
 8000f0a:	e075      	b.n	8000ff8 <PlayAudioFile+0x2b8>
				}

				uint32_t q_offset;

				q_offset = q_in*q_buf_len;
 8000f0c:	4b61      	ldr	r3, [pc, #388]	; (8001094 <PlayAudioFile+0x354>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a5e      	ldr	r2, [pc, #376]	; (800108c <PlayAudioFile+0x34c>)
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	673b      	str	r3, [r7, #112]	; 0x70

				for (int i=0; i<r_len; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f20:	e040      	b.n	8000fa4 <PlayAudioFile+0x264>
				{
					if (header.NumChannels == 2)
 8000f22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d11d      	bne.n	8000f66 <PlayAudioFile+0x226>
					{
						q_buf[q_offset + i].left  = buf_frame[i*2 + 0];
 8000f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f2e:	0059      	lsls	r1, r3, #1
 8000f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f36:	4413      	add	r3, r2
 8000f38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f3a:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f3e:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <PlayAudioFile+0x360>)
 8000f40:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
						q_buf[q_offset + i].right = buf_frame[i*2 + 1];
 8000f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	1c59      	adds	r1, r3, #1
 8000f4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f52:	4413      	add	r3, r2
 8000f54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f56:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <PlayAudioFile+0x360>)
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	460a      	mov	r2, r1
 8000f62:	805a      	strh	r2, [r3, #2]
 8000f64:	e019      	b.n	8000f9a <PlayAudioFile+0x25a>
					}
					else
					{
						q_buf[q_offset + i].left  = buf_frame[i];
 8000f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f70:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000f74:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f78:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <PlayAudioFile+0x360>)
 8000f7a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
						q_buf[q_offset + i].right = buf_frame[i];
 8000f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f84:	4413      	add	r3, r2
 8000f86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f88:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000f8c:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <PlayAudioFile+0x360>)
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	460a      	mov	r2, r1
 8000f98:	805a      	strh	r2, [r3, #2]
				for (int i=0; i<r_len; i++)
 8000f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8b8      	bhi.n	8000f22 <PlayAudioFile+0x1e2>
					}
				}

				if (((q_in + 1) % q_len) != q_out)
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <PlayAudioFile+0x354>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a36      	ldr	r2, [pc, #216]	; (8001090 <PlayAudioFile+0x350>)
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fbe:	fb01 f202 	mul.w	r2, r1, r2
 8000fc2:	1a9a      	subs	r2, r3, r2
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <PlayAudioFile+0x358>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d00b      	beq.n	8000fe4 <PlayAudioFile+0x2a4>
				{
					q_in = (q_in+1) % q_len;
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <PlayAudioFile+0x354>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <PlayAudioFile+0x350>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fda:	fb01 f202 	mul.w	r2, r1, r2
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <PlayAudioFile+0x354>)
 8000fe2:	6013      	str	r3, [r2, #0]
				}
				HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <PlayAudioFile+0x35c>)
 8000fea:	f006 f9c1 	bl	8007370 <HAL_GPIO_WritePin>
		while(playState == PLAY_STARTED)
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <PlayAudioFile+0x364>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	f43f af4f 	beq.w	8000e96 <PlayAudioFile+0x156>
			}
		}

		i2sStop();
 8000ff8:	f7ff fe4a 	bl	8000c90 <i2sStop>

		fclose(fp);
 8000ffc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001000:	f001 f88e 	bl	8002120 <ob_fclose>

		ret = true;
 8001004:	2301      	movs	r3, #1
 8001006:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800100a:	46b5      	mov	sp, r6
	}

	if (strcmp(fileType, "playMP3") == 0)
 800100c:	4926      	ldr	r1, [pc, #152]	; (80010a8 <PlayAudioFile+0x368>)
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f7ff f8ee 	bl	80001f0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 81d2 	bne.w	80013c0 <PlayAudioFile+0x680>
	{
		printf("FileName      : %s\n", fileName);
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <PlayAudioFile+0x318>)
 8001020:	f01d f9c0 	bl	801e3a4 <iprintf>

		HMP3Decoder h_dec;
		h_dec = MP3InitDecoder();
 8001024:	f00e fde4 	bl	800fbf0 <MP3InitDecoder>
 8001028:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (h_dec != 0)
 800102a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 81c7 	beq.w	80013c0 <PlayAudioFile+0x680>
		{
			MP3FrameInfo frameInfo;
			FILE *fp;
			fp = fopen(fileName, "r");
 8001032:	490a      	ldr	r1, [pc, #40]	; (800105c <PlayAudioFile+0x31c>)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 f81f 	bl	8002078 <ob_fopen>
 800103a:	66b8      	str	r0, [r7, #104]	; 0x68
			if (fp == NULL)
 800103c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800103e:	2b00      	cmp	r3, #0
 8001040:	d134      	bne.n	80010ac <PlayAudioFile+0x36c>
			{
				printf("fopen fail : %s\n", fileName);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <PlayAudioFile+0x320>)
 8001046:	f01d f9ad 	bl	801e3a4 <iprintf>
				SetPlayState(PLAY_NONE);
 800104a:	2000      	movs	r0, #0
 800104c:	f001 ff6e 	bl	8002f2c <SetPlayState>
 8001050:	e1b6      	b.n	80013c0 <PlayAudioFile+0x680>
 8001052:	bf00      	nop
 8001054:	0801f4e4 	.word	0x0801f4e4
 8001058:	0801f4ec 	.word	0x0801f4ec
 800105c:	0801f500 	.word	0x0801f500
 8001060:	0801f504 	.word	0x0801f504
 8001064:	0801f518 	.word	0x0801f518
 8001068:	0801f52c 	.word	0x0801f52c
 800106c:	0801f548 	.word	0x0801f548
 8001070:	0801f55c 	.word	0x0801f55c
 8001074:	0801f570 	.word	0x0801f570
 8001078:	0801f584 	.word	0x0801f584
 800107c:	0801f598 	.word	0x0801f598
 8001080:	0801f5ac 	.word	0x0801f5ac
 8001084:	0801f5c0 	.word	0x0801f5c0
 8001088:	0801f5d4 	.word	0x0801f5d4
 800108c:	20002200 	.word	0x20002200
 8001090:	200021fc 	.word	0x200021fc
 8001094:	200021f4 	.word	0x200021f4
 8001098:	200021f8 	.word	0x200021f8
 800109c:	40021000 	.word	0x40021000
 80010a0:	20002204 	.word	0x20002204
 80010a4:	2000e9a0 	.word	0x2000e9a0
 80010a8:	0801f5e8 	.word	0x0801f5e8

			//int offset;
			int err;
			int n_read;

			bytes_left = 0;
 80010ac:	4b8f      	ldr	r3, [pc, #572]	; (80012ec <PlayAudioFile+0x5ac>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
			read_ptr = read_buf;
 80010b2:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <PlayAudioFile+0x5b0>)
 80010b4:	4a8f      	ldr	r2, [pc, #572]	; (80012f4 <PlayAudioFile+0x5b4>)
 80010b6:	601a      	str	r2, [r3, #0]

			n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 80010b8:	4b8d      	ldr	r3, [pc, #564]	; (80012f0 <PlayAudioFile+0x5b0>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <PlayAudioFile+0x5ac>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	f240 7294 	movw	r2, #1940	; 0x794
 80010ca:	488a      	ldr	r0, [pc, #552]	; (80012f4 <PlayAudioFile+0x5b4>)
 80010cc:	f7ff fd7c 	bl	8000bc8 <fillReadBuffer>
 80010d0:	6678      	str	r0, [r7, #100]	; 0x64

			bytes_left += n_read;
 80010d2:	4b86      	ldr	r3, [pc, #536]	; (80012ec <PlayAudioFile+0x5ac>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d8:	4413      	add	r3, r2
 80010da:	4a84      	ldr	r2, [pc, #528]	; (80012ec <PlayAudioFile+0x5ac>)
 80010dc:	6013      	str	r3, [r2, #0]
			read_ptr = read_buf;
 80010de:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <PlayAudioFile+0x5b0>)
 80010e0:	4a84      	ldr	r2, [pc, #528]	; (80012f4 <PlayAudioFile+0x5b4>)
 80010e2:	601a      	str	r2, [r3, #0]

			n_read = MP3FindSyncWord(read_ptr, READBUF_SIZE);
 80010e4:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <PlayAudioFile+0x5b0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f240 7194 	movw	r1, #1940	; 0x794
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00e fd81 	bl	800fbf4 <MP3FindSyncWord>
 80010f2:	6678      	str	r0, [r7, #100]	; 0x64
			printf("Offset: %d\n", n_read);
 80010f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80010f6:	4880      	ldr	r0, [pc, #512]	; (80012f8 <PlayAudioFile+0x5b8>)
 80010f8:	f01d f954 	bl	801e3a4 <iprintf>

			bytes_left -= n_read;
 80010fc:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <PlayAudioFile+0x5ac>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	4a79      	ldr	r2, [pc, #484]	; (80012ec <PlayAudioFile+0x5ac>)
 8001106:	6013      	str	r3, [r2, #0]
			read_ptr += n_read;
 8001108:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <PlayAudioFile+0x5b0>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110e:	4413      	add	r3, r2
 8001110:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001112:	6013      	str	r3, [r2, #0]

			n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 8001114:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	4b74      	ldr	r3, [pc, #464]	; (80012ec <PlayAudioFile+0x5ac>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	f240 7294 	movw	r2, #1940	; 0x794
 8001126:	4873      	ldr	r0, [pc, #460]	; (80012f4 <PlayAudioFile+0x5b4>)
 8001128:	f7ff fd4e 	bl	8000bc8 <fillReadBuffer>
 800112c:	6678      	str	r0, [r7, #100]	; 0x64
			bytes_left += n_read;
 800112e:	4b6f      	ldr	r3, [pc, #444]	; (80012ec <PlayAudioFile+0x5ac>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001134:	4413      	add	r3, r2
 8001136:	4a6d      	ldr	r2, [pc, #436]	; (80012ec <PlayAudioFile+0x5ac>)
 8001138:	6013      	str	r3, [r2, #0]
			read_ptr = read_buf;
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <PlayAudioFile+0x5b0>)
 800113c:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <PlayAudioFile+0x5b4>)
 800113e:	601a      	str	r2, [r3, #0]

			err = MP3GetNextFrameInfo(h_dec, &frameInfo, read_ptr);
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001148:	4619      	mov	r1, r3
 800114a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800114c:	f00e fd6c 	bl	800fc28 <MP3GetNextFrameInfo>
 8001150:	6638      	str	r0, [r7, #96]	; 0x60
			if (err != ERR_MP3_INVALID_FRAMEHEADER)
 8001152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001154:	f113 0f06 	cmn.w	r3, #6
 8001158:	f000 8128 	beq.w	80013ac <PlayAudioFile+0x66c>
			{
				printf("samplerate     %d\n", frameInfo.samprate);
 800115c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115e:	4619      	mov	r1, r3
 8001160:	4866      	ldr	r0, [pc, #408]	; (80012fc <PlayAudioFile+0x5bc>)
 8001162:	f01d f91f 	bl	801e3a4 <iprintf>
				printf("bitrate        %d\n", frameInfo.bitrate);
 8001166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001168:	4619      	mov	r1, r3
 800116a:	4865      	ldr	r0, [pc, #404]	; (8001300 <PlayAudioFile+0x5c0>)
 800116c:	f01d f91a 	bl	801e3a4 <iprintf>
				printf("nChans         %d\n", frameInfo.nChans);
 8001170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001172:	4619      	mov	r1, r3
 8001174:	4863      	ldr	r0, [pc, #396]	; (8001304 <PlayAudioFile+0x5c4>)
 8001176:	f01d f915 	bl	801e3a4 <iprintf>
				printf("outputSamps    %d\n", frameInfo.outputSamps);
 800117a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800117c:	4619      	mov	r1, r3
 800117e:	4862      	ldr	r0, [pc, #392]	; (8001308 <PlayAudioFile+0x5c8>)
 8001180:	f01d f910 	bl	801e3a4 <iprintf>
				printf("bitsPerSample  %d\n", frameInfo.bitsPerSample);
 8001184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001186:	4619      	mov	r1, r3
 8001188:	4860      	ldr	r0, [pc, #384]	; (800130c <PlayAudioFile+0x5cc>)
 800118a:	f01d f90b 	bl	801e3a4 <iprintf>

				i2sSetSampleRate(DEF_I2S2, frameInfo.samprate);
 800118e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001190:	4619      	mov	r1, r3
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff fd8a 	bl	8000cac <i2sSetSampleRate>

				q_buf_len = frameInfo.outputSamps / frameInfo.nChans;
 8001198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800119a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800119c:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <PlayAudioFile+0x5d0>)
 80011a4:	601a      	str	r2, [r3, #0]
				q_in  = 0;
 80011a6:	4b5b      	ldr	r3, [pc, #364]	; (8001314 <PlayAudioFile+0x5d4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
				q_out = 0;
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <PlayAudioFile+0x5d8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
				q_len = I2S_BUF_LEN / q_buf_len;
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <PlayAudioFile+0x5d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4a57      	ldr	r2, [pc, #348]	; (800131c <PlayAudioFile+0x5dc>)
 80011c0:	6013      	str	r3, [r2, #0]

				i2sStart();
 80011c2:	f7ff fd35 	bl	8000c30 <i2sStart>
			}

			while(playState == PLAY_STARTED)
 80011c6:	e0f1      	b.n	80013ac <PlayAudioFile+0x66c>
			{
				if (bytes_left < READBUF_SIZE)
 80011c8:	4b48      	ldr	r3, [pc, #288]	; (80012ec <PlayAudioFile+0x5ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f240 7293 	movw	r2, #1939	; 0x793
 80011d0:	4293      	cmp	r3, r2
 80011d2:	dc21      	bgt.n	8001218 <PlayAudioFile+0x4d8>
				{
					HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	4851      	ldr	r0, [pc, #324]	; (8001320 <PlayAudioFile+0x5e0>)
 80011da:	f006 f8c9 	bl	8007370 <HAL_GPIO_WritePin>
					n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <PlayAudioFile+0x5b0>)
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <PlayAudioFile+0x5ac>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	f240 7294 	movw	r2, #1940	; 0x794
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <PlayAudioFile+0x5b4>)
 80011f2:	f7ff fce9 	bl	8000bc8 <fillReadBuffer>
 80011f6:	6678      	str	r0, [r7, #100]	; 0x64

					if (n_read == 0 )
 80011f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <PlayAudioFile+0x4c6>
					{
						SetPlayState(PLAY_NONE);
 80011fe:	2000      	movs	r0, #0
 8001200:	f001 fe94 	bl	8002f2c <SetPlayState>
						break;
 8001204:	e0d7      	b.n	80013b6 <PlayAudioFile+0x676>
					}
					bytes_left += n_read;
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <PlayAudioFile+0x5ac>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800120c:	4413      	add	r3, r2
 800120e:	4a37      	ldr	r2, [pc, #220]	; (80012ec <PlayAudioFile+0x5ac>)
 8001210:	6013      	str	r3, [r2, #0]
					read_ptr = read_buf;
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001214:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <PlayAudioFile+0x5b4>)
 8001216:	601a      	str	r2, [r3, #0]
				}


				n_read = MP3FindSyncWord(read_ptr, bytes_left);
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <PlayAudioFile+0x5b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <PlayAudioFile+0x5ac>)
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f00e fce6 	bl	800fbf4 <MP3FindSyncWord>
 8001228:	6678      	str	r0, [r7, #100]	; 0x64
				if (n_read >= 0)
 800122a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122c:	2b00      	cmp	r3, #0
 800122e:	f2c0 80bd 	blt.w	80013ac <PlayAudioFile+0x66c>
				{
					read_ptr += n_read;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001238:	4413      	add	r3, r2
 800123a:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <PlayAudioFile+0x5b0>)
 800123c:	6013      	str	r3, [r2, #0]
					bytes_left -= n_read;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <PlayAudioFile+0x5ac>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <PlayAudioFile+0x5ac>)
 8001248:	6013      	str	r3, [r2, #0]


					//fill the inactive outbuffer
					err = MP3Decode(h_dec, &read_ptr, (int*) &bytes_left, out_buf, 0);
 800124a:	2300      	movs	r3, #0
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <PlayAudioFile+0x5e4>)
 8001250:	4a26      	ldr	r2, [pc, #152]	; (80012ec <PlayAudioFile+0x5ac>)
 8001252:	4927      	ldr	r1, [pc, #156]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001254:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001256:	f00e fd17 	bl	800fc88 <MP3Decode>
 800125a:	6638      	str	r0, [r7, #96]	; 0x60
					HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	482f      	ldr	r0, [pc, #188]	; (8001320 <PlayAudioFile+0x5e0>)
 8001262:	f006 f885 	bl	8007370 <HAL_GPIO_WritePin>
					if (err)
 8001266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00f      	beq.n	800128c <PlayAudioFile+0x54c>
					{
						// sometimes we have a bad frame, lets just nudge forward one byte
						if (err == ERR_MP3_INVALID_FRAMEHEADER)
 800126c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800126e:	f113 0f06 	cmn.w	r3, #6
 8001272:	f040 809b 	bne.w	80013ac <PlayAudioFile+0x66c>
						{
							read_ptr   += 1;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <PlayAudioFile+0x5b0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <PlayAudioFile+0x5b0>)
 800127e:	6013      	str	r3, [r2, #0]
							bytes_left -= 1;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <PlayAudioFile+0x5ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <PlayAudioFile+0x5ac>)
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e08f      	b.n	80013ac <PlayAudioFile+0x66c>
					{

						uint32_t pre_time;
						uint32_t valid_len;

						pre_time = HAL_GetTick();
 800128c:	f005 f97e 	bl	800658c <HAL_GetTick>
 8001290:	65f8      	str	r0, [r7, #92]	; 0x5c
						while(1)
						{
							valid_len = (q_len - 1) - ((q_len + q_in - q_out) % q_len);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <PlayAudioFile+0x5dc>)
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <PlayAudioFile+0x5dc>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <PlayAudioFile+0x5d4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	441a      	add	r2, r3
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <PlayAudioFile+0x5d8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <PlayAudioFile+0x5dc>)
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80012ae:	fb00 f202 	mul.w	r2, r0, r2
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	1acb      	subs	r3, r1, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	65bb      	str	r3, [r7, #88]	; 0x58

							if (valid_len > 0)
 80012ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d107      	bne.n	80012d0 <PlayAudioFile+0x590>
							{
								break;
							}
							if (HAL_GetTick()-pre_time >= 100)
 80012c0:	f005 f964 	bl	800658c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b63      	cmp	r3, #99	; 0x63
 80012cc:	d802      	bhi.n	80012d4 <PlayAudioFile+0x594>
							valid_len = (q_len - 1) - ((q_len + q_in - q_out) % q_len);
 80012ce:	e7e0      	b.n	8001292 <PlayAudioFile+0x552>
								break;
 80012d0:	bf00      	nop
 80012d2:	e000      	b.n	80012d6 <PlayAudioFile+0x596>
							{
								break;
 80012d4:	bf00      	nop
						}


						uint32_t q_offset;

						q_offset   = q_in*q_buf_len;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <PlayAudioFile+0x5d4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <PlayAudioFile+0x5d0>)
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	657b      	str	r3, [r7, #84]	; 0x54

						for (int j=0; j<q_buf_len; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012ea:	e03f      	b.n	800136c <PlayAudioFile+0x62c>
 80012ec:	200021ec 	.word	0x200021ec
 80012f0:	20000fe8 	.word	0x20000fe8
 80012f4:	200000c0 	.word	0x200000c0
 80012f8:	0801f5f0 	.word	0x0801f5f0
 80012fc:	0801f5fc 	.word	0x0801f5fc
 8001300:	0801f610 	.word	0x0801f610
 8001304:	0801f624 	.word	0x0801f624
 8001308:	0801f638 	.word	0x0801f638
 800130c:	0801f64c 	.word	0x0801f64c
 8001310:	20002200 	.word	0x20002200
 8001314:	200021f4 	.word	0x200021f4
 8001318:	200021f8 	.word	0x200021f8
 800131c:	200021fc 	.word	0x200021fc
 8001320:	40021000 	.word	0x40021000
 8001324:	20000fec 	.word	0x20000fec
						{
							q_buf[q_offset + j].left  = out_buf[j*2 + 0];
 8001328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800132c:	005a      	lsls	r2, r3, #1
 800132e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001334:	440b      	add	r3, r1
 8001336:	4924      	ldr	r1, [pc, #144]	; (80013c8 <PlayAudioFile+0x688>)
 8001338:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <PlayAudioFile+0x68c>)
 800133e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
							q_buf[q_offset + j].right = out_buf[j*2 + 1];
 8001342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800134e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001350:	440b      	add	r3, r1
 8001352:	491d      	ldr	r1, [pc, #116]	; (80013c8 <PlayAudioFile+0x688>)
 8001354:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <PlayAudioFile+0x68c>)
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	460a      	mov	r2, r1
 8001360:	805a      	strh	r2, [r3, #2]
						for (int j=0; j<q_buf_len; j++)
 8001362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001366:	3301      	adds	r3, #1
 8001368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800136c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <PlayAudioFile+0x690>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3d7      	bcc.n	8001328 <PlayAudioFile+0x5e8>
						}
						if (((q_in + 1) % q_len) != q_out)
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <PlayAudioFile+0x694>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <PlayAudioFile+0x698>)
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	fbb3 f1f2 	udiv	r1, r3, r2
 8001386:	fb01 f202 	mul.w	r2, r1, r2
 800138a:	1a9a      	subs	r2, r3, r2
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <PlayAudioFile+0x69c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d00b      	beq.n	80013ac <PlayAudioFile+0x66c>
						{
							q_in = (q_in+1) % q_len;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <PlayAudioFile+0x694>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <PlayAudioFile+0x698>)
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	fbb3 f1f2 	udiv	r1, r3, r2
 80013a2:	fb01 f202 	mul.w	r2, r1, r2
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <PlayAudioFile+0x694>)
 80013aa:	6013      	str	r3, [r2, #0]
			while(playState == PLAY_STARTED)
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <PlayAudioFile+0x6a0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	f43f af09 	beq.w	80011c8 <PlayAudioFile+0x488>
						}
					}
				}
			}
			i2sStop();
 80013b6:	f7ff fc6b 	bl	8000c90 <i2sStop>
			fclose(fp);
 80013ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80013bc:	f000 feb0 	bl	8002120 <ob_fclose>
		}
	}

}
 80013c0:	379c      	adds	r7, #156	; 0x9c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c8:	20000fec 	.word	0x20000fec
 80013cc:	20002204 	.word	0x20002204
 80013d0:	20002200 	.word	0x20002200
 80013d4:	200021f4 	.word	0x200021f4
 80013d8:	200021fc 	.word	0x200021fc
 80013dc:	200021f8 	.word	0x200021f8
 80013e0:	2000e9a0 	.word	0x2000e9a0

080013e4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, LID_UPDN_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2140      	movs	r1, #64	; 0x40
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80013f2:	f005 ffbd 	bl	8007370 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, LID_UPDN_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	4828      	ldr	r0, [pc, #160]	; (80014b4 <HAL_I2S_TxCpltCallback+0xb0>)
 8001412:	f005 ffad 	bl	8007370 <HAL_GPIO_WritePin>

	uint32_t len;

	if (is_started != true)
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_I2S_TxCpltCallback+0xb4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d142      	bne.n	80014aa <HAL_I2S_TxCpltCallback+0xa6>
	{
		return;
	}

	len = (q_len + q_in - q_out) % q_len;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_I2S_TxCpltCallback+0xb8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_I2S_TxCpltCallback+0xbc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	441a      	add	r2, r3
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_I2S_TxCpltCallback+0xc0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_I2S_TxCpltCallback+0xb8>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	fbb3 f1f2 	udiv	r1, r3, r2
 800143c:	fb01 f202 	mul.w	r2, r1, r2
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

	if (len > 0)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d024      	beq.n	8001494 <HAL_I2S_TxCpltCallback+0x90>
	{
		HAL_I2S_Transmit_DMA(hi2s, (uint16_t *)&q_buf[q_out*q_buf_len], q_buf_len * 2);
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_I2S_TxCpltCallback+0xc0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_I2S_TxCpltCallback+0xc4>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_I2S_TxCpltCallback+0xc8>)
 800145a:	1899      	adds	r1, r3, r2
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_I2S_TxCpltCallback+0xc4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f007 f903 	bl	8008674 <HAL_I2S_Transmit_DMA>

		if (q_out != q_in)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_I2S_TxCpltCallback+0xc0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_I2S_TxCpltCallback+0xbc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d018      	beq.n	80014ac <HAL_I2S_TxCpltCallback+0xa8>
		{
			q_out = (q_out + 1) % q_len;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_I2S_TxCpltCallback+0xc0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_I2S_TxCpltCallback+0xb8>)
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	fbb3 f1f2 	udiv	r1, r3, r2
 8001488:	fb01 f202 	mul.w	r2, r1, r2
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_I2S_TxCpltCallback+0xc0>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_I2S_TxCpltCallback+0xa8>
		}
	}
	else
	{
		HAL_I2S_Transmit_DMA(hi2s, (uint16_t *)q_buf_zero, q_buf_len*2);
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_I2S_TxCpltCallback+0xc4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	490b      	ldr	r1, [pc, #44]	; (80014d0 <HAL_I2S_TxCpltCallback+0xcc>)
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f007 f8e6 	bl	8008674 <HAL_I2S_Transmit_DMA>
 80014a8:	e000      	b.n	80014ac <HAL_I2S_TxCpltCallback+0xa8>
		return;
 80014aa:	bf00      	nop
	}
}
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	200021f0 	.word	0x200021f0
 80014bc:	200021fc 	.word	0x200021fc
 80014c0:	200021f4 	.word	0x200021f4
 80014c4:	200021f8 	.word	0x200021f8
 80014c8:	20002200 	.word	0x20002200
 80014cc:	20002204 	.word	0x20002204
 80014d0:	08021590 	.word	0x08021590

080014d4 <ConvertToBase64>:
	= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

void ConvertToBase64(char *pcOutStr, const char *pccInStr, int iLen);

void ConvertToBase64(char *pcOutStr, const char *pccInStr, int iLen)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	const char *pccIn = (const char *)pccInStr;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	61fb      	str	r3, [r7, #28]
	char *pcOut;
	int iCount;
	pcOut = pcOutStr;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	61bb      	str	r3, [r7, #24]

	/* Loop in for Multiple of 24Bits and Convert to Base 64 */
	for (iCount = 0; iLen - iCount >= 3; iCount += 3, pccIn += 3) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e03e      	b.n	800156c <ConvertToBase64+0x98>
		*pcOut++ = g_ccB64Tbl[pccIn[0] >> 2];
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	61ba      	str	r2, [r7, #24]
 80014fe:	4a46      	ldr	r2, [pc, #280]	; (8001618 <ConvertToBase64+0x144>)
 8001500:	5c52      	ldrb	r2, [r2, r1]
 8001502:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[((pccIn[0] & 0x03) << 4) | (pccIn[1] >> 4)];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	3201      	adds	r2, #1
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	0912      	lsrs	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	431a      	orrs	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	61b9      	str	r1, [r7, #24]
 8001520:	493d      	ldr	r1, [pc, #244]	; (8001618 <ConvertToBase64+0x144>)
 8001522:	5c8a      	ldrb	r2, [r1, r2]
 8001524:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[((pccIn[1] & 0x0F) << 2) | (pccIn[2] >> 6)];
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	3202      	adds	r2, #2
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	0992      	lsrs	r2, r2, #6
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	431a      	orrs	r2, r3
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	61b9      	str	r1, [r7, #24]
 8001544:	4934      	ldr	r1, [pc, #208]	; (8001618 <ConvertToBase64+0x144>)
 8001546:	5c8a      	ldrb	r2, [r1, r2]
 8001548:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[pccIn[2] & 0x3f];
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3302      	adds	r3, #2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	61b9      	str	r1, [r7, #24]
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <ConvertToBase64+0x144>)
 800155c:	5c8a      	ldrb	r2, [r1, r2]
 800155e:	701a      	strb	r2, [r3, #0]
	for (iCount = 0; iLen - iCount >= 3; iCount += 3, pccIn += 3) {
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3303      	adds	r3, #3
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3303      	adds	r3, #3
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	dcbb      	bgt.n	80014ee <ConvertToBase64+0x1a>
	}

	/* Check if String is not multiple of 3 Bytes */
	if (iCount != iLen) {
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d043      	beq.n	8001606 <ConvertToBase64+0x132>
		unsigned char ucLastByte;

		*pcOut++ = g_ccB64Tbl[pccIn[0] >> 2];
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	61ba      	str	r2, [r7, #24]
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <ConvertToBase64+0x144>)
 8001590:	5c52      	ldrb	r2, [r2, r1]
 8001592:	701a      	strb	r2, [r3, #0]
		ucLastByte = ((pccIn[0] & 0x03) << 4);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015a0:	74fb      	strb	r3, [r7, #19]

		if (iLen - iCount > 1) {
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	dd1b      	ble.n	80015e4 <ConvertToBase64+0x110>
			/* If there are 2 Extra Bytes */
			ucLastByte |= (pccIn[1] >> 4);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	74fb      	strb	r3, [r7, #19]
			*pcOut++ = g_ccB64Tbl[ucLastByte];
 80015bc:	7cfa      	ldrb	r2, [r7, #19]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	61b9      	str	r1, [r7, #24]
 80015c4:	4914      	ldr	r1, [pc, #80]	; (8001618 <ConvertToBase64+0x144>)
 80015c6:	5c8a      	ldrb	r2, [r1, r2]
 80015c8:	701a      	strb	r2, [r3, #0]
			*pcOut++ = g_ccB64Tbl[((pccIn[1] & 0x0F) << 2)];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	61b9      	str	r1, [r7, #24]
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <ConvertToBase64+0x144>)
 80015de:	5c8a      	ldrb	r2, [r1, r2]
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e00b      	b.n	80015fc <ConvertToBase64+0x128>
		} else {
			/* If there is only 1 Extra Byte */
			*pcOut++ = g_ccB64Tbl[ucLastByte];
 80015e4:	7cfa      	ldrb	r2, [r7, #19]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1c59      	adds	r1, r3, #1
 80015ea:	61b9      	str	r1, [r7, #24]
 80015ec:	490a      	ldr	r1, [pc, #40]	; (8001618 <ConvertToBase64+0x144>)
 80015ee:	5c8a      	ldrb	r2, [r1, r2]
 80015f0:	701a      	strb	r2, [r3, #0]
			*pcOut++ = '=';
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	61ba      	str	r2, [r7, #24]
 80015f8:	223d      	movs	r2, #61	; 0x3d
 80015fa:	701a      	strb	r2, [r3, #0]
		}

		*pcOut++ = '=';
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	61ba      	str	r2, [r7, #24]
 8001602:	223d      	movs	r2, #61	; 0x3d
 8001604:	701a      	strb	r2, [r3, #0]
	}

	*pcOut  = '\0';
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	3724      	adds	r7, #36	; 0x24
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	08025590 	.word	0x08025590

0800161c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <SELECT+0x14>)
 8001626:	f005 fea3 	bl	8007370 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020000 	.word	0x40020000

08001634 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DESELECT+0x14>)
 800163e:	f005 fe97 	bl	8007370 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020000 	.word	0x40020000

0800164c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001656:	bf00      	nop
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <SPI_TxByte+0x30>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b02      	cmp	r3, #2
 8001664:	d1f8      	bne.n	8001658 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001666:	1df9      	adds	r1, r7, #7
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <SPI_TxByte+0x30>)
 800166e:	f009 f8a5 	bl	800a7bc <HAL_SPI_Transmit>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000e654 	.word	0x2000e654

08001680 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800168c:	bf00      	nop
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <SPI_TxBuffer+0x30>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d1f8      	bne.n	800168e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <SPI_TxBuffer+0x30>)
 80016a4:	f009 f88a 	bl	800a7bc <HAL_SPI_Transmit>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000e654 	.word	0x2000e654

080016b4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80016ba:	23ff      	movs	r3, #255	; 0xff
 80016bc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016be:	bf00      	nop
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <SPI_RxByte+0x34>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d1f8      	bne.n	80016c0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016ce:	1dba      	adds	r2, r7, #6
 80016d0:	1df9      	adds	r1, r7, #7
 80016d2:	2364      	movs	r3, #100	; 0x64
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <SPI_RxByte+0x34>)
 80016da:	f009 f9ab 	bl	800aa34 <HAL_SPI_TransmitReceive>

	return data;
 80016de:	79bb      	ldrb	r3, [r7, #6]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000e654 	.word	0x2000e654

080016ec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016f4:	f7ff ffde 	bl	80016b4 <SPI_RxByte>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	701a      	strb	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 50;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <SD_ReadyWait+0x2c>)
 8001710:	2232      	movs	r2, #50	; 0x32
 8001712:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001714:	f7ff ffce 	bl	80016b4 <SPI_RxByte>
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d003      	beq.n	800172a <SD_ReadyWait+0x22>
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SD_ReadyWait+0x2c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f4      	bne.n	8001714 <SD_ReadyWait+0xc>

	return res;
 800172a:	79fb      	ldrb	r3, [r7, #7]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20006206 	.word	0x20006206

08001738 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800173e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001742:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001744:	f7ff ff76 	bl	8001634 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	e005      	b.n	800175a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800174e:	20ff      	movs	r0, #255	; 0xff
 8001750:	f7ff ff7c 	bl	800164c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	3301      	adds	r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b09      	cmp	r3, #9
 800175e:	ddf6      	ble.n	800174e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001760:	f7ff ff5c 	bl	800161c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001778:	2395      	movs	r3, #149	; 0x95
 800177a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800177c:	463b      	mov	r3, r7
 800177e:	2106      	movs	r1, #6
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff7d 	bl	8001680 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001786:	e002      	b.n	800178e <SD_PowerOn+0x56>
	{
		cnt--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800178e:	f7ff ff91 	bl	80016b4 <SPI_RxByte>
 8001792:	4603      	mov	r3, r0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d002      	beq.n	800179e <SD_PowerOn+0x66>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f4      	bne.n	8001788 <SD_PowerOn+0x50>
	}

	DESELECT();
 800179e:	f7ff ff49 	bl	8001634 <DESELECT>
	SPI_TxByte(0XFF);
 80017a2:	20ff      	movs	r0, #255	; 0xff
 80017a4:	f7ff ff52 	bl	800164c <SPI_TxByte>

	PowerFlag = 1;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SD_PowerOn+0x80>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20006209 	.word	0x20006209

080017bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <SD_PowerOff+0x14>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20006209 	.word	0x20006209

080017d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <SD_CheckPower+0x14>)
 80017da:	781b      	ldrb	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20006209 	.word	0x20006209

080017ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 20;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <SD_RxDataBlock+0x58>)
 80017f8:	2214      	movs	r2, #20
 80017fa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80017fc:	f7ff ff5a 	bl	80016b4 <SPI_RxByte>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d103      	bne.n	8001812 <SD_RxDataBlock+0x26>
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <SD_RxDataBlock+0x58>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f4      	bne.n	80017fc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2bfe      	cmp	r3, #254	; 0xfe
 8001816:	d001      	beq.n	800181c <SD_RxDataBlock+0x30>
 8001818:	2300      	movs	r3, #0
 800181a:	e00f      	b.n	800183c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff62 	bl	80016ec <SPI_RxBytePtr>
	} while(len--);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	603a      	str	r2, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f4      	bne.n	800181c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001832:	f7ff ff3f 	bl	80016b4 <SPI_RxByte>
	SPI_RxByte();
 8001836:	f7ff ff3d 	bl	80016b4 <SPI_RxByte>

	return TRUE;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20006204 	.word	0x20006204

08001848 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001858:	f7ff ff56 	bl	8001708 <SD_ReadyWait>
 800185c:	4603      	mov	r3, r0
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d001      	beq.n	8001866 <SD_TxDataBlock+0x1e>
 8001862:	2300      	movs	r3, #0
 8001864:	e02f      	b.n	80018c6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff feef 	bl	800164c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	2bfd      	cmp	r3, #253	; 0xfd
 8001872:	d020      	beq.n	80018b6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff01 	bl	8001680 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800187e:	f7ff ff19 	bl	80016b4 <SPI_RxByte>
		SPI_RxByte();
 8001882:	f7ff ff17 	bl	80016b4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001886:	e00b      	b.n	80018a0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001888:	f7ff ff14 	bl	80016b4 <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2b05      	cmp	r3, #5
 8001898:	d006      	beq.n	80018a8 <SD_TxDataBlock+0x60>
			i++;
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	3301      	adds	r3, #1
 800189e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d9f0      	bls.n	8001888 <SD_TxDataBlock+0x40>
 80018a6:	e000      	b.n	80018aa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80018a8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80018aa:	bf00      	nop
 80018ac:	f7ff ff02 	bl	80016b4 <SPI_RxByte>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0fa      	beq.n	80018ac <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d101      	bne.n	80018c4 <SD_TxDataBlock+0x7c>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	6039      	str	r1, [r7, #0]
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80018da:	f7ff ff15 	bl	8001708 <SD_ReadyWait>
 80018de:	4603      	mov	r3, r0
 80018e0:	2bff      	cmp	r3, #255	; 0xff
 80018e2:	d001      	beq.n	80018e8 <SD_SendCmd+0x1a>
 80018e4:	23ff      	movs	r3, #255	; 0xff
 80018e6:	e042      	b.n	800196e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff feae 	bl	800164c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	0e1b      	lsrs	r3, r3, #24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fea8 	bl	800164c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	0c1b      	lsrs	r3, r3, #16
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fea2 	bl	800164c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fe9c 	bl	800164c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe97 	bl	800164c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	d102      	bne.n	800192a <SD_SendCmd+0x5c>
 8001924:	2395      	movs	r3, #149	; 0x95
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e007      	b.n	800193a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b48      	cmp	r3, #72	; 0x48
 800192e:	d102      	bne.n	8001936 <SD_SendCmd+0x68>
 8001930:	2387      	movs	r3, #135	; 0x87
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <SD_SendCmd+0x6c>
	else crc = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe85 	bl	800164c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b4c      	cmp	r3, #76	; 0x4c
 8001946:	d101      	bne.n	800194c <SD_SendCmd+0x7e>
 8001948:	f7ff feb4 	bl	80016b4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800194c:	230a      	movs	r3, #10
 800194e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001950:	f7ff feb0 	bl	80016b4 <SPI_RxByte>
 8001954:	4603      	mov	r3, r0
 8001956:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001958:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da05      	bge.n	800196c <SD_SendCmd+0x9e>
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	3b01      	subs	r3, #1
 8001964:	73bb      	strb	r3, [r7, #14]
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f1      	bne.n	8001950 <SD_SendCmd+0x82>

	return res;
 800196c:	7b7b      	ldrb	r3, [r7, #13]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SD_disk_initialize+0x14>
 8001988:	2301      	movs	r3, #1
 800198a:	e0d0      	b.n	8001b2e <SD_disk_initialize+0x1b6>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <SD_disk_initialize+0x1c0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <SD_disk_initialize+0x2a>
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <SD_disk_initialize+0x1c0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	e0c5      	b.n	8001b2e <SD_disk_initialize+0x1b6>

	/* power on */
	SD_PowerOn();
 80019a2:	f7ff fec9 	bl	8001738 <SD_PowerOn>

	/* slave select */
	SELECT();
 80019a6:	f7ff fe39 	bl	800161c <SELECT>

	/* check disk type */
	type = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80019ae:	2100      	movs	r1, #0
 80019b0:	2040      	movs	r0, #64	; 0x40
 80019b2:	f7ff ff8c 	bl	80018ce <SD_SendCmd>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	f040 80a0 	bne.w	8001afe <SD_disk_initialize+0x186>
	{
		/* timeout 1 sec */
		Timer1 = 100;
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <SD_disk_initialize+0x1c4>)
 80019c0:	2264      	movs	r2, #100	; 0x64
 80019c2:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80019c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80019c8:	2048      	movs	r0, #72	; 0x48
 80019ca:	f7ff ff80 	bl	80018ce <SD_SendCmd>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d155      	bne.n	8001a80 <SD_disk_initialize+0x108>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e00c      	b.n	80019f4 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80019da:	7bfc      	ldrb	r4, [r7, #15]
 80019dc:	f7ff fe6a 	bl	80016b4 <SPI_RxByte>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	f104 0310 	add.w	r3, r4, #16
 80019e8:	443b      	add	r3, r7
 80019ea:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	3301      	adds	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d9ef      	bls.n	80019da <SD_disk_initialize+0x62>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80019fa:	7abb      	ldrb	r3, [r7, #10]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d17e      	bne.n	8001afe <SD_disk_initialize+0x186>
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	2baa      	cmp	r3, #170	; 0xaa
 8001a04:	d17b      	bne.n	8001afe <SD_disk_initialize+0x186>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001a06:	2100      	movs	r1, #0
 8001a08:	2077      	movs	r0, #119	; 0x77
 8001a0a:	f7ff ff60 	bl	80018ce <SD_SendCmd>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d807      	bhi.n	8001a24 <SD_disk_initialize+0xac>
 8001a14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a18:	2069      	movs	r0, #105	; 0x69
 8001a1a:	f7ff ff58 	bl	80018ce <SD_SendCmd>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <SD_disk_initialize+0xb6>
				} while (Timer1);
 8001a24:	4b45      	ldr	r3, [pc, #276]	; (8001b3c <SD_disk_initialize+0x1c4>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ec      	bne.n	8001a06 <SD_disk_initialize+0x8e>
 8001a2c:	e000      	b.n	8001a30 <SD_disk_initialize+0xb8>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001a2e:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <SD_disk_initialize+0x1c4>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d062      	beq.n	8001afe <SD_disk_initialize+0x186>
 8001a38:	2100      	movs	r1, #0
 8001a3a:	207a      	movs	r0, #122	; 0x7a
 8001a3c:	f7ff ff47 	bl	80018ce <SD_SendCmd>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d15b      	bne.n	8001afe <SD_disk_initialize+0x186>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e00c      	b.n	8001a66 <SD_disk_initialize+0xee>
					{
						ocr[n] = SPI_RxByte();
 8001a4c:	7bfc      	ldrb	r4, [r7, #15]
 8001a4e:	f7ff fe31 	bl	80016b4 <SPI_RxByte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	f104 0310 	add.w	r3, r4, #16
 8001a5a:	443b      	add	r3, r7
 8001a5c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	3301      	adds	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d9ef      	bls.n	8001a4c <SD_disk_initialize+0xd4>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a6c:	7a3b      	ldrb	r3, [r7, #8]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SD_disk_initialize+0x102>
 8001a76:	230c      	movs	r3, #12
 8001a78:	e000      	b.n	8001a7c <SD_disk_initialize+0x104>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	73bb      	strb	r3, [r7, #14]
 8001a7e:	e03e      	b.n	8001afe <SD_disk_initialize+0x186>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a80:	2100      	movs	r1, #0
 8001a82:	2077      	movs	r0, #119	; 0x77
 8001a84:	f7ff ff23 	bl	80018ce <SD_SendCmd>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d808      	bhi.n	8001aa0 <SD_disk_initialize+0x128>
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2069      	movs	r0, #105	; 0x69
 8001a92:	f7ff ff1c 	bl	80018ce <SD_SendCmd>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d801      	bhi.n	8001aa0 <SD_disk_initialize+0x128>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e000      	b.n	8001aa2 <SD_disk_initialize+0x12a>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d10e      	bne.n	8001ac8 <SD_disk_initialize+0x150>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2077      	movs	r0, #119	; 0x77
 8001aae:	f7ff ff0e 	bl	80018ce <SD_SendCmd>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d80e      	bhi.n	8001ad6 <SD_disk_initialize+0x15e>
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2069      	movs	r0, #105	; 0x69
 8001abc:	f7ff ff07 	bl	80018ce <SD_SendCmd>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <SD_disk_initialize+0x15e>
 8001ac6:	e00c      	b.n	8001ae2 <SD_disk_initialize+0x16a>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2041      	movs	r0, #65	; 0x41
 8001acc:	f7ff feff 	bl	80018ce <SD_SendCmd>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <SD_disk_initialize+0x168>
				}

			} while (Timer1);
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <SD_disk_initialize+0x1c4>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e2      	bne.n	8001aa4 <SD_disk_initialize+0x12c>
 8001ade:	e000      	b.n	8001ae2 <SD_disk_initialize+0x16a>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ae0:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <SD_disk_initialize+0x1c4>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <SD_disk_initialize+0x182>
 8001aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aee:	2050      	movs	r0, #80	; 0x50
 8001af0:	f7ff feed 	bl	80018ce <SD_SendCmd>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SD_disk_initialize+0x186>
 8001afa:	2300      	movs	r3, #0
 8001afc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <SD_disk_initialize+0x1c8>)
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001b04:	f7ff fd96 	bl	8001634 <DESELECT>
	SPI_RxByte();
 8001b08:	f7ff fdd4 	bl	80016b4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <SD_disk_initialize+0x1ac>
	{
		Stat &= ~STA_NOINIT;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <SD_disk_initialize+0x1c0>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SD_disk_initialize+0x1c0>)
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e001      	b.n	8001b28 <SD_disk_initialize+0x1b0>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001b24:	f7ff fe4a 	bl	80017bc <SD_PowerOff>
	}

	return Stat;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <SD_disk_initialize+0x1c0>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	20006204 	.word	0x20006204
 8001b40:	20006208 	.word	0x20006208

08001b44 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SD_disk_status+0x14>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e002      	b.n	8001b5e <SD_disk_status+0x1a>
	return Stat;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SD_disk_status+0x28>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000004 	.word	0x20000004

08001b70 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <SD_disk_read+0x1c>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <SD_disk_read+0x20>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e054      	b.n	8001c3a <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <SD_disk_read+0xd4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SD_disk_read+0x32>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04b      	b.n	8001c3a <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <SD_disk_read+0xd8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <SD_disk_read+0x44>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	607b      	str	r3, [r7, #4]

	SELECT();
 8001bb4:	f7ff fd32 	bl	800161c <SELECT>

	if (count == 1)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d111      	bne.n	8001be2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	2051      	movs	r0, #81	; 0x51
 8001bc2:	f7ff fe84 	bl	80018ce <SD_SendCmd>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d12c      	bne.n	8001c26 <SD_disk_read+0xb6>
 8001bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	f7ff fe0b 	bl	80017ec <SD_RxDataBlock>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d024      	beq.n	8001c26 <SD_disk_read+0xb6>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	e021      	b.n	8001c26 <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	2052      	movs	r0, #82	; 0x52
 8001be6:	f7ff fe72 	bl	80018ce <SD_SendCmd>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11a      	bne.n	8001c26 <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	f7ff fdf9 	bl	80017ec <SD_RxDataBlock>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <SD_disk_read+0xac>
				buff += 512;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c0c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ea      	bne.n	8001bf0 <SD_disk_read+0x80>
 8001c1a:	e000      	b.n	8001c1e <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001c1c:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	204c      	movs	r0, #76	; 0x4c
 8001c22:	f7ff fe54 	bl	80018ce <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001c26:	f7ff fd05 	bl	8001634 <DESELECT>
	SPI_RxByte();
 8001c2a:	f7ff fd43 	bl	80016b4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000004 	.word	0x20000004
 8001c48:	20006208 	.word	0x20006208

08001c4c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <SD_disk_write+0x1c>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <SD_disk_write+0x20>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e071      	b.n	8001d50 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <SD_disk_write+0x10c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SD_disk_write+0x32>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e068      	b.n	8001d50 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <SD_disk_write+0x10c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SD_disk_write+0x44>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e05f      	b.n	8001d50 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <SD_disk_write+0x110>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <SD_disk_write+0x56>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	607b      	str	r3, [r7, #4]

	SELECT();
 8001ca2:	f7ff fcbb 	bl	800161c <SELECT>

	if (count == 1)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d110      	bne.n	8001cce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	2058      	movs	r0, #88	; 0x58
 8001cb0:	f7ff fe0d 	bl	80018ce <SD_SendCmd>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d140      	bne.n	8001d3c <SD_disk_write+0xf0>
 8001cba:	21fe      	movs	r1, #254	; 0xfe
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f7ff fdc3 	bl	8001848 <SD_TxDataBlock>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d039      	beq.n	8001d3c <SD_disk_write+0xf0>
			count = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	e036      	b.n	8001d3c <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <SD_disk_write+0x110>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2077      	movs	r0, #119	; 0x77
 8001cde:	f7ff fdf6 	bl	80018ce <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	2057      	movs	r0, #87	; 0x57
 8001ce6:	f7ff fdf2 	bl	80018ce <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	2059      	movs	r0, #89	; 0x59
 8001cee:	f7ff fdee 	bl	80018ce <SD_SendCmd>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d121      	bne.n	8001d3c <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001cf8:	21fc      	movs	r1, #252	; 0xfc
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	f7ff fda4 	bl	8001848 <SD_TxDataBlock>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <SD_disk_write+0xd6>
				buff += 512;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1eb      	bne.n	8001cf8 <SD_disk_write+0xac>
 8001d20:	e000      	b.n	8001d24 <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001d22:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001d24:	21fd      	movs	r1, #253	; 0xfd
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fd8e 	bl	8001848 <SD_TxDataBlock>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SD_disk_write+0xf0>
			{
				count = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001d3c:	f7ff fc7a 	bl	8001634 <DESELECT>
	SPI_RxByte();
 8001d40:	f7ff fcb8 	bl	80016b4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	bf14      	ite	ne
 8001d4a:	2301      	movne	r3, #1
 8001d4c:	2300      	moveq	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	20006208 	.word	0x20006208

08001d60 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	603a      	str	r2, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SD_disk_ioctl+0x1e>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e115      	b.n	8001faa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d124      	bne.n	8001dd4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d012      	beq.n	8001db8 <SD_disk_ioctl+0x58>
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	dc1a      	bgt.n	8001dcc <SD_disk_ioctl+0x6c>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <SD_disk_ioctl+0x40>
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d006      	beq.n	8001dac <SD_disk_ioctl+0x4c>
 8001d9e:	e015      	b.n	8001dcc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001da0:	f7ff fd0c 	bl	80017bc <SD_PowerOff>
			res = RES_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001daa:	e0fc      	b.n	8001fa6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001dac:	f7ff fcc4 	bl	8001738 <SD_PowerOn>
			res = RES_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001db6:	e0f6      	b.n	8001fa6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	1c5c      	adds	r4, r3, #1
 8001dbc:	f7ff fd0a 	bl	80017d4 <SD_CheckPower>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001dca:	e0ec      	b.n	8001fa6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dd2:	e0e8      	b.n	8001fa6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <SD_disk_ioctl+0x254>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SD_disk_ioctl+0x86>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0e1      	b.n	8001faa <SD_disk_ioctl+0x24a>

		SELECT();
 8001de6:	f7ff fc19 	bl	800161c <SELECT>

		switch (ctrl)
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	2b0d      	cmp	r3, #13
 8001dee:	f200 80cb 	bhi.w	8001f88 <SD_disk_ioctl+0x228>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <SD_disk_ioctl+0x98>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001ef3 	.word	0x08001ef3
 8001dfc:	08001e31 	.word	0x08001e31
 8001e00:	08001ee3 	.word	0x08001ee3
 8001e04:	08001f89 	.word	0x08001f89
 8001e08:	08001f89 	.word	0x08001f89
 8001e0c:	08001f89 	.word	0x08001f89
 8001e10:	08001f89 	.word	0x08001f89
 8001e14:	08001f89 	.word	0x08001f89
 8001e18:	08001f89 	.word	0x08001f89
 8001e1c:	08001f89 	.word	0x08001f89
 8001e20:	08001f89 	.word	0x08001f89
 8001e24:	08001f05 	.word	0x08001f05
 8001e28:	08001f29 	.word	0x08001f29
 8001e2c:	08001f4d 	.word	0x08001f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e30:	2100      	movs	r1, #0
 8001e32:	2049      	movs	r0, #73	; 0x49
 8001e34:	f7ff fd4b 	bl	80018ce <SD_SendCmd>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 80a8 	bne.w	8001f90 <SD_disk_ioctl+0x230>
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2110      	movs	r1, #16
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcd0 	bl	80017ec <SD_RxDataBlock>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 809e 	beq.w	8001f90 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001e54:	7b3b      	ldrb	r3, [r7, #12]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10e      	bne.n	8001e7c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001e5e:	7d7b      	ldrb	r3, [r7, #21]
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	7d3b      	ldrb	r3, [r7, #20]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
 8001e74:	029a      	lsls	r2, r3, #10
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e02e      	b.n	8001eda <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e7c:	7c7b      	ldrb	r3, [r7, #17]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	7dbb      	ldrb	r3, [r7, #22]
 8001e86:	09db      	lsrs	r3, r3, #7
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	7d7b      	ldrb	r3, [r7, #21]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 0306 	and.w	r3, r3, #6
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ea4:	7d3b      	ldrb	r3, [r7, #20]
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	7cbb      	ldrb	r3, [r7, #18]
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ecc:	8bfa      	ldrh	r2, [r7, #30]
 8001ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ed2:	3b09      	subs	r3, #9
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001ee0:	e056      	b.n	8001f90 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ef0:	e055      	b.n	8001f9e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ef2:	f7ff fc09 	bl	8001708 <SD_ReadyWait>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2bff      	cmp	r3, #255	; 0xff
 8001efa:	d14b      	bne.n	8001f94 <SD_disk_ioctl+0x234>
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f02:	e047      	b.n	8001f94 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001f04:	2100      	movs	r1, #0
 8001f06:	2049      	movs	r0, #73	; 0x49
 8001f08:	f7ff fce1 	bl	80018ce <SD_SendCmd>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d142      	bne.n	8001f98 <SD_disk_ioctl+0x238>
 8001f12:	2110      	movs	r1, #16
 8001f14:	6a38      	ldr	r0, [r7, #32]
 8001f16:	f7ff fc69 	bl	80017ec <SD_RxDataBlock>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03b      	beq.n	8001f98 <SD_disk_ioctl+0x238>
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f26:	e037      	b.n	8001f98 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001f28:	2100      	movs	r1, #0
 8001f2a:	204a      	movs	r0, #74	; 0x4a
 8001f2c:	f7ff fccf 	bl	80018ce <SD_SendCmd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d132      	bne.n	8001f9c <SD_disk_ioctl+0x23c>
 8001f36:	2110      	movs	r1, #16
 8001f38:	6a38      	ldr	r0, [r7, #32]
 8001f3a:	f7ff fc57 	bl	80017ec <SD_RxDataBlock>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02b      	beq.n	8001f9c <SD_disk_ioctl+0x23c>
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f4a:	e027      	b.n	8001f9c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	207a      	movs	r0, #122	; 0x7a
 8001f50:	f7ff fcbd 	bl	80018ce <SD_SendCmd>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f60:	e00b      	b.n	8001f7a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001f62:	6a3c      	ldr	r4, [r7, #32]
 8001f64:	1c63      	adds	r3, r4, #1
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	f7ff fba4 	bl	80016b4 <SPI_RxByte>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f74:	3301      	adds	r3, #1
 8001f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d9ef      	bls.n	8001f62 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f8e:	e006      	b.n	8001f9e <SD_disk_ioctl+0x23e>
			break;
 8001f90:	bf00      	nop
 8001f92:	e004      	b.n	8001f9e <SD_disk_ioctl+0x23e>
			break;
 8001f94:	bf00      	nop
 8001f96:	e002      	b.n	8001f9e <SD_disk_ioctl+0x23e>
			break;
 8001f98:	bf00      	nop
 8001f9a:	e000      	b.n	8001f9e <SD_disk_ioctl+0x23e>
			break;
 8001f9c:	bf00      	nop
		}

		DESELECT();
 8001f9e:	f7ff fb49 	bl	8001634 <DESELECT>
		SPI_RxByte();
 8001fa2:	f7ff fb87 	bl	80016b4 <SPI_RxByte>
	}

	return res;
 8001fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	372c      	adds	r7, #44	; 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <ob_malloc>:
static bool     is_used[8] = {0, };
static FIL      fil_buf[8];


void *ob_malloc(size_t size)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  void *ret = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<8; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	e019      	b.n	8001ffe <ob_malloc+0x46>
  {
    if (is_used[i] == false)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <ob_malloc+0x5c>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f083 0301 	eor.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <ob_malloc+0x40>
    {
      is_used[i] = true;
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <ob_malloc+0x5c>)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
      ret = (void *)&fil_buf[i];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f241 0230 	movw	r2, #4144	; 0x1030
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a09      	ldr	r2, [pc, #36]	; (8002018 <ob_malloc+0x60>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
      break;
 8001ff6:	e005      	b.n	8002004 <ob_malloc+0x4c>
  for (int i=0; i<8; i++)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b07      	cmp	r3, #7
 8002002:	dde2      	ble.n	8001fca <ob_malloc+0x12>
    }
  }

  return ret;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000620c 	.word	0x2000620c
 8002018:	20006214 	.word	0x20006214

0800201c <ob_free>:

void ob_free(void *addr)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  for (int i=0; i<8; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e018      	b.n	800205c <ob_free+0x40>
  {
    if (is_used[i] == true && addr == (void *)&fil_buf[i])
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <ob_free+0x54>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00f      	beq.n	8002056 <ob_free+0x3a>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f241 0230 	movw	r2, #4144	; 0x1030
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <ob_free+0x58>)
 8002042:	4413      	add	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d105      	bne.n	8002056 <ob_free+0x3a>
    {
      is_used[i] = false;
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <ob_free+0x54>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
      break;
 8002054:	e006      	b.n	8002064 <ob_free+0x48>
  for (int i=0; i<8; i++)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b07      	cmp	r3, #7
 8002060:	dde3      	ble.n	800202a <ob_free+0xe>
    }
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	2000620c 	.word	0x2000620c
 8002074:	20006214 	.word	0x20006214

08002078 <ob_fopen>:

FILE *ob_fopen(const char *filename, const char *mode)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  FRESULT res;
  BYTE flags = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
  FIL *fil;
  int i;

  fil = ob_malloc(sizeof(FIL));
 8002086:	f241 0030 	movw	r0, #4144	; 0x1030
 800208a:	f7ff ff95 	bl	8001fb8 <ob_malloc>
 800208e:	60f8      	str	r0, [r7, #12]
  if (!fil)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <ob_fopen+0x28>
  {
    printf("ob_fopen malloc fail\n");
 8002096:	4821      	ldr	r0, [pc, #132]	; (800211c <ob_fopen+0xa4>)
 8002098:	f01c f9f2 	bl	801e480 <puts>
    return NULL;
 800209c:	2300      	movs	r3, #0
 800209e:	e038      	b.n	8002112 <ob_fopen+0x9a>
  }


  for (i=0; mode[i] != 0; i++) {
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e01e      	b.n	80020e4 <ob_fopen+0x6c>
    switch (mode[i]) {
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b77      	cmp	r3, #119	; 0x77
 80020b0:	d006      	beq.n	80020c0 <ob_fopen+0x48>
 80020b2:	2b77      	cmp	r3, #119	; 0x77
 80020b4:	dc13      	bgt.n	80020de <ob_fopen+0x66>
 80020b6:	2b2b      	cmp	r3, #43	; 0x2b
 80020b8:	d00c      	beq.n	80020d4 <ob_fopen+0x5c>
 80020ba:	2b72      	cmp	r3, #114	; 0x72
 80020bc:	d005      	beq.n	80020ca <ob_fopen+0x52>
 80020be:	e00e      	b.n	80020de <ob_fopen+0x66>
      case 'w':
        flags |= FA_WRITE | FA_CREATE_ALWAYS;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	f043 030a 	orr.w	r3, r3, #10
 80020c6:	75fb      	strb	r3, [r7, #23]
        break;
 80020c8:	e009      	b.n	80020de <ob_fopen+0x66>
      case 'r':
        flags |= FA_READ;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
        break;
 80020d2:	e004      	b.n	80020de <ob_fopen+0x66>
      case '+':
        flags |= FA_READ | FA_WRITE;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	f043 0303 	orr.w	r3, r3, #3
 80020da:	75fb      	strb	r3, [r7, #23]
        break;
 80020dc:	bf00      	nop
  for (i=0; mode[i] != 0; i++) {
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	3301      	adds	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1da      	bne.n	80020a6 <ob_fopen+0x2e>
    }
  }

  res = f_open(fil, filename, flags);
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	461a      	mov	r2, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f011 fe32 	bl	8013d60 <f_open>
 80020fc:	4603      	mov	r3, r0
 80020fe:	72fb      	strb	r3, [r7, #11]
  if (res != FR_OK) {
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <ob_fopen+0x98>
    ob_free(fil);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff88 	bl	800201c <ob_free>
    return NULL;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <ob_fopen+0x9a>
  }

  return (FILE *) fil;
 8002110:	68fb      	ldr	r3, [r7, #12]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	0801f660 	.word	0x0801f660

08002120 <ob_fclose>:

int ob_fclose(FILE *stream)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60fb      	str	r3, [r7, #12]
  res = f_close(fil);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f012 fcc1 	bl	8014ab4 <f_close>
 8002132:	4603      	mov	r3, r0
 8002134:	72fb      	strb	r3, [r7, #11]
  if (res != FR_OK)
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <ob_fclose+0x22>
    return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	e003      	b.n	800214a <ob_fclose+0x2a>

  ob_free(fil);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff6a 	bl	800201c <ob_free>
  return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <ob_fread>:
size_t ob_fread(void *ptr, size_t size, size_t count, FILE *stream)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b088      	sub	sp, #32
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	61fb      	str	r3, [r7, #28]
  UINT bread;
  res = f_read(fil, ptr, size * count, &bread);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	fb03 f202 	mul.w	r2, r3, r2
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	69f8      	ldr	r0, [r7, #28]
 8002174:	f012 f8c4 	bl	8014300 <f_read>
 8002178:	4603      	mov	r3, r0
 800217a:	76fb      	strb	r3, [r7, #27]
  if (res != FR_OK)
 800217c:	7efb      	ldrb	r3, [r7, #27]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <ob_fread+0x34>
    return 0;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <ob_fread+0x36>

  return bread;
 8002186:	697b      	ldr	r3, [r7, #20]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <ob_fseek>:
{
  FIL *fil = (FIL *) stream;
  return f_eof(fil);
}
int ob_fseek(FILE *stream, long offset, int whence)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	61bb      	str	r3, [r7, #24]
  long o;
  switch (whence) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d012      	beq.n	80021cc <ob_fseek+0x3c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	dc1a      	bgt.n	80021e2 <ob_fseek+0x52>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <ob_fseek+0x2a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d003      	beq.n	80021c0 <ob_fseek+0x30>
 80021b8:	e013      	b.n	80021e2 <ob_fseek+0x52>
    case SEEK_SET:
      o = offset;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61fb      	str	r3, [r7, #28]
      break;
 80021be:	e014      	b.n	80021ea <ob_fseek+0x5a>
    case SEEK_CUR:
      o = offset + f_tell(fil);
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4413      	add	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
      break;
 80021ca:	e00e      	b.n	80021ea <ob_fseek+0x5a>
    case SEEK_END:
      o = f_size(fil) + offset;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4413      	add	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
      if (o < 0)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da05      	bge.n	80021e8 <ob_fseek+0x58>
        o = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
      break;
 80021e0:	e002      	b.n	80021e8 <ob_fseek+0x58>
    default:
      return -1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e00e      	b.n	8002206 <ob_fseek+0x76>
      break;
 80021e8:	bf00      	nop
  }
  res = f_lseek(fil, o);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4619      	mov	r1, r3
 80021ee:	69b8      	ldr	r0, [r7, #24]
 80021f0:	f012 fc8f 	bl	8014b12 <f_lseek>
 80021f4:	4603      	mov	r3, r0
 80021f6:	75fb      	strb	r3, [r7, #23]
  if (res != FR_OK)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <ob_fseek+0x74>
    return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e000      	b.n	8002206 <ob_fseek+0x76>

  return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <StartLcdUartReceiveProc>:
#define FAN_OFF 0

bool playingTrack = false;

void StartLcdUartReceiveProc(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  if (HAL_UART_Receive_IT(&huart1, lcdRxBuffer, 1) != HAL_OK)
 8002214:	2201      	movs	r2, #1
 8002216:	4905      	ldr	r1, [pc, #20]	; (800222c <StartLcdUartReceiveProc+0x1c>)
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <StartLcdUartReceiveProc+0x20>)
 800221a:	f009 ff94 	bl	800c146 <HAL_UART_Receive_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <StartLcdUartReceiveProc+0x18>
    Error_Handler();
 8002224:	f003 f8a2 	bl	800536c <Error_Handler>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000e41c 	.word	0x2000e41c
 8002230:	2000e8c8 	.word	0x2000e8c8

08002234 <LcdUartReceiveCallback>:

void LcdUartReceiveCallback(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <LcdUartReceiveCallback+0x4c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d118      	bne.n	8002278 <LcdUartReceiveCallback+0x44>
	{
		lcdUartRBuffer[lcdUartS] = lcdRxBuffer[0];
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <LcdUartReceiveCallback+0x50>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <LcdUartReceiveCallback+0x54>)
 800224c:	7811      	ldrb	r1, [r2, #0]
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <LcdUartReceiveCallback+0x58>)
 8002250:	54d1      	strb	r1, [r2, r3]
		lcdUartS++;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <LcdUartReceiveCallback+0x50>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LcdUartReceiveCallback+0x50>)
 800225a:	6013      	str	r3, [r2, #0]
		if (lcdUartS >= LCDUARTBUFFERSIZE)
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <LcdUartReceiveCallback+0x50>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b7f      	cmp	r3, #127	; 0x7f
 8002262:	dd04      	ble.n	800226e <LcdUartReceiveCallback+0x3a>
			lcdUartS -= LCDUARTBUFFERSIZE;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <LcdUartReceiveCallback+0x50>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3b80      	subs	r3, #128	; 0x80
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <LcdUartReceiveCallback+0x50>)
 800226c:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT(&huart1, lcdRxBuffer, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	4905      	ldr	r1, [pc, #20]	; (8002288 <LcdUartReceiveCallback+0x54>)
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <LcdUartReceiveCallback+0x5c>)
 8002274:	f009 ff67 	bl	800c146 <HAL_UART_Receive_IT>
	}
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40011000 	.word	0x40011000
 8002284:	2000e394 	.word	0x2000e394
 8002288:	2000e41c 	.word	0x2000e41c
 800228c:	2000e39c 	.word	0x2000e39c
 8002290:	2000e8c8 	.word	0x2000e8c8

08002294 <GetRBufferSize>:

static int GetRBufferSize(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
	return (lcdUartS + LCDUARTBUFFERSIZE - lcdUartE) % LCDUARTBUFFERSIZE;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <GetRBufferSize+0x2c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <GetRBufferSize+0x30>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	425a      	negs	r2, r3
 80022a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b0:	bf58      	it	pl
 80022b2:	4253      	negpl	r3, r2
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000e394 	.word	0x2000e394
 80022c4:	2000e398 	.word	0x2000e398

080022c8 <GetRBuffer>:

static uint8_t GetRBuffer(int idx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	return lcdUartRBuffer[(lcdUartE + idx) % LCDUARTBUFFERSIZE];
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <GetRBuffer+0x30>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	425a      	negs	r2, r3
 80022da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022e2:	bf58      	it	pl
 80022e4:	4253      	negpl	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <GetRBuffer+0x34>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000e398 	.word	0x2000e398
 80022fc:	2000e39c 	.word	0x2000e39c

08002300 <SetRBufferIndex>:

static void SetRBufferIndex(int size)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	lcdUartE += size;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <SetRBufferIndex+0x34>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <SetRBufferIndex+0x34>)
 8002312:	6013      	str	r3, [r2, #0]
	if (lcdUartE >= LCDUARTBUFFERSIZE)
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <SetRBufferIndex+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b7f      	cmp	r3, #127	; 0x7f
 800231a:	dd04      	ble.n	8002326 <SetRBufferIndex+0x26>
		lcdUartE -= LCDUARTBUFFERSIZE;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SetRBufferIndex+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3b80      	subs	r3, #128	; 0x80
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <SetRBufferIndex+0x34>)
 8002324:	6013      	str	r3, [r2, #0]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000e398 	.word	0x2000e398

08002338 <SetAudioVolume>:

uint32_t lastVolumeTime = 0;
uint8_t lastVolumeSetFlag = 0;

static void SetAudioVolume(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
//	printf("Set volume %d \r\n", select);
	sgtl5000_stop_play();
 800233c:	f003 f8e0 	bl	8005500 <sgtl5000_stop_play>
	printf("Audio Driver Stopped for Volume \r\n");
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <SetAudioVolume+0x28>)
 8002342:	f01c f89d 	bl	801e480 <puts>
	sgtl5000_set_volume(systemVolume);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <SetAudioVolume+0x2c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f874 	bl	8005438 <sgtl5000_set_volume>
	sgtl5000_start_play();
 8002350:	f003 f8b4 	bl	80054bc <sgtl5000_start_play>
	printf("Audio Driver Started for Volume \r\n");
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <SetAudioVolume+0x30>)
 8002356:	f01c f893 	bl	801e480 <puts>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0801f678 	.word	0x0801f678
 8002364:	20000008 	.word	0x20000008
 8002368:	0801f69c 	.word	0x0801f69c

0800236c <EsimationLcdUartComm>:

void EsimationLcdUartComm(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af02      	add	r7, sp, #8
	uint8_t reg_count;
	uint16_t reg_data;
	uint8_t checkCode;
	static uint8_t endCheck = 0;

	if (GetRBufferSize() >= 3)
 8002372:	f7ff ff8f 	bl	8002294 <GetRBufferSize>
 8002376:	4603      	mov	r3, r0
 8002378:	2b02      	cmp	r3, #2
 800237a:	f340 837b 	ble.w	8002a74 <EsimationLcdUartComm+0x708>
	{
		char command = GetRBuffer(0);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff ffa2 	bl	80022c8 <GetRBuffer>
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
		char status = GetRBuffer(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff ff9d 	bl	80022c8 <GetRBuffer>
 800238e:	4603      	mov	r3, r0
 8002390:	71bb      	strb	r3, [r7, #6]
		char select = GetRBuffer(2);
 8002392:	2002      	movs	r0, #2
 8002394:	f7ff ff98 	bl	80022c8 <GetRBuffer>
 8002398:	4603      	mov	r3, r0
 800239a:	717b      	strb	r3, [r7, #5]

		printf("Received command is %c \r\n", command);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4619      	mov	r1, r3
 80023a0:	486d      	ldr	r0, [pc, #436]	; (8002558 <EsimationLcdUartComm+0x1ec>)
 80023a2:	f01b ffff 	bl	801e3a4 <iprintf>
		printf("Received status is %c \r\n", status);
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	4619      	mov	r1, r3
 80023aa:	486c      	ldr	r0, [pc, #432]	; (800255c <EsimationLcdUartComm+0x1f0>)
 80023ac:	f01b fffa 	bl	801e3a4 <iprintf>
		printf("Received select is %c \r\n", select);
 80023b0:	797b      	ldrb	r3, [r7, #5]
 80023b2:	4619      	mov	r1, r3
 80023b4:	486a      	ldr	r0, [pc, #424]	; (8002560 <EsimationLcdUartComm+0x1f4>)
 80023b6:	f01b fff5 	bl	801e3a4 <iprintf>

		if (/*command == COMMAND || */ command == 'c')
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b63      	cmp	r3, #99	; 0x63
 80023be:	f040 8356 	bne.w	8002a6e <EsimationLcdUartComm+0x702>
		{
			if(status == 'f'){
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	2b66      	cmp	r3, #102	; 0x66
 80023c6:	d112      	bne.n	80023ee <EsimationLcdUartComm+0x82>
				if (select == '1') endCheck = endCheck | 0x01;// 0b00000001	// FAN OFF
 80023c8:	797b      	ldrb	r3, [r7, #5]
 80023ca:	2b31      	cmp	r3, #49	; 0x31
 80023cc:	d107      	bne.n	80023de <EsimationLcdUartComm+0x72>
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e032      	b.n	8002444 <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck & 0x06; // 0b00000110				// FAN ON
 80023de:	4b61      	ldr	r3, [pc, #388]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f003 0306 	and.w	r3, r3, #6
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e02a      	b.n	8002444 <EsimationLcdUartComm+0xd8>
			}
			else if(status == 's') {
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	2b73      	cmp	r3, #115	; 0x73
 80023f2:	d112      	bne.n	800241a <EsimationLcdUartComm+0xae>
				if(select == 'w') endCheck = endCheck | 0x02;// 0b00000010	// LED Light ON
 80023f4:	797b      	ldrb	r3, [r7, #5]
 80023f6:	2b77      	cmp	r3, #119	; 0x77
 80023f8:	d107      	bne.n	800240a <EsimationLcdUartComm+0x9e>
 80023fa:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e01c      	b.n	8002444 <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck & 0x05; // 0b00000101				// LED Light OFF
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	f003 0305 	and.w	r3, r3, #5
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e014      	b.n	8002444 <EsimationLcdUartComm+0xd8>
			}
			else if(status == 't') {
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b74      	cmp	r3, #116	; 0x74
 800241e:	d111      	bne.n	8002444 <EsimationLcdUartComm+0xd8>
				if(select == 's') endCheck = endCheck & 0x03; // 0b00000011	// Stop Playing Audio
 8002420:	797b      	ldrb	r3, [r7, #5]
 8002422:	2b73      	cmp	r3, #115	; 0x73
 8002424:	d107      	bne.n	8002436 <EsimationLcdUartComm+0xca>
 8002426:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e006      	b.n	8002444 <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck | 0x04;// 0b00000100				// Start Playing Audio
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002442:	701a      	strb	r2, [r3, #0]
			}

			printf("endCheck : %d  \r\n", endCheck);
 8002444:	4b47      	ldr	r3, [pc, #284]	; (8002564 <EsimationLcdUartComm+0x1f8>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	4847      	ldr	r0, [pc, #284]	; (8002568 <EsimationLcdUartComm+0x1fc>)
 800244c:	f01b ffaa 	bl	801e3a4 <iprintf>




			if (/*status == BREATHING ||*/ status == 'b')
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	2b62      	cmp	r3, #98	; 0x62
 8002454:	d145      	bne.n	80024e2 <EsimationLcdUartComm+0x176>
			{
				if (/*select == TRACK1 ||*/ select == 'l')
 8002456:	797b      	ldrb	r3, [r7, #5]
 8002458:	2b6c      	cmp	r3, #108	; 0x6c
 800245a:	d10a      	bne.n	8002472 <EsimationLcdUartComm+0x106>
				{
					// Focus
					pwm_update_duty_cycle(0,255,255,127,0); // light blue
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	237f      	movs	r3, #127	; 0x7f
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	21ff      	movs	r1, #255	; 0xff
 8002466:	2000      	movs	r0, #0
 8002468:	f000 fc4c 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light Focus \r\n");
 800246c:	483f      	ldr	r0, [pc, #252]	; (800256c <EsimationLcdUartComm+0x200>)
 800246e:	f01c f807 	bl	801e480 <puts>
				}
				if(/*select == TRACK2 ||*/ select == 'b') {
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	2b62      	cmp	r3, #98	; 0x62
 8002476:	d10a      	bne.n	800248e <EsimationLcdUartComm+0x122>
					// Blue
					pwm_update_duty_cycle(0,0,255,0,0);
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f000 fc3e 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Led Blue \r\n");
 8002488:	4839      	ldr	r0, [pc, #228]	; (8002570 <EsimationLcdUartComm+0x204>)
 800248a:	f01b fff9 	bl	801e480 <puts>
				}
				if(/*select == TRACK3 ||*/ select == 'p') {
 800248e:	797b      	ldrb	r3, [r7, #5]
 8002490:	2b70      	cmp	r3, #112	; 0x70
 8002492:	d10a      	bne.n	80024aa <EsimationLcdUartComm+0x13e>
					// Fuschia
					pwm_update_duty_cycle(255,0,255,0,0);
 8002494:	2300      	movs	r3, #0
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2300      	movs	r3, #0
 800249a:	22ff      	movs	r2, #255	; 0xff
 800249c:	2100      	movs	r1, #0
 800249e:	20ff      	movs	r0, #255	; 0xff
 80024a0:	f000 fc30 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light Fuschia \r\n");
 80024a4:	4833      	ldr	r0, [pc, #204]	; (8002574 <EsimationLcdUartComm+0x208>)
 80024a6:	f01b ffeb 	bl	801e480 <puts>
				}
				if(/*select == TRACK4 ||*/ select == 'g') {
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	2b67      	cmp	r3, #103	; 0x67
 80024ae:	d10a      	bne.n	80024c6 <EsimationLcdUartComm+0x15a>
					// Green
					pwm_update_duty_cycle(0,255,0,0,0);
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2200      	movs	r2, #0
 80024b8:	21ff      	movs	r1, #255	; 0xff
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 fc22 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light Green \r\n");
 80024c0:	482d      	ldr	r0, [pc, #180]	; (8002578 <EsimationLcdUartComm+0x20c>)
 80024c2:	f01b ffdd 	bl	801e480 <puts>
				}
				if(/*select == TRACK5 ||*/ select == 'k') {
 80024c6:	797b      	ldrb	r3, [r7, #5]
 80024c8:	2b6b      	cmp	r3, #107	; 0x6b
 80024ca:	d10a      	bne.n	80024e2 <EsimationLcdUartComm+0x176>
					// Low K white
					pwm_update_duty_cycle(0,0,0,0,255);
 80024cc:	23ff      	movs	r3, #255	; 0xff
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 fc14 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light Low K White \r\n");
 80024dc:	4827      	ldr	r0, [pc, #156]	; (800257c <EsimationLcdUartComm+0x210>)
 80024de:	f01b ffcf 	bl	801e480 <puts>
				}
			}
			if(/*status == STANDBY ||*/ status == 's')
 80024e2:	79bb      	ldrb	r3, [r7, #6]
 80024e4:	2b73      	cmp	r3, #115	; 0x73
 80024e6:	d127      	bne.n	8002538 <EsimationLcdUartComm+0x1cc>
			{
				if(/*select == TRACK2 ||*/ select == 'w') {
 80024e8:	797b      	ldrb	r3, [r7, #5]
 80024ea:	2b77      	cmp	r3, #119	; 0x77
 80024ec:	d10a      	bne.n	8002504 <EsimationLcdUartComm+0x198>
					// White
					pwm_update_duty_cycle(255,255,255,0,0);
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	21ff      	movs	r1, #255	; 0xff
 80024f8:	20ff      	movs	r0, #255	; 0xff
 80024fa:	f000 fc03 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light White \r\n");
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <EsimationLcdUartComm+0x214>)
 8002500:	f01b ffbe 	bl	801e480 <puts>
				}
				if(/*select == OFF ||*/ select == 'o') {
 8002504:	797b      	ldrb	r3, [r7, #5]
 8002506:	2b6f      	cmp	r3, #111	; 0x6f
 8002508:	d10a      	bne.n	8002520 <EsimationLcdUartComm+0x1b4>
					pwm_update_duty_cycle(0,0,0,0,0);
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2300      	movs	r3, #0
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	2000      	movs	r0, #0
 8002516:	f000 fbf5 	bl	8002d04 <pwm_update_duty_cycle>
					printf("Light Off \r\n");
 800251a:	481a      	ldr	r0, [pc, #104]	; (8002584 <EsimationLcdUartComm+0x218>)
 800251c:	f01b ffb0 	bl	801e480 <puts>
				}
				if(select == 'b') {
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	2b62      	cmp	r3, #98	; 0x62
 8002524:	d102      	bne.n	800252c <EsimationLcdUartComm+0x1c0>
//					err_code = app_timer_start(burn_in_timer_id, APP_TIMER_TICKS(1000), NULL);
//					APP_ERROR_CHECK(err_code);
					printf("Start App Timer \r\n");
 8002526:	4818      	ldr	r0, [pc, #96]	; (8002588 <EsimationLcdUartComm+0x21c>)
 8002528:	f01b ffaa 	bl	801e480 <puts>
				}
				if(select == 's') {
 800252c:	797b      	ldrb	r3, [r7, #5]
 800252e:	2b73      	cmp	r3, #115	; 0x73
 8002530:	d102      	bne.n	8002538 <EsimationLcdUartComm+0x1cc>
//					err_code = app_timer_stop(burn_in_timer_id);
//					APP_ERROR_CHECK(err_code);
					printf("Stop App Timer \r\n");
 8002532:	4816      	ldr	r0, [pc, #88]	; (800258c <EsimationLcdUartComm+0x220>)
 8002534:	f01b ffa4 	bl	801e480 <puts>
				}
			}
			if(/*status == FAN ||*/ status == 'f')
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	2b66      	cmp	r3, #102	; 0x66
 800253c:	d138      	bne.n	80025b0 <EsimationLcdUartComm+0x244>
			{
				if(/*select == FAN_OFF ||*/ select == '1') {
 800253e:	797b      	ldrb	r3, [r7, #5]
 8002540:	2b31      	cmp	r3, #49	; 0x31
 8002542:	d129      	bne.n	8002598 <EsimationLcdUartComm+0x22c>
					HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800254a:	4811      	ldr	r0, [pc, #68]	; (8002590 <EsimationLcdUartComm+0x224>)
 800254c:	f004 ff10 	bl	8007370 <HAL_GPIO_WritePin>
					printf("Fan Off \r\n");
 8002550:	4810      	ldr	r0, [pc, #64]	; (8002594 <EsimationLcdUartComm+0x228>)
 8002552:	f01b ff95 	bl	801e480 <puts>
 8002556:	e02b      	b.n	80025b0 <EsimationLcdUartComm+0x244>
 8002558:	0801f6c0 	.word	0x0801f6c0
 800255c:	0801f6dc 	.word	0x0801f6dc
 8002560:	0801f6f8 	.word	0x0801f6f8
 8002564:	2000e425 	.word	0x2000e425
 8002568:	0801f714 	.word	0x0801f714
 800256c:	0801f728 	.word	0x0801f728
 8002570:	0801f738 	.word	0x0801f738
 8002574:	0801f744 	.word	0x0801f744
 8002578:	0801f754 	.word	0x0801f754
 800257c:	0801f764 	.word	0x0801f764
 8002580:	0801f778 	.word	0x0801f778
 8002584:	0801f788 	.word	0x0801f788
 8002588:	0801f794 	.word	0x0801f794
 800258c:	0801f7a8 	.word	0x0801f7a8
 8002590:	40020000 	.word	0x40020000
 8002594:	0801f7bc 	.word	0x0801f7bc

				}
				else if (/*select == FAN_ON ||*/ select == '2') {
 8002598:	797b      	ldrb	r3, [r7, #5]
 800259a:	2b32      	cmp	r3, #50	; 0x32
 800259c:	d108      	bne.n	80025b0 <EsimationLcdUartComm+0x244>
					HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a4:	48ae      	ldr	r0, [pc, #696]	; (8002860 <EsimationLcdUartComm+0x4f4>)
 80025a6:	f004 fee3 	bl	8007370 <HAL_GPIO_WritePin>
					printf("Fan On \r\n");
 80025aa:	48ae      	ldr	r0, [pc, #696]	; (8002864 <EsimationLcdUartComm+0x4f8>)
 80025ac:	f01b ff68 	bl	801e480 <puts>
				}
			}
			if(/*status == REMOTE ||*/ status == 'r')
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	2b72      	cmp	r3, #114	; 0x72
 80025b4:	d117      	bne.n	80025e6 <EsimationLcdUartComm+0x27a>
			{
				if(select == START || select == 's') {
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	2b0e      	cmp	r3, #14
 80025ba:	d002      	beq.n	80025c2 <EsimationLcdUartComm+0x256>
 80025bc:	797b      	ldrb	r3, [r7, #5]
 80025be:	2b73      	cmp	r3, #115	; 0x73
 80025c0:	d111      	bne.n	80025e6 <EsimationLcdUartComm+0x27a>
					HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c8:	48a5      	ldr	r0, [pc, #660]	; (8002860 <EsimationLcdUartComm+0x4f4>)
 80025ca:	f004 fed1 	bl	8007370 <HAL_GPIO_WritePin>
					osDelay(50);
 80025ce:	2032      	movs	r0, #50	; 0x32
 80025d0:	f013 f92c 	bl	801582c <osDelay>
					HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025da:	48a1      	ldr	r0, [pc, #644]	; (8002860 <EsimationLcdUartComm+0x4f4>)
 80025dc:	f004 fec8 	bl	8007370 <HAL_GPIO_WritePin>
					printf("Remote Start pressed \r\n");
 80025e0:	48a1      	ldr	r0, [pc, #644]	; (8002868 <EsimationLcdUartComm+0x4fc>)
 80025e2:	f01b ff4d 	bl	801e480 <puts>

				}
			}
			if (/*status == VOLUME ||*/ status == 'v')
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	2b76      	cmp	r3, #118	; 0x76
 80025ea:	d122      	bne.n	8002632 <EsimationLcdUartComm+0x2c6>
			{
				if (select > 0 && select < 64) {
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <EsimationLcdUartComm+0x2c6>
 80025f2:	797b      	ldrb	r3, [r7, #5]
 80025f4:	2b3f      	cmp	r3, #63	; 0x3f
 80025f6:	d81c      	bhi.n	8002632 <EsimationLcdUartComm+0x2c6>
					systemVolume = (((127 - MAX_VOLUME) * select) >> 6) + MAX_VOLUME;
 80025f8:	797b      	ldrb	r3, [r7, #5]
 80025fa:	2273      	movs	r2, #115	; 0x73
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	119b      	asrs	r3, r3, #6
 8002602:	b2db      	uxtb	r3, r3
 8002604:	330c      	adds	r3, #12
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b98      	ldr	r3, [pc, #608]	; (800286c <EsimationLcdUartComm+0x500>)
 800260a:	701a      	strb	r2, [r3, #0]
					printf("Set volume %d \r\n", select);
 800260c:	797b      	ldrb	r3, [r7, #5]
 800260e:	4619      	mov	r1, r3
 8002610:	4897      	ldr	r0, [pc, #604]	; (8002870 <EsimationLcdUartComm+0x504>)
 8002612:	f01b fec7 	bl	801e3a4 <iprintf>
					sgtl5000_stop_play();
 8002616:	f002 ff73 	bl	8005500 <sgtl5000_stop_play>
					printf("Audio Driver Stopped for Volume \r\n");
 800261a:	4896      	ldr	r0, [pc, #600]	; (8002874 <EsimationLcdUartComm+0x508>)
 800261c:	f01b ff30 	bl	801e480 <puts>
					sgtl5000_set_volume(select);
 8002620:	797b      	ldrb	r3, [r7, #5]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ff08 	bl	8005438 <sgtl5000_set_volume>
					sgtl5000_start_play();
 8002628:	f002 ff48 	bl	80054bc <sgtl5000_start_play>
					printf("Audio Driver Started for Volume \r\n");
 800262c:	4892      	ldr	r0, [pc, #584]	; (8002878 <EsimationLcdUartComm+0x50c>)
 800262e:	f01b ff27 	bl	801e480 <puts>
				}
			}
			if ((/*status == PLAY ||*/ status == 't'))
 8002632:	79bb      	ldrb	r3, [r7, #6]
 8002634:	2b74      	cmp	r3, #116	; 0x74
 8002636:	f040 8216 	bne.w	8002a66 <EsimationLcdUartComm+0x6fa>
			{
				if (select == 's') {
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	2b73      	cmp	r3, #115	; 0x73
 800263e:	d10e      	bne.n	800265e <EsimationLcdUartComm+0x2f2>
					if (playingTrack) {
 8002640:	4b8e      	ldr	r3, [pc, #568]	; (800287c <EsimationLcdUartComm+0x510>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <EsimationLcdUartComm+0x2f2>
						printf("Audio Driver Stopped on Track Change \r\n");
 8002648:	488d      	ldr	r0, [pc, #564]	; (8002880 <EsimationLcdUartComm+0x514>)
 800264a:	f01b ff19 	bl	801e480 <puts>
						sgtl5000_stop_play();
 800264e:	f002 ff57 	bl	8005500 <sgtl5000_stop_play>
						SetPlayState(PLAY_NONE);
 8002652:	2000      	movs	r0, #0
 8002654:	f000 fc6a 	bl	8002f2c <SetPlayState>
						playingTrack = false;
 8002658:	4b88      	ldr	r3, [pc, #544]	; (800287c <EsimationLcdUartComm+0x510>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
					}
				}
				if (/*select == INTRO ||*/ select == 'k') {
 800265e:	797b      	ldrb	r3, [r7, #5]
 8002660:	2b6b      	cmp	r3, #107	; 0x6b
 8002662:	d110      	bne.n	8002686 <EsimationLcdUartComm+0x31a>
					printf("Playing Intro \r\n");
 8002664:	4887      	ldr	r0, [pc, #540]	; (8002884 <EsimationLcdUartComm+0x518>)
 8002666:	f01b ff0b 	bl	801e480 <puts>
					StartPlayAudioFile("_Intro.mp3");
 800266a:	4887      	ldr	r0, [pc, #540]	; (8002888 <EsimationLcdUartComm+0x51c>)
 800266c:	f000 fb74 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002670:	4b82      	ldr	r3, [pc, #520]	; (800287c <EsimationLcdUartComm+0x510>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002676:	f003 ff89 	bl	800658c <HAL_GetTick>
 800267a:	4603      	mov	r3, r0
 800267c:	4a83      	ldr	r2, [pc, #524]	; (800288c <EsimationLcdUartComm+0x520>)
 800267e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002680:	4b83      	ldr	r3, [pc, #524]	; (8002890 <EsimationLcdUartComm+0x524>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
				}
				if (/*select == TEST ||*/ select == 'l')
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	2b6c      	cmp	r3, #108	; 0x6c
 800268a:	d110      	bne.n	80026ae <EsimationLcdUartComm+0x342>
				{
					printf("Playing Test Bell \r\n");
 800268c:	4881      	ldr	r0, [pc, #516]	; (8002894 <EsimationLcdUartComm+0x528>)
 800268e:	f01b fef7 	bl	801e480 <puts>
					StartPlayAudioFile("_TestBell.mp3");
 8002692:	4881      	ldr	r0, [pc, #516]	; (8002898 <EsimationLcdUartComm+0x52c>)
 8002694:	f000 fb60 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <EsimationLcdUartComm+0x510>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800269e:	f003 ff75 	bl	800658c <HAL_GetTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a79      	ldr	r2, [pc, #484]	; (800288c <EsimationLcdUartComm+0x520>)
 80026a6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <EsimationLcdUartComm+0x524>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
				}
				if (select == '1') {
 80026ae:	797b      	ldrb	r3, [r7, #5]
 80026b0:	2b31      	cmp	r3, #49	; 0x31
 80026b2:	d110      	bne.n	80026d6 <EsimationLcdUartComm+0x36a>
					printf("Playing Focus \r\n");
 80026b4:	4879      	ldr	r0, [pc, #484]	; (800289c <EsimationLcdUartComm+0x530>)
 80026b6:	f01b fee3 	bl	801e480 <puts>
					StartPlayAudioFile("Focus.mp3");
 80026ba:	4879      	ldr	r0, [pc, #484]	; (80028a0 <EsimationLcdUartComm+0x534>)
 80026bc:	f000 fb4c 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80026c0:	4b6e      	ldr	r3, [pc, #440]	; (800287c <EsimationLcdUartComm+0x510>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80026c6:	f003 ff61 	bl	800658c <HAL_GetTick>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a6f      	ldr	r2, [pc, #444]	; (800288c <EsimationLcdUartComm+0x520>)
 80026ce:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <EsimationLcdUartComm+0x524>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '2') {
 80026d6:	797b      	ldrb	r3, [r7, #5]
 80026d8:	2b32      	cmp	r3, #50	; 0x32
 80026da:	d110      	bne.n	80026fe <EsimationLcdUartComm+0x392>
					printf("Playing Motivate \r\n");
 80026dc:	4871      	ldr	r0, [pc, #452]	; (80028a4 <EsimationLcdUartComm+0x538>)
 80026de:	f01b fecf 	bl	801e480 <puts>
					StartPlayAudioFile("Motivate.mp3");
 80026e2:	4871      	ldr	r0, [pc, #452]	; (80028a8 <EsimationLcdUartComm+0x53c>)
 80026e4:	f000 fb38 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80026e8:	4b64      	ldr	r3, [pc, #400]	; (800287c <EsimationLcdUartComm+0x510>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80026ee:	f003 ff4d 	bl	800658c <HAL_GetTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a65      	ldr	r2, [pc, #404]	; (800288c <EsimationLcdUartComm+0x520>)
 80026f6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80026f8:	4b65      	ldr	r3, [pc, #404]	; (8002890 <EsimationLcdUartComm+0x524>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '3') {
 80026fe:	797b      	ldrb	r3, [r7, #5]
 8002700:	2b33      	cmp	r3, #51	; 0x33
 8002702:	d110      	bne.n	8002726 <EsimationLcdUartComm+0x3ba>
					printf("Playing Fit \r\n");
 8002704:	4869      	ldr	r0, [pc, #420]	; (80028ac <EsimationLcdUartComm+0x540>)
 8002706:	f01b febb 	bl	801e480 <puts>
					StartPlayAudioFile("Fit.mp3");
 800270a:	4869      	ldr	r0, [pc, #420]	; (80028b0 <EsimationLcdUartComm+0x544>)
 800270c:	f000 fb24 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002710:	4b5a      	ldr	r3, [pc, #360]	; (800287c <EsimationLcdUartComm+0x510>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002716:	f003 ff39 	bl	800658c <HAL_GetTick>
 800271a:	4603      	mov	r3, r0
 800271c:	4a5b      	ldr	r2, [pc, #364]	; (800288c <EsimationLcdUartComm+0x520>)
 800271e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <EsimationLcdUartComm+0x524>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '4') {
 8002726:	797b      	ldrb	r3, [r7, #5]
 8002728:	2b34      	cmp	r3, #52	; 0x34
 800272a:	d110      	bne.n	800274e <EsimationLcdUartComm+0x3e2>
					printf("Playing Perform \r\n");
 800272c:	4861      	ldr	r0, [pc, #388]	; (80028b4 <EsimationLcdUartComm+0x548>)
 800272e:	f01b fea7 	bl	801e480 <puts>
					StartPlayAudioFile("Perform.mp3");
 8002732:	4861      	ldr	r0, [pc, #388]	; (80028b8 <EsimationLcdUartComm+0x54c>)
 8002734:	f000 fb10 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <EsimationLcdUartComm+0x510>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800273e:	f003 ff25 	bl	800658c <HAL_GetTick>
 8002742:	4603      	mov	r3, r0
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <EsimationLcdUartComm+0x520>)
 8002746:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <EsimationLcdUartComm+0x524>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
				}
				if (select == '5') {
 800274e:	797b      	ldrb	r3, [r7, #5]
 8002750:	2b35      	cmp	r3, #53	; 0x35
 8002752:	d110      	bne.n	8002776 <EsimationLcdUartComm+0x40a>
					printf("Playing Heal \r\n");
 8002754:	4859      	ldr	r0, [pc, #356]	; (80028bc <EsimationLcdUartComm+0x550>)
 8002756:	f01b fe93 	bl	801e480 <puts>
					StartPlayAudioFile("Heal.mp3");
 800275a:	4859      	ldr	r0, [pc, #356]	; (80028c0 <EsimationLcdUartComm+0x554>)
 800275c:	f000 fafc 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002760:	4b46      	ldr	r3, [pc, #280]	; (800287c <EsimationLcdUartComm+0x510>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002766:	f003 ff11 	bl	800658c <HAL_GetTick>
 800276a:	4603      	mov	r3, r0
 800276c:	4a47      	ldr	r2, [pc, #284]	; (800288c <EsimationLcdUartComm+0x520>)
 800276e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <EsimationLcdUartComm+0x524>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '6') {
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	2b36      	cmp	r3, #54	; 0x36
 800277a:	d110      	bne.n	800279e <EsimationLcdUartComm+0x432>
					printf("Playing Recharge \r\n");
 800277c:	4851      	ldr	r0, [pc, #324]	; (80028c4 <EsimationLcdUartComm+0x558>)
 800277e:	f01b fe7f 	bl	801e480 <puts>
					StartPlayAudioFile("Recharge.mp3");
 8002782:	4851      	ldr	r0, [pc, #324]	; (80028c8 <EsimationLcdUartComm+0x55c>)
 8002784:	f000 fae8 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002788:	4b3c      	ldr	r3, [pc, #240]	; (800287c <EsimationLcdUartComm+0x510>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800278e:	f003 fefd 	bl	800658c <HAL_GetTick>
 8002792:	4603      	mov	r3, r0
 8002794:	4a3d      	ldr	r2, [pc, #244]	; (800288c <EsimationLcdUartComm+0x520>)
 8002796:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <EsimationLcdUartComm+0x524>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
				}
				if (select == '7') {
 800279e:	797b      	ldrb	r3, [r7, #5]
 80027a0:	2b37      	cmp	r3, #55	; 0x37
 80027a2:	d110      	bne.n	80027c6 <EsimationLcdUartComm+0x45a>
					printf("Playing Relax \r\n");
 80027a4:	4849      	ldr	r0, [pc, #292]	; (80028cc <EsimationLcdUartComm+0x560>)
 80027a6:	f01b fe6b 	bl	801e480 <puts>
					StartPlayAudioFile("Relax.mp3");
 80027aa:	4849      	ldr	r0, [pc, #292]	; (80028d0 <EsimationLcdUartComm+0x564>)
 80027ac:	f000 fad4 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <EsimationLcdUartComm+0x510>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80027b6:	f003 fee9 	bl	800658c <HAL_GetTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a33      	ldr	r2, [pc, #204]	; (800288c <EsimationLcdUartComm+0x520>)
 80027be:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80027c0:	4b33      	ldr	r3, [pc, #204]	; (8002890 <EsimationLcdUartComm+0x524>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
				}
				if (select == '8') {
 80027c6:	797b      	ldrb	r3, [r7, #5]
 80027c8:	2b38      	cmp	r3, #56	; 0x38
 80027ca:	d110      	bne.n	80027ee <EsimationLcdUartComm+0x482>
					printf("Playing Snooze \r\n");
 80027cc:	4841      	ldr	r0, [pc, #260]	; (80028d4 <EsimationLcdUartComm+0x568>)
 80027ce:	f01b fe57 	bl	801e480 <puts>
					StartPlayAudioFile("Snooze.mp3");
 80027d2:	4841      	ldr	r0, [pc, #260]	; (80028d8 <EsimationLcdUartComm+0x56c>)
 80027d4:	f000 fac0 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <EsimationLcdUartComm+0x510>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80027de:	f003 fed5 	bl	800658c <HAL_GetTick>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a29      	ldr	r2, [pc, #164]	; (800288c <EsimationLcdUartComm+0x520>)
 80027e6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <EsimationLcdUartComm+0x524>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
				}
				if (select == '9') {
 80027ee:	797b      	ldrb	r3, [r7, #5]
 80027f0:	2b39      	cmp	r3, #57	; 0x39
 80027f2:	d110      	bne.n	8002816 <EsimationLcdUartComm+0x4aa>
					printf("Playing Create \r\n");
 80027f4:	4839      	ldr	r0, [pc, #228]	; (80028dc <EsimationLcdUartComm+0x570>)
 80027f6:	f01b fe43 	bl	801e480 <puts>
					StartPlayAudioFile("Creativity.mp3");
 80027fa:	4839      	ldr	r0, [pc, #228]	; (80028e0 <EsimationLcdUartComm+0x574>)
 80027fc:	f000 faac 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <EsimationLcdUartComm+0x510>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002806:	f003 fec1 	bl	800658c <HAL_GetTick>
 800280a:	4603      	mov	r3, r0
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <EsimationLcdUartComm+0x520>)
 800280e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <EsimationLcdUartComm+0x524>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'a') {
 8002816:	797b      	ldrb	r3, [r7, #5]
 8002818:	2b61      	cmp	r3, #97	; 0x61
 800281a:	d110      	bne.n	800283e <EsimationLcdUartComm+0x4d2>
					printf("Playing Overcome \r\n");
 800281c:	4831      	ldr	r0, [pc, #196]	; (80028e4 <EsimationLcdUartComm+0x578>)
 800281e:	f01b fe2f 	bl	801e480 <puts>
					StartPlayAudioFile("Overcome.mp3");
 8002822:	4831      	ldr	r0, [pc, #196]	; (80028e8 <EsimationLcdUartComm+0x57c>)
 8002824:	f000 fa98 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <EsimationLcdUartComm+0x510>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800282e:	f003 fead 	bl	800658c <HAL_GetTick>
 8002832:	4603      	mov	r3, r0
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <EsimationLcdUartComm+0x520>)
 8002836:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <EsimationLcdUartComm+0x524>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'b') {
 800283e:	797b      	ldrb	r3, [r7, #5]
 8002840:	2b62      	cmp	r3, #98	; 0x62
 8002842:	d15c      	bne.n	80028fe <EsimationLcdUartComm+0x592>
					printf("Playing Succeed \r\n");
 8002844:	4829      	ldr	r0, [pc, #164]	; (80028ec <EsimationLcdUartComm+0x580>)
 8002846:	f01b fe1b 	bl	801e480 <puts>
					StartPlayAudioFile("Succeed.mp3");
 800284a:	4829      	ldr	r0, [pc, #164]	; (80028f0 <EsimationLcdUartComm+0x584>)
 800284c:	f000 fa84 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <EsimationLcdUartComm+0x510>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002856:	f003 fe99 	bl	800658c <HAL_GetTick>
 800285a:	4603      	mov	r3, r0
 800285c:	e04a      	b.n	80028f4 <EsimationLcdUartComm+0x588>
 800285e:	bf00      	nop
 8002860:	40020000 	.word	0x40020000
 8002864:	0801f7c8 	.word	0x0801f7c8
 8002868:	0801f7d4 	.word	0x0801f7d4
 800286c:	20000008 	.word	0x20000008
 8002870:	0801f7ec 	.word	0x0801f7ec
 8002874:	0801f678 	.word	0x0801f678
 8002878:	0801f69c 	.word	0x0801f69c
 800287c:	2000e41d 	.word	0x2000e41d
 8002880:	0801f800 	.word	0x0801f800
 8002884:	0801f828 	.word	0x0801f828
 8002888:	0801f838 	.word	0x0801f838
 800288c:	2000e420 	.word	0x2000e420
 8002890:	2000e424 	.word	0x2000e424
 8002894:	0801f844 	.word	0x0801f844
 8002898:	0801f858 	.word	0x0801f858
 800289c:	0801f868 	.word	0x0801f868
 80028a0:	0801f878 	.word	0x0801f878
 80028a4:	0801f884 	.word	0x0801f884
 80028a8:	0801f898 	.word	0x0801f898
 80028ac:	0801f8a8 	.word	0x0801f8a8
 80028b0:	0801f8b8 	.word	0x0801f8b8
 80028b4:	0801f8c0 	.word	0x0801f8c0
 80028b8:	0801f8d4 	.word	0x0801f8d4
 80028bc:	0801f8e0 	.word	0x0801f8e0
 80028c0:	0801f8f0 	.word	0x0801f8f0
 80028c4:	0801f8fc 	.word	0x0801f8fc
 80028c8:	0801f910 	.word	0x0801f910
 80028cc:	0801f920 	.word	0x0801f920
 80028d0:	0801f930 	.word	0x0801f930
 80028d4:	0801f93c 	.word	0x0801f93c
 80028d8:	0801f950 	.word	0x0801f950
 80028dc:	0801f95c 	.word	0x0801f95c
 80028e0:	0801f970 	.word	0x0801f970
 80028e4:	0801f980 	.word	0x0801f980
 80028e8:	0801f994 	.word	0x0801f994
 80028ec:	0801f9a4 	.word	0x0801f9a4
 80028f0:	0801f9b8 	.word	0x0801f9b8
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 80028f6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'c') {
 80028fe:	797b      	ldrb	r3, [r7, #5]
 8002900:	2b63      	cmp	r3, #99	; 0x63
 8002902:	d110      	bne.n	8002926 <EsimationLcdUartComm+0x5ba>
					printf("Playing Ascend \r\n");
 8002904:	4868      	ldr	r0, [pc, #416]	; (8002aa8 <EsimationLcdUartComm+0x73c>)
 8002906:	f01b fdbb 	bl	801e480 <puts>
					StartPlayAudioFile("Ascend.mp3");
 800290a:	4868      	ldr	r0, [pc, #416]	; (8002aac <EsimationLcdUartComm+0x740>)
 800290c:	f000 fa24 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002916:	f003 fe39 	bl	800658c <HAL_GetTick>
 800291a:	4603      	mov	r3, r0
 800291c:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 800291e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002920:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'd') {
 8002926:	797b      	ldrb	r3, [r7, #5]
 8002928:	2b64      	cmp	r3, #100	; 0x64
 800292a:	d110      	bne.n	800294e <EsimationLcdUartComm+0x5e2>
					printf("Playing Aspire \r\n");
 800292c:	4861      	ldr	r0, [pc, #388]	; (8002ab4 <EsimationLcdUartComm+0x748>)
 800292e:	f01b fda7 	bl	801e480 <puts>
					StartPlayAudioFile("Aspire.mp3");
 8002932:	4861      	ldr	r0, [pc, #388]	; (8002ab8 <EsimationLcdUartComm+0x74c>)
 8002934:	f000 fa10 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002938:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800293e:	f003 fe25 	bl	800658c <HAL_GetTick>
 8002942:	4603      	mov	r3, r0
 8002944:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002946:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002948:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'e') {
 800294e:	797b      	ldrb	r3, [r7, #5]
 8002950:	2b65      	cmp	r3, #101	; 0x65
 8002952:	d110      	bne.n	8002976 <EsimationLcdUartComm+0x60a>
					printf("Playing Bliss \r\n");
 8002954:	4859      	ldr	r0, [pc, #356]	; (8002abc <EsimationLcdUartComm+0x750>)
 8002956:	f01b fd93 	bl	801e480 <puts>
					StartPlayAudioFile("Bliss.mp3");
 800295a:	4859      	ldr	r0, [pc, #356]	; (8002ac0 <EsimationLcdUartComm+0x754>)
 800295c:	f000 f9fc 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002966:	f003 fe11 	bl	800658c <HAL_GetTick>
 800296a:	4603      	mov	r3, r0
 800296c:	4a4c      	ldr	r2, [pc, #304]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 800296e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002970:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'f') {
 8002976:	797b      	ldrb	r3, [r7, #5]
 8002978:	2b66      	cmp	r3, #102	; 0x66
 800297a:	d110      	bne.n	800299e <EsimationLcdUartComm+0x632>
					printf("Playing Clarity \r\n");
 800297c:	4851      	ldr	r0, [pc, #324]	; (8002ac4 <EsimationLcdUartComm+0x758>)
 800297e:	f01b fd7f 	bl	801e480 <puts>
					StartPlayAudioFile("Clarity.mp3");
 8002982:	4851      	ldr	r0, [pc, #324]	; (8002ac8 <EsimationLcdUartComm+0x75c>)
 8002984:	f000 f9e8 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002988:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800298e:	f003 fdfd 	bl	800658c <HAL_GetTick>
 8002992:	4603      	mov	r3, r0
 8002994:	4a42      	ldr	r2, [pc, #264]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002996:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002998:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'g') {
 800299e:	797b      	ldrb	r3, [r7, #5]
 80029a0:	2b67      	cmp	r3, #103	; 0x67
 80029a2:	d110      	bne.n	80029c6 <EsimationLcdUartComm+0x65a>
					printf("Playing Confidence \r\n");
 80029a4:	4849      	ldr	r0, [pc, #292]	; (8002acc <EsimationLcdUartComm+0x760>)
 80029a6:	f01b fd6b 	bl	801e480 <puts>
					StartPlayAudioFile("Confidence.mp3");
 80029aa:	4849      	ldr	r0, [pc, #292]	; (8002ad0 <EsimationLcdUartComm+0x764>)
 80029ac:	f000 f9d4 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80029b6:	f003 fde9 	bl	800658c <HAL_GetTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a38      	ldr	r2, [pc, #224]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 80029be:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'h') {
 80029c6:	797b      	ldrb	r3, [r7, #5]
 80029c8:	2b68      	cmp	r3, #104	; 0x68
 80029ca:	d110      	bne.n	80029ee <EsimationLcdUartComm+0x682>
					printf("Playing Love \r\n");
 80029cc:	4841      	ldr	r0, [pc, #260]	; (8002ad4 <EsimationLcdUartComm+0x768>)
 80029ce:	f01b fd57 	bl	801e480 <puts>
					StartPlayAudioFile("Love.mp3");
 80029d2:	4841      	ldr	r0, [pc, #260]	; (8002ad8 <EsimationLcdUartComm+0x76c>)
 80029d4:	f000 f9c0 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 80029d8:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80029de:	f003 fdd5 	bl	800658c <HAL_GetTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 80029e6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80029e8:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'i') {
 80029ee:	797b      	ldrb	r3, [r7, #5]
 80029f0:	2b69      	cmp	r3, #105	; 0x69
 80029f2:	d110      	bne.n	8002a16 <EsimationLcdUartComm+0x6aa>
					printf("Playing Manifest \r\n");
 80029f4:	4839      	ldr	r0, [pc, #228]	; (8002adc <EsimationLcdUartComm+0x770>)
 80029f6:	f01b fd43 	bl	801e480 <puts>
					StartPlayAudioFile("Manifest.mp3");
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <EsimationLcdUartComm+0x774>)
 80029fc:	f000 f9ac 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a06:	f003 fdc1 	bl	800658c <HAL_GetTick>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002a0e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
				}
				if ( select == 'j') {
 8002a16:	797b      	ldrb	r3, [r7, #5]
 8002a18:	2b6a      	cmp	r3, #106	; 0x6a
 8002a1a:	d110      	bne.n	8002a3e <EsimationLcdUartComm+0x6d2>
					printf("Playing Prosper \r\n");
 8002a1c:	4831      	ldr	r0, [pc, #196]	; (8002ae4 <EsimationLcdUartComm+0x778>)
 8002a1e:	f01b fd2f 	bl	801e480 <puts>
					StartPlayAudioFile("Prosperity.mp3");
 8002a22:	4831      	ldr	r0, [pc, #196]	; (8002ae8 <EsimationLcdUartComm+0x77c>)
 8002a24:	f000 f998 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a2e:	f003 fdad 	bl	800658c <HAL_GetTick>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002a36:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
				}
				if (select == '0') {
 8002a3e:	797b      	ldrb	r3, [r7, #5]
 8002a40:	2b30      	cmp	r3, #48	; 0x30
 8002a42:	d110      	bne.n	8002a66 <EsimationLcdUartComm+0x6fa>
					printf("Playing Reclaim \r\n");
 8002a44:	4829      	ldr	r0, [pc, #164]	; (8002aec <EsimationLcdUartComm+0x780>)
 8002a46:	f01b fd1b 	bl	801e480 <puts>
					StartPlayAudioFile("Reclaim.mp3");
 8002a4a:	4829      	ldr	r0, [pc, #164]	; (8002af0 <EsimationLcdUartComm+0x784>)
 8002a4c:	f000 f984 	bl	8002d58 <StartPlayAudioFile>
					playingTrack = true;
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <EsimationLcdUartComm+0x744>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a56:	f003 fd99 	bl	800658c <HAL_GetTick>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002a5e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
				}
			} // end PLAY status
			SetRBufferIndex(3);
 8002a66:	2003      	movs	r0, #3
 8002a68:	f7ff fc4a 	bl	8002300 <SetRBufferIndex>
 8002a6c:	e002      	b.n	8002a74 <EsimationLcdUartComm+0x708>
		} // end command
		else
		{
			SetRBufferIndex(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7ff fc46 	bl	8002300 <SetRBufferIndex>
		}
	}

	if (lastVolumeSetFlag == 1)
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <EsimationLcdUartComm+0x72a>
	{
		if (HAL_GetTick() - lastVolumeTime > 200) {
 8002a7c:	f003 fd86 	bl	800658c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <EsimationLcdUartComm+0x734>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2bc8      	cmp	r3, #200	; 0xc8
 8002a8a:	d904      	bls.n	8002a96 <EsimationLcdUartComm+0x72a>
			SetAudioVolume();
 8002a8c:	f7ff fc54 	bl	8002338 <SetAudioVolume>
			lastVolumeSetFlag = 0;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <EsimationLcdUartComm+0x738>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000e420 	.word	0x2000e420
 8002aa4:	2000e424 	.word	0x2000e424
 8002aa8:	0801f9c4 	.word	0x0801f9c4
 8002aac:	0801f9d8 	.word	0x0801f9d8
 8002ab0:	2000e41d 	.word	0x2000e41d
 8002ab4:	0801f9e4 	.word	0x0801f9e4
 8002ab8:	0801f9f8 	.word	0x0801f9f8
 8002abc:	0801fa04 	.word	0x0801fa04
 8002ac0:	0801fa14 	.word	0x0801fa14
 8002ac4:	0801fa20 	.word	0x0801fa20
 8002ac8:	0801fa34 	.word	0x0801fa34
 8002acc:	0801fa40 	.word	0x0801fa40
 8002ad0:	0801fa58 	.word	0x0801fa58
 8002ad4:	0801fa68 	.word	0x0801fa68
 8002ad8:	0801fa78 	.word	0x0801fa78
 8002adc:	0801fa84 	.word	0x0801fa84
 8002ae0:	0801fa98 	.word	0x0801fa98
 8002ae4:	0801faa8 	.word	0x0801faa8
 8002ae8:	0801fabc 	.word	0x0801fabc
 8002aec:	0801facc 	.word	0x0801facc
 8002af0:	0801fae0 	.word	0x0801fae0

08002af4 <m2m_ble_wifi_callback>:
 {
	 while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
 }

 static void m2m_ble_wifi_callback(uint8 u8MsgType, void * pvMsg)
 {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
	 if (u8MsgType == M2M_WIFI_RESP_BLE_API_RECV)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b22      	cmp	r3, #34	; 0x22
 8002b04:	d10a      	bne.n	8002b1c <m2m_ble_wifi_callback+0x28>
	 {
		 tstrM2mBleApiMsg* rx = (tstrM2mBleApiMsg*)pvMsg;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
#ifdef BLE_API_DBG
		 M2M_INFO("BLE_API_RECV:%x:%x:%x:%x:%x:%x\n", \
			rx->u16Len, rx->data[0], rx->data[1], rx->data[2], rx->data[3], rx->data[4]);
#endif
		 platform_receive(rx->data, rx->u16Len);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f01b fa50 	bl	801dfba <platform_receive>
		 return;
 8002b1a:	e009      	b.n	8002b30 <m2m_ble_wifi_callback+0x3c>
	 }

	 if (gpfBleAppWifiCb) {
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <m2m_ble_wifi_callback+0x44>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <m2m_ble_wifi_callback+0x3c>
		 gpfBleAppWifiCb(u8MsgType, pvMsg);
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <m2m_ble_wifi_callback+0x44>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4798      	blx	r3
	 }
 }
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000e428 	.word	0x2000e428

08002b3c <m2m_ble_wifi_init>:
	return AT_BLE_SUCCESS;
}


sint8 m2m_ble_wifi_init(tstrWifiInitParam * param)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	gpfBleAppWifiCb = param->pfAppWifiCb;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <m2m_ble_wifi_init+0x28>)
 8002b4a:	6013      	str	r3, [r2, #0]
	param->pfAppWifiCb = m2m_ble_wifi_callback;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <m2m_ble_wifi_init+0x2c>)
 8002b50:	601a      	str	r2, [r3, #0]
#ifdef ETH_MODE
	param->strEthInitParam.pfAppWifiCb = m2m_ble_wifi_callback;
#endif
	return m2m_wifi_init(param);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f017 fcb0 	bl	801a4b8 <m2m_wifi_init>
 8002b58:	4603      	mov	r3, r0

}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000e428 	.word	0x2000e428
 8002b68:	08002af5 	.word	0x08002af5

08002b6c <__io_putchar>:

/* USER CODE BEGIN PFP */
void StartCommTask(void *argument);
void StartWiFiProvTask(void *argument);

int __io_putchar(int ch) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart7, (uint8_t*) &ch, 1, 100);
 8002b74:	1d39      	adds	r1, r7, #4
 8002b76:	2364      	movs	r3, #100	; 0x64
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4804      	ldr	r0, [pc, #16]	; (8002b8c <__io_putchar+0x20>)
 8002b7c:	f009 fa51 	bl	800c022 <HAL_UART_Transmit>
	return ch;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	2000e884 	.word	0x2000e884

08002b90 <B2D>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t B2D(uint8_t byte) {
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
	uint8_t low, high;
	low = byte & 0x0F;
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0F) * 10;
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	73bb      	strb	r3, [r7, #14]
	return high + low;
 8002bb2:	7bba      	ldrb	r2, [r7, #14]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b2db      	uxtb	r3, r3
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <D2B>:

uint8_t D2B(uint8_t byte) {
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
	return ((byte / 10) << 4) + (byte % 10);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <D2B+0x40>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	08db      	lsrs	r3, r3, #3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	b2d8      	uxtb	r0, r3
 8002be2:	79fa      	ldrb	r2, [r7, #7]
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <D2B+0x40>)
 8002be6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bea:	08d9      	lsrs	r1, r3, #3
 8002bec:	460b      	mov	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4403      	add	r3, r0
 8002bfa:	b2db      	uxtb	r3, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	cccccccd 	.word	0xcccccccd

08002c0c <StartBTUartReceiveProc>:

static uint8_t btRxBuffer[1];
static uint8_t wifiRxBuffer[1];

void StartBTUartReceiveProc(void) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart2, btRxBuffer, 1) != HAL_OK)
 8002c10:	2201      	movs	r2, #1
 8002c12:	4905      	ldr	r1, [pc, #20]	; (8002c28 <StartBTUartReceiveProc+0x1c>)
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <StartBTUartReceiveProc+0x20>)
 8002c16:	f009 fa96 	bl	800c146 <HAL_UART_Receive_IT>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <StartBTUartReceiveProc+0x18>
		Error_Handler();
 8002c20:	f002 fba4 	bl	800536c <Error_Handler>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200133cc 	.word	0x200133cc
 8002c2c:	2000e90c 	.word	0x2000e90c

08002c30 <BTUartReceiveCallback>:

void BTUartReceiveCallback(UART_HandleTypeDef *huart) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <BTUartReceiveCallback+0x24>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d104      	bne.n	8002c4c <BTUartReceiveCallback+0x1c>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &btRxBuffer, 1, 100);
		HAL_UART_Receive_IT(&huart2, btRxBuffer, 1);
 8002c42:	2201      	movs	r2, #1
 8002c44:	4904      	ldr	r1, [pc, #16]	; (8002c58 <BTUartReceiveCallback+0x28>)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <BTUartReceiveCallback+0x2c>)
 8002c48:	f009 fa7d 	bl	800c146 <HAL_UART_Receive_IT>
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40004400 	.word	0x40004400
 8002c58:	200133cc 	.word	0x200133cc
 8002c5c:	2000e90c 	.word	0x2000e90c

08002c60 <StartWiFiUartReceiveProc>:

void StartWiFiUartReceiveProc(void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart3, wifiRxBuffer, 1) != HAL_OK)
 8002c64:	2201      	movs	r2, #1
 8002c66:	4905      	ldr	r1, [pc, #20]	; (8002c7c <StartWiFiUartReceiveProc+0x1c>)
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <StartWiFiUartReceiveProc+0x20>)
 8002c6a:	f009 fa6c 	bl	800c146 <HAL_UART_Receive_IT>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <StartWiFiUartReceiveProc+0x18>
		Error_Handler();
 8002c74:	f002 fb7a 	bl	800536c <Error_Handler>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200133d0 	.word	0x200133d0
 8002c80:	2000e950 	.word	0x2000e950

08002c84 <WiFiUartReceiveCallback>:

void WiFiUartReceiveCallback(UART_HandleTypeDef *huart) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <WiFiUartReceiveCallback+0x24>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d104      	bne.n	8002ca0 <WiFiUartReceiveCallback+0x1c>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &wifiRxBuffer, 1, 100);
		HAL_UART_Receive_IT(&huart3, wifiRxBuffer, 1);
 8002c96:	2201      	movs	r2, #1
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <WiFiUartReceiveCallback+0x28>)
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <WiFiUartReceiveCallback+0x2c>)
 8002c9c:	f009 fa53 	bl	800c146 <HAL_UART_Receive_IT>
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40004800 	.word	0x40004800
 8002cac:	200133d0 	.word	0x200133d0
 8002cb0:	2000e950 	.word	0x2000e950

08002cb4 <SetLedStrip>:
	uint16_t blue;
	uint16_t w6500;
	uint16_t w2400;
} LedStrip;

void SetLedStrip(LedStrip led) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led.blue);
 8002cc0:	893a      	ldrh	r2, [r7, #8]
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <SetLedStrip+0x40>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, led.red);
 8002cc8:	88ba      	ldrh	r2, [r7, #4]
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <SetLedStrip+0x44>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led.w2400);
 8002cd0:	89ba      	ldrh	r2, [r7, #12]
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <SetLedStrip+0x48>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, led.w6500);
 8002cd8:	897a      	ldrh	r2, [r7, #10]
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <SetLedStrip+0x4c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, led.green);
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <SetLedStrip+0x4c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	2000e764 	.word	0x2000e764
 8002cf8:	2000e7ac 	.word	0x2000e7ac
 8002cfc:	2000e7f4 	.word	0x2000e7f4
 8002d00:	2000e83c 	.word	0x2000e83c

08002d04 <pwm_update_duty_cycle>:

void pwm_update_duty_cycle(uint8_t red, uint8_t green, uint8_t blue,
		uint8_t white, uint8_t w_white) {
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	4603      	mov	r3, r0
 8002d18:	71bb      	strb	r3, [r7, #6]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	717b      	strb	r3, [r7, #5]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	713b      	strb	r3, [r7, #4]
	LedStrip ledstrip;
	ledstrip.red = red;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	81bb      	strh	r3, [r7, #12]
	ledstrip.green = green;
 8002d28:	79bb      	ldrb	r3, [r7, #6]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	81fb      	strh	r3, [r7, #14]
	ledstrip.blue = blue;
 8002d2e:	797b      	ldrb	r3, [r7, #5]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	823b      	strh	r3, [r7, #16]
	ledstrip.w2400 = white;
 8002d34:	793b      	ldrb	r3, [r7, #4]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	82bb      	strh	r3, [r7, #20]
	ledstrip.w6500 = w_white;
 8002d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	827b      	strh	r3, [r7, #18]
	SetLedStrip(ledstrip);
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d4a:	f7ff ffb3 	bl	8002cb4 <SetLedStrip>
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
	...

08002d58 <StartPlayAudioFile>:

void StartPlayAudioFile(char *filename) {
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af06      	add	r7, sp, #24
 8002d5e:	60f8      	str	r0, [r7, #12]
	if (playState == PLAY_STARTED)
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <StartPlayAudioFile+0x18c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d101      	bne.n	8002d6c <StartPlayAudioFile+0x14>
		sgtl5000_stop_play();
 8002d68:	f002 fbca 	bl	8005500 <sgtl5000_stop_play>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	495e      	ldr	r1, [pc, #376]	; (8002ee8 <StartPlayAudioFile+0x190>)
 8002d70:	485e      	ldr	r0, [pc, #376]	; (8002eec <StartPlayAudioFile+0x194>)
 8002d72:	f007 f919 	bl	8009fa8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BCD);
 8002d76:	2201      	movs	r2, #1
 8002d78:	495d      	ldr	r1, [pc, #372]	; (8002ef0 <StartPlayAudioFile+0x198>)
 8002d7a:	485c      	ldr	r0, [pc, #368]	; (8002eec <StartPlayAudioFile+0x194>)
 8002d7c:	f007 f9f6 	bl	800a16c <HAL_RTC_GetDate>

	/* Mount SDCARD */
	if (f_mount(&fs, "", 0) != FR_OK)
 8002d80:	2200      	movs	r2, #0
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <StartPlayAudioFile+0x19c>)
 8002d84:	485c      	ldr	r0, [pc, #368]	; (8002ef8 <StartPlayAudioFile+0x1a0>)
 8002d86:	f010 ff87 	bl	8013c98 <f_mount>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <StartPlayAudioFile+0x3c>
		Error_Handler();
 8002d90:	f002 faec 	bl	800536c <Error_Handler>

	/* Open file to write */
	if (f_open(&fil, "logTXT.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE)
 8002d94:	2233      	movs	r2, #51	; 0x33
 8002d96:	4959      	ldr	r1, [pc, #356]	; (8002efc <StartPlayAudioFile+0x1a4>)
 8002d98:	4859      	ldr	r0, [pc, #356]	; (8002f00 <StartPlayAudioFile+0x1a8>)
 8002d9a:	f010 ffe1 	bl	8013d60 <f_open>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <StartPlayAudioFile+0x50>
			!= FR_OK)
		Error_Handler();
 8002da4:	f002 fae2 	bl	800536c <Error_Handler>

	/* Check freeSpace space */
	if (f_getfree("", &fre_clust, &pfs) != FR_OK)
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <StartPlayAudioFile+0x1ac>)
 8002daa:	4957      	ldr	r1, [pc, #348]	; (8002f08 <StartPlayAudioFile+0x1b0>)
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <StartPlayAudioFile+0x19c>)
 8002dae:	f012 f91e 	bl	8014fee <f_getfree>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <StartPlayAudioFile+0x64>
		Error_Handler();
 8002db8:	f002 fad8 	bl	800536c <Error_Handler>

	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <StartPlayAudioFile+0x1ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	3b02      	subs	r3, #2
 8002dc4:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <StartPlayAudioFile+0x1ac>)
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	8952      	ldrh	r2, [r2, #10]
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fce2 	bl	8000798 <__aeabi_ui2d>
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <StartPlayAudioFile+0x1b4>)
 8002dda:	f7fd fa71 	bl	80002c0 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fd51 	bl	800088c <__aeabi_d2uiz>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <StartPlayAudioFile+0x1b8>)
 8002dee:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <StartPlayAudioFile+0x1ac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	895b      	ldrh	r3, [r3, #10]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <StartPlayAudioFile+0x1b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fcc9 	bl	8000798 <__aeabi_ui2d>
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b40      	ldr	r3, [pc, #256]	; (8002f0c <StartPlayAudioFile+0x1b4>)
 8002e0c:	f7fd fa58 	bl	80002c0 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fd38 	bl	800088c <__aeabi_d2uiz>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	; (8002f14 <StartPlayAudioFile+0x1bc>)
 8002e20:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if (freeSpace < 1)
 8002e22:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <StartPlayAudioFile+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <StartPlayAudioFile+0xd6>
		Error_Handler();
 8002e2a:	f002 fa9f 	bl	800536c <Error_Handler>

	/* Writing text */

	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
			filename, B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <StartPlayAudioFile+0x198>)
 8002e30:	78db      	ldrb	r3, [r3, #3]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff feac 	bl	8002b90 <B2D>
 8002e38:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e3a:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
			filename, B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <StartPlayAudioFile+0x198>)
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fea4 	bl	8002b90 <B2D>
 8002e48:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e4a:	461d      	mov	r5, r3
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <StartPlayAudioFile+0x198>)
 8002e4e:	789b      	ldrb	r3, [r3, #2]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fe9d 	bl	8002b90 <B2D>
 8002e56:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e58:	461e      	mov	r6, r3
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <StartPlayAudioFile+0x190>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe96 	bl	8002b90 <B2D>
 8002e64:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e66:	60bb      	str	r3, [r7, #8]
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <StartPlayAudioFile+0x190>)
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fe8f 	bl	8002b90 <B2D>
 8002e72:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e74:	607b      	str	r3, [r7, #4]
			B2D(rtc_time.Seconds));
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <StartPlayAudioFile+0x190>)
 8002e78:	789b      	ldrb	r3, [r3, #2]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe88 	bl	8002b90 <B2D>
 8002e80:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e82:	9304      	str	r3, [sp, #16]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	9203      	str	r2, [sp, #12]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	9601      	str	r6, [sp, #4]
 8002e8e:	9500      	str	r5, [sp, #0]
 8002e90:	4623      	mov	r3, r4
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4920      	ldr	r1, [pc, #128]	; (8002f18 <StartPlayAudioFile+0x1c0>)
 8002e96:	4821      	ldr	r0, [pc, #132]	; (8002f1c <StartPlayAudioFile+0x1c4>)
 8002e98:	f01b fafa 	bl	801e490 <siprintf>
	f_puts(strLogBuffer, &fil);
 8002e9c:	4918      	ldr	r1, [pc, #96]	; (8002f00 <StartPlayAudioFile+0x1a8>)
 8002e9e:	481f      	ldr	r0, [pc, #124]	; (8002f1c <StartPlayAudioFile+0x1c4>)
 8002ea0:	f012 fa15 	bl	80152ce <f_puts>

	/* Close file */
	if (f_close(&fil) != FR_OK)
 8002ea4:	4816      	ldr	r0, [pc, #88]	; (8002f00 <StartPlayAudioFile+0x1a8>)
 8002ea6:	f011 fe05 	bl	8014ab4 <f_close>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <StartPlayAudioFile+0x15c>
		Error_Handler();
 8002eb0:	f002 fa5c 	bl	800536c <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <StartPlayAudioFile+0x19c>)
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f010 feed 	bl	8013c98 <f_mount>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <StartPlayAudioFile+0x170>
		Error_Handler();
 8002ec4:	f002 fa52 	bl	800536c <Error_Handler>

	sprintf(audioFileName, "%s%s", "0:/", filename);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <StartPlayAudioFile+0x1c8>)
 8002ecc:	4915      	ldr	r1, [pc, #84]	; (8002f24 <StartPlayAudioFile+0x1cc>)
 8002ece:	4816      	ldr	r0, [pc, #88]	; (8002f28 <StartPlayAudioFile+0x1d0>)
 8002ed0:	f01b fade 	bl	801e490 <siprintf>
	playState = PLAY_READY;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <StartPlayAudioFile+0x18c>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000e9a0 	.word	0x2000e9a0
 8002ee8:	200133b4 	.word	0x200133b4
 8002eec:	2000e5dc 	.word	0x2000e5dc
 8002ef0:	200133b0 	.word	0x200133b0
 8002ef4:	0801fb14 	.word	0x0801fb14
 8002ef8:	2000ea24 	.word	0x2000ea24
 8002efc:	0801fb18 	.word	0x0801fb18
 8002f00:	2000fa64 	.word	0x2000fa64
 8002f04:	2000fa60 	.word	0x2000fa60
 8002f08:	20010a94 	.word	0x20010a94
 8002f0c:	3fe00000 	.word	0x3fe00000
 8002f10:	20010a98 	.word	0x20010a98
 8002f14:	20010a9c 	.word	0x20010a9c
 8002f18:	0801fb24 	.word	0x0801fb24
 8002f1c:	200113b0 	.word	0x200113b0
 8002f20:	0801fb54 	.word	0x0801fb54
 8002f24:	0801fb58 	.word	0x0801fb58
 8002f28:	2000e9a4 	.word	0x2000e9a4

08002f2c <SetPlayState>:

void SetPlayState(PlayState playstate) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
	playState = playstate;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <SetPlayState+0x1c>)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	7013      	strb	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	2000e9a0 	.word	0x2000e9a0

08002f4c <app_wifi_init>:

static void app_wifi_init(tpfAppWifiCb wifi_cb_func) {
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b098      	sub	sp, #96	; 0x60
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	6078      	str	r0, [r7, #4]
	tstrWifiInitParam param;
	uint32 pinmask = (M2M_PERIPH_PULLUP_DIS_HOST_WAKEUP
 8002f54:	f240 3301 	movw	r3, #769	; 0x301
 8002f58:	64fb      	str	r3, [r7, #76]	; 0x4c

	sint8 ret;

	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;
	uint8 deviceName[] = M2M_DEVICE_NAME;
 8002f5a:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <app_wifi_init+0x25c>)
 8002f5c:	f107 0414 	add.w	r4, r7, #20
 8002f60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f62:	c407      	stmia	r4!, {r0, r1, r2}
 8002f64:	8023      	strh	r3, [r4, #0]
 8002f66:	3402      	adds	r4, #2
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	7023      	strb	r3, [r4, #0]

#ifdef _STATIC_PS_
	nm_bsp_register_wake_isr(wake_cb, PS_SLEEP_TIME_MS);
#endif

	m2m_memset((uint8*) &param, 0, sizeof(param));
 8002f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f70:	221c      	movs	r2, #28
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f015 ffe1 	bl	8018f3c <m2m_memset>
	param.pfAppWifiCb = wifi_cb_func;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef ETH_MODE
	param.strEthInitParam.pfAppEthCb = ethernet_demo_cb;
	param.strEthInitParam.au8ethRcvBuf = gau8ethRcvBuf;
	param.strEthInitParam.u16ethRcvBufSize = sizeof(gau8ethRcvBuf);
#endif
	ret = m2m_ble_wifi_init(&param);
 8002f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fdda 	bl	8002b3c <m2m_ble_wifi_init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	if (M2M_SUCCESS != ret) {
 8002f8e:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01b      	beq.n	8002fce <app_wifi_init+0x82>
		M2M_ERR("Driver Init Failed <%d>\n", ret);
 8002f96:	f240 128f 	movw	r2, #399	; 0x18f
 8002f9a:	4984      	ldr	r1, [pc, #528]	; (80031ac <app_wifi_init+0x260>)
 8002f9c:	4884      	ldr	r0, [pc, #528]	; (80031b0 <app_wifi_init+0x264>)
 8002f9e:	f01b fa01 	bl	801e3a4 <iprintf>
 8002fa2:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4882      	ldr	r0, [pc, #520]	; (80031b4 <app_wifi_init+0x268>)
 8002faa:	f01b f9fb 	bl	801e3a4 <iprintf>
 8002fae:	200d      	movs	r0, #13
 8002fb0:	f01b fa0a 	bl	801e3c8 <putchar>
		M2M_ERR("Resetting\n");
 8002fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fb8:	497c      	ldr	r1, [pc, #496]	; (80031ac <app_wifi_init+0x260>)
 8002fba:	487d      	ldr	r0, [pc, #500]	; (80031b0 <app_wifi_init+0x264>)
 8002fbc:	f01b f9f2 	bl	801e3a4 <iprintf>
 8002fc0:	487d      	ldr	r0, [pc, #500]	; (80031b8 <app_wifi_init+0x26c>)
 8002fc2:	f01b fa5d 	bl	801e480 <puts>
 8002fc6:	200d      	movs	r0, #13
 8002fc8:	f01b f9fe 	bl	801e3c8 <putchar>
		// Catastrophe - problem with booting. Nothing but to try and reset
		//system_reset(); //ToDo TF

		while (1) {
 8002fcc:	e7fe      	b.n	8002fcc <app_wifi_init+0x80>
		}
	}

	m2m_periph_pullup_ctrl(pinmask, 0);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fd2:	f016 ff79 	bl	8019ec8 <m2m_periph_pullup_ctrl>

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
 8002fd6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f017 fe49 	bl	801ac78 <m2m_wifi_get_otp_mac_address>
	if (!u8IsMacAddrValid) {
 8002fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <app_wifi_init+0xd0>
		uint8 DEFAULT_MAC[] = MAC_ADDRESS;
 8002fee:	4a73      	ldr	r2, [pc, #460]	; (80031bc <app_wifi_init+0x270>)
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff8:	6018      	str	r0, [r3, #0]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	8019      	strh	r1, [r3, #0]
		M2M_INFO("Default MAC\n");
 8002ffe:	4870      	ldr	r0, [pc, #448]	; (80031c0 <app_wifi_init+0x274>)
 8003000:	f01b f9d0 	bl	801e3a4 <iprintf>
 8003004:	486f      	ldr	r0, [pc, #444]	; (80031c4 <app_wifi_init+0x278>)
 8003006:	f01b fa3b 	bl	801e480 <puts>
 800300a:	200d      	movs	r0, #13
 800300c:	f01b f9dc 	bl	801e3c8 <putchar>
		m2m_wifi_set_mac_address(DEFAULT_MAC);
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4618      	mov	r0, r3
 8003016:	f017 fe12 	bl	801ac3e <m2m_wifi_set_mac_address>
 800301a:	e008      	b.n	800302e <app_wifi_init+0xe2>
	} else {
		M2M_INFO("OTP MAC\n");
 800301c:	4868      	ldr	r0, [pc, #416]	; (80031c0 <app_wifi_init+0x274>)
 800301e:	f01b f9c1 	bl	801e3a4 <iprintf>
 8003022:	4869      	ldr	r0, [pc, #420]	; (80031c8 <app_wifi_init+0x27c>)
 8003024:	f01b fa2c 	bl	801e480 <puts>
 8003028:	200d      	movs	r0, #13
 800302a:	f01b f9cd 	bl	801e3c8 <putchar>
	}
	m2m_wifi_get_mac_address(mac_addr);
 800302e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003032:	4618      	mov	r0, r3
 8003034:	f017 fe3d 	bl	801acb2 <m2m_wifi_get_mac_address>
	M2M_INFO("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac_addr[0],
 8003038:	4861      	ldr	r0, [pc, #388]	; (80031c0 <app_wifi_init+0x274>)
 800303a:	f01b f9b3 	bl	801e3a4 <iprintf>
 800303e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003042:	4618      	mov	r0, r3
 8003044:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003048:	461c      	mov	r4, r3
 800304a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800304e:	461d      	mov	r5, r3
 8003050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003054:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003058:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800305c:	9102      	str	r1, [sp, #8]
 800305e:	9201      	str	r2, [sp, #4]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	462b      	mov	r3, r5
 8003064:	4622      	mov	r2, r4
 8003066:	4601      	mov	r1, r0
 8003068:	4858      	ldr	r0, [pc, #352]	; (80031cc <app_wifi_init+0x280>)
 800306a:	f01b f99b 	bl	801e3a4 <iprintf>
 800306e:	200d      	movs	r0, #13
 8003070:	f01b f9aa 	bl	801e3c8 <putchar>
	/* Name must be in the format WINC3400_00:00 */
	{
#define HEX2ASCII(x) (((x)>=10)? (((x)-10)+'A') : ((x)+'0'))

		uint16 len;
		len = m2m_strlen(deviceName);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4618      	mov	r0, r3
 800307a:	f015 ff7c 	bl	8018f76 <m2m_strlen>
 800307e:	4603      	mov	r3, r0
 8003080:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		if (len >= 5) {
 8003084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003088:	2b04      	cmp	r3, #4
 800308a:	d96f      	bls.n	800316c <app_wifi_init+0x220>
			deviceName[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
 800308c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	2b09      	cmp	r3, #9
 8003096:	dd07      	ble.n	80030a8 <app_wifi_init+0x15c>
 8003098:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3337      	adds	r3, #55	; 0x37
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e006      	b.n	80030b6 <app_wifi_init+0x16a>
 80030a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3330      	adds	r3, #48	; 0x30
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030ba:	3a01      	subs	r2, #1
 80030bc:	3250      	adds	r2, #80	; 0x50
 80030be:	443a      	add	r2, r7
 80030c0:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
 80030c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	dd06      	ble.n	80030e2 <app_wifi_init+0x196>
 80030d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3337      	adds	r3, #55	; 0x37
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e005      	b.n	80030ee <app_wifi_init+0x1a2>
 80030e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3330      	adds	r3, #48	; 0x30
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030f2:	3a02      	subs	r2, #2
 80030f4:	3250      	adds	r2, #80	; 0x50
 80030f6:	443a      	add	r2, r7
 80030f8:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
 80030fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	2b09      	cmp	r3, #9
 8003106:	dd07      	ble.n	8003118 <app_wifi_init+0x1cc>
 8003108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3337      	adds	r3, #55	; 0x37
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e006      	b.n	8003126 <app_wifi_init+0x1da>
 8003118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3330      	adds	r3, #48	; 0x30
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800312a:	3a04      	subs	r2, #4
 800312c:	3250      	adds	r2, #80	; 0x50
 800312e:	443a      	add	r2, r7
 8003130:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
 8003134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	2b09      	cmp	r3, #9
 8003142:	dd06      	ble.n	8003152 <app_wifi_init+0x206>
 8003144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3337      	adds	r3, #55	; 0x37
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e005      	b.n	800315e <app_wifi_init+0x212>
 8003152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	b2db      	uxtb	r3, r3
 800315a:	3330      	adds	r3, #48	; 0x30
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003162:	3a05      	subs	r2, #5
 8003164:	3250      	adds	r2, #80	; 0x50
 8003166:	443a      	add	r2, r7
 8003168:	f802 3c3c 	strb.w	r3, [r2, #-60]
		}
	}
	m2m_wifi_set_device_name((uint8*) deviceName,
			(uint8) m2m_strlen((uint8*) deviceName));
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4618      	mov	r0, r3
 8003172:	f015 ff00 	bl	8018f76 <m2m_strlen>
 8003176:	4603      	mov	r3, r0
	m2m_wifi_set_device_name((uint8*) deviceName,
 8003178:	b2da      	uxtb	r2, r3
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f017 fe11 	bl	801ada8 <m2m_wifi_set_device_name>
	}
#elif (defined _STATIC_PS_)
	M2M_INFO("M2M_PS_MANUAL\r\n");
	m2m_wifi_set_sleep_mode(M2M_PS_MANUAL, 1);
#else
	M2M_INFO("M2M_NO_PS\r\n");
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <app_wifi_init+0x274>)
 8003188:	f01b f90c 	bl	801e3a4 <iprintf>
 800318c:	4810      	ldr	r0, [pc, #64]	; (80031d0 <app_wifi_init+0x284>)
 800318e:	f01b f977 	bl	801e480 <puts>
 8003192:	200d      	movs	r0, #13
 8003194:	f01b f918 	bl	801e3c8 <putchar>
	m2m_wifi_set_sleep_mode(M2M_NO_PS, 1);
 8003198:	2101      	movs	r1, #1
 800319a:	2000      	movs	r0, #0
 800319c:	f017 fdce 	bl	801ad3c <m2m_wifi_set_sleep_mode>
#endif
}
 80031a0:	bf00      	nop
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bdb0      	pop	{r4, r5, r7, pc}
 80031a8:	0801fbf4 	.word	0x0801fbf4
 80031ac:	0802568c 	.word	0x0802568c
 80031b0:	0801fb60 	.word	0x0801fb60
 80031b4:	0801fb74 	.word	0x0801fb74
 80031b8:	0801fb90 	.word	0x0801fb90
 80031bc:	0801fc04 	.word	0x0801fc04
 80031c0:	0801fb9c 	.word	0x0801fb9c
 80031c4:	0801fba8 	.word	0x0801fba8
 80031c8:	0801fbb4 	.word	0x0801fbb4
 80031cc:	0801fbbc 	.word	0x0801fbbc
 80031d0:	0801fbe8 	.word	0x0801fbe8

080031d4 <app_wifi_handle_event>:
 *  - [M2M_WIFI_REQ_DHCP_CONF](@ref M2M_WIFI_REQ_DHCP_CONF)
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void app_wifi_handle_event(uint8 u8MsgType, void *pvMsg) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b094      	sub	sp, #80	; 0x50
 80031d8:	af02      	add	r7, sp, #8
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
	if (u8MsgType == M2M_WIFI_RESP_CON_STATE_CHANGED) {
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b2c      	cmp	r3, #44	; 0x2c
 80031e4:	d143      	bne.n	800326e <app_wifi_handle_event+0x9a>
		tstrM2mWifiStateChanged *pstrWifiState =
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
				(tstrM2mWifiStateChanged*) pvMsg;

		M2M_INFO("Wifi State :: %s ::\r\n",
 80031ea:	48a5      	ldr	r0, [pc, #660]	; (8003480 <app_wifi_handle_event+0x2ac>)
 80031ec:	f01b f8da 	bl	801e3a4 <iprintf>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <app_wifi_handle_event+0x28>
 80031f8:	4ba2      	ldr	r3, [pc, #648]	; (8003484 <app_wifi_handle_event+0x2b0>)
 80031fa:	e000      	b.n	80031fe <app_wifi_handle_event+0x2a>
 80031fc:	4ba2      	ldr	r3, [pc, #648]	; (8003488 <app_wifi_handle_event+0x2b4>)
 80031fe:	4619      	mov	r1, r3
 8003200:	48a2      	ldr	r0, [pc, #648]	; (800348c <app_wifi_handle_event+0x2b8>)
 8003202:	f01b f8cf 	bl	801e3a4 <iprintf>
 8003206:	200d      	movs	r0, #13
 8003208:	f01b f8de 	bl	801e3c8 <putchar>
				pstrWifiState->u8CurrState ? "CONNECTED" : "DISCONNECTED");

		if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d117      	bne.n	8003244 <app_wifi_handle_event+0x70>
			gu8WiFiConnectionState = M2M_WIFI_DISCONNECTED;
 8003214:	4b9e      	ldr	r3, [pc, #632]	; (8003490 <app_wifi_handle_event+0x2bc>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
			gbConnectedWifi = false;
 800321a:	4b9e      	ldr	r3, [pc, #632]	; (8003494 <app_wifi_handle_event+0x2c0>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
			gbHostIpByName = false;
 8003220:	4b9d      	ldr	r3, [pc, #628]	; (8003498 <app_wifi_handle_event+0x2c4>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
			pwm_update_duty_cycle(255,255,255,0,0);
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2300      	movs	r3, #0
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	21ff      	movs	r1, #255	; 0xff
 8003230:	20ff      	movs	r0, #255	; 0xff
 8003232:	f7ff fd67 	bl	8002d04 <pwm_update_duty_cycle>
			HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800323c:	4897      	ldr	r0, [pc, #604]	; (800349c <app_wifi_handle_event+0x2c8>)
 800323e:	f004 f897 	bl	8007370 <HAL_GPIO_WritePin>

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
			Error_Handler();
		}
	}
}
 8003242:	e118      	b.n	8003476 <app_wifi_handle_event+0x2a2>
            pwm_update_duty_cycle(0,0,0,0,0);
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2000      	movs	r0, #0
 8003250:	f7ff fd58 	bl	8002d04 <pwm_update_duty_cycle>
    		osDelay(500);
 8003254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003258:	f012 fae8 	bl	801582c <osDelay>
            pwm_update_duty_cycle(255,255,255,0,0);
 800325c:	2300      	movs	r3, #0
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	22ff      	movs	r2, #255	; 0xff
 8003264:	21ff      	movs	r1, #255	; 0xff
 8003266:	20ff      	movs	r0, #255	; 0xff
 8003268:	f7ff fd4c 	bl	8002d04 <pwm_update_duty_cycle>
}
 800326c:	e103      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_REQ_DHCP_CONF) {
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b32      	cmp	r3, #50	; 0x32
 8003272:	d126      	bne.n	80032c2 <app_wifi_handle_event+0xee>
		tstrM2MIPConfig *pstrM2MIpConfig = (tstrM2MIPConfig*) pvMsg;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8 *pu8IPAddress = (uint8*) &pstrM2MIpConfig->u32StaticIP;
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
		M2M_INFO("DHCP IP Address :: %u.%u.%u.%u ::\n", pu8IPAddress[0],
 800327c:	4880      	ldr	r0, [pc, #512]	; (8003480 <app_wifi_handle_event+0x2ac>)
 800327e:	f01b f891 	bl	801e3a4 <iprintf>
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	3302      	adds	r3, #2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	3303      	adds	r3, #3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4603      	mov	r3, r0
 80032a2:	487f      	ldr	r0, [pc, #508]	; (80034a0 <app_wifi_handle_event+0x2cc>)
 80032a4:	f01b f87e 	bl	801e3a4 <iprintf>
 80032a8:	200d      	movs	r0, #13
 80032aa:	f01b f88d 	bl	801e3c8 <putchar>
		gu8WiFiConnectionState = M2M_WIFI_CONNECTED;
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <app_wifi_handle_event+0x2bc>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
		gbConnectedWifi = true;
 80032b4:	4b77      	ldr	r3, [pc, #476]	; (8003494 <app_wifi_handle_event+0x2c0>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
		gethostbyname((uint8_t*) MAIN_GMAIL_HOST_NAME);
 80032ba:	487a      	ldr	r0, [pc, #488]	; (80034a4 <app_wifi_handle_event+0x2d0>)
 80032bc:	f01a fbf6 	bl	801daac <gethostbyname>
}
 80032c0:	e0d9      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SCAN_DONE) {
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b13      	cmp	r3, #19
 80032c6:	d11b      	bne.n	8003300 <app_wifi_handle_event+0x12c>
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone*) pvMsg;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
		if (gu8WiFiConnectionState != M2M_WIFI_CONNECTED) {
 80032cc:	4b70      	ldr	r3, [pc, #448]	; (8003490 <app_wifi_handle_event+0x2bc>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	f000 80cf 	beq.w	8003476 <app_wifi_handle_event+0x2a2>
			gu8ScanIndex = 0;
 80032d8:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
			if (pstrInfo->u8NumofCh >= 1) {
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80c7 	beq.w	8003476 <app_wifi_handle_event+0x2a2>
				m2m_wifi_req_scan_result(gu8ScanIndex);
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f017 fcfb 	bl	801ace8 <m2m_wifi_req_scan_result>
				gu8ScanIndex++;
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 80032fc:	701a      	strb	r2, [r3, #0]
}
 80032fe:	e0ba      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SCAN_RESULT) {
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2b15      	cmp	r3, #21
 8003304:	d129      	bne.n	800335a <app_wifi_handle_event+0x186>
		uint8 u8NumFoundAPs = m2m_wifi_get_num_ap_found();
 8003306:	f017 fd0d 	bl	801ad24 <m2m_wifi_get_num_ap_found>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (gu8WiFiConnectionState != M2M_WIFI_CONNECTED) {
 8003310:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <app_wifi_handle_event+0x2bc>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	f000 80ad 	beq.w	8003476 <app_wifi_handle_event+0x2a2>
			tstrM2mWifiscanResult *pstrScanResult =
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
			ble_prov_scan_result(pstrScanResult, u8NumFoundAPs - gu8ScanIndex);
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003330:	f015 fc7c 	bl	8018c2c <ble_prov_scan_result>
			if (gu8ScanIndex < u8NumFoundAPs) {
 8003334:	4b5c      	ldr	r3, [pc, #368]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800333c:	429a      	cmp	r2, r3
 800333e:	f240 809a 	bls.w	8003476 <app_wifi_handle_event+0x2a2>
				m2m_wifi_req_scan_result(gu8ScanIndex);
 8003342:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f017 fcce 	bl	801ace8 <m2m_wifi_req_scan_result>
				gu8ScanIndex++;
 800334c:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <app_wifi_handle_event+0x2d4>)
 8003356:	701a      	strb	r2, [r3, #0]
}
 8003358:	e08d      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_CURRENT_RSSI) {
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d10f      	bne.n	8003380 <app_wifi_handle_event+0x1ac>
		sint8 *rssi = (sint8*) pvMsg;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
		M2M_INFO("rssi %d\n", *rssi);
 8003364:	4846      	ldr	r0, [pc, #280]	; (8003480 <app_wifi_handle_event+0x2ac>)
 8003366:	f01b f81d 	bl	801e3a4 <iprintf>
 800336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336c:	f993 3000 	ldrsb.w	r3, [r3]
 8003370:	4619      	mov	r1, r3
 8003372:	484e      	ldr	r0, [pc, #312]	; (80034ac <app_wifi_handle_event+0x2d8>)
 8003374:	f01b f816 	bl	801e3a4 <iprintf>
 8003378:	200d      	movs	r0, #13
 800337a:	f01b f825 	bl	801e3c8 <putchar>
}
 800337e:	e07a      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SET_GAIN_TABLE) {
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b24      	cmp	r3, #36	; 0x24
 8003384:	d112      	bne.n	80033ac <app_wifi_handle_event+0x1d8>
		tstrM2MGainTableRsp *pstrRsp = (tstrM2MGainTableRsp*) pvMsg;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
		M2M_ERR("Gain Table Load Fail %d\n", pstrRsp->s8ErrorCode);
 800338a:	f240 2211 	movw	r2, #529	; 0x211
 800338e:	4948      	ldr	r1, [pc, #288]	; (80034b0 <app_wifi_handle_event+0x2dc>)
 8003390:	4848      	ldr	r0, [pc, #288]	; (80034b4 <app_wifi_handle_event+0x2e0>)
 8003392:	f01b f807 	bl	801e3a4 <iprintf>
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	f993 3000 	ldrsb.w	r3, [r3]
 800339c:	4619      	mov	r1, r3
 800339e:	4846      	ldr	r0, [pc, #280]	; (80034b8 <app_wifi_handle_event+0x2e4>)
 80033a0:	f01b f800 	bl	801e3a4 <iprintf>
 80033a4:	200d      	movs	r0, #13
 80033a6:	f01b f80f 	bl	801e3c8 <putchar>
}
 80033aa:	e064      	b.n	8003476 <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_GET_SYS_TIME) {
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b1d      	cmp	r3, #29
 80033b0:	d161      	bne.n	8003476 <app_wifi_handle_event+0x2a2>
		tstrSystemTime *strSysTime_now = (tstrSystemTime*) pvMsg;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
				strSysTime_now->u8Hour, /* hour (86400 equals secs per day) */
 80033b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b8:	791b      	ldrb	r3, [r3, #4]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033ba:	4619      	mov	r1, r3
				strSysTime_now->u8Minute, /* minute (3600 equals secs per minute) */
 80033bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033be:	795b      	ldrb	r3, [r3, #5]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033c0:	461a      	mov	r2, r3
				strSysTime_now->u8Second); /* second */
 80033c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c4:	799b      	ldrb	r3, [r3, #6]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033c6:	483d      	ldr	r0, [pc, #244]	; (80034bc <app_wifi_handle_event+0x2e8>)
 80033c8:	f01a ffec 	bl	801e3a4 <iprintf>
		RTC_TimeTypeDef sTime = { 0 };
 80033cc:	f107 0310 	add.w	r3, r7, #16
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = { 0 };
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
		sTime.Hours = D2B(strSysTime_now->u8Hour);
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	791b      	ldrb	r3, [r3, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fbef 	bl	8002bc8 <D2B>
 80033ea:	4603      	mov	r3, r0
 80033ec:	743b      	strb	r3, [r7, #16]
		sTime.Minutes = D2B(strSysTime_now->u8Minute);
 80033ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f0:	795b      	ldrb	r3, [r3, #5]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fbe8 	bl	8002bc8 <D2B>
 80033f8:	4603      	mov	r3, r0
 80033fa:	747b      	strb	r3, [r7, #17]
		sTime.Seconds = D2B(strSysTime_now->u8Second);
 80033fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fe:	799b      	ldrb	r3, [r3, #6]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fbe1 	bl	8002bc8 <D2B>
 8003406:	4603      	mov	r3, r0
 8003408:	74bb      	strb	r3, [r7, #18]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	2201      	movs	r2, #1
 8003418:	4619      	mov	r1, r3
 800341a:	4829      	ldr	r0, [pc, #164]	; (80034c0 <app_wifi_handle_event+0x2ec>)
 800341c:	f006 fd2a 	bl	8009e74 <HAL_RTC_SetTime>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <app_wifi_handle_event+0x256>
			Error_Handler();
 8003426:	f001 ffa1 	bl	800536c <Error_Handler>
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800342a:	2304      	movs	r3, #4
 800342c:	733b      	strb	r3, [r7, #12]
		sDate.Month = D2B(strSysTime_now->u8Month);
 800342e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003430:	789b      	ldrb	r3, [r3, #2]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fbc8 	bl	8002bc8 <D2B>
 8003438:	4603      	mov	r3, r0
 800343a:	737b      	strb	r3, [r7, #13]
		sDate.Date = D2B(strSysTime_now->u8Day);
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	78db      	ldrb	r3, [r3, #3]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fbc1 	bl	8002bc8 <D2B>
 8003446:	4603      	mov	r3, r0
 8003448:	73bb      	strb	r3, [r7, #14]
		sDate.Year = D2B(strSysTime_now->u16Year - 2000);
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3330      	adds	r3, #48	; 0x30
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbb7 	bl	8002bc8 <D2B>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	2201      	movs	r2, #1
 8003464:	4619      	mov	r1, r3
 8003466:	4816      	ldr	r0, [pc, #88]	; (80034c0 <app_wifi_handle_event+0x2ec>)
 8003468:	f006 fdfc 	bl	800a064 <HAL_RTC_SetDate>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <app_wifi_handle_event+0x2a2>
			Error_Handler();
 8003472:	f001 ff7b 	bl	800536c <Error_Handler>
}
 8003476:	bf00      	nop
 8003478:	3748      	adds	r7, #72	; 0x48
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	0801fb9c 	.word	0x0801fb9c
 8003484:	0801fc0c 	.word	0x0801fc0c
 8003488:	0801fc18 	.word	0x0801fc18
 800348c:	0801fc28 	.word	0x0801fc28
 8003490:	20000005 	.word	0x20000005
 8003494:	200113ad 	.word	0x200113ad
 8003498:	200113ae 	.word	0x200113ae
 800349c:	40020000 	.word	0x40020000
 80034a0:	0801fc40 	.word	0x0801fc40
 80034a4:	0801fc64 	.word	0x0801fc64
 80034a8:	20010aa0 	.word	0x20010aa0
 80034ac:	0801fc74 	.word	0x0801fc74
 80034b0:	0802569c 	.word	0x0802569c
 80034b4:	0801fb60 	.word	0x0801fb60
 80034b8:	0801fc80 	.word	0x0801fc80
 80034bc:	0801fc9c 	.word	0x0801fc9c
 80034c0:	2000e5dc 	.word	0x2000e5dc

080034c4 <smtpConnect>:
 *
 * \param[in] None.
 *
 * \return SOCK_ERR_NO_ERROR if success, -1 if socket create error, SOCK_ERR_INVALID if socket connect error.
 */
static int8_t smtpConnect(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
	struct sockaddr_in addr_in;

	addr_in.sin_family = AF_INET;
 80034ca:	2302      	movs	r3, #2
 80034cc:	803b      	strh	r3, [r7, #0]
	addr_in.sin_port = _htons(MAIN_GMAIL_HOST_PORT);
 80034ce:	f24d 1301 	movw	r3, #53505	; 0xd101
 80034d2:	807b      	strh	r3, [r7, #2]
	addr_in.sin_addr.s_addr = gu32HostIp;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <smtpConnect+0x84>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	607b      	str	r3, [r7, #4]

	/* Create secure socket */
	if (tcp_client_socket < 0) {
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <smtpConnect+0x88>)
 80034dc:	f993 3000 	ldrsb.w	r3, [r3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da08      	bge.n	80034f6 <smtpConnect+0x32>
		tcp_client_socket = socket(AF_INET, SOCK_STREAM, SOCKET_FLAGS_SSL);
 80034e4:	2201      	movs	r2, #1
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f01a f81b 	bl	801d524 <socket>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <smtpConnect+0x88>)
 80034f4:	701a      	strb	r2, [r3, #0]
	}

	/* Check if socket was created successfully */
	if (tcp_client_socket == -1) {
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <smtpConnect+0x88>)
 80034f8:	f993 3000 	ldrsb.w	r3, [r3]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d10b      	bne.n	800351a <smtpConnect+0x56>
		printf("socket error.\r\n");
 8003502:	4813      	ldr	r0, [pc, #76]	; (8003550 <smtpConnect+0x8c>)
 8003504:	f01a ffbc 	bl	801e480 <puts>
		close(tcp_client_socket);
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <smtpConnect+0x88>)
 800350a:	f993 3000 	ldrsb.w	r3, [r3]
 800350e:	4618      	mov	r0, r3
 8003510:	f01a fa5c 	bl	801d9cc <close>
		return -1;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e011      	b.n	800353e <smtpConnect+0x7a>
	}

	/* If success, connect to socket */
	if (connect(tcp_client_socket, (struct sockaddr*) &addr_in,
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <smtpConnect+0x88>)
 800351c:	f993 3000 	ldrsb.w	r3, [r3]
 8003520:	4639      	mov	r1, r7
 8003522:	2210      	movs	r2, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f01a f8ed 	bl	801d704 <connect>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <smtpConnect+0x78>
			sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
		printf("connect error.\r\n");
 8003530:	4808      	ldr	r0, [pc, #32]	; (8003554 <smtpConnect+0x90>)
 8003532:	f01a ffa5 	bl	801e480 <puts>
		return SOCK_ERR_INVALID;
 8003536:	f06f 0308 	mvn.w	r3, #8
 800353a:	e000      	b.n	800353e <smtpConnect+0x7a>
	}

	/* Success */
	return SOCK_ERR_NO_ERROR;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20010aa4 	.word	0x20010aa4
 800354c:	20000007 	.word	0x20000007
 8003550:	0801fd54 	.word	0x0801fd54
 8003554:	0801fd64 	.word	0x0801fd64

08003558 <generateBase64Key>:
 * \param[in] input is the string to be converted to base64.
 * \param[in] basekey1 is the base64 converted output.
 *
 * \return None.
 */
static void generateBase64Key(char *input, char *basekey) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b0a4      	sub	sp, #144	; 0x90
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	/* In case the input string needs to be modified before conversion, define */
	/*  new string to pass-through Use InputStr and *pIn */
	int16_t InputLen = strlen(input);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fc fe4e 	bl	8000204 <strlen>
 8003568:	4603      	mov	r3, r0
 800356a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	char InputStr[128];
	char *pIn = (char*) InputStr;
 800356e:	f107 0308 	add.w	r3, r7, #8
 8003572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	/* Generate Base64 string, right now is only the function input parameter */
	memcpy(pIn, input, InputLen);
 8003576:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800357a:	461a      	mov	r2, r3
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003582:	f01b f97f 	bl	801e884 <memcpy>
	pIn += InputLen;
 8003586:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800358a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800358e:	4413      	add	r3, r2
 8003590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	/* to64frombits function */
	ConvertToBase64(basekey, (void*) InputStr, InputLen);
 8003594:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	4619      	mov	r1, r3
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	f7fd ff98 	bl	80014d4 <ConvertToBase64>
}
 80035a4:	bf00      	nop
 80035a6:	3790      	adds	r7, #144	; 0x90
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <smtpSendRecv>:
 * \param[in] cmdpara is the command parameter.
 * \param[in] respBuf is a pointer to the SMTP response from the server.
 *
 * \return None.
 */
static void smtpSendRecv(long socket, char *cmd, char *cmdparam, char *respBuf) {
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
	uint16_t sendLen = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	82fb      	strh	r3, [r7, #22]
	memset(gcSendRecvBuffer, 0, sizeof(gcSendRecvBuffer));
 80035be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c2:	2100      	movs	r1, #0
 80035c4:	4828      	ldr	r0, [pc, #160]	; (8003668 <smtpSendRecv+0xbc>)
 80035c6:	f01b f875 	bl	801e6b4 <memset>

	if (cmd != NULL) {
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <smtpSendRecv+0x40>
		sendLen = strlen(cmd);
 80035d0:	68b8      	ldr	r0, [r7, #8]
 80035d2:	f7fc fe17 	bl	8000204 <strlen>
 80035d6:	4603      	mov	r3, r0
 80035d8:	82fb      	strh	r3, [r7, #22]
		memcpy(gcSendRecvBuffer, cmd, strlen(cmd));
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f7fc fe12 	bl	8000204 <strlen>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4820      	ldr	r0, [pc, #128]	; (8003668 <smtpSendRecv+0xbc>)
 80035e8:	f01b f94c 	bl	801e884 <memcpy>
	}

	if (cmdparam != NULL) {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d013      	beq.n	800361a <smtpSendRecv+0x6e>
		memcpy(&gcSendRecvBuffer[sendLen], cmdparam, strlen(cmdparam));
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <smtpSendRecv+0xbc>)
 80035f6:	189c      	adds	r4, r3, r2
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fc fe03 	bl	8000204 <strlen>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4620      	mov	r0, r4
 8003606:	f01b f93d 	bl	801e884 <memcpy>
		sendLen += strlen(cmdparam);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fc fdfa 	bl	8000204 <strlen>
 8003610:	4603      	mov	r3, r0
 8003612:	b29a      	uxth	r2, r3
 8003614:	8afb      	ldrh	r3, [r7, #22]
 8003616:	4413      	add	r3, r2
 8003618:	82fb      	strh	r3, [r7, #22]
	}

	memcpy(&gcSendRecvBuffer[sendLen], cSmtpCrlf, strlen(cSmtpCrlf));
 800361a:	8afb      	ldrh	r3, [r7, #22]
 800361c:	4a12      	ldr	r2, [pc, #72]	; (8003668 <smtpSendRecv+0xbc>)
 800361e:	4413      	add	r3, r2
 8003620:	2202      	movs	r2, #2
 8003622:	4912      	ldr	r1, [pc, #72]	; (800366c <smtpSendRecv+0xc0>)
 8003624:	4618      	mov	r0, r3
 8003626:	f01b f92d 	bl	801e884 <memcpy>
	sendLen += strlen(cSmtpCrlf);
 800362a:	8afb      	ldrh	r3, [r7, #22]
 800362c:	3302      	adds	r3, #2
 800362e:	82fb      	strh	r3, [r7, #22]
	send(socket, gcSendRecvBuffer, sendLen, 0);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	b258      	sxtb	r0, r3
 8003634:	8afa      	ldrh	r2, [r7, #22]
 8003636:	2300      	movs	r3, #0
 8003638:	490b      	ldr	r1, [pc, #44]	; (8003668 <smtpSendRecv+0xbc>)
 800363a:	f01a f8c9 	bl	801d7d0 <send>

	if (respBuf != NULL) {
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <smtpSendRecv+0xb4>
		memset(respBuf, 0, MAIN_SMTP_BUF_LEN);
 8003644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003648:	2100      	movs	r1, #0
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f01b f832 	bl	801e6b4 <memset>
		recv(socket, respBuf, MAIN_SMTP_BUF_LEN, 0);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	b258      	sxtb	r0, r3
 8003654:	2300      	movs	r3, #0
 8003656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	f01a f92e 	bl	801d8bc <recv>
	}
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	20010aac 	.word	0x20010aac
 800366c:	0802565c 	.word	0x0802565c

08003670 <smtpStateHandler>:
 *
 * \param[in] None.
 *
 * \return MAIN_EMAIL_ERROR_NONE if success, MAIN_EMAIL_ERROR_FAILED if handler error.
 */
static int8_t smtpStateHandler(void) {
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	/* Check for acknowledge from SMTP server */
	switch (gu8SmtpStatus) {
 8003674:	4b5e      	ldr	r3, [pc, #376]	; (80037f0 <smtpStateHandler+0x180>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	3b02      	subs	r3, #2
 800367a:	2b0e      	cmp	r3, #14
 800367c:	f200 80b3 	bhi.w	80037e6 <smtpStateHandler+0x176>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <smtpStateHandler+0x18>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036d9 	.word	0x080036d9
 8003690:	080036ed 	.word	0x080036ed
 8003694:	08003701 	.word	0x08003701
 8003698:	08003715 	.word	0x08003715
 800369c:	08003729 	.word	0x08003729
 80036a0:	0800373d 	.word	0x0800373d
 80036a4:	08003751 	.word	0x08003751
 80036a8:	08003765 	.word	0x08003765
 80036ac:	08003781 	.word	0x08003781
 80036b0:	08003795 	.word	0x08003795
 80036b4:	080037a7 	.word	0x080037a7
 80036b8:	080037bb 	.word	0x080037bb
 80036bc:	080037cf 	.word	0x080037cf
 80036c0:	080037e1 	.word	0x080037e1
	/* Send Introductory "HELO" to SMTP server */
	case SMTP_HELO:
		smtpSendRecv(tcp_client_socket, (char*) "HELO localhost", NULL,
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <smtpStateHandler+0x184>)
 80036c6:	f993 3000 	ldrsb.w	r3, [r3]
 80036ca:	4618      	mov	r0, r3
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <smtpStateHandler+0x188>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	494a      	ldr	r1, [pc, #296]	; (80037fc <smtpStateHandler+0x18c>)
 80036d2:	f7ff ff6b 	bl	80035ac <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80036d6:	e087      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Send request to server for authentication */
	case SMTP_AUTH:
		smtpSendRecv(tcp_client_socket, (char*) "AUTH LOGIN", NULL,
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <smtpStateHandler+0x184>)
 80036da:	f993 3000 	ldrsb.w	r3, [r3]
 80036de:	4618      	mov	r0, r3
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <smtpStateHandler+0x188>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	4946      	ldr	r1, [pc, #280]	; (8003800 <smtpStateHandler+0x190>)
 80036e6:	f7ff ff61 	bl	80035ac <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80036ea:	e07d      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Handle Authentication with server username */
	case SMTP_AUTH_USERNAME:
		smtpSendRecv(tcp_client_socket, gcUserBasekey, NULL, gcHandlerBuffer);
 80036ec:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <smtpStateHandler+0x184>)
 80036ee:	f993 3000 	ldrsb.w	r3, [r3]
 80036f2:	4618      	mov	r0, r3
 80036f4:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <smtpStateHandler+0x188>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	4942      	ldr	r1, [pc, #264]	; (8003804 <smtpStateHandler+0x194>)
 80036fa:	f7ff ff57 	bl	80035ac <smtpSendRecv>
		break;
 80036fe:	e073      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Handle Authentication with server password */
	case SMTP_AUTH_PASSWORD:
		smtpSendRecv(tcp_client_socket, gcPasswordBasekey, NULL,
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <smtpStateHandler+0x184>)
 8003702:	f993 3000 	ldrsb.w	r3, [r3]
 8003706:	4618      	mov	r0, r3
 8003708:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <smtpStateHandler+0x188>)
 800370a:	2200      	movs	r2, #0
 800370c:	493e      	ldr	r1, [pc, #248]	; (8003808 <smtpStateHandler+0x198>)
 800370e:	f7ff ff4d 	bl	80035ac <smtpSendRecv>
				gcHandlerBuffer);
		break;
 8003712:	e069      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Send source email to the SMTP server */
	case SMTP_FROM:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpMailFrom,
 8003714:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <smtpStateHandler+0x184>)
 8003716:	f993 3000 	ldrsb.w	r3, [r3]
 800371a:	4618      	mov	r0, r3
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <smtpStateHandler+0x188>)
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <smtpStateHandler+0x19c>)
 8003720:	493b      	ldr	r1, [pc, #236]	; (8003810 <smtpStateHandler+0x1a0>)
 8003722:	f7ff ff43 	bl	80035ac <smtpSendRecv>
				(char*) MAIN_SENDER_RFC, gcHandlerBuffer);
		break;
 8003726:	e05f      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Send the destination email to the SMTP server */
	case SMTP_RCPT:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpRcpt,
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <smtpStateHandler+0x184>)
 800372a:	f993 3000 	ldrsb.w	r3, [r3]
 800372e:	4618      	mov	r0, r3
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <smtpStateHandler+0x188>)
 8003732:	4a38      	ldr	r2, [pc, #224]	; (8003814 <smtpStateHandler+0x1a4>)
 8003734:	4938      	ldr	r1, [pc, #224]	; (8003818 <smtpStateHandler+0x1a8>)
 8003736:	f7ff ff39 	bl	80035ac <smtpSendRecv>
				(char*) MAIN_RECIPIENT_RFC, gcHandlerBuffer);
		break;
 800373a:	e055      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Send the "DATA" message to the server */
	case SMTP_DATA:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpData, NULL,
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <smtpStateHandler+0x184>)
 800373e:	f993 3000 	ldrsb.w	r3, [r3]
 8003742:	4618      	mov	r0, r3
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <smtpStateHandler+0x188>)
 8003746:	2200      	movs	r2, #0
 8003748:	4934      	ldr	r1, [pc, #208]	; (800381c <smtpStateHandler+0x1ac>)
 800374a:	f7ff ff2f 	bl	80035ac <smtpSendRecv>
				gcHandlerBuffer);
		break;
 800374e:	e04b      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Send actual Message, preceded by From, To and Subject */
	case SMTP_MESSAGE_SUBJECT:
		/* Start with E-Mail's "Subject:" field */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpSubject,
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <smtpStateHandler+0x184>)
 8003752:	f993 3000 	ldrsb.w	r3, [r3]
 8003756:	4618      	mov	r0, r3
 8003758:	2300      	movs	r3, #0
 800375a:	4a31      	ldr	r2, [pc, #196]	; (8003820 <smtpStateHandler+0x1b0>)
 800375c:	4931      	ldr	r1, [pc, #196]	; (8003824 <smtpStateHandler+0x1b4>)
 800375e:	f7ff ff25 	bl	80035ac <smtpSendRecv>
				(char*) MAIN_EMAIL_SUBJECT, NULL);
		break;
 8003762:	e041      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_TO:
		/* Add E-mail's "To:" field */
		printf("Recipient email address is %s\r\n", (char*) MAIN_TO_ADDRESS);
 8003764:	4930      	ldr	r1, [pc, #192]	; (8003828 <smtpStateHandler+0x1b8>)
 8003766:	4831      	ldr	r0, [pc, #196]	; (800382c <smtpStateHandler+0x1bc>)
 8003768:	f01a fe1c 	bl	801e3a4 <iprintf>
		smtpSendRecv(tcp_client_socket, (char*) cSmtpTo,
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <smtpStateHandler+0x184>)
 800376e:	f993 3000 	ldrsb.w	r3, [r3]
 8003772:	4618      	mov	r0, r3
 8003774:	2300      	movs	r3, #0
 8003776:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <smtpStateHandler+0x1b8>)
 8003778:	492d      	ldr	r1, [pc, #180]	; (8003830 <smtpStateHandler+0x1c0>)
 800377a:	f7ff ff17 	bl	80035ac <smtpSendRecv>
				(char*) MAIN_TO_ADDRESS, NULL);
		break;
 800377e:	e033      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_FROM:
		/* Add E-mail's "From:" field */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpFrom,
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <smtpStateHandler+0x184>)
 8003782:	f993 3000 	ldrsb.w	r3, [r3]
 8003786:	4618      	mov	r0, r3
 8003788:	2300      	movs	r3, #0
 800378a:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <smtpStateHandler+0x1c4>)
 800378c:	492a      	ldr	r1, [pc, #168]	; (8003838 <smtpStateHandler+0x1c8>)
 800378e:	f7ff ff0d 	bl	80035ac <smtpSendRecv>
				(char*) MAIN_FROM_ADDRESS, NULL);
		break;
 8003792:	e029      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_CRLF:
		/* Send CRLF */
		send(tcp_client_socket, (char*) cSmtpCrlf, strlen(cSmtpCrlf), 0);
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <smtpStateHandler+0x184>)
 8003796:	f993 0000 	ldrsb.w	r0, [r3]
 800379a:	2300      	movs	r3, #0
 800379c:	2202      	movs	r2, #2
 800379e:	4927      	ldr	r1, [pc, #156]	; (800383c <smtpStateHandler+0x1cc>)
 80037a0:	f01a f816 	bl	801d7d0 <send>
		break;
 80037a4:	e020      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_BODY:
		/* Send body of message */
		smtpSendRecv(tcp_client_socket, (char*) strSendingEmail, NULL, NULL);
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <smtpStateHandler+0x184>)
 80037a8:	f993 3000 	ldrsb.w	r3, [r3]
 80037ac:	4618      	mov	r0, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	2200      	movs	r2, #0
 80037b2:	4923      	ldr	r1, [pc, #140]	; (8003840 <smtpStateHandler+0x1d0>)
 80037b4:	f7ff fefa 	bl	80035ac <smtpSendRecv>
		break;
 80037b8:	e016      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_DATAEND:
		/* End Message */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpDataEnd, NULL,
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <smtpStateHandler+0x184>)
 80037bc:	f993 3000 	ldrsb.w	r3, [r3]
 80037c0:	4618      	mov	r0, r3
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <smtpStateHandler+0x188>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	491f      	ldr	r1, [pc, #124]	; (8003844 <smtpStateHandler+0x1d4>)
 80037c8:	f7ff fef0 	bl	80035ac <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80037cc:	e00c      	b.n	80037e8 <smtpStateHandler+0x178>

	case SMTP_QUIT:
		send(tcp_client_socket, (char*) cSmtpQuit, strlen(cSmtpQuit), 0);
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <smtpStateHandler+0x184>)
 80037d0:	f993 0000 	ldrsb.w	r0, [r3]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2206      	movs	r2, #6
 80037d8:	491b      	ldr	r1, [pc, #108]	; (8003848 <smtpStateHandler+0x1d8>)
 80037da:	f019 fff9 	bl	801d7d0 <send>
		break;
 80037de:	e003      	b.n	80037e8 <smtpStateHandler+0x178>

		/* Error Handling for SMTP */
	case SMTP_ERROR:
		return MAIN_EMAIL_ERROR_FAILED;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e001      	b.n	80037ea <smtpStateHandler+0x17a>

	default:
		break;
 80037e6:	bf00      	nop
	}
	return MAIN_EMAIL_ERROR_NONE;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000006 	.word	0x20000006
 80037f4:	20000007 	.word	0x20000007
 80037f8:	20010eac 	.word	0x20010eac
 80037fc:	0801fd74 	.word	0x0801fd74
 8003800:	0801fd84 	.word	0x0801fd84
 8003804:	200112ac 	.word	0x200112ac
 8003808:	2001132c 	.word	0x2001132c
 800380c:	0801fd90 	.word	0x0801fd90
 8003810:	0802563c 	.word	0x0802563c
 8003814:	0801fda8 	.word	0x0801fda8
 8003818:	08025648 	.word	0x08025648
 800381c:	08025654 	.word	0x08025654
 8003820:	0801fdc0 	.word	0x0801fdc0
 8003824:	08025660 	.word	0x08025660
 8003828:	0801fdd8 	.word	0x0801fdd8
 800382c:	0801fdf0 	.word	0x0801fdf0
 8003830:	0802566c 	.word	0x0802566c
 8003834:	0801fe10 	.word	0x0801fe10
 8003838:	08025674 	.word	0x08025674
 800383c:	0802565c 	.word	0x0802565c
 8003840:	200123b0 	.word	0x200123b0
 8003844:	0802567c 	.word	0x0802567c
 8003848:	08025684 	.word	0x08025684

0800384c <resolve_cb>:
 * \param[in] hostName Domain name.
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	gu32HostIp = hostIp;
 8003856:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <resolve_cb+0x44>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6013      	str	r3, [r2, #0]
	gbHostIpByName = true;
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <resolve_cb+0x48>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2d9      	uxtb	r1, r3
			(int) IPV4_BYTE(hostIp, 1), (int) IPV4_BYTE(hostIp, 2),
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	0a1b      	lsrs	r3, r3, #8
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 800386a:	b2da      	uxtb	r2, r3
			(int) IPV4_BYTE(hostIp, 1), (int) IPV4_BYTE(hostIp, 2),
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	0c1b      	lsrs	r3, r3, #16
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 8003870:	b2d8      	uxtb	r0, r3
			(int) IPV4_BYTE(hostIp, 3));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	0e1b      	lsrs	r3, r3, #24
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4603      	mov	r3, r0
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <resolve_cb+0x4c>)
 800387c:	f01a fd92 	bl	801e3a4 <iprintf>
	printf("Host Name is %s\r\n", hostName);
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <resolve_cb+0x50>)
 8003884:	f01a fd8e 	bl	801e3a4 <iprintf>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20010aa4 	.word	0x20010aa4
 8003894:	200113ae 	.word	0x200113ae
 8003898:	0801fe28 	.word	0x0801fe28
 800389c:	0801fe44 	.word	0x0801fe44

080038a0 <socket_cb>:
 * \param[in] u8Msg Type of Socket notification
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	603a      	str	r2, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
 80038ac:	460b      	mov	r3, r1
 80038ae:	71bb      	strb	r3, [r7, #6]
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
 80038b0:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <socket_cb+0x2a4>)
 80038b2:	f993 3000 	ldrsb.w	r3, [r3]
 80038b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f040 82c5 	bne.w	8003e4a <socket_cb+0x5aa>
		switch (u8Msg) {
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	2b07      	cmp	r3, #7
 80038c4:	d028      	beq.n	8003918 <socket_cb+0x78>
 80038c6:	2b07      	cmp	r3, #7
 80038c8:	f300 829c 	bgt.w	8003e04 <socket_cb+0x564>
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d002      	beq.n	80038d6 <socket_cb+0x36>
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d063      	beq.n	800399c <socket_cb+0xfc>
			}
		}
			break;

		default:
			break;
 80038d4:	e296      	b.n	8003e04 <socket_cb+0x564>
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg*) pvMsg;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	60bb      	str	r3, [r7, #8]
			if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d014      	beq.n	800390a <socket_cb+0x6a>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0f      	blt.n	800390a <socket_cb+0x6a>
				memset(gcHandlerBuffer, 0, MAIN_SMTP_BUF_LEN);
 80038ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ee:	2100      	movs	r1, #0
 80038f0:	4895      	ldr	r0, [pc, #596]	; (8003b48 <socket_cb+0x2a8>)
 80038f2:	f01a fedf 	bl	801e6b4 <memset>
				recv(tcp_client_socket, gcHandlerBuffer,
 80038f6:	4b93      	ldr	r3, [pc, #588]	; (8003b44 <socket_cb+0x2a4>)
 80038f8:	f993 0000 	ldrsb.w	r0, [r3]
 80038fc:	2300      	movs	r3, #0
 80038fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003902:	4991      	ldr	r1, [pc, #580]	; (8003b48 <socket_cb+0x2a8>)
 8003904:	f019 ffda 	bl	801d8bc <recv>
			break;
 8003908:	e29f      	b.n	8003e4a <socket_cb+0x5aa>
				printf("SOCKET_MSG_CONNECT : connect error!\r\n");
 800390a:	4890      	ldr	r0, [pc, #576]	; (8003b4c <socket_cb+0x2ac>)
 800390c:	f01a fdb8 	bl	801e480 <puts>
				gu8SocketStatus = SocketError;
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <socket_cb+0x2b0>)
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
			break;
 8003916:	e298      	b.n	8003e4a <socket_cb+0x5aa>
			switch (gu8SmtpStatus) {
 8003918:	4b8e      	ldr	r3, [pc, #568]	; (8003b54 <socket_cb+0x2b4>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3b09      	subs	r3, #9
 800391e:	2b06      	cmp	r3, #6
 8003920:	d83a      	bhi.n	8003998 <socket_cb+0xf8>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <socket_cb+0x88>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003945 	.word	0x08003945
 800392c:	08003953 	.word	0x08003953
 8003930:	08003961 	.word	0x08003961
 8003934:	0800396f 	.word	0x0800396f
 8003938:	0800397d 	.word	0x0800397d
 800393c:	08003999 	.word	0x08003999
 8003940:	0800398b 	.word	0x0800398b
				gu8SocketStatus = SocketConnect;
 8003944:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <socket_cb+0x2b0>)
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_TO;
 800394a:	4b82      	ldr	r3, [pc, #520]	; (8003b54 <socket_cb+0x2b4>)
 800394c:	220a      	movs	r2, #10
 800394e:	701a      	strb	r2, [r3, #0]
				break;
 8003950:	e023      	b.n	800399a <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 8003952:	4b7f      	ldr	r3, [pc, #508]	; (8003b50 <socket_cb+0x2b0>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_FROM;
 8003958:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <socket_cb+0x2b4>)
 800395a:	220b      	movs	r2, #11
 800395c:	701a      	strb	r2, [r3, #0]
				break;
 800395e:	e01c      	b.n	800399a <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 8003960:	4b7b      	ldr	r3, [pc, #492]	; (8003b50 <socket_cb+0x2b0>)
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_CRLF;
 8003966:	4b7b      	ldr	r3, [pc, #492]	; (8003b54 <socket_cb+0x2b4>)
 8003968:	220c      	movs	r2, #12
 800396a:	701a      	strb	r2, [r3, #0]
				break;
 800396c:	e015      	b.n	800399a <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 800396e:	4b78      	ldr	r3, [pc, #480]	; (8003b50 <socket_cb+0x2b0>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_BODY;
 8003974:	4b77      	ldr	r3, [pc, #476]	; (8003b54 <socket_cb+0x2b4>)
 8003976:	220d      	movs	r2, #13
 8003978:	701a      	strb	r2, [r3, #0]
				break;
 800397a:	e00e      	b.n	800399a <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 800397c:	4b74      	ldr	r3, [pc, #464]	; (8003b50 <socket_cb+0x2b0>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_DATAEND;
 8003982:	4b74      	ldr	r3, [pc, #464]	; (8003b54 <socket_cb+0x2b4>)
 8003984:	220e      	movs	r2, #14
 8003986:	701a      	strb	r2, [r3, #0]
				break;
 8003988:	e007      	b.n	800399a <socket_cb+0xfa>
				gu8SocketStatus = SocketComplete;
 800398a:	4b71      	ldr	r3, [pc, #452]	; (8003b50 <socket_cb+0x2b0>)
 800398c:	2203      	movs	r2, #3
 800398e:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_INIT;
 8003990:	4b70      	ldr	r3, [pc, #448]	; (8003b54 <socket_cb+0x2b4>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
				break;
 8003996:	e000      	b.n	800399a <socket_cb+0xfa>
				break;
 8003998:	bf00      	nop
			break;
 800399a:	e256      	b.n	8003e4a <socket_cb+0x5aa>
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg*) pvMsg;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	60fb      	str	r3, [r7, #12]
			if (gu8SocketStatus == SocketWaiting) {
 80039a0:	4b6b      	ldr	r3, [pc, #428]	; (8003b50 <socket_cb+0x2b0>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f040 824f 	bne.w	8003e48 <socket_cb+0x5a8>
				gu8SocketStatus = SocketConnect;
 80039aa:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <socket_cb+0x2b0>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
				switch (gu8SmtpStatus) {
 80039b0:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <socket_cb+0x2b4>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	2b0d      	cmp	r3, #13
 80039b8:	f200 8222 	bhi.w	8003e00 <socket_cb+0x560>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <socket_cb+0x124>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039fd 	.word	0x080039fd
 80039c8:	08003a67 	.word	0x08003a67
 80039cc:	08003ad1 	.word	0x08003ad1
 80039d0:	08003b7d 	.word	0x08003b7d
 80039d4:	08003bef 	.word	0x08003bef
 80039d8:	08003c59 	.word	0x08003c59
 80039dc:	08003cc3 	.word	0x08003cc3
 80039e0:	08003d2d 	.word	0x08003d2d
 80039e4:	08003e01 	.word	0x08003e01
 80039e8:	08003e01 	.word	0x08003e01
 80039ec:	08003e01 	.word	0x08003e01
 80039f0:	08003e01 	.word	0x08003e01
 80039f4:	08003e01 	.word	0x08003e01
 80039f8:	08003d97 	.word	0x08003d97
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d026      	beq.n	8003a50 <socket_cb+0x1b0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dd21      	ble.n	8003a50 <socket_cb+0x1b0>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2232      	movs	r2, #50	; 0x32
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <socket_cb+0x19c>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeReady[1]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2232      	movs	r2, #50	; 0x32
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10a      	bne.n	8003a3c <socket_cb+0x19c>
								&& pstrRecv->pu8Buffer[2]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeReady[2]) {
 8003a2e:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <socket_cb+0x19c>
							gu8SmtpStatus = SMTP_HELO;
 8003a34:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <socket_cb+0x2b4>)
 8003a36:	2202      	movs	r2, #2
 8003a38:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a3a:	e013      	b.n	8003a64 <socket_cb+0x1c4>
							printf("No response from server.\r\n");
 8003a3c:	4846      	ldr	r0, [pc, #280]	; (8003b58 <socket_cb+0x2b8>)
 8003a3e:	f01a fd1f 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <socket_cb+0x2b4>)
 8003a44:	2210      	movs	r2, #16
 8003a46:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_INIT;
 8003a48:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <socket_cb+0x2bc>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a4e:	e009      	b.n	8003a64 <socket_cb+0x1c4>
						printf("SMTP_INIT : recv error!\r\n");
 8003a50:	4843      	ldr	r0, [pc, #268]	; (8003b60 <socket_cb+0x2c0>)
 8003a52:	f01a fd15 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003a56:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <socket_cb+0x2b4>)
 8003a58:	2210      	movs	r2, #16
 8003a5a:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_INIT;
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <socket_cb+0x2bc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
					break;
 8003a62:	e1ce      	b.n	8003e02 <socket_cb+0x562>
 8003a64:	e1cd      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d026      	beq.n	8003aba <socket_cb+0x21a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dd21      	ble.n	8003aba <socket_cb+0x21a>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2232      	movs	r2, #50	; 0x32
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <socket_cb+0x206>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2235      	movs	r2, #53	; 0x35
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10a      	bne.n	8003aa6 <socket_cb+0x206>
								&& pstrRecv->pu8Buffer[2]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3302      	adds	r3, #2
 8003a96:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003a98:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d103      	bne.n	8003aa6 <socket_cb+0x206>
							gu8SmtpStatus = SMTP_AUTH;
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <socket_cb+0x2b4>)
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003aa4:	e013      	b.n	8003ace <socket_cb+0x22e>
							printf("No response for HELO.\r\n");
 8003aa6:	482f      	ldr	r0, [pc, #188]	; (8003b64 <socket_cb+0x2c4>)
 8003aa8:	f01a fcea 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <socket_cb+0x2b4>)
 8003aae:	2210      	movs	r2, #16
 8003ab0:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_HELO;
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <socket_cb+0x2bc>)
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003ab8:	e009      	b.n	8003ace <socket_cb+0x22e>
						printf("SMTP_HELO : recv error!\r\n");
 8003aba:	482b      	ldr	r0, [pc, #172]	; (8003b68 <socket_cb+0x2c8>)
 8003abc:	f01a fce0 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <socket_cb+0x2b4>)
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_HELO;
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <socket_cb+0x2bc>)
 8003ac8:	2202      	movs	r2, #2
 8003aca:	701a      	strb	r2, [r3, #0]
					break;
 8003acc:	e199      	b.n	8003e02 <socket_cb+0x562>
 8003ace:	e198      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02a      	beq.n	8003b2c <socket_cb+0x28c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	dd25      	ble.n	8003b2c <socket_cb+0x28c>
						generateBase64Key((char*) MAIN_FROM_ADDRESS,
 8003ae0:	4922      	ldr	r1, [pc, #136]	; (8003b6c <socket_cb+0x2cc>)
 8003ae2:	4823      	ldr	r0, [pc, #140]	; (8003b70 <socket_cb+0x2d0>)
 8003ae4:	f7ff fd38 	bl	8003558 <generateBase64Key>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2233      	movs	r2, #51	; 0x33
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <socket_cb+0x278>
								&& pstrRecv->pu8Buffer[1]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[1]
 8003afc:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10a      	bne.n	8003b18 <socket_cb+0x278>
								&& pstrRecv->pu8Buffer[2]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3302      	adds	r3, #2
 8003b08:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[2]) {
 8003b0a:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d103      	bne.n	8003b18 <socket_cb+0x278>
							gu8SmtpStatus = SMTP_AUTH_USERNAME;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <socket_cb+0x2b4>)
 8003b12:	2204      	movs	r2, #4
 8003b14:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b16:	e013      	b.n	8003b40 <socket_cb+0x2a0>
							printf("No response for authentication.\r\n");
 8003b18:	4816      	ldr	r0, [pc, #88]	; (8003b74 <socket_cb+0x2d4>)
 8003b1a:	f01a fcb1 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <socket_cb+0x2b4>)
 8003b20:	2210      	movs	r2, #16
 8003b22:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH;
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <socket_cb+0x2bc>)
 8003b26:	2203      	movs	r2, #3
 8003b28:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b2a:	e009      	b.n	8003b40 <socket_cb+0x2a0>
						printf("SMTP_AUTH : recv error!\r\n");
 8003b2c:	4812      	ldr	r0, [pc, #72]	; (8003b78 <socket_cb+0x2d8>)
 8003b2e:	f01a fca7 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <socket_cb+0x2b4>)
 8003b34:	2210      	movs	r2, #16
 8003b36:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH;
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <socket_cb+0x2bc>)
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	701a      	strb	r2, [r3, #0]
					break;
 8003b3e:	e160      	b.n	8003e02 <socket_cb+0x562>
 8003b40:	e15f      	b.n	8003e02 <socket_cb+0x562>
 8003b42:	bf00      	nop
 8003b44:	20000007 	.word	0x20000007
 8003b48:	20010eac 	.word	0x20010eac
 8003b4c:	0801fe58 	.word	0x0801fe58
 8003b50:	20010aa8 	.word	0x20010aa8
 8003b54:	20000006 	.word	0x20000006
 8003b58:	0801fe80 	.word	0x0801fe80
 8003b5c:	20010aa9 	.word	0x20010aa9
 8003b60:	0801fe9c 	.word	0x0801fe9c
 8003b64:	0801feb8 	.word	0x0801feb8
 8003b68:	0801fed0 	.word	0x0801fed0
 8003b6c:	200112ac 	.word	0x200112ac
 8003b70:	0801fe10 	.word	0x0801fe10
 8003b74:	0801feec 	.word	0x0801feec
 8003b78:	0801ff10 	.word	0x0801ff10
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02a      	beq.n	8003bd8 <socket_cb+0x338>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	dd25      	ble.n	8003bd8 <socket_cb+0x338>
						generateBase64Key((char*) MAIN_FROM_PASSWORD,
 8003b8c:	499e      	ldr	r1, [pc, #632]	; (8003e08 <socket_cb+0x568>)
 8003b8e:	489f      	ldr	r0, [pc, #636]	; (8003e0c <socket_cb+0x56c>)
 8003b90:	f7ff fce2 	bl	8003558 <generateBase64Key>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2233      	movs	r2, #51	; 0x33
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <socket_cb+0x324>
								&& pstrRecv->pu8Buffer[1]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[1]
 8003ba8:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10a      	bne.n	8003bc4 <socket_cb+0x324>
								&& pstrRecv->pu8Buffer[2]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[2]) {
 8003bb6:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d103      	bne.n	8003bc4 <socket_cb+0x324>
							gu8SmtpStatus = SMTP_AUTH_PASSWORD;
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <socket_cb+0x570>)
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003bc2:	e013      	b.n	8003bec <socket_cb+0x34c>
							printf(
 8003bc4:	4893      	ldr	r0, [pc, #588]	; (8003e14 <socket_cb+0x574>)
 8003bc6:	f01a fc5b 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003bca:	4b91      	ldr	r3, [pc, #580]	; (8003e10 <socket_cb+0x570>)
 8003bcc:	2210      	movs	r2, #16
 8003bce:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH_USERNAME;
 8003bd0:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <socket_cb+0x578>)
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003bd6:	e009      	b.n	8003bec <socket_cb+0x34c>
						printf("SMTP_AUTH_USERNAME : recv error!\r\n");
 8003bd8:	4890      	ldr	r0, [pc, #576]	; (8003e1c <socket_cb+0x57c>)
 8003bda:	f01a fc51 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003bde:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <socket_cb+0x570>)
 8003be0:	2210      	movs	r2, #16
 8003be2:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH_USERNAME;
 8003be4:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <socket_cb+0x578>)
 8003be6:	2204      	movs	r2, #4
 8003be8:	701a      	strb	r2, [r3, #0]
					break;
 8003bea:	e10a      	b.n	8003e02 <socket_cb+0x562>
 8003bec:	e109      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d026      	beq.n	8003c42 <socket_cb+0x3a2>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dd21      	ble.n	8003c42 <socket_cb+0x3a2>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2232      	movs	r2, #50	; 0x32
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d111      	bne.n	8003c2e <socket_cb+0x38e>
								&& pstrRecv->pu8Buffer[1]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthSuccess[1]
 8003c12:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10a      	bne.n	8003c2e <socket_cb+0x38e>
								&& pstrRecv->pu8Buffer[2]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthSuccess[2]) {
 8003c20:	2235      	movs	r2, #53	; 0x35
								&& pstrRecv->pu8Buffer[2]
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d103      	bne.n	8003c2e <socket_cb+0x38e>
							gu8SmtpStatus = SMTP_FROM;
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <socket_cb+0x570>)
 8003c28:	2206      	movs	r2, #6
 8003c2a:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003c2c:	e013      	b.n	8003c56 <socket_cb+0x3b6>
							printf(
 8003c2e:	487c      	ldr	r0, [pc, #496]	; (8003e20 <socket_cb+0x580>)
 8003c30:	f01a fc26 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <socket_cb+0x570>)
 8003c36:	2210      	movs	r2, #16
 8003c38:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH_PASSWORD;
 8003c3a:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <socket_cb+0x578>)
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003c40:	e009      	b.n	8003c56 <socket_cb+0x3b6>
						printf("SMTP_AUTH_PASSWORD : recv error!\r\n");
 8003c42:	4878      	ldr	r0, [pc, #480]	; (8003e24 <socket_cb+0x584>)
 8003c44:	f01a fc1c 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003c48:	4b71      	ldr	r3, [pc, #452]	; (8003e10 <socket_cb+0x570>)
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH_PASSWORD;
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <socket_cb+0x578>)
 8003c50:	2205      	movs	r2, #5
 8003c52:	701a      	strb	r2, [r3, #0]
					break;
 8003c54:	e0d5      	b.n	8003e02 <socket_cb+0x562>
 8003c56:	e0d4      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d026      	beq.n	8003cac <socket_cb+0x40c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dd21      	ble.n	8003cac <socket_cb+0x40c>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2232      	movs	r2, #50	; 0x32
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d111      	bne.n	8003c98 <socket_cb+0x3f8>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2235      	movs	r2, #53	; 0x35
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10a      	bne.n	8003c98 <socket_cb+0x3f8>
								&& pstrRecv->pu8Buffer[2]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3302      	adds	r3, #2
 8003c88:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003c8a:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <socket_cb+0x3f8>
							gu8SmtpStatus = SMTP_RCPT;
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <socket_cb+0x570>)
 8003c92:	2207      	movs	r2, #7
 8003c94:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003c96:	e013      	b.n	8003cc0 <socket_cb+0x420>
							printf("No response for sender transmission.\r\n");
 8003c98:	4863      	ldr	r0, [pc, #396]	; (8003e28 <socket_cb+0x588>)
 8003c9a:	f01a fbf1 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <socket_cb+0x570>)
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_FROM;
 8003ca4:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <socket_cb+0x578>)
 8003ca6:	2206      	movs	r2, #6
 8003ca8:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003caa:	e009      	b.n	8003cc0 <socket_cb+0x420>
						printf("SMTP_FROM : recv error!\r\n");
 8003cac:	485f      	ldr	r0, [pc, #380]	; (8003e2c <socket_cb+0x58c>)
 8003cae:	f01a fbe7 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003cb2:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <socket_cb+0x570>)
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_FROM;
 8003cb8:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <socket_cb+0x578>)
 8003cba:	2206      	movs	r2, #6
 8003cbc:	701a      	strb	r2, [r3, #0]
					break;
 8003cbe:	e0a0      	b.n	8003e02 <socket_cb+0x562>
 8003cc0:	e09f      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d026      	beq.n	8003d16 <socket_cb+0x476>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dd21      	ble.n	8003d16 <socket_cb+0x476>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2232      	movs	r2, #50	; 0x32
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <socket_cb+0x462>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2235      	movs	r2, #53	; 0x35
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10a      	bne.n	8003d02 <socket_cb+0x462>
								&& pstrRecv->pu8Buffer[2]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003cf4:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d103      	bne.n	8003d02 <socket_cb+0x462>
							gu8SmtpStatus = SMTP_DATA;
 8003cfa:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <socket_cb+0x570>)
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003d00:	e013      	b.n	8003d2a <socket_cb+0x48a>
							printf(
 8003d02:	484b      	ldr	r0, [pc, #300]	; (8003e30 <socket_cb+0x590>)
 8003d04:	f01a fbbc 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <socket_cb+0x570>)
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_RCPT;
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <socket_cb+0x578>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003d14:	e009      	b.n	8003d2a <socket_cb+0x48a>
						printf("SMTP_RCPT : recv error!\r\n");
 8003d16:	4847      	ldr	r0, [pc, #284]	; (8003e34 <socket_cb+0x594>)
 8003d18:	f01a fbb2 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <socket_cb+0x570>)
 8003d1e:	2210      	movs	r2, #16
 8003d20:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_RCPT;
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <socket_cb+0x578>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	701a      	strb	r2, [r3, #0]
					break;
 8003d28:	e06b      	b.n	8003e02 <socket_cb+0x562>
 8003d2a:	e06a      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d026      	beq.n	8003d80 <socket_cb+0x4e0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	dd21      	ble.n	8003d80 <socket_cb+0x4e0>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2233      	movs	r2, #51	; 0x33
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d111      	bne.n	8003d6c <socket_cb+0x4cc>
								&& pstrRecv->pu8Buffer[1]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeIntermedReply[1]
 8003d50:	2235      	movs	r2, #53	; 0x35
								&& pstrRecv->pu8Buffer[1]
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d10a      	bne.n	8003d6c <socket_cb+0x4cc>
								&& pstrRecv->pu8Buffer[2]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeIntermedReply[2]) {
 8003d5e:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <socket_cb+0x4cc>
							gu8SmtpStatus = SMTP_MESSAGE_SUBJECT;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <socket_cb+0x570>)
 8003d66:	2209      	movs	r2, #9
 8003d68:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d6a:	e013      	b.n	8003d94 <socket_cb+0x4f4>
							printf("No response for data transmission.\r\n");
 8003d6c:	4832      	ldr	r0, [pc, #200]	; (8003e38 <socket_cb+0x598>)
 8003d6e:	f01a fb87 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <socket_cb+0x570>)
 8003d74:	2210      	movs	r2, #16
 8003d76:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_DATA;
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <socket_cb+0x578>)
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d7e:	e009      	b.n	8003d94 <socket_cb+0x4f4>
						printf("SMTP_DATA : recv error!\r\n");
 8003d80:	482e      	ldr	r0, [pc, #184]	; (8003e3c <socket_cb+0x59c>)
 8003d82:	f01a fb7d 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <socket_cb+0x570>)
 8003d88:	2210      	movs	r2, #16
 8003d8a:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_DATA;
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <socket_cb+0x578>)
 8003d8e:	2208      	movs	r2, #8
 8003d90:	701a      	strb	r2, [r3, #0]
					break;
 8003d92:	e036      	b.n	8003e02 <socket_cb+0x562>
 8003d94:	e035      	b.n	8003e02 <socket_cb+0x562>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d026      	beq.n	8003dea <socket_cb+0x54a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dd21      	ble.n	8003dea <socket_cb+0x54a>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2232      	movs	r2, #50	; 0x32
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <socket_cb+0x536>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2235      	movs	r2, #53	; 0x35
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d10a      	bne.n	8003dd6 <socket_cb+0x536>
								&& pstrRecv->pu8Buffer[2]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003dc8:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d103      	bne.n	8003dd6 <socket_cb+0x536>
							gu8SmtpStatus = SMTP_QUIT;
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <socket_cb+0x570>)
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003dd4:	e013      	b.n	8003dfe <socket_cb+0x55e>
							printf("No response for dataend transmission.\r\n");
 8003dd6:	481a      	ldr	r0, [pc, #104]	; (8003e40 <socket_cb+0x5a0>)
 8003dd8:	f01a fb52 	bl	801e480 <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <socket_cb+0x570>)
 8003dde:	2210      	movs	r2, #16
 8003de0:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_MESSAGE;
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <socket_cb+0x578>)
 8003de4:	2209      	movs	r2, #9
 8003de6:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003de8:	e009      	b.n	8003dfe <socket_cb+0x55e>
						printf("SMTP_MESSAGE_DATAEND : recv error!\r\n");
 8003dea:	4816      	ldr	r0, [pc, #88]	; (8003e44 <socket_cb+0x5a4>)
 8003dec:	f01a fb48 	bl	801e480 <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <socket_cb+0x570>)
 8003df2:	2210      	movs	r2, #16
 8003df4:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_MESSAGE;
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <socket_cb+0x578>)
 8003df8:	2209      	movs	r2, #9
 8003dfa:	701a      	strb	r2, [r3, #0]
					break;
 8003dfc:	e001      	b.n	8003e02 <socket_cb+0x562>
 8003dfe:	e000      	b.n	8003e02 <socket_cb+0x562>
					break;
 8003e00:	bf00      	nop
			break;
 8003e02:	e021      	b.n	8003e48 <socket_cb+0x5a8>
			break;
 8003e04:	bf00      	nop
 8003e06:	e020      	b.n	8003e4a <socket_cb+0x5aa>
 8003e08:	2001132c 	.word	0x2001132c
 8003e0c:	0801ff2c 	.word	0x0801ff2c
 8003e10:	20000006 	.word	0x20000006
 8003e14:	0801ff40 	.word	0x0801ff40
 8003e18:	20010aa9 	.word	0x20010aa9
 8003e1c:	0801ff6c 	.word	0x0801ff6c
 8003e20:	0801ff90 	.word	0x0801ff90
 8003e24:	0801ffbc 	.word	0x0801ffbc
 8003e28:	0801ffe0 	.word	0x0801ffe0
 8003e2c:	08020008 	.word	0x08020008
 8003e30:	08020024 	.word	0x08020024
 8003e34:	08020050 	.word	0x08020050
 8003e38:	0802006c 	.word	0x0802006c
 8003e3c:	08020090 	.word	0x08020090
 8003e40:	080200ac 	.word	0x080200ac
 8003e44:	080200d4 	.word	0x080200d4
			break;
 8003e48:	bf00      	nop
		}
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <close_socket>:

/**
 * \brief Close socket function.
 * \return None.
 */
static void close_socket(void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	close(tcp_client_socket);
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <close_socket+0x1c>)
 8003e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f019 fdb4 	bl	801d9cc <close>
	tcp_client_socket = -1;
 8003e64:	4b02      	ldr	r3, [pc, #8]	; (8003e70 <close_socket+0x1c>)
 8003e66:	22ff      	movs	r2, #255	; 0xff
 8003e68:	701a      	strb	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000007 	.word	0x20000007

08003e74 <retry_smtp_server>:

/**
 * \brief Retry SMTP server function.
 * \return None.
 */
static void retry_smtp_server(void) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	close_socket();
 8003e78:	f7ff ffec 	bl	8003e54 <close_socket>
	gu8SocketStatus = SocketInit;
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <retry_smtp_server+0x2c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
	gu8SmtpStatus = SMTP_INIT;
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <retry_smtp_server+0x30>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
	gbHostIpByName = false;
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <retry_smtp_server+0x34>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
	osDelay(MAIN_WAITING_TIME);
 8003e8e:	f247 5030 	movw	r0, #30000	; 0x7530
 8003e92:	f011 fccb 	bl	801582c <osDelay>
	m2m_wifi_disconnect();
 8003e96:	f016 febf 	bl	801ac18 <m2m_wifi_disconnect>
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20010aa8 	.word	0x20010aa8
 8003ea4:	20000006 	.word	0x20000006
 8003ea8:	200113ae 	.word	0x200113ae

08003eac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint32_t tmpRGB = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
	uint8_t tmpFlag = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	72fb      	strb	r3, [r7, #11]
	LedStrip ledstrip;
	ledstrip.red = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	803b      	strh	r3, [r7, #0]
	ledstrip.green = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	807b      	strh	r3, [r7, #2]
	ledstrip.blue = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	80bb      	strh	r3, [r7, #4]
	ledstrip.w2400 = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	813b      	strh	r3, [r7, #8]
	ledstrip.w6500 = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	80fb      	strh	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003ece:	f002 fb27 	bl	8006520 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003ed2:	f000 f95d 	bl	8004190 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003ed6:	f000 fe2b 	bl	8004b30 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003eda:	f000 f9cb 	bl	8004274 <MX_I2C1_Init>
	MX_UART7_Init();
 8003ede:	f000 fd41 	bl	8004964 <MX_UART7_Init>
	MX_TIM1_Init();
 8003ee2:	f000 fba7 	bl	8004634 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003ee6:	f000 fc81 	bl	80047ec <MX_TIM3_Init>
	MX_TIM4_Init();
 8003eea:	f000 fcd7 	bl	800489c <MX_TIM4_Init>
	MX_DMA_Init();
 8003eee:	f000 fde1 	bl	8004ab4 <MX_DMA_Init>
	MX_I2S2_Init();
 8003ef2:	f000 fa3f 	bl	8004374 <MX_I2S2_Init>
	MX_I2C2_Init();
 8003ef6:	f000 f9fd 	bl	80042f4 <MX_I2C2_Init>
	MX_SPI3_Init();
 8003efa:	f000 fb2f 	bl	800455c <MX_SPI3_Init>
	MX_FATFS_Init();
 8003efe:	f009 f8bb 	bl	800d078 <MX_FATFS_Init>
	MX_SPI1_Init();
 8003f02:	f000 faf5 	bl	80044f0 <MX_SPI1_Init>
	MX_TIM2_Init();
 8003f06:	f000 fc19 	bl	800473c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003f0a:	f000 fd55 	bl	80049b8 <MX_USART1_UART_Init>
	MX_SPI5_Init();
 8003f0e:	f000 fb5b 	bl	80045c8 <MX_SPI5_Init>
	MX_USART2_UART_Init();
 8003f12:	f000 fd7b 	bl	8004a0c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8003f16:	f000 fda3 	bl	8004a60 <MX_USART3_UART_Init>
	MX_RTC_Init();
 8003f1a:	f000 fa59 	bl	80043d0 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f1e:	2100      	movs	r1, #0
 8003f20:	487b      	ldr	r0, [pc, #492]	; (8004110 <main+0x264>)
 8003f22:	f007 fa1f 	bl	800b364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003f26:	2100      	movs	r1, #0
 8003f28:	487a      	ldr	r0, [pc, #488]	; (8004114 <main+0x268>)
 8003f2a:	f007 fa1b 	bl	800b364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4879      	ldr	r0, [pc, #484]	; (8004118 <main+0x26c>)
 8003f32:	f007 fa17 	bl	800b364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003f36:	2100      	movs	r1, #0
 8003f38:	4878      	ldr	r0, [pc, #480]	; (800411c <main+0x270>)
 8003f3a:	f007 fa13 	bl	800b364 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003f3e:	2108      	movs	r1, #8
 8003f40:	4876      	ldr	r0, [pc, #472]	; (800411c <main+0x270>)
 8003f42:	f007 fa0f 	bl	800b364 <HAL_TIM_PWM_Start>
	SetLedStrip(ledstrip);
 8003f46:	463b      	mov	r3, r7
 8003f48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f4c:	f7fe feb2 	bl	8002cb4 <SetLedStrip>

	HAL_Delay(1000);
 8003f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f54:	f002 fb26 	bl	80065a4 <HAL_Delay>
	/* Mount SD Card */
	if (f_mount(&fs, "", 0) != FR_OK)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4971      	ldr	r1, [pc, #452]	; (8004120 <main+0x274>)
 8003f5c:	4871      	ldr	r0, [pc, #452]	; (8004124 <main+0x278>)
 8003f5e:	f00f fe9b 	bl	8013c98 <f_mount>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <main+0xc0>
		Error_Handler();
 8003f68:	f001 fa00 	bl	800536c <Error_Handler>

	if (f_open(&fil, "logTXT.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003f6c:	220a      	movs	r2, #10
 8003f6e:	496e      	ldr	r1, [pc, #440]	; (8004128 <main+0x27c>)
 8003f70:	486e      	ldr	r0, [pc, #440]	; (800412c <main+0x280>)
 8003f72:	f00f fef5 	bl	8013d60 <f_open>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <main+0xd4>
		Error_Handler();
 8003f7c:	f001 f9f6 	bl	800536c <Error_Handler>

	if (f_close(&fil) != FR_OK)
 8003f80:	486a      	ldr	r0, [pc, #424]	; (800412c <main+0x280>)
 8003f82:	f010 fd97 	bl	8014ab4 <f_close>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <main+0xe4>
		Error_Handler();
 8003f8c:	f001 f9ee 	bl	800536c <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 8003f90:	2201      	movs	r2, #1
 8003f92:	4963      	ldr	r1, [pc, #396]	; (8004120 <main+0x274>)
 8003f94:	2000      	movs	r0, #0
 8003f96:	f00f fe7f 	bl	8013c98 <f_mount>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <main+0xf8>
		Error_Handler();
 8003fa0:	f001 f9e4 	bl	800536c <Error_Handler>

	HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_SET); // fan on
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003faa:	4861      	ldr	r0, [pc, #388]	; (8004130 <main+0x284>)
 8003fac:	f003 f9e0 	bl	8007370 <HAL_GPIO_WritePin>
	printf("Fan Test Started...will run for duration of POST\r\n");
 8003fb0:	4860      	ldr	r0, [pc, #384]	; (8004134 <main+0x288>)
 8003fb2:	f01a fa65 	bl	801e480 <puts>
	HAL_Delay(1000);
 8003fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fba:	f002 faf3 	bl	80065a4 <HAL_Delay>
	pwm_update_duty_cycle(0,255,255,0,0);  // light blue
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	21ff      	movs	r1, #255	; 0xff
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7fe fe9b 	bl	8002d04 <pwm_update_duty_cycle>
	printf("2000ms LED Light Blue Test Started.\r\n");
 8003fce:	485a      	ldr	r0, [pc, #360]	; (8004138 <main+0x28c>)
 8003fd0:	f01a fa56 	bl	801e480 <puts>
	HAL_Delay(1000);
 8003fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd8:	f002 fae4 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED Light Blue Test Completed.\r\n");
 8003fdc:	4857      	ldr	r0, [pc, #348]	; (800413c <main+0x290>)
 8003fde:	f01a fa4f 	bl	801e480 <puts>
	pwm_update_duty_cycle(0,0,255,0,0); // blue
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	2100      	movs	r1, #0
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fe fe89 	bl	8002d04 <pwm_update_duty_cycle>
	printf("2000ms LED Blue Test Started.\r\n");
 8003ff2:	4853      	ldr	r0, [pc, #332]	; (8004140 <main+0x294>)
 8003ff4:	f01a fa44 	bl	801e480 <puts>
	HAL_Delay(1000);
 8003ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ffc:	f002 fad2 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED Blue Test Completed.\r\n");
 8004000:	4850      	ldr	r0, [pc, #320]	; (8004144 <main+0x298>)
 8004002:	f01a fa3d 	bl	801e480 <puts>
	pwm_update_duty_cycle(255,0,255,0,0); // fuschia
 8004006:	2300      	movs	r3, #0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	22ff      	movs	r2, #255	; 0xff
 800400e:	2100      	movs	r1, #0
 8004010:	20ff      	movs	r0, #255	; 0xff
 8004012:	f7fe fe77 	bl	8002d04 <pwm_update_duty_cycle>
	printf("2000ms LED Fuschia Test Started.\r\n");
 8004016:	484c      	ldr	r0, [pc, #304]	; (8004148 <main+0x29c>)
 8004018:	f01a fa32 	bl	801e480 <puts>
	HAL_Delay(1000);
 800401c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004020:	f002 fac0 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED Fuschia Test Completed.\r\n");
 8004024:	4849      	ldr	r0, [pc, #292]	; (800414c <main+0x2a0>)
 8004026:	f01a fa2b 	bl	801e480 <puts>
	pwm_update_duty_cycle(0,255,0,0,0); // green
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2200      	movs	r2, #0
 8004032:	21ff      	movs	r1, #255	; 0xff
 8004034:	2000      	movs	r0, #0
 8004036:	f7fe fe65 	bl	8002d04 <pwm_update_duty_cycle>
	printf("2000ms LED Green Test Started.\r\n");
 800403a:	4845      	ldr	r0, [pc, #276]	; (8004150 <main+0x2a4>)
 800403c:	f01a fa20 	bl	801e480 <puts>
	HAL_Delay(1000);
 8004040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004044:	f002 faae 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED Green Test Completed.\r\n");
 8004048:	4842      	ldr	r0, [pc, #264]	; (8004154 <main+0x2a8>)
 800404a:	f01a fa19 	bl	801e480 <puts>
	pwm_update_duty_cycle(0,0,0,255,0); // white
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	23ff      	movs	r3, #255	; 0xff
 8004054:	2200      	movs	r2, #0
 8004056:	2100      	movs	r1, #0
 8004058:	2000      	movs	r0, #0
 800405a:	f7fe fe53 	bl	8002d04 <pwm_update_duty_cycle>
	printf("2000ms LED White Test Started.\r\n");
 800405e:	483e      	ldr	r0, [pc, #248]	; (8004158 <main+0x2ac>)
 8004060:	f01a fa0e 	bl	801e480 <puts>
	HAL_Delay(1000);
 8004064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004068:	f002 fa9c 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED White Test Completed.\r\n");
 800406c:	483b      	ldr	r0, [pc, #236]	; (800415c <main+0x2b0>)
 800406e:	f01a fa07 	bl	801e480 <puts>
	//pwm_update_duty_cycle(0,0,0,0,255); // warm white
	//printf("2000ms LED Warm White Test Started.\r\n");
	HAL_Delay(1000);
 8004072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004076:	f002 fa95 	bl	80065a4 <HAL_Delay>
	printf("2000ms LED Warm White Test Completed.\r\n");
 800407a:	4839      	ldr	r0, [pc, #228]	; (8004160 <main+0x2b4>)
 800407c:	f01a fa00 	bl	801e480 <puts>
	pwm_update_duty_cycle(0,0,0,0,0); // LED off
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	2200      	movs	r2, #0
 8004088:	2100      	movs	r1, #0
 800408a:	2000      	movs	r0, #0
 800408c:	f7fe fe3a 	bl	8002d04 <pwm_update_duty_cycle>
	HAL_Delay(1000);
 8004090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004094:	f002 fa86 	bl	80065a4 <HAL_Delay>
	printf("1000ms seat heater relay test started.\r\n");
 8004098:	4832      	ldr	r0, [pc, #200]	; (8004164 <main+0x2b8>)
 800409a:	f01a f9f1 	bl	801e480 <puts>
	//nrf_gpio_pin_set(PLAY_OUT);
	HAL_Delay(1000);
 800409e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040a2:	f002 fa7f 	bl	80065a4 <HAL_Delay>
	HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_RESET);
 80040a6:	2200      	movs	r2, #0
 80040a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ac:	4820      	ldr	r0, [pc, #128]	; (8004130 <main+0x284>)
 80040ae:	f003 f95f 	bl	8007370 <HAL_GPIO_WritePin>
	printf("1000ms power relay test completed.\r\n");
 80040b2:	482d      	ldr	r0, [pc, #180]	; (8004168 <main+0x2bc>)
 80040b4:	f01a f9e4 	bl	801e480 <puts>
	pwm_update_duty_cycle(255,255,255,255,0); // white
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	23ff      	movs	r3, #255	; 0xff
 80040be:	22ff      	movs	r2, #255	; 0xff
 80040c0:	21ff      	movs	r1, #255	; 0xff
 80040c2:	20ff      	movs	r0, #255	; 0xff
 80040c4:	f7fe fe1e 	bl	8002d04 <pwm_update_duty_cycle>
	// fan off
	HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET); // fan on
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040ce:	4818      	ldr	r0, [pc, #96]	; (8004130 <main+0x284>)
 80040d0:	f003 f94e 	bl	8007370 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80040d4:	f011 face 	bl	8015674 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80040d8:	4a24      	ldr	r2, [pc, #144]	; (800416c <main+0x2c0>)
 80040da:	2100      	movs	r1, #0
 80040dc:	4824      	ldr	r0, [pc, #144]	; (8004170 <main+0x2c4>)
 80040de:	f011 fb13 	bl	8015708 <osThreadNew>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a23      	ldr	r2, [pc, #140]	; (8004174 <main+0x2c8>)
 80040e6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <main+0x2cc>)
 80040ea:	2100      	movs	r1, #0
 80040ec:	4823      	ldr	r0, [pc, #140]	; (800417c <main+0x2d0>)
 80040ee:	f011 fb0b 	bl	8015708 <osThreadNew>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <main+0x2d4>)
 80040f6:	6013      	str	r3, [r2, #0]
	wifiProvTaskHandle = osThreadNew(StartWiFiProvTask, NULL,
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <main+0x2d8>)
 80040fa:	2100      	movs	r1, #0
 80040fc:	4822      	ldr	r0, [pc, #136]	; (8004188 <main+0x2dc>)
 80040fe:	f011 fb03 	bl	8015708 <osThreadNew>
 8004102:	4603      	mov	r3, r0
 8004104:	4a21      	ldr	r2, [pc, #132]	; (800418c <main+0x2e0>)
 8004106:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8004108:	f011 fad8 	bl	80156bc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800410c:	e7fe      	b.n	800410c <main+0x260>
 800410e:	bf00      	nop
 8004110:	2000e764 	.word	0x2000e764
 8004114:	2000e7ac 	.word	0x2000e7ac
 8004118:	2000e7f4 	.word	0x2000e7f4
 800411c:	2000e83c 	.word	0x2000e83c
 8004120:	0801fb14 	.word	0x0801fb14
 8004124:	2000ea24 	.word	0x2000ea24
 8004128:	0801fb18 	.word	0x0801fb18
 800412c:	2000fa64 	.word	0x2000fa64
 8004130:	40020000 	.word	0x40020000
 8004134:	080200f8 	.word	0x080200f8
 8004138:	0802012c 	.word	0x0802012c
 800413c:	08020154 	.word	0x08020154
 8004140:	0802017c 	.word	0x0802017c
 8004144:	0802019c 	.word	0x0802019c
 8004148:	080201c0 	.word	0x080201c0
 800414c:	080201e4 	.word	0x080201e4
 8004150:	08020208 	.word	0x08020208
 8004154:	08020228 	.word	0x08020228
 8004158:	0802024c 	.word	0x0802024c
 800415c:	0802026c 	.word	0x0802026c
 8004160:	08020290 	.word	0x08020290
 8004164:	080202b8 	.word	0x080202b8
 8004168:	080202e0 	.word	0x080202e0
 800416c:	080255d0 	.word	0x080255d0
 8004170:	08004fed 	.word	0x08004fed
 8004174:	2000e994 	.word	0x2000e994
 8004178:	080255f4 	.word	0x080255f4
 800417c:	08004d47 	.word	0x08004d47
 8004180:	2000e998 	.word	0x2000e998
 8004184:	08025618 	.word	0x08025618
 8004188:	08004d8d 	.word	0x08004d8d
 800418c:	2000e99c 	.word	0x2000e99c

08004190 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b094      	sub	sp, #80	; 0x50
 8004194:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004196:	f107 0320 	add.w	r3, r7, #32
 800419a:	2230      	movs	r2, #48	; 0x30
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f01a fa88 	bl	801e6b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80041a4:	f107 030c 	add.w	r3, r7, #12
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <SystemClock_Config+0xdc>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a2b      	ldr	r2, [pc, #172]	; (800426c <SystemClock_Config+0xdc>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <SystemClock_Config+0xdc>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041d0:	2300      	movs	r3, #0
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <SystemClock_Config+0xe0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <SystemClock_Config+0xe0>)
 80041da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <SystemClock_Config+0xe0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80041ec:	2305      	movs	r3, #5
 80041ee:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041f6:	2301      	movs	r3, #1
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041fa:	2302      	movs	r3, #2
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004204:	2304      	movs	r3, #4
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8004208:	23b4      	movs	r3, #180	; 0xb4
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800420c:	2302      	movs	r3, #2
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004210:	2304      	movs	r3, #4
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004214:	f107 0320 	add.w	r3, r7, #32
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fecd 	bl	8008fb8 <HAL_RCC_OscConfig>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <SystemClock_Config+0x98>
		Error_Handler();
 8004224:	f001 f8a2 	bl	800536c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004228:	f004 fe76 	bl	8008f18 <HAL_PWREx_EnableOverDrive>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <SystemClock_Config+0xa6>
		Error_Handler();
 8004232:	f001 f89b 	bl	800536c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004236:	230f      	movs	r3, #15
 8004238:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800423a:	2302      	movs	r3, #2
 800423c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004242:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004246:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800424c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	2105      	movs	r1, #5
 8004254:	4618      	mov	r0, r3
 8004256:	f005 f927 	bl	80094a8 <HAL_RCC_ClockConfig>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <SystemClock_Config+0xd4>
		Error_Handler();
 8004260:	f001 f884 	bl	800536c <Error_Handler>
	}
}
 8004264:	bf00      	nop
 8004266:	3750      	adds	r7, #80	; 0x50
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000

08004274 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <MX_I2C1_Init+0x74>)
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <MX_I2C1_Init+0x78>)
 800427c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <MX_I2C1_Init+0x74>)
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <MX_I2C1_Init+0x7c>)
 8004282:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <MX_I2C1_Init+0x74>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_I2C1_Init+0x74>)
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <MX_I2C1_Init+0x74>)
 8004292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004296:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <MX_I2C1_Init+0x74>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80042b0:	480d      	ldr	r0, [pc, #52]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042b2:	f003 f88f 	bl	80073d4 <HAL_I2C_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80042bc:	f001 f856 	bl	800536c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80042c0:	2100      	movs	r1, #0
 80042c2:	4809      	ldr	r0, [pc, #36]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042c4:	f004 f81b 	bl	80082fe <HAL_I2CEx_ConfigAnalogFilter>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80042ce:	f001 f84d 	bl	800536c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80042d2:	2100      	movs	r1, #0
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <MX_I2C1_Init+0x74>)
 80042d6:	f004 f84e 	bl	8008376 <HAL_I2CEx_ConfigDigitalFilter>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_I2C1_Init+0x70>
		Error_Handler();
 80042e0:	f001 f844 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2000e42c 	.word	0x2000e42c
 80042ec:	40005400 	.word	0x40005400
 80042f0:	000186a0 	.word	0x000186a0

080042f4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <MX_I2C2_Init+0x74>)
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <MX_I2C2_Init+0x78>)
 80042fc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <MX_I2C2_Init+0x74>)
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <MX_I2C2_Init+0x7c>)
 8004302:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <MX_I2C2_Init+0x74>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <MX_I2C2_Init+0x74>)
 800430c:	2200      	movs	r2, #0
 800430e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <MX_I2C2_Init+0x74>)
 8004312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004316:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <MX_I2C2_Init+0x74>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <MX_I2C2_Init+0x74>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <MX_I2C2_Init+0x74>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <MX_I2C2_Init+0x74>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004330:	480d      	ldr	r0, [pc, #52]	; (8004368 <MX_I2C2_Init+0x74>)
 8004332:	f003 f84f 	bl	80073d4 <HAL_I2C_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800433c:	f001 f816 	bl	800536c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8004340:	2100      	movs	r1, #0
 8004342:	4809      	ldr	r0, [pc, #36]	; (8004368 <MX_I2C2_Init+0x74>)
 8004344:	f003 ffdb 	bl	80082fe <HAL_I2CEx_ConfigAnalogFilter>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800434e:	f001 f80d 	bl	800536c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004352:	2100      	movs	r1, #0
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <MX_I2C2_Init+0x74>)
 8004356:	f004 f80e 	bl	8008376 <HAL_I2CEx_ConfigDigitalFilter>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_I2C2_Init+0x70>
		Error_Handler();
 8004360:	f001 f804 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	2000e480 	.word	0x2000e480
 800436c:	40005800 	.word	0x40005800
 8004370:	000186a0 	.word	0x000186a0

08004374 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <MX_I2S2_Init+0x54>)
 800437a:	4a14      	ldr	r2, [pc, #80]	; (80043cc <MX_I2S2_Init+0x58>)
 800437c:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <MX_I2S2_Init+0x54>)
 8004380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004384:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <MX_I2S2_Init+0x54>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <MX_I2S2_Init+0x54>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <MX_I2S2_Init+0x54>)
 8004394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004398:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <MX_I2S2_Init+0x54>)
 800439c:	f64a 4244 	movw	r2, #44100	; 0xac44
 80043a0:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <MX_I2S2_Init+0x54>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <MX_I2S2_Init+0x54>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <MX_I2S2_Init+0x54>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <MX_I2S2_Init+0x54>)
 80043b6:	f004 f81d 	bl	80083f4 <HAL_I2S_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_I2S2_Init+0x50>
		Error_Handler();
 80043c0:	f000 ffd4 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000e4d4 	.word	0x2000e4d4
 80043cc:	40003800 	.word	0x40003800

080043d0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b090      	sub	sp, #64	; 0x40
 80043d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80043d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80043e6:	2300      	movs	r3, #0
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 80043ea:	463b      	mov	r3, r7
 80043ec:	2228      	movs	r2, #40	; 0x28
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f01a f95f 	bl	801e6b4 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <MX_RTC_Init+0x114>)
 80043f8:	4a3b      	ldr	r2, [pc, #236]	; (80044e8 <MX_RTC_Init+0x118>)
 80043fa:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043fc:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <MX_RTC_Init+0x114>)
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <MX_RTC_Init+0x114>)
 8004404:	227f      	movs	r2, #127	; 0x7f
 8004406:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <MX_RTC_Init+0x114>)
 800440a:	22ff      	movs	r2, #255	; 0xff
 800440c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <MX_RTC_Init+0x114>)
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004414:	4b33      	ldr	r3, [pc, #204]	; (80044e4 <MX_RTC_Init+0x114>)
 8004416:	2200      	movs	r2, #0
 8004418:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800441a:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <MX_RTC_Init+0x114>)
 800441c:	2200      	movs	r2, #0
 800441e:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004420:	4830      	ldr	r0, [pc, #192]	; (80044e4 <MX_RTC_Init+0x114>)
 8004422:	f005 fcb1 	bl	8009d88 <HAL_RTC_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_RTC_Init+0x60>
		Error_Handler();
 800442c:	f000 ff9e 	bl	800536c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8004430:	2300      	movs	r3, #0
 8004432:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8004436:	2300      	movs	r3, #0
 8004438:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004442:	2300      	movs	r3, #0
 8004444:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800444a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444e:	2201      	movs	r2, #1
 8004450:	4619      	mov	r1, r3
 8004452:	4824      	ldr	r0, [pc, #144]	; (80044e4 <MX_RTC_Init+0x114>)
 8004454:	f005 fd0e 	bl	8009e74 <HAL_RTC_SetTime>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_RTC_Init+0x92>
		Error_Handler();
 800445e:	f000 ff85 	bl	800536c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8004462:	2304      	movs	r3, #4
 8004464:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JUNE;
 8004468:	2306      	movs	r3, #6
 800446a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x23;
 800446e:	2323      	movs	r3, #35	; 0x23
 8004470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x22;
 8004474:	2322      	movs	r3, #34	; 0x22
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800447a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800447e:	2201      	movs	r2, #1
 8004480:	4619      	mov	r1, r3
 8004482:	4818      	ldr	r0, [pc, #96]	; (80044e4 <MX_RTC_Init+0x114>)
 8004484:	f005 fdee 	bl	800a064 <HAL_RTC_SetDate>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_RTC_Init+0xc2>
		Error_Handler();
 800448e:	f000 ff6d 	bl	800536c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8004492:	2300      	movs	r3, #0
 8004494:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8004496:	2300      	movs	r3, #0
 8004498:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 800449a:	2300      	movs	r3, #0
 800449c:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <MX_RTC_Init+0x11c>)
 80044ac:	617b      	str	r3, [r7, #20]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80044b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_TUESDAY;
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80044be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80044c4:	463b      	mov	r3, r7
 80044c6:	2201      	movs	r2, #1
 80044c8:	4619      	mov	r1, r3
 80044ca:	4806      	ldr	r0, [pc, #24]	; (80044e4 <MX_RTC_Init+0x114>)
 80044cc:	f005 fe9e 	bl	800a20c <HAL_RTC_SetAlarm_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_RTC_Init+0x10a>
		Error_Handler();
 80044d6:	f000 ff49 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80044da:	bf00      	nop
 80044dc:	3740      	adds	r7, #64	; 0x40
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	2000e5dc 	.word	0x2000e5dc
 80044e8:	40002800 	.word	0x40002800
 80044ec:	80808000 	.word	0x80808000

080044f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <MX_SPI1_Init+0x64>)
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <MX_SPI1_Init+0x68>)
 80044f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <MX_SPI1_Init+0x64>)
 80044fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004500:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <MX_SPI1_Init+0x64>)
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <MX_SPI1_Init+0x64>)
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <MX_SPI1_Init+0x64>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <MX_SPI1_Init+0x64>)
 8004516:	2200      	movs	r2, #0
 8004518:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <MX_SPI1_Init+0x64>)
 800451c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004520:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <MX_SPI1_Init+0x64>)
 8004524:	2200      	movs	r2, #0
 8004526:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <MX_SPI1_Init+0x64>)
 800452a:	2200      	movs	r2, #0
 800452c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <MX_SPI1_Init+0x64>)
 8004530:	2200      	movs	r2, #0
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <MX_SPI1_Init+0x64>)
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <MX_SPI1_Init+0x64>)
 800453c:	220a      	movs	r2, #10
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004540:	4804      	ldr	r0, [pc, #16]	; (8004554 <MX_SPI1_Init+0x64>)
 8004542:	f006 f8b2 	bl	800a6aa <HAL_SPI_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_SPI1_Init+0x60>
		Error_Handler();
 800454c:	f000 ff0e 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	2000e5fc 	.word	0x2000e5fc
 8004558:	40013000 	.word	0x40013000

0800455c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004562:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <MX_SPI3_Init+0x68>)
 8004564:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800456c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <MX_SPI3_Init+0x64>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004582:	2200      	movs	r2, #0
 8004584:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458c:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004590:	2200      	movs	r2, #0
 8004592:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <MX_SPI3_Init+0x64>)
 8004596:	2200      	movs	r2, #0
 8004598:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <MX_SPI3_Init+0x64>)
 800459c:	2200      	movs	r2, #0
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <MX_SPI3_Init+0x64>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <MX_SPI3_Init+0x64>)
 80045a8:	220a      	movs	r2, #10
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80045ac:	4804      	ldr	r0, [pc, #16]	; (80045c0 <MX_SPI3_Init+0x64>)
 80045ae:	f006 f87c 	bl	800a6aa <HAL_SPI_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_SPI3_Init+0x60>
		Error_Handler();
 80045b8:	f000 fed8 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2000e654 	.word	0x2000e654
 80045c4:	40003c00 	.word	0x40003c00

080045c8 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <MX_SPI5_Init+0x64>)
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <MX_SPI5_Init+0x68>)
 80045d0:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <MX_SPI5_Init+0x64>)
 80045d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045d8:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <MX_SPI5_Init+0x64>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <MX_SPI5_Init+0x64>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <MX_SPI5_Init+0x64>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <MX_SPI5_Init+0x64>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <MX_SPI5_Init+0x64>)
 80045f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f8:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <MX_SPI5_Init+0x64>)
 80045fc:	2210      	movs	r2, #16
 80045fe:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <MX_SPI5_Init+0x64>)
 8004602:	2200      	movs	r2, #0
 8004604:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <MX_SPI5_Init+0x64>)
 8004608:	2200      	movs	r2, #0
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <MX_SPI5_Init+0x64>)
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 10;
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <MX_SPI5_Init+0x64>)
 8004614:	220a      	movs	r2, #10
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8004618:	4804      	ldr	r0, [pc, #16]	; (800462c <MX_SPI5_Init+0x64>)
 800461a:	f006 f846 	bl	800a6aa <HAL_SPI_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_SPI5_Init+0x60>
		Error_Handler();
 8004624:	f000 fea2 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000e6ac 	.word	0x2000e6ac
 8004630:	40015000 	.word	0x40015000

08004634 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b092      	sub	sp, #72	; 0x48
 8004638:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800463a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
 8004654:	615a      	str	r2, [r3, #20]
 8004656:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	2220      	movs	r2, #32
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f01a f828 	bl	801e6b4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004664:	4b33      	ldr	r3, [pc, #204]	; (8004734 <MX_TIM1_Init+0x100>)
 8004666:	4a34      	ldr	r2, [pc, #208]	; (8004738 <MX_TIM1_Init+0x104>)
 8004668:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 89;
 800466a:	4b32      	ldr	r3, [pc, #200]	; (8004734 <MX_TIM1_Init+0x100>)
 800466c:	2259      	movs	r2, #89	; 0x59
 800466e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <MX_TIM1_Init+0x100>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 255;
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <MX_TIM1_Init+0x100>)
 8004678:	22ff      	movs	r2, #255	; 0xff
 800467a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <MX_TIM1_Init+0x100>)
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <MX_TIM1_Init+0x100>)
 8004684:	2200      	movs	r2, #0
 8004686:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004688:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <MX_TIM1_Init+0x100>)
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800468e:	4829      	ldr	r0, [pc, #164]	; (8004734 <MX_TIM1_Init+0x100>)
 8004690:	f006 fe18 	bl	800b2c4 <HAL_TIM_PWM_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM1_Init+0x6a>
		Error_Handler();
 800469a:	f000 fe67 	bl	800536c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80046a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046aa:	4619      	mov	r1, r3
 80046ac:	4821      	ldr	r0, [pc, #132]	; (8004734 <MX_TIM1_Init+0x100>)
 80046ae:	f007 fb89 	bl	800bdc4 <HAL_TIMEx_MasterConfigSynchronization>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 80046b8:	f000 fe58 	bl	800536c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046bc:	2360      	movs	r3, #96	; 0x60
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046c8:	2300      	movs	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80046d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80046da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046de:	2200      	movs	r2, #0
 80046e0:	4619      	mov	r1, r3
 80046e2:	4814      	ldr	r0, [pc, #80]	; (8004734 <MX_TIM1_Init+0x100>)
 80046e4:	f007 f80e 	bl	800b704 <HAL_TIM_PWM_ConfigChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80046ee:	f000 fe3d 	bl	800536c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800470a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4807      	ldr	r0, [pc, #28]	; (8004734 <MX_TIM1_Init+0x100>)
 8004716:	f007 fbd1 	bl	800bebc <HAL_TIMEx_ConfigBreakDeadTime>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8004720:	f000 fe24 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004724:	4803      	ldr	r0, [pc, #12]	; (8004734 <MX_TIM1_Init+0x100>)
 8004726:	f001 fb57 	bl	8005dd8 <HAL_TIM_MspPostInit>

}
 800472a:	bf00      	nop
 800472c:	3748      	adds	r7, #72	; 0x48
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000e764 	.word	0x2000e764
 8004738:	40010000 	.word	0x40010000

0800473c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004742:	f107 0320 	add.w	r3, r7, #32
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	609a      	str	r2, [r3, #8]
 8004756:	60da      	str	r2, [r3, #12]
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	615a      	str	r2, [r3, #20]
 800475c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <MX_TIM2_Init+0xac>)
 8004760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004764:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 89;
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <MX_TIM2_Init+0xac>)
 8004768:	2259      	movs	r2, #89	; 0x59
 800476a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <MX_TIM2_Init+0xac>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 8004772:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <MX_TIM2_Init+0xac>)
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <MX_TIM2_Init+0xac>)
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <MX_TIM2_Init+0xac>)
 8004780:	2280      	movs	r2, #128	; 0x80
 8004782:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8004784:	4818      	ldr	r0, [pc, #96]	; (80047e8 <MX_TIM2_Init+0xac>)
 8004786:	f006 fd9d 	bl	800b2c4 <HAL_TIM_PWM_Init>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_TIM2_Init+0x58>
		Error_Handler();
 8004790:	f000 fdec 	bl	800536c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800479c:	f107 0320 	add.w	r3, r7, #32
 80047a0:	4619      	mov	r1, r3
 80047a2:	4811      	ldr	r0, [pc, #68]	; (80047e8 <MX_TIM2_Init+0xac>)
 80047a4:	f007 fb0e 	bl	800bdc4 <HAL_TIMEx_MasterConfigSynchronization>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_TIM2_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80047ae:	f000 fddd 	bl	800536c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b2:	2360      	movs	r3, #96	; 0x60
 80047b4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	4619      	mov	r1, r3
 80047c8:	4807      	ldr	r0, [pc, #28]	; (80047e8 <MX_TIM2_Init+0xac>)
 80047ca:	f006 ff9b 	bl	800b704 <HAL_TIM_PWM_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80047d4:	f000 fdca 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80047d8:	4803      	ldr	r0, [pc, #12]	; (80047e8 <MX_TIM2_Init+0xac>)
 80047da:	f001 fafd 	bl	8005dd8 <HAL_TIM_MspPostInit>

}
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000e7ac 	.word	0x2000e7ac

080047ec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80047f2:	f107 0320 	add.w	r3, r7, #32
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	611a      	str	r2, [r3, #16]
 800480a:	615a      	str	r2, [r3, #20]
 800480c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <MX_TIM3_Init+0xac>)
 8004812:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 89;
 8004814:	4b1f      	ldr	r3, [pc, #124]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004816:	2259      	movs	r2, #89	; 0x59
 8004818:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <MX_TIM3_Init+0xa8>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004822:	22ff      	movs	r2, #255	; 0xff
 8004824:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <MX_TIM3_Init+0xa8>)
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004832:	4818      	ldr	r0, [pc, #96]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004834:	f006 fd46 	bl	800b2c4 <HAL_TIM_PWM_Init>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_TIM3_Init+0x56>
		Error_Handler();
 800483e:	f000 fd95 	bl	800536c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800484a:	f107 0320 	add.w	r3, r7, #32
 800484e:	4619      	mov	r1, r3
 8004850:	4810      	ldr	r0, [pc, #64]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004852:	f007 fab7 	bl	800bdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800485c:	f000 fd86 	bl	800536c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004860:	2360      	movs	r3, #96	; 0x60
 8004862:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	2200      	movs	r2, #0
 8004874:	4619      	mov	r1, r3
 8004876:	4807      	ldr	r0, [pc, #28]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004878:	f006 ff44 	bl	800b704 <HAL_TIM_PWM_ConfigChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8004882:	f000 fd73 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8004886:	4803      	ldr	r0, [pc, #12]	; (8004894 <MX_TIM3_Init+0xa8>)
 8004888:	f001 faa6 	bl	8005dd8 <HAL_TIM_MspPostInit>

}
 800488c:	bf00      	nop
 800488e:	3728      	adds	r7, #40	; 0x28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000e7f4 	.word	0x2000e7f4
 8004898:	40000400 	.word	0x40000400

0800489c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80048a2:	f107 0320 	add.w	r3, r7, #32
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	611a      	str	r2, [r3, #16]
 80048ba:	615a      	str	r2, [r3, #20]
 80048bc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <MX_TIM4_Init+0xc0>)
 80048c0:	4a27      	ldr	r2, [pc, #156]	; (8004960 <MX_TIM4_Init+0xc4>)
 80048c2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 89;
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <MX_TIM4_Init+0xc0>)
 80048c6:	2259      	movs	r2, #89	; 0x59
 80048c8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <MX_TIM4_Init+0xc0>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 255;
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <MX_TIM4_Init+0xc0>)
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048d6:	4b21      	ldr	r3, [pc, #132]	; (800495c <MX_TIM4_Init+0xc0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <MX_TIM4_Init+0xc0>)
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80048e2:	481e      	ldr	r0, [pc, #120]	; (800495c <MX_TIM4_Init+0xc0>)
 80048e4:	f006 fcee 	bl	800b2c4 <HAL_TIM_PWM_Init>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <MX_TIM4_Init+0x56>
		Error_Handler();
 80048ee:	f000 fd3d 	bl	800536c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80048fa:	f107 0320 	add.w	r3, r7, #32
 80048fe:	4619      	mov	r1, r3
 8004900:	4816      	ldr	r0, [pc, #88]	; (800495c <MX_TIM4_Init+0xc0>)
 8004902:	f007 fa5f 	bl	800bdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_TIM4_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800490c:	f000 fd2e 	bl	800536c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004910:	2360      	movs	r3, #96	; 0x60
 8004912:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2200      	movs	r2, #0
 8004924:	4619      	mov	r1, r3
 8004926:	480d      	ldr	r0, [pc, #52]	; (800495c <MX_TIM4_Init+0xc0>)
 8004928:	f006 feec 	bl	800b704 <HAL_TIM_PWM_ConfigChannel>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8004932:	f000 fd1b 	bl	800536c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	2208      	movs	r2, #8
 800493a:	4619      	mov	r1, r3
 800493c:	4807      	ldr	r0, [pc, #28]	; (800495c <MX_TIM4_Init+0xc0>)
 800493e:	f006 fee1 	bl	800b704 <HAL_TIM_PWM_ConfigChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8004948:	f000 fd10 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800494c:	4803      	ldr	r0, [pc, #12]	; (800495c <MX_TIM4_Init+0xc0>)
 800494e:	f001 fa43 	bl	8005dd8 <HAL_TIM_MspPostInit>

}
 8004952:	bf00      	nop
 8004954:	3728      	adds	r7, #40	; 0x28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2000e83c 	.word	0x2000e83c
 8004960:	40000800 	.word	0x40000800

08004964 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <MX_UART7_Init+0x4c>)
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <MX_UART7_Init+0x50>)
 800496c:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <MX_UART7_Init+0x4c>)
 8004970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004974:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <MX_UART7_Init+0x4c>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <MX_UART7_Init+0x4c>)
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <MX_UART7_Init+0x4c>)
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <MX_UART7_Init+0x4c>)
 800498a:	220c      	movs	r2, #12
 800498c:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <MX_UART7_Init+0x4c>)
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <MX_UART7_Init+0x4c>)
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800499a:	4805      	ldr	r0, [pc, #20]	; (80049b0 <MX_UART7_Init+0x4c>)
 800499c:	f007 faf4 	bl	800bf88 <HAL_UART_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_UART7_Init+0x46>
		Error_Handler();
 80049a6:	f000 fce1 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000e884 	.word	0x2000e884
 80049b4:	40007800 	.word	0x40007800

080049b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <MX_USART1_UART_Init+0x50>)
 80049c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80049c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049de:	220c      	movs	r2, #12
 80049e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80049ee:	4805      	ldr	r0, [pc, #20]	; (8004a04 <MX_USART1_UART_Init+0x4c>)
 80049f0:	f007 faca 	bl	800bf88 <HAL_UART_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80049fa:	f000 fcb7 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	2000e8c8 	.word	0x2000e8c8
 8004a08:	40011000 	.word	0x40011000

08004a0c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <MX_USART2_UART_Init+0x50>)
 8004a14:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 460800;
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a18:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004a1c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a32:	220c      	movs	r2, #12
 8004a34:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_USART2_UART_Init+0x4c>)
 8004a44:	f007 faa0 	bl	800bf88 <HAL_UART_Init>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8004a4e:	f000 fc8d 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000e90c 	.word	0x2000e90c
 8004a5c:	40004400 	.word	0x40004400

08004a60 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <MX_USART3_UART_Init+0x50>)
 8004a68:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 460800;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a6c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004a70:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a86:	220c      	movs	r2, #12
 8004a88:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <MX_USART3_UART_Init+0x4c>)
 8004a98:	f007 fa76 	bl	800bf88 <HAL_UART_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8004aa2:	f000 fc63 	bl	800536c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000e950 	.word	0x2000e950
 8004ab0:	40004800 	.word	0x40004800

08004ab4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <MX_DMA_Init+0x78>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <MX_DMA_Init+0x78>)
 8004ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <MX_DMA_Init+0x78>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <MX_DMA_Init+0x78>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <MX_DMA_Init+0x78>)
 8004ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <MX_DMA_Init+0x78>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 14, 0);
 8004af2:	2200      	movs	r2, #0
 8004af4:	210e      	movs	r1, #14
 8004af6:	200e      	movs	r0, #14
 8004af8:	f001 fe54 	bl	80067a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004afc:	200e      	movs	r0, #14
 8004afe:	f001 fe6d 	bl	80067dc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 13, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	210d      	movs	r1, #13
 8004b06:	200f      	movs	r0, #15
 8004b08:	f001 fe4c 	bl	80067a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004b0c:	200f      	movs	r0, #15
 8004b0e:	f001 fe65 	bl	80067dc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2105      	movs	r1, #5
 8004b16:	203c      	movs	r0, #60	; 0x3c
 8004b18:	f001 fe44 	bl	80067a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004b1c:	203c      	movs	r0, #60	; 0x3c
 8004b1e:	f001 fe5d 	bl	80067dc <HAL_NVIC_EnableIRQ>

}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	4b70      	ldr	r3, [pc, #448]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	4a6f      	ldr	r2, [pc, #444]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b50:	f043 0310 	orr.w	r3, r3, #16
 8004b54:	6313      	str	r3, [r2, #48]	; 0x30
 8004b56:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	4b69      	ldr	r3, [pc, #420]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	4a68      	ldr	r2, [pc, #416]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b6c:	f043 0304 	orr.w	r3, r3, #4
 8004b70:	6313      	str	r3, [r2, #48]	; 0x30
 8004b72:	4b66      	ldr	r3, [pc, #408]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	4b62      	ldr	r3, [pc, #392]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b88:	f043 0320 	orr.w	r3, r3, #32
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4a5a      	ldr	r2, [pc, #360]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8004baa:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4a53      	ldr	r2, [pc, #332]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc6:	4b51      	ldr	r3, [pc, #324]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	4b4d      	ldr	r3, [pc, #308]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	6313      	str	r3, [r2, #48]	; 0x30
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4a45      	ldr	r2, [pc, #276]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfe:	4b43      	ldr	r3, [pc, #268]	; (8004d0c <MX_GPIO_Init+0x1dc>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_SPI_CS_GPIO_Port, BT_WIFI_SPI_CS_Pin,
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	4840      	ldr	r0, [pc, #256]	; (8004d10 <MX_GPIO_Init+0x1e0>)
 8004c10:	f002 fbae 	bl	8007370 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_CHIP_EN_GPIO_Port, BT_WIFI_CHIP_EN_Pin,
 8004c14:	2200      	movs	r2, #0
 8004c16:	2101      	movs	r1, #1
 8004c18:	483e      	ldr	r0, [pc, #248]	; (8004d14 <MX_GPIO_Init+0x1e4>)
 8004c1a:	f002 fba9 	bl	8007370 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_SPI3_CS_Pin | FAN_ON_Pin | PLAY_OUT_Pin,
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f641 0110 	movw	r1, #6160	; 0x1810
 8004c24:	483c      	ldr	r0, [pc, #240]	; (8004d18 <MX_GPIO_Init+0x1e8>)
 8004c26:	f002 fba3 	bl	8007370 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_RESETN_GPIO_Port, BT_WIFI_RESETN_Pin,
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	483b      	ldr	r0, [pc, #236]	; (8004d1c <MX_GPIO_Init+0x1ec>)
 8004c30:	f002 fb9e 	bl	8007370 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : BT_WIFI_IRQN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_IRQN_Pin;
 8004c34:	2310      	movs	r3, #16
 8004c36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004c3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BT_WIFI_IRQN_GPIO_Port, &GPIO_InitStruct);
 8004c42:	f107 031c 	add.w	r3, r7, #28
 8004c46:	4619      	mov	r1, r3
 8004c48:	4835      	ldr	r0, [pc, #212]	; (8004d20 <MX_GPIO_Init+0x1f0>)
 8004c4a:	f002 f9e5 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_DETECTS_Pin LID_UPDN_Pin SYS_LOCK_Pin */
	GPIO_InitStruct.Pin = SD_DETECTS_Pin | LID_UPDN_Pin | SYS_LOCK_Pin;
 8004c4e:	2361      	movs	r3, #97	; 0x61
 8004c50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c52:	2300      	movs	r3, #0
 8004c54:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c56:	2301      	movs	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c5a:	f107 031c 	add.w	r3, r7, #28
 8004c5e:	4619      	mov	r1, r3
 8004c60:	482f      	ldr	r0, [pc, #188]	; (8004d20 <MX_GPIO_Init+0x1f0>)
 8004c62:	f002 f9d9 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_SPI_CS_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_SPI_CS_Pin;
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c72:	2302      	movs	r3, #2
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004c76:	f107 031c 	add.w	r3, r7, #28
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4824      	ldr	r0, [pc, #144]	; (8004d10 <MX_GPIO_Init+0x1e0>)
 8004c7e:	f002 f9cb 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_CHIP_EN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_CHIP_EN_Pin;
 8004c82:	2301      	movs	r3, #1
 8004c84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c86:	2301      	movs	r3, #1
 8004c88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);
 8004c92:	f107 031c 	add.w	r3, r7, #28
 8004c96:	4619      	mov	r1, r3
 8004c98:	481e      	ldr	r0, [pc, #120]	; (8004d14 <MX_GPIO_Init+0x1e4>)
 8004c9a:	f002 f9bd 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI3_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI3_CS_Pin;
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SD_SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8004cae:	f107 031c 	add.w	r3, r7, #28
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4818      	ldr	r0, [pc, #96]	; (8004d18 <MX_GPIO_Init+0x1e8>)
 8004cb6:	f002 f9af 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_RESETN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_RESETN_Pin;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_RESETN_GPIO_Port, &GPIO_InitStruct);
 8004cca:	f107 031c 	add.w	r3, r7, #28
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4812      	ldr	r0, [pc, #72]	; (8004d1c <MX_GPIO_Init+0x1ec>)
 8004cd2:	f002 f9a1 	bl	8007018 <HAL_GPIO_Init>

	/*Configure GPIO pins : FAN_ON_Pin PLAY_OUT_Pin */
	GPIO_InitStruct.Pin = FAN_ON_Pin | PLAY_OUT_Pin;
 8004cd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004cda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce8:	f107 031c 	add.w	r3, r7, #28
 8004cec:	4619      	mov	r1, r3
 8004cee:	480a      	ldr	r0, [pc, #40]	; (8004d18 <MX_GPIO_Init+0x1e8>)
 8004cf0:	f002 f992 	bl	8007018 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 10, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	210a      	movs	r1, #10
 8004cf8:	200a      	movs	r0, #10
 8004cfa:	f001 fd53 	bl	80067a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004cfe:	200a      	movs	r0, #10
 8004d00:	f001 fd6c 	bl	80067dc <HAL_NVIC_EnableIRQ>

}
 8004d04:	bf00      	nop
 8004d06:	3730      	adds	r7, #48	; 0x30
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40021400 	.word	0x40021400
 8004d14:	40020800 	.word	0x40020800
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	LcdUartReceiveCallback(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fd fa81 	bl	8002234 <LcdUartReceiveCallback>
	BTUartReceiveCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd ff7c 	bl	8002c30 <BTUartReceiveCallback>
	WiFiUartReceiveCallback(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fd ffa3 	bl	8002c84 <WiFiUartReceiveCallback>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <StartCommTask>:

void StartCommTask(void *argument) {
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
	StartLcdUartReceiveProc();
 8004d4e:	f7fd fa5f 	bl	8002210 <StartLcdUartReceiveProc>

	StartBTUartReceiveProc();
 8004d52:	f7fd ff5b 	bl	8002c0c <StartBTUartReceiveProc>
	StartWiFiUartReceiveProc();
 8004d56:	f7fd ff83 	bl	8002c60 <StartWiFiUartReceiveProc>
	/* Initialize the BSP. */

	/* Infinite loop */
	for (;;) {
		EsimationLcdUartComm();
 8004d5a:	f7fd fb07 	bl	800236c <EsimationLcdUartComm>
		osDelay(5);
 8004d5e:	2005      	movs	r0, #5
 8004d60:	f010 fd64 	bl	801582c <osDelay>
		EsimationLcdUartComm();
 8004d64:	e7f9      	b.n	8004d5a <StartCommTask+0x14>
	...

08004d68 <SendEmailInit>:
	}
}

void SendEmailInit(void) {
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
	gu8RetryCount = 0;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <SendEmailInit+0x1c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
	gu8SocketStatus = SocketInit;
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SendEmailInit+0x20>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	200113ac 	.word	0x200113ac
 8004d88:	20010aa8 	.word	0x20010aa8

08004d8c <StartWiFiProvTask>:

void StartWiFiProvTask(void *argument) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	6078      	str	r0, [r7, #4]
	uint8_t app_state = APP_STATE_IDLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	77fb      	strb	r3, [r7, #31]
	uint8_t wifi_con_state = M2M_WIFI_UNDEF;
 8004d98:	23ff      	movs	r3, #255	; 0xff
 8004d9a:	77bb      	strb	r3, [r7, #30]
	at_ble_events_t ble_event;

	int8_t ret;
	struct sockaddr_in addr;

	printf("This is BLE Test version\r\n");
 8004d9c:	484b      	ldr	r0, [pc, #300]	; (8004ecc <StartWiFiProvTask+0x140>)
 8004d9e:	f019 fb6f 	bl	801e480 <puts>
	sprintf(strSendingEmail, "This email is from SOMA Board\r\n");
 8004da2:	494b      	ldr	r1, [pc, #300]	; (8004ed0 <StartWiFiProvTask+0x144>)
 8004da4:	484b      	ldr	r0, [pc, #300]	; (8004ed4 <StartWiFiProvTask+0x148>)
 8004da6:	f019 fb73 	bl	801e490 <siprintf>
	nm_bsp_init();
 8004daa:	f013 ff92 	bl	8018cd2 <nm_bsp_init>
//	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
//	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);

	/* Initialize WiFi interface first.
	 3400 WiFi HIF is used to convey BLE API primitives.*/
	app_wifi_init(app_wifi_handle_event);
 8004dae:	484a      	ldr	r0, [pc, #296]	; (8004ed8 <StartWiFiProvTask+0x14c>)
 8004db0:	f7fe f8cc 	bl	8002f4c <app_wifi_init>
	//nm_bsp_btn_init(app_button_press_callback);

	// Init socket Module
	socketInit();
 8004db4:	f018 fb80 	bl	801d4b8 <socketInit>
	registerSocketCallback(socket_cb, resolve_cb);
 8004db8:	4948      	ldr	r1, [pc, #288]	; (8004edc <StartWiFiProvTask+0x150>)
 8004dba:	4849      	ldr	r0, [pc, #292]	; (8004ee0 <StartWiFiProvTask+0x154>)
 8004dbc:	f018 fb9c 	bl	801d4f8 <registerSocketCallback>

	/* SNTP configuration */
	ret = m2m_wifi_configure_sntp((uint8_t*) MAIN_WORLDWIDE_NTP_POOL_HOSTNAME,
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	210e      	movs	r1, #14
 8004dc4:	4847      	ldr	r0, [pc, #284]	; (8004ee4 <StartWiFiProvTask+0x158>)
 8004dc6:	f016 f816 	bl	801adf6 <m2m_wifi_configure_sntp>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	777b      	strb	r3, [r7, #29]
			strlen(MAIN_WORLDWIDE_NTP_POOL_HOSTNAME), SNTP_ENABLE_DHCP);
	if (M2M_SUCCESS != ret) {
 8004dce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <StartWiFiProvTask+0x52>
		printf("main: SNTP %s configuration Failure\r\n",
 8004dd6:	4943      	ldr	r1, [pc, #268]	; (8004ee4 <StartWiFiProvTask+0x158>)
 8004dd8:	4843      	ldr	r0, [pc, #268]	; (8004ee8 <StartWiFiProvTask+0x15c>)
 8004dda:	f019 fae3 	bl	801e3a4 <iprintf>
				MAIN_WORLDWIDE_NTP_POOL_HOSTNAME);
	}

	/* Connect to AP. */
	m2m_wifi_connect((char*) MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4b42      	ldr	r3, [pc, #264]	; (8004eec <StartWiFiProvTask+0x160>)
 8004de4:	2202      	movs	r2, #2
 8004de6:	211a      	movs	r1, #26
 8004de8:	4841      	ldr	r0, [pc, #260]	; (8004ef0 <StartWiFiProvTask+0x164>)
 8004dea:	f015 fe64 	bl	801aab6 <m2m_wifi_connect>
//			}
//		}

		// SMTP Test
//		if (gu8WiFiConnectionState == M2M_WIFI_CONNECTED)
		m2m_wifi_handle_events(NULL);
 8004dee:	2000      	movs	r0, #0
 8004df0:	f015 fb92 	bl	801a518 <m2m_wifi_handle_events>

		if (flagOneMinute) {
 8004df4:	4b3f      	ldr	r3, [pc, #252]	; (8004ef4 <StartWiFiProvTask+0x168>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d063      	beq.n	8004ec4 <StartWiFiProvTask+0x138>
			if (gbConnectedWifi && gbHostIpByName) {
 8004dfc:	4b3e      	ldr	r3, [pc, #248]	; (8004ef8 <StartWiFiProvTask+0x16c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05f      	beq.n	8004ec4 <StartWiFiProvTask+0x138>
 8004e04:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <StartWiFiProvTask+0x170>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d05b      	beq.n	8004ec4 <StartWiFiProvTask+0x138>
				if (gu8SocketStatus == SocketInit) {
 8004e0c:	4b3c      	ldr	r3, [pc, #240]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d110      	bne.n	8004e36 <StartWiFiProvTask+0xaa>
					if (tcp_client_socket < 0) {
 8004e14:	4b3b      	ldr	r3, [pc, #236]	; (8004f04 <StartWiFiProvTask+0x178>)
 8004e16:	f993 3000 	ldrsb.w	r3, [r3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da52      	bge.n	8004ec4 <StartWiFiProvTask+0x138>
						gu8SocketStatus = SocketWaiting;
 8004e1e:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e20:	2202      	movs	r2, #2
 8004e22:	701a      	strb	r2, [r3, #0]
						if (smtpConnect() != SOCK_ERR_NO_ERROR) {
 8004e24:	f7fe fb4e 	bl	80034c4 <smtpConnect>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04a      	beq.n	8004ec4 <StartWiFiProvTask+0x138>
							gu8SocketStatus = SocketInit;
 8004e2e:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e046      	b.n	8004ec4 <StartWiFiProvTask+0x138>
						}
					}
				} else if (gu8SocketStatus == SocketConnect) {
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d116      	bne.n	8004e6c <StartWiFiProvTask+0xe0>
					gu8SocketStatus = SocketWaiting;
 8004e3e:	4b30      	ldr	r3, [pc, #192]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e40:	2202      	movs	r2, #2
 8004e42:	701a      	strb	r2, [r3, #0]
					if (smtpStateHandler() != MAIN_EMAIL_ERROR_NONE) {
 8004e44:	f7fe fc14 	bl	8003670 <smtpStateHandler>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d03a      	beq.n	8004ec4 <StartWiFiProvTask+0x138>
						if (gs8EmailError == MAIN_EMAIL_ERROR_INIT) {
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <StartWiFiProvTask+0x17c>)
 8004e50:	f993 3000 	ldrsb.w	r3, [r3]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d103      	bne.n	8004e60 <StartWiFiProvTask+0xd4>
							gu8SocketStatus = SocketError;
 8004e58:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e031      	b.n	8004ec4 <StartWiFiProvTask+0x138>
						} else {
							close_socket();
 8004e60:	f7fe fff8 	bl	8003e54 <close_socket>
							flagOneMinute = 0;
 8004e64:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <StartWiFiProvTask+0x168>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e02b      	b.n	8004ec4 <StartWiFiProvTask+0x138>
//							break;
						}
					}
				} else if (gu8SocketStatus == SocketComplete) {
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d108      	bne.n	8004e86 <StartWiFiProvTask+0xfa>
					printf("main: Email was successfully sent.\r\n");
 8004e74:	4825      	ldr	r0, [pc, #148]	; (8004f0c <StartWiFiProvTask+0x180>)
 8004e76:	f019 fb03 	bl	801e480 <puts>
					close_socket();
 8004e7a:	f7fe ffeb 	bl	8003e54 <close_socket>
					flagOneMinute = 0;
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <StartWiFiProvTask+0x168>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e01e      	b.n	8004ec4 <StartWiFiProvTask+0x138>
//					break;
				} else if (gu8SocketStatus == SocketError) {
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <StartWiFiProvTask+0x174>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d11a      	bne.n	8004ec4 <StartWiFiProvTask+0x138>
					if (gu8RetryCount < MAIN_RETRY_COUNT) {
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <StartWiFiProvTask+0x184>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d80b      	bhi.n	8004eae <StartWiFiProvTask+0x122>
						gu8RetryCount++;
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <StartWiFiProvTask+0x184>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <StartWiFiProvTask+0x184>)
 8004ea0:	701a      	strb	r2, [r3, #0]
						printf(
 8004ea2:	481c      	ldr	r0, [pc, #112]	; (8004f14 <StartWiFiProvTask+0x188>)
 8004ea4:	f019 faec 	bl	801e480 <puts>
								"main: Waiting to connect server.(30 seconds)\r\n\r\n");
						retry_smtp_server();
 8004ea8:	f7fe ffe4 	bl	8003e74 <retry_smtp_server>
 8004eac:	e00a      	b.n	8004ec4 <StartWiFiProvTask+0x138>
					} else {
						printf(
 8004eae:	481a      	ldr	r0, [pc, #104]	; (8004f18 <StartWiFiProvTask+0x18c>)
 8004eb0:	f019 fae6 	bl	801e480 <puts>
								"main: Failed retry to server. Press reset your board.\r\n");
						gu8RetryCount = 0;
 8004eb4:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <StartWiFiProvTask+0x184>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
						close_socket();
 8004eba:	f7fe ffcb 	bl	8003e54 <close_socket>
						flagOneMinute = 0;
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <StartWiFiProvTask+0x168>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
//						break;
					}
				}
			}
		}
		osDelay(10);
 8004ec4:	200a      	movs	r0, #10
 8004ec6:	f010 fcb1 	bl	801582c <osDelay>
		m2m_wifi_handle_events(NULL);
 8004eca:	e790      	b.n	8004dee <StartWiFiProvTask+0x62>
 8004ecc:	08020304 	.word	0x08020304
 8004ed0:	08020320 	.word	0x08020320
 8004ed4:	200123b0 	.word	0x200123b0
 8004ed8:	080031d5 	.word	0x080031d5
 8004edc:	0800384d 	.word	0x0800384d
 8004ee0:	080038a1 	.word	0x080038a1
 8004ee4:	08020340 	.word	0x08020340
 8004ee8:	08020350 	.word	0x08020350
 8004eec:	08020378 	.word	0x08020378
 8004ef0:	08020384 	.word	0x08020384
 8004ef4:	200133c8 	.word	0x200133c8
 8004ef8:	200113ad 	.word	0x200113ad
 8004efc:	200113ae 	.word	0x200113ae
 8004f00:	20010aa8 	.word	0x20010aa8
 8004f04:	20000007 	.word	0x20000007
 8004f08:	20010aa9 	.word	0x20010aa9
 8004f0c:	080203a0 	.word	0x080203a0
 8004f10:	200113ac 	.word	0x200113ac
 8004f14:	080203c4 	.word	0x080203c4
 8004f18:	080203f4 	.word	0x080203f4

08004f1c <HAL_GPIO_EXTI_Callback>:
	}
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BT_WIFI_IRQN_Pin) {
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d101      	bne.n	8004f30 <HAL_GPIO_EXTI_Callback+0x14>
		isr();
 8004f2c:	f014 f89c 	bl	8019068 <isr>
	}

}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	b08c      	sub	sp, #48	; 0x30
 8004f3e:	af04      	add	r7, sp, #16
 8004f40:	6078      	str	r0, [r7, #4]
	char msg[21]; //YYYY-MM-DD HH:mm:SS

	HAL_RTC_GetTime(hrtc, &rtc_time, RTC_FORMAT_BCD);
 8004f42:	2201      	movs	r2, #1
 8004f44:	4925      	ldr	r1, [pc, #148]	; (8004fdc <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f005 f82e 	bl	8009fa8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &rtc_date, RTC_FORMAT_BCD);
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4924      	ldr	r1, [pc, #144]	; (8004fe0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f005 f90b 	bl	800a16c <HAL_RTC_GetDate>

	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f56:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f58:	78db      	ldrb	r3, [r3, #3]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fe18 	bl	8002b90 <B2D>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fe10 	bl	8002b90 <B2D>
 8004f70:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f72:	4698      	mov	r8, r3
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f76:	789b      	ldrb	r3, [r3, #2]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd fe09 	bl	8002b90 <B2D>
 8004f7e:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f80:	461d      	mov	r5, r3
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fe02 	bl	8002b90 <B2D>
 8004f8c:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f8e:	461e      	mov	r6, r3
			B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd fdfb 	bl	8002b90 <B2D>
 8004f9a:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f9c:	603b      	str	r3, [r7, #0]
			B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fdf4 	bl	8002b90 <B2D>
 8004fa8:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004faa:	f107 0008 	add.w	r0, r7, #8
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9302      	str	r3, [sp, #8]
 8004fb4:	9601      	str	r6, [sp, #4]
 8004fb6:	9500      	str	r5, [sp, #0]
 8004fb8:	4643      	mov	r3, r8
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4909      	ldr	r1, [pc, #36]	; (8004fe4 <HAL_RTC_AlarmAEventCallback+0xac>)
 8004fbe:	f019 fa67 	bl	801e490 <siprintf>
	printf(msg);
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f019 f9ec 	bl	801e3a4 <iprintf>

	flagOneMinuteOnce = 1;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fdc:	200133b4 	.word	0x200133b4
 8004fe0:	200133b0 	.word	0x200133b0
 8004fe4:	0802042c 	.word	0x0802042c
 8004fe8:	200133c9 	.word	0x200133c9

08004fec <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	b08c      	sub	sp, #48	; 0x30
 8004ff2:	af06      	add	r7, sp, #24
 8004ff4:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN 5 */
	uint8_t testNum = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
	osDelay(500);
 8004ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ffe:	f010 fc15 	bl	801582c <osDelay>
	sgtl5000_init();
 8005002:	f000 fa9f 	bl	8005544 <sgtl5000_init>
	sgtl5000_set_volume(systemVolume);
 8005006:	4baa      	ldr	r3, [pc, #680]	; (80052b0 <StartDefaultTask+0x2c4>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa14 	bl	8005438 <sgtl5000_set_volume>
	osDelay(500);
 8005010:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005014:	f010 fc0a 	bl	801582c <osDelay>

	/* Mount SDCARD */
	if (f_mount(&fs, "", 0) != FR_OK)
 8005018:	2200      	movs	r2, #0
 800501a:	49a6      	ldr	r1, [pc, #664]	; (80052b4 <StartDefaultTask+0x2c8>)
 800501c:	48a6      	ldr	r0, [pc, #664]	; (80052b8 <StartDefaultTask+0x2cc>)
 800501e:	f00e fe3b 	bl	8013c98 <f_mount>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <StartDefaultTask+0x40>
		Error_Handler();
 8005028:	f000 f9a0 	bl	800536c <Error_Handler>

	/* Open file to write */
	if (f_open(&fil, "logTXT.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE)
 800502c:	2233      	movs	r2, #51	; 0x33
 800502e:	49a3      	ldr	r1, [pc, #652]	; (80052bc <StartDefaultTask+0x2d0>)
 8005030:	48a3      	ldr	r0, [pc, #652]	; (80052c0 <StartDefaultTask+0x2d4>)
 8005032:	f00e fe95 	bl	8013d60 <f_open>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <StartDefaultTask+0x54>
			!= FR_OK)
		Error_Handler();
 800503c:	f000 f996 	bl	800536c <Error_Handler>

	/* Check freeSpace space */
	if (f_getfree("", &fre_clust, &pfs) != FR_OK)
 8005040:	4aa0      	ldr	r2, [pc, #640]	; (80052c4 <StartDefaultTask+0x2d8>)
 8005042:	49a1      	ldr	r1, [pc, #644]	; (80052c8 <StartDefaultTask+0x2dc>)
 8005044:	489b      	ldr	r0, [pc, #620]	; (80052b4 <StartDefaultTask+0x2c8>)
 8005046:	f00f ffd2 	bl	8014fee <f_getfree>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <StartDefaultTask+0x68>
		Error_Handler();
 8005050:	f000 f98c 	bl	800536c <Error_Handler>

	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8005054:	4b9b      	ldr	r3, [pc, #620]	; (80052c4 <StartDefaultTask+0x2d8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	3b02      	subs	r3, #2
 800505c:	4a99      	ldr	r2, [pc, #612]	; (80052c4 <StartDefaultTask+0x2d8>)
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	8952      	ldrh	r2, [r2, #10]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb fb96 	bl	8000798 <__aeabi_ui2d>
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	4b96      	ldr	r3, [pc, #600]	; (80052cc <StartDefaultTask+0x2e0>)
 8005072:	f7fb f925 	bl	80002c0 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	f7fb fc05 	bl	800088c <__aeabi_d2uiz>
 8005082:	4603      	mov	r3, r0
 8005084:	4a92      	ldr	r2, [pc, #584]	; (80052d0 <StartDefaultTask+0x2e4>)
 8005086:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8005088:	4b8e      	ldr	r3, [pc, #568]	; (80052c4 <StartDefaultTask+0x2d8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	895b      	ldrh	r3, [r3, #10]
 800508e:	461a      	mov	r2, r3
 8005090:	4b8d      	ldr	r3, [pc, #564]	; (80052c8 <StartDefaultTask+0x2dc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	fb02 f303 	mul.w	r3, r2, r3
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fb7d 	bl	8000798 <__aeabi_ui2d>
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	4b8a      	ldr	r3, [pc, #552]	; (80052cc <StartDefaultTask+0x2e0>)
 80050a4:	f7fb f90c 	bl	80002c0 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fb fbec 	bl	800088c <__aeabi_d2uiz>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4a87      	ldr	r2, [pc, #540]	; (80052d4 <StartDefaultTask+0x2e8>)
 80050b8:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if (freeSpace < 1)
 80050ba:	4b86      	ldr	r3, [pc, #536]	; (80052d4 <StartDefaultTask+0x2e8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <StartDefaultTask+0xda>
		Error_Handler();
 80050c2:	f000 f953 	bl	800536c <Error_Handler>

	/* Writing text */
	f_puts("This is for testing SD card.\r\n", &fil);
 80050c6:	497e      	ldr	r1, [pc, #504]	; (80052c0 <StartDefaultTask+0x2d4>)
 80050c8:	4883      	ldr	r0, [pc, #524]	; (80052d8 <StartDefaultTask+0x2ec>)
 80050ca:	f010 f900 	bl	80152ce <f_puts>

	/* Close file */
	if (f_close(&fil) != FR_OK)
 80050ce:	487c      	ldr	r0, [pc, #496]	; (80052c0 <StartDefaultTask+0x2d4>)
 80050d0:	f00f fcf0 	bl	8014ab4 <f_close>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <StartDefaultTask+0xf2>
		Error_Handler();
 80050da:	f000 f947 	bl	800536c <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 80050de:	2201      	movs	r2, #1
 80050e0:	4974      	ldr	r1, [pc, #464]	; (80052b4 <StartDefaultTask+0x2c8>)
 80050e2:	2000      	movs	r0, #0
 80050e4:	f00e fdd8 	bl	8013c98 <f_mount>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <StartDefaultTask+0x106>
		Error_Handler();
 80050ee:	f000 f93d 	bl	800536c <Error_Handler>

	/* Infinite loop */
	for (;;) {
		switch (playState) {
 80050f2:	4b7a      	ldr	r3, [pc, #488]	; (80052dc <StartDefaultTask+0x2f0>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	f000 8104 	beq.w	8005304 <StartDefaultTask+0x318>
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	dcf8      	bgt.n	80050f2 <StartDefaultTask+0x106>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <StartDefaultTask+0x120>
 8005104:	2b01      	cmp	r3, #1
 8005106:	f000 80cc 	beq.w	80052a2 <StartDefaultTask+0x2b6>
 800510a:	e7f2      	b.n	80050f2 <StartDefaultTask+0x106>
		case PLAY_NONE:
			if (flagOneMinuteOnce) {
 800510c:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <StartDefaultTask+0x2f4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80c2 	beq.w	800529a <StartDefaultTask+0x2ae>
				flagOneMinuteOnce = 0;
 8005116:	4b72      	ldr	r3, [pc, #456]	; (80052e0 <StartDefaultTask+0x2f4>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD);
 800511c:	2201      	movs	r2, #1
 800511e:	4971      	ldr	r1, [pc, #452]	; (80052e4 <StartDefaultTask+0x2f8>)
 8005120:	4871      	ldr	r0, [pc, #452]	; (80052e8 <StartDefaultTask+0x2fc>)
 8005122:	f004 ff41 	bl	8009fa8 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BCD);
 8005126:	2201      	movs	r2, #1
 8005128:	4970      	ldr	r1, [pc, #448]	; (80052ec <StartDefaultTask+0x300>)
 800512a:	486f      	ldr	r0, [pc, #444]	; (80052e8 <StartDefaultTask+0x2fc>)
 800512c:	f005 f81e 	bl	800a16c <HAL_RTC_GetDate>

				sprintf(strSendingEmail,
						"This email is from SOMA Board\r\n %04d-%02d-%02d %02d:%02d:%02d\r\n",
						B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8005130:	4b6e      	ldr	r3, [pc, #440]	; (80052ec <StartDefaultTask+0x300>)
 8005132:	78db      	ldrb	r3, [r3, #3]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd fd2b 	bl	8002b90 <B2D>
 800513a:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 800513c:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
						B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8005140:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <StartDefaultTask+0x300>)
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd fd23 	bl	8002b90 <B2D>
 800514a:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 800514c:	4698      	mov	r8, r3
						B2D(rtc_date.Date), B2D(rtc_time.Hours),
 800514e:	4b67      	ldr	r3, [pc, #412]	; (80052ec <StartDefaultTask+0x300>)
 8005150:	789b      	ldrb	r3, [r3, #2]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fd1c 	bl	8002b90 <B2D>
 8005158:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 800515a:	461d      	mov	r5, r3
						B2D(rtc_date.Date), B2D(rtc_time.Hours),
 800515c:	4b61      	ldr	r3, [pc, #388]	; (80052e4 <StartDefaultTask+0x2f8>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fd fd15 	bl	8002b90 <B2D>
 8005166:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005168:	461e      	mov	r6, r3
						B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 800516a:	4b5e      	ldr	r3, [pc, #376]	; (80052e4 <StartDefaultTask+0x2f8>)
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd fd0e 	bl	8002b90 <B2D>
 8005174:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005176:	60bb      	str	r3, [r7, #8]
						B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8005178:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <StartDefaultTask+0x2f8>)
 800517a:	789b      	ldrb	r3, [r3, #2]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fd fd07 	bl	8002b90 <B2D>
 8005182:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	9601      	str	r6, [sp, #4]
 800518c:	9500      	str	r5, [sp, #0]
 800518e:	4643      	mov	r3, r8
 8005190:	4622      	mov	r2, r4
 8005192:	4957      	ldr	r1, [pc, #348]	; (80052f0 <StartDefaultTask+0x304>)
 8005194:	4857      	ldr	r0, [pc, #348]	; (80052f4 <StartDefaultTask+0x308>)
 8005196:	f019 f97b 	bl	801e490 <siprintf>

				memcpy(strLogBuffer, 0, sizeof(strLogBuffer));
 800519a:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <StartDefaultTask+0x30c>)
 800519c:	2300      	movs	r3, #0
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a6:	461a      	mov	r2, r3
 80051a8:	f019 fb6c 	bl	801e884 <memcpy>
				/* Mount SDCARD */
				if (f_mount(&fs, "", 0) != FR_OK)
 80051ac:	2200      	movs	r2, #0
 80051ae:	4941      	ldr	r1, [pc, #260]	; (80052b4 <StartDefaultTask+0x2c8>)
 80051b0:	4841      	ldr	r0, [pc, #260]	; (80052b8 <StartDefaultTask+0x2cc>)
 80051b2:	f00e fd71 	bl	8013c98 <f_mount>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <StartDefaultTask+0x1d4>
					Error_Handler();
 80051bc:	f000 f8d6 	bl	800536c <Error_Handler>

				if (f_open(&fil, "logTXT.txt", FA_READ) != FR_OK)
 80051c0:	2201      	movs	r2, #1
 80051c2:	493e      	ldr	r1, [pc, #248]	; (80052bc <StartDefaultTask+0x2d0>)
 80051c4:	483e      	ldr	r0, [pc, #248]	; (80052c0 <StartDefaultTask+0x2d4>)
 80051c6:	f00e fdcb 	bl	8013d60 <f_open>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <StartDefaultTask+0x1f2>
					Error_Handler();
 80051d0:	f000 f8cc 	bl	800536c <Error_Handler>

				while (f_gets(strLogBuffer, sizeof(strLogBuffer), &fil)) {
 80051d4:	e003      	b.n	80051de <StartDefaultTask+0x1f2>
					strcpy(strSendingEmail, strLogBuffer);
 80051d6:	4948      	ldr	r1, [pc, #288]	; (80052f8 <StartDefaultTask+0x30c>)
 80051d8:	4846      	ldr	r0, [pc, #280]	; (80052f4 <StartDefaultTask+0x308>)
 80051da:	f019 fb4b 	bl	801e874 <strcpy>
				while (f_gets(strLogBuffer, sizeof(strLogBuffer), &fil)) {
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <StartDefaultTask+0x2d4>)
 80051e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051e4:	4844      	ldr	r0, [pc, #272]	; (80052f8 <StartDefaultTask+0x30c>)
 80051e6:	f00f ffbe 	bl	8015166 <f_gets>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f2      	bne.n	80051d6 <StartDefaultTask+0x1ea>
				}
				printf(strSendingEmail);
 80051f0:	4840      	ldr	r0, [pc, #256]	; (80052f4 <StartDefaultTask+0x308>)
 80051f2:	f019 f8d7 	bl	801e3a4 <iprintf>

				if (f_close(&fil) != FR_OK)
 80051f6:	4832      	ldr	r0, [pc, #200]	; (80052c0 <StartDefaultTask+0x2d4>)
 80051f8:	f00f fc5c 	bl	8014ab4 <f_close>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <StartDefaultTask+0x21a>
					Error_Handler();
 8005202:	f000 f8b3 	bl	800536c <Error_Handler>
//					/* Close file */
//					if(f_close(&fil) != FR_OK)
//						Error_Handler();

				/* Unmount SDCARD */
				if (f_mount(NULL, "", 1) != FR_OK)
 8005206:	2201      	movs	r2, #1
 8005208:	492a      	ldr	r1, [pc, #168]	; (80052b4 <StartDefaultTask+0x2c8>)
 800520a:	2000      	movs	r0, #0
 800520c:	f00e fd44 	bl	8013c98 <f_mount>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <StartDefaultTask+0x22e>
					Error_Handler();
 8005216:	f000 f8a9 	bl	800536c <Error_Handler>

				if (flagOneMinute == 0) {
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <StartDefaultTask+0x310>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d13b      	bne.n	800529a <StartDefaultTask+0x2ae>
					sprintf(strSendingEmail,
							"%s\r\n This email is from SOMA Board\r\n GMT %04d-%02d-%02d %02d:%02d:%02d\r\n",
							strSendingEmail, B2D(rtc_date.Year) + 2000,
 8005222:	4b32      	ldr	r3, [pc, #200]	; (80052ec <StartDefaultTask+0x300>)
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fd fcb2 	bl	8002b90 <B2D>
 800522c:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800522e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
							B2D(rtc_date.Month), B2D(rtc_date.Date),
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <StartDefaultTask+0x300>)
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd fcaa 	bl	8002b90 <B2D>
 800523c:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800523e:	461d      	mov	r5, r3
							B2D(rtc_date.Month), B2D(rtc_date.Date),
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <StartDefaultTask+0x300>)
 8005242:	789b      	ldrb	r3, [r3, #2]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fd fca3 	bl	8002b90 <B2D>
 800524a:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800524c:	461e      	mov	r6, r3
							B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 800524e:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <StartDefaultTask+0x2f8>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fc9c 	bl	8002b90 <B2D>
 8005258:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800525a:	60bb      	str	r3, [r7, #8]
							B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 800525c:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <StartDefaultTask+0x2f8>)
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd fc95 	bl	8002b90 <B2D>
 8005266:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005268:	607b      	str	r3, [r7, #4]
							B2D(rtc_time.Seconds));
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <StartDefaultTask+0x2f8>)
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fc8e 	bl	8002b90 <B2D>
 8005274:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	9203      	str	r2, [sp, #12]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	9302      	str	r3, [sp, #8]
 8005280:	9601      	str	r6, [sp, #4]
 8005282:	9500      	str	r5, [sp, #0]
 8005284:	4623      	mov	r3, r4
 8005286:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <StartDefaultTask+0x308>)
 8005288:	491d      	ldr	r1, [pc, #116]	; (8005300 <StartDefaultTask+0x314>)
 800528a:	481a      	ldr	r0, [pc, #104]	; (80052f4 <StartDefaultTask+0x308>)
 800528c:	f019 f900 	bl	801e490 <siprintf>

					SendEmailInit();
 8005290:	f7ff fd6a 	bl	8004d68 <SendEmailInit>
					flagOneMinute = 1;
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <StartDefaultTask+0x310>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
				}
			}
			osDelay(10);
 800529a:	200a      	movs	r0, #10
 800529c:	f010 fac6 	bl	801582c <osDelay>
			break;
 80052a0:	e049      	b.n	8005336 <StartDefaultTask+0x34a>

		case PLAY_READY:
			sgtl5000_start_play();
 80052a2:	f000 f90b 	bl	80054bc <sgtl5000_start_play>
			playState = PLAY_STARTED;
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <StartDefaultTask+0x2f0>)
 80052a8:	2202      	movs	r2, #2
 80052aa:	701a      	strb	r2, [r3, #0]
			break;
 80052ac:	e043      	b.n	8005336 <StartDefaultTask+0x34a>
 80052ae:	bf00      	nop
 80052b0:	20000008 	.word	0x20000008
 80052b4:	0801fb14 	.word	0x0801fb14
 80052b8:	2000ea24 	.word	0x2000ea24
 80052bc:	0801fb18 	.word	0x0801fb18
 80052c0:	2000fa64 	.word	0x2000fa64
 80052c4:	2000fa60 	.word	0x2000fa60
 80052c8:	20010a94 	.word	0x20010a94
 80052cc:	3fe00000 	.word	0x3fe00000
 80052d0:	20010a98 	.word	0x20010a98
 80052d4:	20010a9c 	.word	0x20010a9c
 80052d8:	0802044c 	.word	0x0802044c
 80052dc:	2000e9a0 	.word	0x2000e9a0
 80052e0:	200133c9 	.word	0x200133c9
 80052e4:	200133b4 	.word	0x200133b4
 80052e8:	2000e5dc 	.word	0x2000e5dc
 80052ec:	200133b0 	.word	0x200133b0
 80052f0:	0802046c 	.word	0x0802046c
 80052f4:	200123b0 	.word	0x200123b0
 80052f8:	200113b0 	.word	0x200113b0
 80052fc:	200133c8 	.word	0x200133c8
 8005300:	080204ac 	.word	0x080204ac

		case PLAY_STARTED:
			/* Mount SDCARD */
			if (f_mount(&fs, "", 0) != FR_OK)
 8005304:	2200      	movs	r2, #0
 8005306:	490c      	ldr	r1, [pc, #48]	; (8005338 <StartDefaultTask+0x34c>)
 8005308:	480c      	ldr	r0, [pc, #48]	; (800533c <StartDefaultTask+0x350>)
 800530a:	f00e fcc5 	bl	8013c98 <f_mount>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <StartDefaultTask+0x32c>
				Error_Handler();
 8005314:	f000 f82a 	bl	800536c <Error_Handler>
			PlayAudioFile(audioFileName, "playMP3");
 8005318:	4909      	ldr	r1, [pc, #36]	; (8005340 <StartDefaultTask+0x354>)
 800531a:	480a      	ldr	r0, [pc, #40]	; (8005344 <StartDefaultTask+0x358>)
 800531c:	f7fb fd10 	bl	8000d40 <PlayAudioFile>
			/* Unmount SDCARD */
			if (f_mount(NULL, "", 1) != FR_OK)
 8005320:	2201      	movs	r2, #1
 8005322:	4905      	ldr	r1, [pc, #20]	; (8005338 <StartDefaultTask+0x34c>)
 8005324:	2000      	movs	r0, #0
 8005326:	f00e fcb7 	bl	8013c98 <f_mount>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <StartDefaultTask+0x348>
				Error_Handler();
 8005330:	f000 f81c 	bl	800536c <Error_Handler>
			break;
 8005334:	bf00      	nop
		switch (playState) {
 8005336:	e6dc      	b.n	80050f2 <StartDefaultTask+0x106>
 8005338:	0801fb14 	.word	0x0801fb14
 800533c:	2000ea24 	.word	0x2000ea24
 8005340:	080204f8 	.word	0x080204f8
 8005344:	2000e9a4 	.word	0x2000e9a4

08005348 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800535a:	f001 f903 	bl	8006564 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40000c00 	.word	0x40000c00

0800536c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005370:	b672      	cpsid	i
}
 8005372:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005374:	e7fe      	b.n	8005374 <Error_Handler+0x8>
	...

08005378 <sgtl5000_read>:
CHIP_ANA_CTRL		chip_ana_ctrl;
CHIP_MIC_CTRL 		chip_mic_ctrl;
CHIP_SSS_CTRL 		chip_sss_ctrl;


uint16_t sgtl5000_read(uint16_t reg){
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
	uint8_t buff[2];

	buff[1]=0xff & reg;
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	737b      	strb	r3, [r7, #13]
	buff[0]=0xff & reg>>8;
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	b29b      	uxth	r3, r3
 800538e:	b2db      	uxtb	r3, r3
 8005390:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c2,WRITE_ADDRESS,buff,2,0xFF);
 8005392:	f107 020c 	add.w	r2, r7, #12
 8005396:	23ff      	movs	r3, #255	; 0xff
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	2302      	movs	r3, #2
 800539c:	2114      	movs	r1, #20
 800539e:	480f      	ldr	r0, [pc, #60]	; (80053dc <sgtl5000_read+0x64>)
 80053a0:	f002 f95c 	bl	800765c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80053a4:	2001      	movs	r0, #1
 80053a6:	f001 f8fd 	bl	80065a4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, READ_ADDRESS, buff, 2, 0xFF);
 80053aa:	f107 020c 	add.w	r2, r7, #12
 80053ae:	23ff      	movs	r3, #255	; 0xff
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2302      	movs	r3, #2
 80053b4:	2115      	movs	r1, #21
 80053b6:	4809      	ldr	r0, [pc, #36]	; (80053dc <sgtl5000_read+0x64>)
 80053b8:	f002 fa4e 	bl	8007858 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80053bc:	2001      	movs	r0, #1
 80053be:	f001 f8f1 	bl	80065a4 <HAL_Delay>
	return (uint16_t)buff[0]<<8 | buff[1];
 80053c2:	7b3b      	ldrb	r3, [r7, #12]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	7b7b      	ldrb	r3, [r7, #13]
 80053ca:	b21b      	sxth	r3, r3
 80053cc:	4313      	orrs	r3, r2
 80053ce:	b21b      	sxth	r3, r3
 80053d0:	b29b      	uxth	r3, r3

}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000e480 	.word	0x2000e480

080053e0 <sgtl5000_write>:

void sgtl5000_write(uint16_t reg, uint16_t data){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	4603      	mov	r3, r0
 80053e8:	460a      	mov	r2, r1
 80053ea:	80fb      	strh	r3, [r7, #6]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80bb      	strh	r3, [r7, #4]

	uint8_t buff[4];

	buff[3]=0xff & data;
 80053f0:	88bb      	ldrh	r3, [r7, #4]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	72fb      	strb	r3, [r7, #11]
	buff[2]=0xff & data>>8;
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	72bb      	strb	r3, [r7, #10]
	buff[1]=0xff & reg;
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	727b      	strb	r3, [r7, #9]
	buff[0]=0xff & reg>>8;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b29b      	uxth	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	723b      	strb	r3, [r7, #8]


	uint8_t ret = HAL_I2C_Master_Transmit(&hi2c2,WRITE_ADDRESS,buff,4,0xFF);
 8005410:	f107 0208 	add.w	r2, r7, #8
 8005414:	23ff      	movs	r3, #255	; 0xff
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2304      	movs	r3, #4
 800541a:	2114      	movs	r1, #20
 800541c:	4805      	ldr	r0, [pc, #20]	; (8005434 <sgtl5000_write+0x54>)
 800541e:	f002 f91d 	bl	800765c <HAL_I2C_Master_Transmit>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(1);
 8005426:	2001      	movs	r0, #1
 8005428:	f001 f8bc 	bl	80065a4 <HAL_Delay>
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	2000e480 	.word	0x2000e480

08005438 <sgtl5000_set_volume>:



void sgtl5000_set_volume(uint8_t vol){
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]

	sgtl5000_write(CHIP_ANA_HP_CTRL_ADD, (uint16_t)vol<<8 | vol );
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	b21a      	sxth	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	b21b      	sxth	r3, r3
 800544c:	4313      	orrs	r3, r2
 800544e:	b21b      	sxth	r3, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	2022      	movs	r0, #34	; 0x22
 8005456:	f7ff ffc3 	bl	80053e0 <sgtl5000_write>
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <sgtl5000_set_freq>:

void sgtl5000_set_freq(uint32_t freq){
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	switch(freq)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <sgtl5000_set_freq+0x54>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d015      	beq.n	80054a0 <sgtl5000_set_freq+0x3c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <sgtl5000_set_freq+0x54>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d815      	bhi.n	80054a8 <sgtl5000_set_freq+0x44>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005482:	d005      	beq.n	8005490 <sgtl5000_set_freq+0x2c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <sgtl5000_set_freq+0x34>
 800548e:	e00b      	b.n	80054a8 <sgtl5000_set_freq+0x44>
	{
		case 32000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0000);  // 48k kHz, 256*Fs
 8005490:	2100      	movs	r1, #0
 8005492:	2004      	movs	r0, #4
 8005494:	f7ff ffa4 	bl	80053e0 <sgtl5000_write>
		case 48000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0008);  // 48k kHz, 256*Fs
 8005498:	2108      	movs	r1, #8
 800549a:	2004      	movs	r0, #4
 800549c:	f7ff ffa0 	bl	80053e0 <sgtl5000_write>
		case 96000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x000C);  // 48k kHz, 256*Fs
 80054a0:	210c      	movs	r1, #12
 80054a2:	2004      	movs	r0, #4
 80054a4:	f7ff ff9c 	bl	80053e0 <sgtl5000_write>
		default:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0004);  // 44.1k kHz, 256*Fs
 80054a8:	2104      	movs	r1, #4
 80054aa:	2004      	movs	r0, #4
 80054ac:	f7ff ff98 	bl	80053e0 <sgtl5000_write>
	}
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	00017700 	.word	0x00017700

080054bc <sgtl5000_start_play>:

void sgtl5000_start_play(void){
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80054c0:	2024      	movs	r0, #36	; 0x24
 80054c2:	f7ff ff59 	bl	8005378 <sgtl5000_read>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <sgtl5000_start_play+0x40>)
 80054cc:	801a      	strh	r2, [r3, #0]
	chip_ana_ctrl.MUTE_HP = 0x0000; //unmute amp
 80054ce:	4a0b      	ldr	r2, [pc, #44]	; (80054fc <sgtl5000_start_play+0x40>)
 80054d0:	7813      	ldrb	r3, [r2, #0]
 80054d2:	f36f 1304 	bfc	r3, #4, #1
 80054d6:	7013      	strb	r3, [r2, #0]
	chip_ana_ctrl.MUTE_LO = 0x0000; //unmute headphone
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <sgtl5000_start_play+0x40>)
 80054da:	7853      	ldrb	r3, [r2, #1]
 80054dc:	f36f 0300 	bfc	r3, #0, #1
 80054e0:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_ADC = 0x0001; //mute microphone
 80054e2:	4a06      	ldr	r2, [pc, #24]	; (80054fc <sgtl5000_start_play+0x40>)
 80054e4:	7813      	ldrb	r3, [r2, #0]
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <sgtl5000_start_play+0x40>)
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	2024      	movs	r0, #36	; 0x24
 80054f4:	f7ff ff74 	bl	80053e0 <sgtl5000_write>
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200133e0 	.word	0x200133e0

08005500 <sgtl5000_stop_play>:

void sgtl5000_stop_play(void){
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 8005504:	2024      	movs	r0, #36	; 0x24
 8005506:	f7ff ff37 	bl	8005378 <sgtl5000_read>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <sgtl5000_stop_play+0x40>)
 8005510:	801a      	strh	r2, [r3, #0]
	chip_ana_ctrl.MUTE_HP = 0x0001; //unmute amp
 8005512:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <sgtl5000_stop_play+0x40>)
 8005514:	7813      	ldrb	r3, [r2, #0]
 8005516:	f043 0310 	orr.w	r3, r3, #16
 800551a:	7013      	strb	r3, [r2, #0]
	chip_ana_ctrl.MUTE_LO = 0x0001; //unmute headphone
 800551c:	4a08      	ldr	r2, [pc, #32]	; (8005540 <sgtl5000_stop_play+0x40>)
 800551e:	7853      	ldrb	r3, [r2, #1]
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_ADC = 0x0001; //mute microphone
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <sgtl5000_stop_play+0x40>)
 8005528:	7813      	ldrb	r3, [r2, #0]
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <sgtl5000_stop_play+0x40>)
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	2024      	movs	r0, #36	; 0x24
 8005538:	f7ff ff52 	bl	80053e0 <sgtl5000_write>
}
 800553c:	bf00      	nop
 800553e:	bd80      	pop	{r7, pc}
 8005540:	200133e0 	.word	0x200133e0

08005544 <sgtl5000_init>:
	chip_ana_ctrl.MUTE_ADC = 0x0000; //unmute microphone

	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);

}
void sgtl5000_init(void){
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0

	sgtl5000_write(CHIP_ANA_POWER_ADD, 0x4060);  // VDDD is externally driven with 1.8V
 8005548:	f244 0160 	movw	r1, #16480	; 0x4060
 800554c:	2030      	movs	r0, #48	; 0x30
 800554e:	f7ff ff47 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_LINREG_CTRL_ADD, 0x006C);  // VDDA & VDDIO both over 3.1V
 8005552:	216c      	movs	r1, #108	; 0x6c
 8005554:	2026      	movs	r0, #38	; 0x26
 8005556:	f7ff ff43 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_REF_CTRL_ADD, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
 800555a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800555e:	2028      	movs	r0, #40	; 0x28
 8005560:	f7ff ff3e 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_LINE_OUT_CTRL_ADD, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
 8005564:	f640 7122 	movw	r1, #3874	; 0xf22
 8005568:	202c      	movs	r0, #44	; 0x2c
 800556a:	f7ff ff39 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_SHORT_CTRL_ADD, 0x4446);  // allow up to 125mA
 800556e:	f244 4146 	movw	r1, #17478	; 0x4446
 8005572:	203c      	movs	r0, #60	; 0x3c
 8005574:	f7ff ff34 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_ANA_CTRL_ADD, 0x0137);  // enable zero cross detectors
 8005578:	f240 1137 	movw	r1, #311	; 0x137
 800557c:	2024      	movs	r0, #36	; 0x24
 800557e:	f7ff ff2f 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_ANA_POWER_ADD, 0x40FF); // power up: lineout, hp, adc, dac
 8005582:	f244 01ff 	movw	r1, #16639	; 0x40ff
 8005586:	2030      	movs	r0, #48	; 0x30
 8005588:	f7ff ff2a 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_DIG_POWER_ADD, 0x0073); // power up all digital stuff
 800558c:	2173      	movs	r1, #115	; 0x73
 800558e:	2002      	movs	r0, #2
 8005590:	f7ff ff26 	bl	80053e0 <sgtl5000_write>
	HAL_Delay(400);
 8005594:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005598:	f001 f804 	bl	80065a4 <HAL_Delay>

	sgtl5000_write(CHIP_LINE_OUT_VOL_ADD, 0x1D1D); // default approx 1.3 volts peak-to-peak
 800559c:	f641 511d 	movw	r1, #7453	; 0x1d1d
 80055a0:	202e      	movs	r0, #46	; 0x2e
 80055a2:	f7ff ff1d 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0004);  // 44.1k kHz, 256*Fs
 80055a6:	2104      	movs	r1, #4
 80055a8:	2004      	movs	r0, #4
 80055aa:	f7ff ff19 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(CHIP_I2S_CTRL_ADD, 0x0130); // SCLK=32*Fs, 16bit, I2S format
 80055ae:	f44f 7198 	mov.w	r1, #304	; 0x130
 80055b2:	2006      	movs	r0, #6
 80055b4:	f7ff ff14 	bl	80053e0 <sgtl5000_write>



	// Example 1: I2S_IN -> DAP -> DAC -> LINEOUT, HP_OUT
	chip_sss_ctrl.data=sgtl5000_read(CHIP_SSS_CTRL_ADD);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f7ff fedd 	bl	8005378 <sgtl5000_read>
 80055be:	4603      	mov	r3, r0
 80055c0:	461a      	mov	r2, r3
 80055c2:	4b55      	ldr	r3, [pc, #340]	; (8005718 <sgtl5000_init+0x1d4>)
 80055c4:	801a      	strh	r2, [r3, #0]
	//chip_sss_ctrl.DAP_MIX_SELECT=0x0001; // bits 7:6
	// Route I2S_IN to DAP
	chip_sss_ctrl.DAP_SELECT=0x0001; // bits 7:6
 80055c6:	4a54      	ldr	r2, [pc, #336]	; (8005718 <sgtl5000_init+0x1d4>)
 80055c8:	7813      	ldrb	r3, [r2, #0]
 80055ca:	2101      	movs	r1, #1
 80055cc:	f361 1387 	bfi	r3, r1, #6, #2
 80055d0:	7013      	strb	r3, [r2, #0]
	// Route DAP to DAC
	chip_sss_ctrl.DAC_SELECT=0x0003; // bits 5:4
 80055d2:	4a51      	ldr	r2, [pc, #324]	; (8005718 <sgtl5000_init+0x1d4>)
 80055d4:	7813      	ldrb	r3, [r2, #0]
 80055d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80055da:	7013      	strb	r3, [r2, #0]
	//chip_sss_ctrl.I2S_SELECT=0x0001; // bits 5:4
	chip_sss_ctrl.I2S_SELECT=0x0000; // bits 1:0
 80055dc:	4a4e      	ldr	r2, [pc, #312]	; (8005718 <sgtl5000_init+0x1d4>)
 80055de:	7813      	ldrb	r3, [r2, #0]
 80055e0:	f36f 0301 	bfc	r3, #0, #2
 80055e4:	7013      	strb	r3, [r2, #0]

	sgtl5000_write(CHIP_SSS_CTRL_ADD,chip_sss_ctrl.data);
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <sgtl5000_init+0x1d4>)
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	200a      	movs	r0, #10
 80055ee:	f7ff fef7 	bl	80053e0 <sgtl5000_write>
	// Select DAC as the input to HP_OUT
	chip_ana_ctrl.data=sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80055f2:	2024      	movs	r0, #36	; 0x24
 80055f4:	f7ff fec0 	bl	8005378 <sgtl5000_read>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b47      	ldr	r3, [pc, #284]	; (800571c <sgtl5000_init+0x1d8>)
 80055fe:	801a      	strh	r2, [r3, #0]
	//chip_ana_ctrl.SELECT_ADC = 0x0001; // bit 2

	chip_ana_ctrl.SELECT_HP = 0x0000; // bit 6
 8005600:	4a46      	ldr	r2, [pc, #280]	; (800571c <sgtl5000_init+0x1d8>)
 8005602:	7813      	ldrb	r3, [r2, #0]
 8005604:	f36f 1386 	bfc	r3, #6, #1
 8005608:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD,chip_ana_ctrl.data);
 800560a:	4b44      	ldr	r3, [pc, #272]	; (800571c <sgtl5000_init+0x1d8>)
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	2024      	movs	r0, #36	; 0x24
 8005612:	f7ff fee5 	bl	80053e0 <sgtl5000_write>


	// Enable DAP block
	// NOTE: DAP will be in a pass-through mode if none of DAP
	// sub-blocks are enabled.
	dap_control.data= sgtl5000_read(DAP_CONTROL_ADD);
 8005616:	f44f 7080 	mov.w	r0, #256	; 0x100
 800561a:	f7ff fead 	bl	8005378 <sgtl5000_read>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <sgtl5000_init+0x1dc>)
 8005624:	801a      	strh	r2, [r3, #0]
	dap_control.DAP_EN=1;
 8005626:	4a3e      	ldr	r2, [pc, #248]	; (8005720 <sgtl5000_init+0x1dc>)
 8005628:	7813      	ldrb	r3, [r2, #0]
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	7013      	strb	r3, [r2, #0]
	//dap_control.MIX_EN=1;
	sgtl5000_write(DAP_CONTROL_ADD,dap_control.data); // bit 0
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <sgtl5000_init+0x1dc>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	f44f 7080 	mov.w	r0, #256	; 0x100
 800563a:	f7ff fed1 	bl	80053e0 <sgtl5000_write>

	sgtl5000_write(DAP_MAIN_CHAN_ADD,0xFFFF); // bit 0
 800563e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005642:	f44f 7090 	mov.w	r0, #288	; 0x120
 8005646:	f7ff fecb 	bl	80053e0 <sgtl5000_write>
	sgtl5000_write(DAP_MIX_CHAN_ADD,0xFFFF); // bit 0
 800564a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800564e:	f44f 7091 	mov.w	r0, #290	; 0x122
 8005652:	f7ff fec5 	bl	80053e0 <sgtl5000_write>

	dap_avc_ctrl.data = sgtl5000_read(DAP_AVC_CTRL_ADD);
 8005656:	f44f 7092 	mov.w	r0, #292	; 0x124
 800565a:	f7ff fe8d 	bl	8005378 <sgtl5000_read>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	4b30      	ldr	r3, [pc, #192]	; (8005724 <sgtl5000_init+0x1e0>)
 8005664:	801a      	strh	r2, [r3, #0]
	dap_avc_ctrl.EN=1;
 8005666:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <sgtl5000_init+0x1e0>)
 8005668:	7813      	ldrb	r3, [r2, #0]
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(DAP_AVC_CTRL_ADD,dap_avc_ctrl.data);
 8005670:	4b2c      	ldr	r3, [pc, #176]	; (8005724 <sgtl5000_init+0x1e0>)
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	f44f 7092 	mov.w	r0, #292	; 0x124
 800567a:	f7ff feb1 	bl	80053e0 <sgtl5000_write>
	//---------------- Input Volume Control---------------------
	// Configure ADC left and right analog volume to desired default.
	// Example shows volume of 0dB
	sgtl5000_write( CHIP_ANA_ADC_CTRL_ADD, 0x0000);
 800567e:	2100      	movs	r1, #0
 8005680:	2020      	movs	r0, #32
 8005682:	f7ff fead 	bl	80053e0 <sgtl5000_write>
	// Configure MIC gain if needed. Example shows gain of 20dB
	chip_mic_ctrl.data = sgtl5000_read(CHIP_MIC_CTRL_ADD);
 8005686:	202a      	movs	r0, #42	; 0x2a
 8005688:	f7ff fe76 	bl	8005378 <sgtl5000_read>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <sgtl5000_init+0x1e4>)
 8005692:	801a      	strh	r2, [r3, #0]
	chip_mic_ctrl.GAIN = 0x0001;
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <sgtl5000_init+0x1e4>)
 8005696:	7813      	ldrb	r3, [r2, #0]
 8005698:	2101      	movs	r1, #1
 800569a:	f361 0301 	bfi	r3, r1, #0, #2
 800569e:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_MIC_CTRL_ADD, chip_mic_ctrl.data);
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <sgtl5000_init+0x1e4>)
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	202a      	movs	r0, #42	; 0x2a
 80056a8:	f7ff fe9a 	bl	80053e0 <sgtl5000_write>
	// LINEOUT and DAC volume control

	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80056ac:	2024      	movs	r0, #36	; 0x24
 80056ae:	f7ff fe63 	bl	8005378 <sgtl5000_read>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <sgtl5000_init+0x1d8>)
 80056b8:	801a      	strh	r2, [r3, #0]

	chip_ana_ctrl.MUTE_LO = 0x0000;
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <sgtl5000_init+0x1d8>)
 80056bc:	7853      	ldrb	r3, [r2, #1]
 80056be:	f36f 0300 	bfc	r3, #0, #1
 80056c2:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_HP = 0x0000; //unmute amp
 80056c4:	4a15      	ldr	r2, [pc, #84]	; (800571c <sgtl5000_init+0x1d8>)
 80056c6:	7813      	ldrb	r3, [r2, #0]
 80056c8:	f36f 1304 	bfc	r3, #4, #1
 80056cc:	7013      	strb	r3, [r2, #0]
	sgtl5000_write (CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <sgtl5000_init+0x1d8>)
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	2024      	movs	r0, #36	; 0x24
 80056d6:	f7ff fe83 	bl	80053e0 <sgtl5000_write>
	// bit 8
	// Configure DAC left and right digital volume. Example shows
	// volume of 0dB
	sgtl5000_write(CHIP_DAC_VOL_ADD, 0x3C3C);
 80056da:	f643 413c 	movw	r1, #15420	; 0x3c3c
 80056de:	2010      	movs	r0, #16
 80056e0:	f7ff fe7e 	bl	80053e0 <sgtl5000_write>

	chip_adcdac_ctrl.data = sgtl5000_read(CHIP_ADCDAC_CTRL_ADD);
 80056e4:	200e      	movs	r0, #14
 80056e6:	f7ff fe47 	bl	8005378 <sgtl5000_read>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <sgtl5000_init+0x1e8>)
 80056f0:	801a      	strh	r2, [r3, #0]
	chip_adcdac_ctrl.DAC_MUTE_LEFT=0x0000;// bit 2
 80056f2:	4a0e      	ldr	r2, [pc, #56]	; (800572c <sgtl5000_init+0x1e8>)
 80056f4:	7813      	ldrb	r3, [r2, #0]
 80056f6:	f36f 0382 	bfc	r3, #2, #1
 80056fa:	7013      	strb	r3, [r2, #0]
	chip_adcdac_ctrl.DAC_MUTE_RIGHT=0x0000;// bit 3
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <sgtl5000_init+0x1e8>)
 80056fe:	7813      	ldrb	r3, [r2, #0]
 8005700:	f36f 03c3 	bfc	r3, #3, #1
 8005704:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ADCDAC_CTRL_ADD,chip_adcdac_ctrl.data);
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <sgtl5000_init+0x1e8>)
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	200e      	movs	r0, #14
 800570e:	f7ff fe67 	bl	80053e0 <sgtl5000_write>
	//chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
	//chip_ana_ctrl.MUTE_ADC= 0x0000;

	//write(CHIP_ANA_CTRL_ADD,chip_ana_ctrl.data);

}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	200133e8 	.word	0x200133e8
 800571c:	200133e0 	.word	0x200133e0
 8005720:	200133d4 	.word	0x200133d4
 8005724:	200133d8 	.word	0x200133d8
 8005728:	200133e4 	.word	0x200133e4
 800572c:	200133dc 	.word	0x200133dc

08005730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HAL_MspInit+0x54>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	4a11      	ldr	r2, [pc, #68]	; (8005784 <HAL_MspInit+0x54>)
 8005740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005744:	6453      	str	r3, [r2, #68]	; 0x44
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_MspInit+0x54>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_MspInit+0x54>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <HAL_MspInit+0x54>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	; 0x40
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_MspInit+0x54>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800576e:	2200      	movs	r2, #0
 8005770:	210f      	movs	r1, #15
 8005772:	f06f 0001 	mvn.w	r0, #1
 8005776:	f001 f815 	bl	80067a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a32      	ldr	r2, [pc, #200]	; (8005870 <HAL_I2C_MspInit+0xe8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d12d      	bne.n	8005806 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4a30      	ldr	r2, [pc, #192]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ba:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BT_WIFI_SCL_Pin|BT_WIFI_SDA_Pin;
 80057c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057cc:	2312      	movs	r3, #18
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057d0:	2301      	movs	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057d4:	2302      	movs	r3, #2
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057d8:	2304      	movs	r3, #4
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	4619      	mov	r1, r3
 80057e2:	4825      	ldr	r0, [pc, #148]	; (8005878 <HAL_I2C_MspInit+0xf0>)
 80057e4:	f001 fc18 	bl	8007018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	4a20      	ldr	r2, [pc, #128]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f6:	6413      	str	r3, [r2, #64]	; 0x40
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <HAL_I2C_MspInit+0xec>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005804:	e030      	b.n	8005868 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_I2C_MspInit+0xf4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d12b      	bne.n	8005868 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	4b17      	ldr	r3, [pc, #92]	; (8005874 <HAL_I2C_MspInit+0xec>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <HAL_I2C_MspInit+0xec>)
 800581a:	f043 0320 	orr.w	r3, r3, #32
 800581e:	6313      	str	r3, [r2, #48]	; 0x30
 8005820:	4b14      	ldr	r3, [pc, #80]	; (8005874 <HAL_I2C_MspInit+0xec>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HP_SPKR_SDA_Pin|HP_SPKR_SCL_Pin;
 800582c:	2303      	movs	r3, #3
 800582e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005830:	2312      	movs	r3, #18
 8005832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005834:	2301      	movs	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005838:	2303      	movs	r3, #3
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800583c:	2304      	movs	r3, #4
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005840:	f107 031c 	add.w	r3, r7, #28
 8005844:	4619      	mov	r1, r3
 8005846:	480e      	ldr	r0, [pc, #56]	; (8005880 <HAL_I2C_MspInit+0xf8>)
 8005848:	f001 fbe6 	bl	8007018 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_I2C_MspInit+0xec>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	4a07      	ldr	r2, [pc, #28]	; (8005874 <HAL_I2C_MspInit+0xec>)
 8005856:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800585a:	6413      	str	r3, [r2, #64]	; 0x40
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_I2C_MspInit+0xec>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	3730      	adds	r7, #48	; 0x30
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40005400 	.word	0x40005400
 8005874:	40023800 	.word	0x40023800
 8005878:	40020400 	.word	0x40020400
 800587c:	40005800 	.word	0x40005800
 8005880:	40021400 	.word	0x40021400

08005884 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b096      	sub	sp, #88	; 0x58
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	2230      	movs	r2, #48	; 0x30
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f018 ff05 	bl	801e6b4 <memset>
  if(hi2s->Instance==SPI2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a68      	ldr	r2, [pc, #416]	; (8005a50 <HAL_I2S_MspInit+0x1cc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	f040 80c9 	bne.w	8005a48 <HAL_I2S_MspInit+0x1c4>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80058b6:	2301      	movs	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80058ba:	23c0      	movs	r3, #192	; 0xc0
 80058bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80058be:	2302      	movs	r3, #2
 80058c0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058c2:	f107 0314 	add.w	r3, r7, #20
 80058c6:	4618      	mov	r0, r3
 80058c8:	f004 f840 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80058d2:	f7ff fd4b 	bl	800536c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a5d      	ldr	r2, [pc, #372]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 80058e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b5b      	ldr	r3, [pc, #364]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	4b57      	ldr	r3, [pc, #348]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a56      	ldr	r2, [pc, #344]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 80058fc:	f043 0302 	orr.w	r3, r3, #2
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b54      	ldr	r3, [pc, #336]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	4b50      	ldr	r3, [pc, #320]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	4a4f      	ldr	r2, [pc, #316]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
 800591e:	4b4d      	ldr	r3, [pc, #308]	; (8005a54 <HAL_I2S_MspInit+0x1d0>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = I2S_LRCLK_Pin|I2S_CLK_Pin|I2S_SDO_Pin;
 800592a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800592e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005930:	2302      	movs	r3, #2
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005934:	2300      	movs	r3, #0
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005938:	2303      	movs	r3, #3
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800593c:	2305      	movs	r3, #5
 800593e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005940:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005944:	4619      	mov	r1, r3
 8005946:	4844      	ldr	r0, [pc, #272]	; (8005a58 <HAL_I2S_MspInit+0x1d4>)
 8005948:	f001 fb66 	bl	8007018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SDI_Pin;
 800594c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005952:	2302      	movs	r3, #2
 8005954:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595a:	2303      	movs	r3, #3
 800595c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800595e:	2306      	movs	r3, #6
 8005960:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(I2S_SDI_GPIO_Port, &GPIO_InitStruct);
 8005962:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005966:	4619      	mov	r1, r3
 8005968:	483b      	ldr	r0, [pc, #236]	; (8005a58 <HAL_I2S_MspInit+0x1d4>)
 800596a:	f001 fb55 	bl	8007018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_MCLK_Pin;
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005972:	2302      	movs	r3, #2
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005976:	2300      	movs	r3, #0
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800597a:	2303      	movs	r3, #3
 800597c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800597e:	2305      	movs	r3, #5
 8005980:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(I2S_MCLK_GPIO_Port, &GPIO_InitStruct);
 8005982:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005986:	4619      	mov	r1, r3
 8005988:	4834      	ldr	r0, [pc, #208]	; (8005a5c <HAL_I2S_MspInit+0x1d8>)
 800598a:	f001 fb45 	bl	8007018 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 8005990:	4a34      	ldr	r2, [pc, #208]	; (8005a64 <HAL_I2S_MspInit+0x1e0>)
 8005992:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 8005996:	2200      	movs	r2, #0
 8005998:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 800599c:	2240      	movs	r2, #64	; 0x40
 800599e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059a0:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059ac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80059be:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80059d0:	4823      	ldr	r0, [pc, #140]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059d2:	f000 ff1f 	bl	8006814 <HAL_DMA_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 80059dc:	f7ff fcc6 	bl	800536c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_I2S_MspInit+0x1dc>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80059ec:	4b1e      	ldr	r3, [pc, #120]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <HAL_I2S_MspInit+0x1e8>)
 80059f0:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 80059f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80059f8:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a0c:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_NORMAL;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8005a2c:	480e      	ldr	r0, [pc, #56]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a2e:	f000 fef1 	bl	8006814 <HAL_DMA_Init>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 8005a38:	f7ff fc98 	bl	800536c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <HAL_I2S_MspInit+0x1e4>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a48:	bf00      	nop
 8005a4a:	3758      	adds	r7, #88	; 0x58
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40003800 	.word	0x40003800
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40020400 	.word	0x40020400
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	2000e51c 	.word	0x2000e51c
 8005a64:	40026070 	.word	0x40026070
 8005a68:	2000e57c 	.word	0x2000e57c
 8005a6c:	40026058 	.word	0x40026058

08005a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08e      	sub	sp, #56	; 0x38
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	2230      	movs	r2, #48	; 0x30
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f018 fe17 	bl	801e6b4 <memset>
  if(hrtc->Instance==RTC)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a10      	ldr	r2, [pc, #64]	; (8005acc <HAL_RTC_MspInit+0x5c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d119      	bne.n	8005ac4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005a90:	2320      	movs	r3, #32
 8005a92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 ff54 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005aaa:	f7ff fc5f 	bl	800536c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <HAL_RTC_MspInit+0x60>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 11, 0);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	210b      	movs	r1, #11
 8005ab8:	2029      	movs	r0, #41	; 0x29
 8005aba:	f000 fe73 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005abe:	2029      	movs	r0, #41	; 0x29
 8005ac0:	f000 fe8c 	bl	80067dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005ac4:	bf00      	nop
 8005ac6:	3738      	adds	r7, #56	; 0x38
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40002800 	.word	0x40002800
 8005ad0:	42470e3c 	.word	0x42470e3c

08005ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a7e      	ldr	r2, [pc, #504]	; (8005cec <HAL_SPI_MspInit+0x218>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d14a      	bne.n	8005b8c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	4b7d      	ldr	r3, [pc, #500]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4a7c      	ldr	r2, [pc, #496]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b04:	6453      	str	r3, [r2, #68]	; 0x44
 8005b06:	4b7a      	ldr	r3, [pc, #488]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	4a75      	ldr	r2, [pc, #468]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	6313      	str	r3, [r2, #48]	; 0x30
 8005b22:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	4b6f      	ldr	r3, [pc, #444]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	4a6e      	ldr	r2, [pc, #440]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b38:	f043 0302 	orr.w	r3, r3, #2
 8005b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3e:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b4a:	23a0      	movs	r3, #160	; 0xa0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b56:	2303      	movs	r3, #3
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b5a:	2305      	movs	r3, #5
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b62:	4619      	mov	r1, r3
 8005b64:	4863      	ldr	r0, [pc, #396]	; (8005cf4 <HAL_SPI_MspInit+0x220>)
 8005b66:	f001 fa57 	bl	8007018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b76:	2303      	movs	r3, #3
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b82:	4619      	mov	r1, r3
 8005b84:	485c      	ldr	r0, [pc, #368]	; (8005cf8 <HAL_SPI_MspInit+0x224>)
 8005b86:	f001 fa47 	bl	8007018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005b8a:	e0ab      	b.n	8005ce4 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI3)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5a      	ldr	r2, [pc, #360]	; (8005cfc <HAL_SPI_MspInit+0x228>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12d      	bne.n	8005bf2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	4b55      	ldr	r3, [pc, #340]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a54      	ldr	r2, [pc, #336]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b52      	ldr	r3, [pc, #328]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	4b4e      	ldr	r3, [pc, #312]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4a4d      	ldr	r2, [pc, #308]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc2:	4b4b      	ldr	r3, [pc, #300]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI3_CLK_Pin|SD_SPI3_MISO_Pin|SD_SPI3_MOSI_Pin;
 8005bce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005be0:	2306      	movs	r3, #6
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be8:	4619      	mov	r1, r3
 8005bea:	4845      	ldr	r0, [pc, #276]	; (8005d00 <HAL_SPI_MspInit+0x22c>)
 8005bec:	f001 fa14 	bl	8007018 <HAL_GPIO_Init>
}
 8005bf0:	e078      	b.n	8005ce4 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI5)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a43      	ldr	r2, [pc, #268]	; (8005d04 <HAL_SPI_MspInit+0x230>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d173      	bne.n	8005ce4 <HAL_SPI_MspInit+0x210>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c04:	4a3a      	ldr	r2, [pc, #232]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8005c0c:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	4a33      	ldr	r2, [pc, #204]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c22:	f043 0320 	orr.w	r3, r3, #32
 8005c26:	6313      	str	r3, [r2, #48]	; 0x30
 8005c28:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <HAL_SPI_MspInit+0x21c>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_WIFI_SPI_SCK_Pin|BT_WIFI_SPI_MISO_Pin;
 8005c34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c42:	2302      	movs	r3, #2
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005c46:	2305      	movs	r3, #5
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	482d      	ldr	r0, [pc, #180]	; (8005d08 <HAL_SPI_MspInit+0x234>)
 8005c52:	f001 f9e1 	bl	8007018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_WIFI_SPI_MOSI_Pin;
 8005c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c64:	2302      	movs	r3, #2
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005c68:	2305      	movs	r3, #5
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BT_WIFI_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c70:	4619      	mov	r1, r3
 8005c72:	4825      	ldr	r0, [pc, #148]	; (8005d08 <HAL_SPI_MspInit+0x234>)
 8005c74:	f001 f9d0 	bl	8007018 <HAL_GPIO_Init>
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8005c78:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c7a:	4a25      	ldr	r2, [pc, #148]	; (8005d10 <HAL_SPI_MspInit+0x23c>)
 8005c7c:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005c84:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c88:	2240      	movs	r2, #64	; 0x40
 8005c8a:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c8c:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c98:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8005ca6:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8005cb8:	4814      	ldr	r0, [pc, #80]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005cba:	f000 fdab 	bl	8006814 <HAL_DMA_Init>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_SPI_MspInit+0x1f4>
      Error_Handler();
 8005cc4:	f7ff fb52 	bl	800536c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005ccc:	649a      	str	r2, [r3, #72]	; 0x48
 8005cce:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <HAL_SPI_MspInit+0x238>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2105      	movs	r1, #5
 8005cd8:	2055      	movs	r0, #85	; 0x55
 8005cda:	f000 fd63 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8005cde:	2055      	movs	r0, #85	; 0x55
 8005ce0:	f000 fd7c 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 8005ce4:	bf00      	nop
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40013000 	.word	0x40013000
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	40020400 	.word	0x40020400
 8005cfc:	40003c00 	.word	0x40003c00
 8005d00:	40020800 	.word	0x40020800
 8005d04:	40015000 	.word	0x40015000
 8005d08:	40021400 	.word	0x40021400
 8005d0c:	2000e704 	.word	0x2000e704
 8005d10:	40026470 	.word	0x40026470

08005d14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <HAL_TIM_PWM_MspInit+0xb4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6453      	str	r3, [r2, #68]	; 0x44
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d42:	e03a      	b.n	8005dba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d10e      	bne.n	8005d6c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	693b      	ldr	r3, [r7, #16]
}
 8005d6a:	e026      	b.n	8005dba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_TIM_PWM_MspInit+0xbc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	6413      	str	r3, [r2, #64]	; 0x40
 8005d86:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	e012      	b.n	8005dba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <HAL_TIM_PWM_MspInit+0xc0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10d      	bne.n	8005dba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_TIM_PWM_MspInit+0xb8>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800

08005dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	; 0x30
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de0:	f107 031c 	add.w	r3, r7, #28
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a49      	ldr	r2, [pc, #292]	; (8005f1c <HAL_TIM_MspPostInit+0x144>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d11f      	bne.n	8005e3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	4b48      	ldr	r3, [pc, #288]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	4a47      	ldr	r2, [pc, #284]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e04:	f043 0310 	orr.w	r3, r3, #16
 8005e08:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0a:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_B_Pin;
 8005e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e24:	2300      	movs	r3, #0
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_B_GPIO_Port, &GPIO_InitStruct);
 8005e2c:	f107 031c 	add.w	r3, r7, #28
 8005e30:	4619      	mov	r1, r3
 8005e32:	483c      	ldr	r0, [pc, #240]	; (8005f24 <HAL_TIM_MspPostInit+0x14c>)
 8005e34:	f001 f8f0 	bl	8007018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005e38:	e06b      	b.n	8005f12 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d11e      	bne.n	8005e82 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6313      	str	r3, [r2, #48]	; 0x30
 8005e54:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED_PWM_R_Pin;
 8005e60:	2301      	movs	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	2302      	movs	r3, #2
 8005e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e70:	2301      	movs	r3, #1
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_R_GPIO_Port, &GPIO_InitStruct);
 8005e74:	f107 031c 	add.w	r3, r7, #28
 8005e78:	4619      	mov	r1, r3
 8005e7a:	482b      	ldr	r0, [pc, #172]	; (8005f28 <HAL_TIM_MspPostInit+0x150>)
 8005e7c:	f001 f8cc 	bl	8007018 <HAL_GPIO_Init>
}
 8005e80:	e047      	b.n	8005f12 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <HAL_TIM_MspPostInit+0x154>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d11e      	bne.n	8005eca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LED_PWM_W2400_Pin;
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eac:	2302      	movs	r3, #2
 8005eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_W2400_GPIO_Port, &GPIO_InitStruct);
 8005ebc:	f107 031c 	add.w	r3, r7, #28
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4819      	ldr	r0, [pc, #100]	; (8005f28 <HAL_TIM_MspPostInit+0x150>)
 8005ec4:	f001 f8a8 	bl	8007018 <HAL_GPIO_Init>
}
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <HAL_TIM_MspPostInit+0x158>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d11e      	bne.n	8005f12 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005ede:	f043 0308 	orr.w	r3, r3, #8
 8005ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <HAL_TIM_MspPostInit+0x148>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_W6500_Pin|LED_PWM_G_Pin;
 8005ef0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005f02:	2302      	movs	r3, #2
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f06:	f107 031c 	add.w	r3, r7, #28
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4809      	ldr	r0, [pc, #36]	; (8005f34 <HAL_TIM_MspPostInit+0x15c>)
 8005f0e:	f001 f883 	bl	8007018 <HAL_GPIO_Init>
}
 8005f12:	bf00      	nop
 8005f14:	3730      	adds	r7, #48	; 0x30
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40020c00 	.word	0x40020c00

08005f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b090      	sub	sp, #64	; 0x40
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a71      	ldr	r2, [pc, #452]	; (800611c <HAL_UART_MspInit+0x1e4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d12d      	bne.n	8005fb6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5e:	4b70      	ldr	r3, [pc, #448]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	4a6f      	ldr	r2, [pc, #444]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f68:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6a:	4b6d      	ldr	r3, [pc, #436]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7a:	4b69      	ldr	r3, [pc, #420]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	4a68      	ldr	r2, [pc, #416]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f80:	f043 0310 	orr.w	r3, r3, #16
 8005f84:	6313      	str	r3, [r2, #48]	; 0x30
 8005f86:	4b66      	ldr	r3, [pc, #408]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = DBG_UART_RX_Pin|DBG_UART_TX_Pin;
 8005f92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fac:	4619      	mov	r1, r3
 8005fae:	485d      	ldr	r0, [pc, #372]	; (8006124 <HAL_UART_MspInit+0x1ec>)
 8005fb0:	f001 f832 	bl	8007018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fb4:	e0ae      	b.n	8006114 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a5b      	ldr	r2, [pc, #364]	; (8006128 <HAL_UART_MspInit+0x1f0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d135      	bne.n	800602c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	4b56      	ldr	r3, [pc, #344]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc8:	4a55      	ldr	r2, [pc, #340]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fca:	f043 0310 	orr.w	r3, r3, #16
 8005fce:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd0:	4b53      	ldr	r3, [pc, #332]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	4b4f      	ldr	r3, [pc, #316]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	4a4e      	ldr	r2, [pc, #312]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	6313      	str	r3, [r2, #48]	; 0x30
 8005fec:	4b4c      	ldr	r3, [pc, #304]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LCD_UART_TX_Pin|LCD_UART_RX_Pin;
 8005ff8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffe:	2302      	movs	r3, #2
 8006000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	2303      	movs	r3, #3
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800600a:	2307      	movs	r3, #7
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800600e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006012:	4619      	mov	r1, r3
 8006014:	4845      	ldr	r0, [pc, #276]	; (800612c <HAL_UART_MspInit+0x1f4>)
 8006016:	f000 ffff 	bl	8007018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 12, 0);
 800601a:	2200      	movs	r2, #0
 800601c:	210c      	movs	r1, #12
 800601e:	2025      	movs	r0, #37	; 0x25
 8006020:	f000 fbc0 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006024:	2025      	movs	r0, #37	; 0x25
 8006026:	f000 fbd9 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 800602a:	e073      	b.n	8006114 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a3f      	ldr	r2, [pc, #252]	; (8006130 <HAL_UART_MspInit+0x1f8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d134      	bne.n	80060a0 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	4b39      	ldr	r3, [pc, #228]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	4a38      	ldr	r2, [pc, #224]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	6413      	str	r3, [r2, #64]	; 0x40
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	4b32      	ldr	r3, [pc, #200]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6313      	str	r3, [r2, #48]	; 0x30
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 800606e:	230c      	movs	r3, #12
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006072:	2302      	movs	r3, #2
 8006074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800607a:	2303      	movs	r3, #3
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800607e:	2307      	movs	r3, #7
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006086:	4619      	mov	r1, r3
 8006088:	4828      	ldr	r0, [pc, #160]	; (800612c <HAL_UART_MspInit+0x1f4>)
 800608a:	f000 ffc5 	bl	8007018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	210f      	movs	r1, #15
 8006092:	2026      	movs	r0, #38	; 0x26
 8006094:	f000 fb86 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006098:	2026      	movs	r0, #38	; 0x26
 800609a:	f000 fb9f 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 800609e:	e039      	b.n	8006114 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a23      	ldr	r2, [pc, #140]	; (8006134 <HAL_UART_MspInit+0x1fc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d134      	bne.n	8006114 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060b8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	4b15      	ldr	r3, [pc, #84]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4a14      	ldr	r2, [pc, #80]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	6313      	str	r3, [r2, #48]	; 0x30
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_UART_MspInit+0x1e8>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 80060e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f0:	2303      	movs	r3, #3
 80060f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80060f4:	2307      	movs	r3, #7
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060fc:	4619      	mov	r1, r3
 80060fe:	480e      	ldr	r0, [pc, #56]	; (8006138 <HAL_UART_MspInit+0x200>)
 8006100:	f000 ff8a 	bl	8007018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8006104:	2200      	movs	r2, #0
 8006106:	210f      	movs	r1, #15
 8006108:	2027      	movs	r0, #39	; 0x27
 800610a:	f000 fb4b 	bl	80067a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800610e:	2027      	movs	r0, #39	; 0x27
 8006110:	f000 fb64 	bl	80067dc <HAL_NVIC_EnableIRQ>
}
 8006114:	bf00      	nop
 8006116:	3740      	adds	r7, #64	; 0x40
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40007800 	.word	0x40007800
 8006120:	40023800 	.word	0x40023800
 8006124:	40021000 	.word	0x40021000
 8006128:	40011000 	.word	0x40011000
 800612c:	40020000 	.word	0x40020000
 8006130:	40004400 	.word	0x40004400
 8006134:	40004800 	.word	0x40004800
 8006138:	40020400 	.word	0x40020400

0800613c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800614c:	2200      	movs	r2, #0
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	2032      	movs	r0, #50	; 0x32
 8006152:	f000 fb27 	bl	80067a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006156:	2032      	movs	r0, #50	; 0x32
 8006158:	f000 fb40 	bl	80067dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <HAL_InitTick+0xa4>)
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_InitTick+0xa4>)
 8006166:	f043 0308 	orr.w	r3, r3, #8
 800616a:	6413      	str	r3, [r2, #64]	; 0x40
 800616c:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <HAL_InitTick+0xa4>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006178:	f107 0210 	add.w	r2, r7, #16
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f003 fbb0 	bl	80098e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006188:	f003 fb86 	bl	8009898 <HAL_RCC_GetPCLK1Freq>
 800618c:	4603      	mov	r3, r0
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <HAL_InitTick+0xa8>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	0c9b      	lsrs	r3, r3, #18
 800619c:	3b01      	subs	r3, #1
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_InitTick+0xac>)
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <HAL_InitTick+0xb0>)
 80061a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <HAL_InitTick+0xac>)
 80061a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061ac:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <HAL_InitTick+0xac>)
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_InitTick+0xac>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_InitTick+0xac>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80061c0:	4809      	ldr	r0, [pc, #36]	; (80061e8 <HAL_InitTick+0xac>)
 80061c2:	f004 ffb5 	bl	800b130 <HAL_TIM_Base_Init>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80061cc:	4806      	ldr	r0, [pc, #24]	; (80061e8 <HAL_InitTick+0xac>)
 80061ce:	f005 f809 	bl	800b1e4 <HAL_TIM_Base_Start_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	e000      	b.n	80061d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3730      	adds	r7, #48	; 0x30
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	431bde83 	.word	0x431bde83
 80061e8:	200133ec 	.word	0x200133ec
 80061ec:	40000c00 	.word	0x40000c00

080061f0 <SDTimer_Handler>:
volatile uint32_t msTicks = 0 ;
volatile uint32_t runCnt = 0 ;


void SDTimer_Handler(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <SDTimer_Handler+0x38>)
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <SDTimer_Handler+0x18>
    Timer1--;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <SDTimer_Handler+0x38>)
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <SDTimer_Handler+0x38>)
 8006206:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <SDTimer_Handler+0x3c>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <SDTimer_Handler+0x2c>
    Timer2--;
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <SDTimer_Handler+0x3c>)
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <SDTimer_Handler+0x3c>)
 800621a:	801a      	strh	r2, [r3, #0]
}
 800621c:	bf00      	nop
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20006204 	.word	0x20006204
 800622c:	20006206 	.word	0x20006206

08006230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006234:	e7fe      	b.n	8006234 <NMI_Handler+0x4>

08006236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800623a:	e7fe      	b.n	800623a <HardFault_Handler+0x4>

0800623c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006240:	e7fe      	b.n	8006240 <MemManage_Handler+0x4>

08006242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006246:	e7fe      	b.n	8006246 <BusFault_Handler+0x4>

08006248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800624c:	e7fe      	b.n	800624c <UsageFault_Handler+0x4>

0800624e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_WIFI_IRQN_Pin);
 8006260:	2010      	movs	r0, #16
 8006262:	f001 f89f 	bl	80073a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8006270:	4802      	ldr	r0, [pc, #8]	; (800627c <DMA1_Stream3_IRQHandler+0x10>)
 8006272:	f000 fc67 	bl	8006b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006276:	bf00      	nop
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	2000e57c 	.word	0x2000e57c

08006280 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <DMA1_Stream4_IRQHandler+0x10>)
 8006286:	f000 fc5d 	bl	8006b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	2000e51c 	.word	0x2000e51c

08006294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006298:	4802      	ldr	r0, [pc, #8]	; (80062a4 <USART1_IRQHandler+0x10>)
 800629a:	f005 ff85 	bl	800c1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000e8c8 	.word	0x2000e8c8

080062a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062ac:	4802      	ldr	r0, [pc, #8]	; (80062b8 <USART2_IRQHandler+0x10>)
 80062ae:	f005 ff7b 	bl	800c1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062b2:	bf00      	nop
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	2000e90c 	.word	0x2000e90c

080062bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80062c0:	4802      	ldr	r0, [pc, #8]	; (80062cc <USART3_IRQHandler+0x10>)
 80062c2:	f005 ff71 	bl	800c1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000e950 	.word	0x2000e950

080062d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80062d4:	4802      	ldr	r0, [pc, #8]	; (80062e0 <RTC_Alarm_IRQHandler+0x10>)
 80062d6:	f004 f8db 	bl	800a490 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	2000e5dc 	.word	0x2000e5dc

080062e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	FatFsCnt++;
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <TIM5_IRQHandler+0x44>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	3301      	adds	r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <TIM5_IRQHandler+0x44>)
 80062f4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <TIM5_IRQHandler+0x44>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d904      	bls.n	800630a <TIM5_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <TIM5_IRQHandler+0x44>)
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8006306:	f7ff ff73 	bl	80061f0 <SDTimer_Handler>
	}

	// m16946 added
	msTicks ++ ;
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <TIM5_IRQHandler+0x48>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a06      	ldr	r2, [pc, #24]	; (800632c <TIM5_IRQHandler+0x48>)
 8006312:	6013      	str	r3, [r2, #0]
	runCnt ++ ;
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <TIM5_IRQHandler+0x4c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a05      	ldr	r2, [pc, #20]	; (8006330 <TIM5_IRQHandler+0x4c>)
 800631c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800631e:	4805      	ldr	r0, [pc, #20]	; (8006334 <TIM5_IRQHandler+0x50>)
 8006320:	f005 f8e8 	bl	800b4f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8006324:	bf00      	nop
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20013434 	.word	0x20013434
 800632c:	20013438 	.word	0x20013438
 8006330:	2001343c 	.word	0x2001343c
 8006334:	200133ec 	.word	0x200133ec

08006338 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800633c:	4802      	ldr	r0, [pc, #8]	; (8006348 <DMA2_Stream4_IRQHandler+0x10>)
 800633e:	f000 fc01 	bl	8006b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	2000e704 	.word	0x2000e704

0800634c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8006350:	4802      	ldr	r0, [pc, #8]	; (800635c <SPI5_IRQHandler+0x10>)
 8006352:	f004 fd11 	bl	800ad78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000e6ac 	.word	0x2000e6ac

08006360 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e00a      	b.n	8006388 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006372:	f3af 8000 	nop.w
 8006376:	4601      	mov	r1, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	60ba      	str	r2, [r7, #8]
 800637e:	b2ca      	uxtb	r2, r1
 8006380:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3301      	adds	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	dbf0      	blt.n	8006372 <_read+0x12>
	}

return len;
 8006390:	687b      	ldr	r3, [r7, #4]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	e009      	b.n	80063c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	60ba      	str	r2, [r7, #8]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fc fbd9 	bl	8002b6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	dbf1      	blt.n	80063ac <_write+0x12>
	}
	return len;
 80063c8:	687b      	ldr	r3, [r7, #4]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <_close>:

int _close(int file)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
	return -1;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063fa:	605a      	str	r2, [r3, #4]
	return 0;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <_isatty>:

int _isatty(int file)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
	return 1;
 8006412:	2301      	movs	r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	return 0;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <_sbrk+0x5c>)
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <_sbrk+0x60>)
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006450:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <_sbrk+0x64>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <_sbrk+0x64>)
 800645a:	4a12      	ldr	r2, [pc, #72]	; (80064a4 <_sbrk+0x68>)
 800645c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <_sbrk+0x64>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d207      	bcs.n	800647c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800646c:	f018 f9d6 	bl	801e81c <__errno>
 8006470:	4603      	mov	r3, r0
 8006472:	220c      	movs	r2, #12
 8006474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	e009      	b.n	8006490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <_sbrk+0x64>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <_sbrk+0x64>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4413      	add	r3, r2
 800648a:	4a05      	ldr	r2, [pc, #20]	; (80064a0 <_sbrk+0x64>)
 800648c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20030000 	.word	0x20030000
 800649c:	00001000 	.word	0x00001000
 80064a0:	20013440 	.word	0x20013440
 80064a4:	2001e650 	.word	0x2001e650

080064a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064ac:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <SystemInit+0x20>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <SystemInit+0x20>)
 80064b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80064cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006504 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064d0:	480d      	ldr	r0, [pc, #52]	; (8006508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064d2:	490e      	ldr	r1, [pc, #56]	; (800650c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064d4:	4a0e      	ldr	r2, [pc, #56]	; (8006510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064d8:	e002      	b.n	80064e0 <LoopCopyDataInit>

080064da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064de:	3304      	adds	r3, #4

080064e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064e4:	d3f9      	bcc.n	80064da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064e6:	4a0b      	ldr	r2, [pc, #44]	; (8006514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064e8:	4c0b      	ldr	r4, [pc, #44]	; (8006518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80064ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064ec:	e001      	b.n	80064f2 <LoopFillZerobss>

080064ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064f0:	3204      	adds	r2, #4

080064f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064f4:	d3fb      	bcc.n	80064ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80064f6:	f7ff ffd7 	bl	80064a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064fa:	f018 f995 	bl	801e828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064fe:	f7fd fcd5 	bl	8003eac <main>
  bx  lr    
 8006502:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006504:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800650c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8006510:	080291c0 	.word	0x080291c0
  ldr r2, =_sbss
 8006514:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8006518:	2001e64c 	.word	0x2001e64c

0800651c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800651c:	e7fe      	b.n	800651c <ADC_IRQHandler>
	...

08006520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <HAL_Init+0x40>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <HAL_Init+0x40>)
 800652a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800652e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_Init+0x40>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <HAL_Init+0x40>)
 8006536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800653c:	4b08      	ldr	r3, [pc, #32]	; (8006560 <HAL_Init+0x40>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a07      	ldr	r2, [pc, #28]	; (8006560 <HAL_Init+0x40>)
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006548:	2003      	movs	r0, #3
 800654a:	f000 f920 	bl	800678e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800654e:	2005      	movs	r0, #5
 8006550:	f7ff fdf4 	bl	800613c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006554:	f7ff f8ec 	bl	8005730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40023c00 	.word	0x40023c00

08006564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_IncTick+0x20>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_IncTick+0x24>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4413      	add	r3, r2
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <HAL_IncTick+0x24>)
 8006576:	6013      	str	r3, [r2, #0]
}
 8006578:	bf00      	nop
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000014 	.word	0x20000014
 8006588:	20013444 	.word	0x20013444

0800658c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  return uwTick;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_GetTick+0x14>)
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20013444 	.word	0x20013444

080065a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065ac:	f7ff ffee 	bl	800658c <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d005      	beq.n	80065ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <HAL_Delay+0x44>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065ca:	bf00      	nop
 80065cc:	f7ff ffde 	bl	800658c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d8f7      	bhi.n	80065cc <HAL_Delay+0x28>
  {
  }
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000014 	.word	0x20000014

080065ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <__NVIC_SetPriorityGrouping+0x44>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006608:	4013      	ands	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800661e:	4a04      	ldr	r2, [pc, #16]	; (8006630 <__NVIC_SetPriorityGrouping+0x44>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	60d3      	str	r3, [r2, #12]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	e000ed00 	.word	0xe000ed00

08006634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <__NVIC_GetPriorityGrouping+0x18>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	f003 0307 	and.w	r3, r3, #7
}
 8006642:	4618      	mov	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	e000ed00 	.word	0xe000ed00

08006650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	db0b      	blt.n	800667a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	f003 021f 	and.w	r2, r3, #31
 8006668:	4907      	ldr	r1, [pc, #28]	; (8006688 <__NVIC_EnableIRQ+0x38>)
 800666a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	2001      	movs	r0, #1
 8006672:	fa00 f202 	lsl.w	r2, r0, r2
 8006676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	e000e100 	.word	0xe000e100

0800668c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669a:	2b00      	cmp	r3, #0
 800669c:	db12      	blt.n	80066c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	f003 021f 	and.w	r2, r3, #31
 80066a4:	490a      	ldr	r1, [pc, #40]	; (80066d0 <__NVIC_DisableIRQ+0x44>)
 80066a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	2001      	movs	r0, #1
 80066ae:	fa00 f202 	lsl.w	r2, r0, r2
 80066b2:	3320      	adds	r3, #32
 80066b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066b8:	f3bf 8f4f 	dsb	sy
}
 80066bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066be:	f3bf 8f6f 	isb	sy
}
 80066c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	e000e100 	.word	0xe000e100

080066d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db0a      	blt.n	80066fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	490c      	ldr	r1, [pc, #48]	; (8006720 <__NVIC_SetPriority+0x4c>)
 80066ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f2:	0112      	lsls	r2, r2, #4
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	440b      	add	r3, r1
 80066f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066fc:	e00a      	b.n	8006714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4908      	ldr	r1, [pc, #32]	; (8006724 <__NVIC_SetPriority+0x50>)
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	3b04      	subs	r3, #4
 800670c:	0112      	lsls	r2, r2, #4
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	440b      	add	r3, r1
 8006712:	761a      	strb	r2, [r3, #24]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	e000e100 	.word	0xe000e100
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	; 0x24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f1c3 0307 	rsb	r3, r3, #7
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf28      	it	cs
 8006746:	2304      	movcs	r3, #4
 8006748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3304      	adds	r3, #4
 800674e:	2b06      	cmp	r3, #6
 8006750:	d902      	bls.n	8006758 <NVIC_EncodePriority+0x30>
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3b03      	subs	r3, #3
 8006756:	e000      	b.n	800675a <NVIC_EncodePriority+0x32>
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	401a      	ands	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006770:	f04f 31ff 	mov.w	r1, #4294967295
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	43d9      	mvns	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006780:	4313      	orrs	r3, r2
         );
}
 8006782:	4618      	mov	r0, r3
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff28 	bl	80065ec <__NVIC_SetPriorityGrouping>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067b6:	f7ff ff3d 	bl	8006634 <__NVIC_GetPriorityGrouping>
 80067ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6978      	ldr	r0, [r7, #20]
 80067c2:	f7ff ffb1 	bl	8006728 <NVIC_EncodePriority>
 80067c6:	4602      	mov	r2, r0
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff ff80 	bl	80066d4 <__NVIC_SetPriority>
}
 80067d4:	bf00      	nop
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff ff30 	bl	8006650 <__NVIC_EnableIRQ>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff ff40 	bl	800668c <__NVIC_DisableIRQ>
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006820:	f7ff feb4 	bl	800658c <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e099      	b.n	8006964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006850:	e00f      	b.n	8006872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006852:	f7ff fe9b 	bl	800658c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b05      	cmp	r3, #5
 800685e:	d908      	bls.n	8006872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2203      	movs	r2, #3
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e078      	b.n	8006964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e8      	bne.n	8006852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4b38      	ldr	r3, [pc, #224]	; (800696c <HAL_DMA_Init+0x158>)
 800688c:	4013      	ands	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800689e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d107      	bne.n	80068dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	4313      	orrs	r3, r2
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0307 	bic.w	r3, r3, #7
 80068f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2b04      	cmp	r3, #4
 8006904:	d117      	bne.n	8006936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00e      	beq.n	8006936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fb01 	bl	8006f20 <DMA_CheckFifoParam>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2240      	movs	r2, #64	; 0x40
 8006928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006932:	2301      	movs	r3, #1
 8006934:	e016      	b.n	8006964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fab8 	bl	8006eb4 <DMA_CalcBaseAndBitshift>
 8006944:	4603      	mov	r3, r0
 8006946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	223f      	movs	r2, #63	; 0x3f
 800694e:	409a      	lsls	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	f010803f 	.word	0xf010803f

08006970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_DMA_Start_IT+0x26>
 8006992:	2302      	movs	r3, #2
 8006994:	e040      	b.n	8006a18 <HAL_DMA_Start_IT+0xa8>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d12f      	bne.n	8006a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa4a 	bl	8006e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	223f      	movs	r2, #63	; 0x3f
 80069ca:	409a      	lsls	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0216 	orr.w	r2, r2, #22
 80069de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e005      	b.n	8006a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
 8006a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a2e:	f7ff fdad 	bl	800658c <HAL_GetTick>
 8006a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d008      	beq.n	8006a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2280      	movs	r2, #128	; 0x80
 8006a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e052      	b.n	8006af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0216 	bic.w	r2, r2, #22
 8006a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <HAL_DMA_Abort+0x62>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0208 	bic.w	r2, r2, #8
 8006a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aa2:	e013      	b.n	8006acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006aa4:	f7ff fd72 	bl	800658c <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d90c      	bls.n	8006acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2203      	movs	r2, #3
 8006abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e015      	b.n	8006af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e4      	bne.n	8006aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ade:	223f      	movs	r2, #63	; 0x3f
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d004      	beq.n	8006b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2280      	movs	r2, #128	; 0x80
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e00c      	b.n	8006b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2205      	movs	r2, #5
 8006b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b50:	4b8e      	ldr	r3, [pc, #568]	; (8006d8c <HAL_DMA_IRQHandler+0x248>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a8e      	ldr	r2, [pc, #568]	; (8006d90 <HAL_DMA_IRQHandler+0x24c>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	0a9b      	lsrs	r3, r3, #10
 8006b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	2208      	movs	r2, #8
 8006b70:	409a      	lsls	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01a      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d012      	beq.n	8006be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	f043 0202 	orr.w	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	2204      	movs	r2, #4
 8006bec:	409a      	lsls	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c08:	2204      	movs	r2, #4
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	f043 0204 	orr.w	r2, r3, #4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	2210      	movs	r2, #16
 8006c22:	409a      	lsls	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d043      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d03c      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	2210      	movs	r2, #16
 8006c40:	409a      	lsls	r2, r3
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d018      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d108      	bne.n	8006c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d024      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	e01f      	b.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01b      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
 8006c84:	e016      	b.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d107      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0208 	bic.w	r2, r2, #8
 8006ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb8:	2220      	movs	r2, #32
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 808f 	beq.w	8006de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8087 	beq.w	8006de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	2220      	movs	r2, #32
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d136      	bne.n	8006d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0216 	bic.w	r2, r2, #22
 8006cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <HAL_DMA_IRQHandler+0x1da>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d007      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0208 	bic.w	r2, r2, #8
 8006d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	223f      	movs	r2, #63	; 0x3f
 8006d34:	409a      	lsls	r2, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d07e      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
        }
        return;
 8006d5a:	e079      	b.n	8006e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01d      	beq.n	8006da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d031      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
 8006d88:	e02c      	b.n	8006de4 <HAL_DMA_IRQHandler+0x2a0>
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c
 8006d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d023      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
 8006da4:	e01e      	b.n	8006de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10f      	bne.n	8006dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0210 	bic.w	r2, r2, #16
 8006dc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d032      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d022      	beq.n	8006e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2205      	movs	r2, #5
 8006dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d307      	bcc.n	8006e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1f2      	bne.n	8006e10 <HAL_DMA_IRQHandler+0x2cc>
 8006e2a:	e000      	b.n	8006e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
 8006e4e:	e000      	b.n	8006e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e50:	bf00      	nop
    }
  }
}
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d108      	bne.n	8006e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e96:	e007      	b.n	8006ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	3b10      	subs	r3, #16
 8006ec4:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <DMA_CalcBaseAndBitshift+0x64>)
 8006ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eca:	091b      	lsrs	r3, r3, #4
 8006ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <DMA_CalcBaseAndBitshift+0x68>)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d909      	bls.n	8006ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	1d1a      	adds	r2, r3, #4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ef4:	e007      	b.n	8006f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	aaaaaaab 	.word	0xaaaaaaab
 8006f1c:	080256cc 	.word	0x080256cc

08006f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11f      	bne.n	8006f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d856      	bhi.n	8006fee <DMA_CheckFifoParam+0xce>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <DMA_CheckFifoParam+0x28>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f6b 	.word	0x08006f6b
 8006f50:	08006f59 	.word	0x08006f59
 8006f54:	08006fef 	.word	0x08006fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d046      	beq.n	8006ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f68:	e043      	b.n	8006ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f72:	d140      	bne.n	8006ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f78:	e03d      	b.n	8006ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f82:	d121      	bne.n	8006fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d837      	bhi.n	8006ffa <DMA_CheckFifoParam+0xda>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <DMA_CheckFifoParam+0x70>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fa1 	.word	0x08006fa1
 8006f94:	08006fa7 	.word	0x08006fa7
 8006f98:	08006fa1 	.word	0x08006fa1
 8006f9c:	08006fb9 	.word	0x08006fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	e030      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d025      	beq.n	8006ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fb6:	e022      	b.n	8006ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fc0:	d11f      	bne.n	8007002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fc6:	e01c      	b.n	8007002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d903      	bls.n	8006fd6 <DMA_CheckFifoParam+0xb6>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d003      	beq.n	8006fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fd4:	e018      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fda:	e015      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00e      	beq.n	8007006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
      break;
 8006fec:	e00b      	b.n	8007006 <DMA_CheckFifoParam+0xe6>
      break;
 8006fee:	bf00      	nop
 8006ff0:	e00a      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e008      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e006      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e004      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;   
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <DMA_CheckFifoParam+0xe8>
      break;
 8007006:	bf00      	nop
    }
  } 
  
  return status; 
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop

08007018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007018:	b480      	push	{r7}
 800701a:	b089      	sub	sp, #36	; 0x24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	e177      	b.n	8007324 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007034:	2201      	movs	r2, #1
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4013      	ands	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	429a      	cmp	r2, r3
 800704e:	f040 8166 	bne.w	800731e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d005      	beq.n	800706a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007066:	2b02      	cmp	r3, #2
 8007068:	d130      	bne.n	80070cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	2203      	movs	r2, #3
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	43db      	mvns	r3, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4013      	ands	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4313      	orrs	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070a0:	2201      	movs	r2, #1
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 0201 	and.w	r2, r3, #1
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d017      	beq.n	8007108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	2203      	movs	r2, #3
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d123      	bne.n	800715c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	08da      	lsrs	r2, r3, #3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3208      	adds	r2, #8
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	220f      	movs	r2, #15
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	43db      	mvns	r3, r3
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	4013      	ands	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4313      	orrs	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	08da      	lsrs	r2, r3, #3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3208      	adds	r2, #8
 8007156:	69b9      	ldr	r1, [r7, #24]
 8007158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	2203      	movs	r2, #3
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	43db      	mvns	r3, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 0203 	and.w	r2, r3, #3
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4313      	orrs	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80c0 	beq.w	800731e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	4b66      	ldr	r3, [pc, #408]	; (800733c <HAL_GPIO_Init+0x324>)
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	4a65      	ldr	r2, [pc, #404]	; (800733c <HAL_GPIO_Init+0x324>)
 80071a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ac:	6453      	str	r3, [r2, #68]	; 0x44
 80071ae:	4b63      	ldr	r3, [pc, #396]	; (800733c <HAL_GPIO_Init+0x324>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ba:	4a61      	ldr	r2, [pc, #388]	; (8007340 <HAL_GPIO_Init+0x328>)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	3302      	adds	r3, #2
 80071c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	220f      	movs	r2, #15
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4013      	ands	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a58      	ldr	r2, [pc, #352]	; (8007344 <HAL_GPIO_Init+0x32c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d037      	beq.n	8007256 <HAL_GPIO_Init+0x23e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_GPIO_Init+0x330>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d031      	beq.n	8007252 <HAL_GPIO_Init+0x23a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a56      	ldr	r2, [pc, #344]	; (800734c <HAL_GPIO_Init+0x334>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02b      	beq.n	800724e <HAL_GPIO_Init+0x236>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a55      	ldr	r2, [pc, #340]	; (8007350 <HAL_GPIO_Init+0x338>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d025      	beq.n	800724a <HAL_GPIO_Init+0x232>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a54      	ldr	r2, [pc, #336]	; (8007354 <HAL_GPIO_Init+0x33c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01f      	beq.n	8007246 <HAL_GPIO_Init+0x22e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a53      	ldr	r2, [pc, #332]	; (8007358 <HAL_GPIO_Init+0x340>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d019      	beq.n	8007242 <HAL_GPIO_Init+0x22a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a52      	ldr	r2, [pc, #328]	; (800735c <HAL_GPIO_Init+0x344>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_GPIO_Init+0x226>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a51      	ldr	r2, [pc, #324]	; (8007360 <HAL_GPIO_Init+0x348>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00d      	beq.n	800723a <HAL_GPIO_Init+0x222>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a50      	ldr	r2, [pc, #320]	; (8007364 <HAL_GPIO_Init+0x34c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d007      	beq.n	8007236 <HAL_GPIO_Init+0x21e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a4f      	ldr	r2, [pc, #316]	; (8007368 <HAL_GPIO_Init+0x350>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <HAL_GPIO_Init+0x21a>
 800722e:	2309      	movs	r3, #9
 8007230:	e012      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007232:	230a      	movs	r3, #10
 8007234:	e010      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007236:	2308      	movs	r3, #8
 8007238:	e00e      	b.n	8007258 <HAL_GPIO_Init+0x240>
 800723a:	2307      	movs	r3, #7
 800723c:	e00c      	b.n	8007258 <HAL_GPIO_Init+0x240>
 800723e:	2306      	movs	r3, #6
 8007240:	e00a      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007242:	2305      	movs	r3, #5
 8007244:	e008      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007246:	2304      	movs	r3, #4
 8007248:	e006      	b.n	8007258 <HAL_GPIO_Init+0x240>
 800724a:	2303      	movs	r3, #3
 800724c:	e004      	b.n	8007258 <HAL_GPIO_Init+0x240>
 800724e:	2302      	movs	r3, #2
 8007250:	e002      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <HAL_GPIO_Init+0x240>
 8007256:	2300      	movs	r3, #0
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	f002 0203 	and.w	r2, r2, #3
 800725e:	0092      	lsls	r2, r2, #2
 8007260:	4093      	lsls	r3, r2
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4313      	orrs	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007268:	4935      	ldr	r1, [pc, #212]	; (8007340 <HAL_GPIO_Init+0x328>)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	089b      	lsrs	r3, r3, #2
 800726e:	3302      	adds	r3, #2
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007276:	4b3d      	ldr	r3, [pc, #244]	; (800736c <HAL_GPIO_Init+0x354>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	43db      	mvns	r3, r3
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	4013      	ands	r3, r2
 8007284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800729a:	4a34      	ldr	r2, [pc, #208]	; (800736c <HAL_GPIO_Init+0x354>)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072a0:	4b32      	ldr	r3, [pc, #200]	; (800736c <HAL_GPIO_Init+0x354>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <HAL_GPIO_Init+0x354>)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072ca:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_GPIO_Init+0x354>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	43db      	mvns	r3, r3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	4013      	ands	r3, r2
 80072d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072ee:	4a1f      	ldr	r2, [pc, #124]	; (800736c <HAL_GPIO_Init+0x354>)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <HAL_GPIO_Init+0x354>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	43db      	mvns	r3, r3
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4013      	ands	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007318:	4a14      	ldr	r2, [pc, #80]	; (800736c <HAL_GPIO_Init+0x354>)
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	3301      	adds	r3, #1
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	2b0f      	cmp	r3, #15
 8007328:	f67f ae84 	bls.w	8007034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	3724      	adds	r7, #36	; 0x24
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	40013800 	.word	0x40013800
 8007344:	40020000 	.word	0x40020000
 8007348:	40020400 	.word	0x40020400
 800734c:	40020800 	.word	0x40020800
 8007350:	40020c00 	.word	0x40020c00
 8007354:	40021000 	.word	0x40021000
 8007358:	40021400 	.word	0x40021400
 800735c:	40021800 	.word	0x40021800
 8007360:	40021c00 	.word	0x40021c00
 8007364:	40022000 	.word	0x40022000
 8007368:	40022400 	.word	0x40022400
 800736c:	40013c00 	.word	0x40013c00

08007370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
 800737c:	4613      	mov	r3, r2
 800737e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007380:	787b      	ldrb	r3, [r7, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007386:	887a      	ldrh	r2, [r7, #2]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800738c:	e003      	b.n	8007396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800738e:	887b      	ldrh	r3, [r7, #2]
 8007390:	041a      	lsls	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	619a      	str	r2, [r3, #24]
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d006      	beq.n	80073c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073ba:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fdaa 	bl	8004f1c <HAL_GPIO_EXTI_Callback>
  }
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40013c00 	.word	0x40013c00

080073d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e12b      	b.n	800763e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fe f9c4 	bl	8005788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	; 0x24
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007438:	f002 fa2e 	bl	8009898 <HAL_RCC_GetPCLK1Freq>
 800743c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4a81      	ldr	r2, [pc, #516]	; (8007648 <HAL_I2C_Init+0x274>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d807      	bhi.n	8007458 <HAL_I2C_Init+0x84>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a80      	ldr	r2, [pc, #512]	; (800764c <HAL_I2C_Init+0x278>)
 800744c:	4293      	cmp	r3, r2
 800744e:	bf94      	ite	ls
 8007450:	2301      	movls	r3, #1
 8007452:	2300      	movhi	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e006      	b.n	8007466 <HAL_I2C_Init+0x92>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a7d      	ldr	r2, [pc, #500]	; (8007650 <HAL_I2C_Init+0x27c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	bf94      	ite	ls
 8007460:	2301      	movls	r3, #1
 8007462:	2300      	movhi	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e0e7      	b.n	800763e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a78      	ldr	r2, [pc, #480]	; (8007654 <HAL_I2C_Init+0x280>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0c9b      	lsrs	r3, r3, #18
 8007478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4a6a      	ldr	r2, [pc, #424]	; (8007648 <HAL_I2C_Init+0x274>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d802      	bhi.n	80074a8 <HAL_I2C_Init+0xd4>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3301      	adds	r3, #1
 80074a6:	e009      	b.n	80074bc <HAL_I2C_Init+0xe8>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	4a69      	ldr	r2, [pc, #420]	; (8007658 <HAL_I2C_Init+0x284>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	099b      	lsrs	r3, r3, #6
 80074ba:	3301      	adds	r3, #1
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	495c      	ldr	r1, [pc, #368]	; (8007648 <HAL_I2C_Init+0x274>)
 80074d8:	428b      	cmp	r3, r1
 80074da:	d819      	bhi.n	8007510 <HAL_I2C_Init+0x13c>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	1e59      	subs	r1, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074f0:	400b      	ands	r3, r1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_I2C_Init+0x138>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1e59      	subs	r1, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	fbb1 f3f3 	udiv	r3, r1, r3
 8007504:	3301      	adds	r3, #1
 8007506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750a:	e051      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 800750c:	2304      	movs	r3, #4
 800750e:	e04f      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d111      	bne.n	800753c <HAL_I2C_Init+0x168>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1e58      	subs	r0, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	440b      	add	r3, r1
 8007526:	fbb0 f3f3 	udiv	r3, r0, r3
 800752a:	3301      	adds	r3, #1
 800752c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf0c      	ite	eq
 8007534:	2301      	moveq	r3, #1
 8007536:	2300      	movne	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	e012      	b.n	8007562 <HAL_I2C_Init+0x18e>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1e58      	subs	r0, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6859      	ldr	r1, [r3, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	0099      	lsls	r1, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007552:	3301      	adds	r3, #1
 8007554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007558:	2b00      	cmp	r3, #0
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_I2C_Init+0x196>
 8007566:	2301      	movs	r3, #1
 8007568:	e022      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10e      	bne.n	8007590 <HAL_I2C_Init+0x1bc>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1e58      	subs	r0, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	440b      	add	r3, r1
 8007580:	fbb0 f3f3 	udiv	r3, r0, r3
 8007584:	3301      	adds	r3, #1
 8007586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758e:	e00f      	b.n	80075b0 <HAL_I2C_Init+0x1dc>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1e58      	subs	r0, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	0099      	lsls	r1, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a6:	3301      	adds	r3, #1
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	6809      	ldr	r1, [r1, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69da      	ldr	r2, [r3, #28]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6911      	ldr	r1, [r2, #16]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	4311      	orrs	r1, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	000186a0 	.word	0x000186a0
 800764c:	001e847f 	.word	0x001e847f
 8007650:	003d08ff 	.word	0x003d08ff
 8007654:	431bde83 	.word	0x431bde83
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	461a      	mov	r2, r3
 8007668:	460b      	mov	r3, r1
 800766a:	817b      	strh	r3, [r7, #10]
 800766c:	4613      	mov	r3, r2
 800766e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007670:	f7fe ff8c 	bl	800658c <HAL_GetTick>
 8007674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	f040 80e0 	bne.w	8007844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2319      	movs	r3, #25
 800768a:	2201      	movs	r2, #1
 800768c:	4970      	ldr	r1, [pc, #448]	; (8007850 <HAL_I2C_Master_Transmit+0x1f4>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fc58 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
 800769c:	e0d3      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_I2C_Master_Transmit+0x50>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0cc      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d007      	beq.n	80076d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2221      	movs	r2, #33	; 0x21
 80076e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2210      	movs	r2, #16
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	893a      	ldrh	r2, [r7, #8]
 8007702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a50      	ldr	r2, [pc, #320]	; (8007854 <HAL_I2C_Master_Transmit+0x1f8>)
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007714:	8979      	ldrh	r1, [r7, #10]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fac2 	bl	8007ca4 <I2C_MasterRequestWrite>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e08d      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007740:	e066      	b.n	8007810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	6a39      	ldr	r1, [r7, #32]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fcd2 	bl	80080f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	2b04      	cmp	r3, #4
 8007758:	d107      	bne.n	800776a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e06b      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d11b      	bne.n	80077e4 <HAL_I2C_Master_Transmit+0x188>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d017      	beq.n	80077e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	6a39      	ldr	r1, [r7, #32]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fcc2 	bl	8008172 <I2C_WaitOnBTFFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d107      	bne.n	800780c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800780a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e01a      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d194      	bne.n	8007742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e000      	b.n	8007846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007844:	2302      	movs	r3, #2
  }
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	00100002 	.word	0x00100002
 8007854:	ffff0000 	.word	0xffff0000

08007858 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	; 0x30
 800785c:	af02      	add	r7, sp, #8
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	461a      	mov	r2, r3
 8007864:	460b      	mov	r3, r1
 8007866:	817b      	strh	r3, [r7, #10]
 8007868:	4613      	mov	r3, r2
 800786a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800786c:	f7fe fe8e 	bl	800658c <HAL_GetTick>
 8007870:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b20      	cmp	r3, #32
 800787c:	f040 820b 	bne.w	8007c96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2319      	movs	r3, #25
 8007886:	2201      	movs	r2, #1
 8007888:	497c      	ldr	r1, [pc, #496]	; (8007a7c <HAL_I2C_Master_Receive+0x224>)
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fb5a 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	e1fe      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_I2C_Master_Receive+0x50>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e1f7      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d007      	beq.n	80078ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0201 	orr.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2222      	movs	r2, #34	; 0x22
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2210      	movs	r2, #16
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	893a      	ldrh	r2, [r7, #8]
 80078fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a5c      	ldr	r2, [pc, #368]	; (8007a80 <HAL_I2C_Master_Receive+0x228>)
 800790e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007910:	8979      	ldrh	r1, [r7, #10]
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa46 	bl	8007da8 <I2C_MasterRequestRead>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e1b8      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d113      	bne.n	8007956 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792e:	2300      	movs	r3, #0
 8007930:	623b      	str	r3, [r7, #32]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e18c      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795a:	2b01      	cmp	r3, #1
 800795c:	d11b      	bne.n	8007996 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e16c      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799a:	2b02      	cmp	r3, #2
 800799c:	d11b      	bne.n	80079d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	e14c      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80079fc:	e138      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	f200 80f1 	bhi.w	8007bea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d123      	bne.n	8007a58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fbed 	bl	80081f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e139      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a56:	e10b      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d14e      	bne.n	8007afe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	4906      	ldr	r1, [pc, #24]	; (8007a84 <HAL_I2C_Master_Receive+0x22c>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fa6a 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e10e      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
 8007a7a:	bf00      	nop
 8007a7c:	00100002 	.word	0x00100002
 8007a80:	ffff0000 	.word	0xffff0000
 8007a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007afc:	e0b8      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2200      	movs	r2, #0
 8007b06:	4966      	ldr	r1, [pc, #408]	; (8007ca0 <HAL_I2C_Master_Receive+0x448>)
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fa1b 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0bf      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	494f      	ldr	r1, [pc, #316]	; (8007ca0 <HAL_I2C_Master_Receive+0x448>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f9ed 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e091      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007be8:	e042      	b.n	8007c70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fb00 	bl	80081f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e04c      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d118      	bne.n	8007c70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f47f aec2 	bne.w	80079fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	; 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	00010004 	.word	0x00010004

08007ca4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d006      	beq.n	8007cce <I2C_MasterRequestWrite+0x2a>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d003      	beq.n	8007cce <I2C_MasterRequestWrite+0x2a>
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ccc:	d108      	bne.n	8007ce0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e00b      	b.n	8007cf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	2b12      	cmp	r3, #18
 8007ce6:	d107      	bne.n	8007cf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f91d 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00d      	beq.n	8007d2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1e:	d103      	bne.n	8007d28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e035      	b.n	8007d98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d34:	d108      	bne.n	8007d48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d36:	897b      	ldrh	r3, [r7, #10]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d44:	611a      	str	r2, [r3, #16]
 8007d46:	e01b      	b.n	8007d80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d48:	897b      	ldrh	r3, [r7, #10]
 8007d4a:	11db      	asrs	r3, r3, #7
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 0306 	and.w	r3, r3, #6
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f063 030f 	orn	r3, r3, #15
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	490e      	ldr	r1, [pc, #56]	; (8007da0 <I2C_MasterRequestWrite+0xfc>)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 f943 	bl	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e010      	b.n	8007d98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d76:	897b      	ldrh	r3, [r7, #10]
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	4907      	ldr	r1, [pc, #28]	; (8007da4 <I2C_MasterRequestWrite+0x100>)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f933 	bl	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e000      	b.n	8007d98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	00010008 	.word	0x00010008
 8007da4:	00010002 	.word	0x00010002

08007da8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	460b      	mov	r3, r1
 8007db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d006      	beq.n	8007de2 <I2C_MasterRequestRead+0x3a>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d003      	beq.n	8007de2 <I2C_MasterRequestRead+0x3a>
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007de0:	d108      	bne.n	8007df4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	e00b      	b.n	8007e0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	2b11      	cmp	r3, #17
 8007dfa:	d107      	bne.n	8007e0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f893 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e32:	d103      	bne.n	8007e3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e079      	b.n	8007f34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e48:	d108      	bne.n	8007e5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e4a:	897b      	ldrh	r3, [r7, #10]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f043 0301 	orr.w	r3, r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	611a      	str	r2, [r3, #16]
 8007e5a:	e05f      	b.n	8007f1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	11db      	asrs	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0306 	and.w	r3, r3, #6
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f063 030f 	orn	r3, r3, #15
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	4930      	ldr	r1, [pc, #192]	; (8007f3c <I2C_MasterRequestRead+0x194>)
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f8b9 	bl	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e054      	b.n	8007f34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e8a:	897b      	ldrh	r3, [r7, #10]
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	4929      	ldr	r1, [pc, #164]	; (8007f40 <I2C_MasterRequestRead+0x198>)
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f8a9 	bl	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e044      	b.n	8007f34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ece:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f831 	bl	8007f44 <I2C_WaitOnFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00d      	beq.n	8007f04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef6:	d103      	bne.n	8007f00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e017      	b.n	8007f34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f04:	897b      	ldrh	r3, [r7, #10]
 8007f06:	11db      	asrs	r3, r3, #7
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 0306 	and.w	r3, r3, #6
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f063 030e 	orn	r3, r3, #14
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4907      	ldr	r1, [pc, #28]	; (8007f40 <I2C_MasterRequestRead+0x198>)
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f865 	bl	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	00010008 	.word	0x00010008
 8007f40:	00010002 	.word	0x00010002

08007f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	4613      	mov	r3, r2
 8007f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f54:	e025      	b.n	8007fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d021      	beq.n	8007fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5e:	f7fe fb15 	bl	800658c <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d302      	bcc.n	8007f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d116      	bne.n	8007fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0220 	orr.w	r2, r3, #32
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e023      	b.n	8007fea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10d      	bne.n	8007fc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	43da      	mvns	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bf0c      	ite	eq
 8007fbe:	2301      	moveq	r3, #1
 8007fc0:	2300      	movne	r3, #0
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	e00c      	b.n	8007fe2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	43da      	mvns	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d0b6      	beq.n	8007f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008000:	e051      	b.n	80080a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800800c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008010:	d123      	bne.n	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008020:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800802a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	f043 0204 	orr.w	r2, r3, #4
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e046      	b.n	80080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d021      	beq.n	80080a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008062:	f7fe fa93 	bl	800658c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d302      	bcc.n	8008078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d116      	bne.n	80080a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e020      	b.n	80080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10c      	bne.n	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	43da      	mvns	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4013      	ands	r3, r2
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	e00b      	b.n	80080e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	43da      	mvns	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d18d      	bne.n	8008002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080fc:	e02d      	b.n	800815a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f8ce 	bl	80082a0 <I2C_IsAcknowledgeFailed>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e02d      	b.n	800816a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d021      	beq.n	800815a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008116:	f7fe fa39 	bl	800658c <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d116      	bne.n	800815a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e007      	b.n	800816a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d1ca      	bne.n	80080fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800817e:	e02d      	b.n	80081dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f88d 	bl	80082a0 <I2C_IsAcknowledgeFailed>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e02d      	b.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008196:	d021      	beq.n	80081dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008198:	f7fe f9f8 	bl	800658c <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d302      	bcc.n	80081ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d116      	bne.n	80081dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f043 0220 	orr.w	r2, r3, #32
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e007      	b.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d1ca      	bne.n	8008180 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008200:	e042      	b.n	8008288 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b10      	cmp	r3, #16
 800820e:	d119      	bne.n	8008244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0210 	mvn.w	r2, #16
 8008218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e029      	b.n	8008298 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008244:	f7fe f9a2 	bl	800658c <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	429a      	cmp	r2, r3
 8008252:	d302      	bcc.n	800825a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d116      	bne.n	8008288 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	f043 0220 	orr.w	r2, r3, #32
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e007      	b.n	8008298 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	d1b5      	bne.n	8008202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b6:	d11b      	bne.n	80082f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	f043 0204 	orr.w	r2, r3, #4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b20      	cmp	r3, #32
 8008312:	d129      	bne.n	8008368 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	; 0x24
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0210 	bic.w	r2, r2, #16
 800833a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e000      	b.n	800836a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
  }
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b20      	cmp	r3, #32
 800838e:	d12a      	bne.n	80083e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2224      	movs	r2, #36	; 0x24
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0201 	bic.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80083b0:	89fb      	ldrh	r3, [r7, #14]
 80083b2:	f023 030f 	bic.w	r3, r3, #15
 80083b6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	4313      	orrs	r3, r2
 80083c0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	89fa      	ldrh	r2, [r7, #14]
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0201 	orr.w	r2, r2, #1
 80083d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e128      	b.n	8008658 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a90      	ldr	r2, [pc, #576]	; (8008660 <HAL_I2S_Init+0x26c>)
 800841e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fd fa2f 	bl	8005884 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800843c:	f023 030f 	bic.w	r3, r3, #15
 8008440:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2202      	movs	r2, #2
 8008448:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d060      	beq.n	8008514 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800845a:	2310      	movs	r3, #16
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e001      	b.n	8008464 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008460:	2320      	movs	r3, #32
 8008462:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b20      	cmp	r3, #32
 800846a:	d802      	bhi.n	8008472 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008472:	2001      	movs	r0, #1
 8008474:	f001 fc2a 	bl	8009ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8008478:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008482:	d125      	bne.n	80084d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d010      	beq.n	80084ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	fbb2 f2f3 	udiv	r2, r2, r3
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	3305      	adds	r3, #5
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	e01f      	b.n	80084ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	461a      	mov	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ca:	3305      	adds	r3, #5
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e00e      	b.n	80084ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	461a      	mov	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	3305      	adds	r3, #5
 80084ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4a5c      	ldr	r2, [pc, #368]	; (8008664 <HAL_I2S_Init+0x270>)
 80084f2:	fba2 2303 	umull	r2, r3, r2, r3
 80084f6:	08db      	lsrs	r3, r3, #3
 80084f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e003      	b.n	800851c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008514:	2302      	movs	r3, #2
 8008516:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d902      	bls.n	8008528 <HAL_I2S_Init+0x134>
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	2bff      	cmp	r3, #255	; 0xff
 8008526:	d907      	bls.n	8008538 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852c:	f043 0210 	orr.w	r2, r3, #16
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e08f      	b.n	8008658 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	ea42 0103 	orr.w	r1, r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	430a      	orrs	r2, r1
 800854a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008556:	f023 030f 	bic.w	r3, r3, #15
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6851      	ldr	r1, [r2, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6892      	ldr	r2, [r2, #8]
 8008562:	4311      	orrs	r1, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68d2      	ldr	r2, [r2, #12]
 8008568:	4311      	orrs	r1, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6992      	ldr	r2, [r2, #24]
 800856e:	430a      	orrs	r2, r1
 8008570:	431a      	orrs	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d161      	bne.n	8008648 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a38      	ldr	r2, [pc, #224]	; (8008668 <HAL_I2S_Init+0x274>)
 8008588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a37      	ldr	r2, [pc, #220]	; (800866c <HAL_I2S_Init+0x278>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d101      	bne.n	8008598 <HAL_I2S_Init+0x1a4>
 8008594:	4b36      	ldr	r3, [pc, #216]	; (8008670 <HAL_I2S_Init+0x27c>)
 8008596:	e001      	b.n	800859c <HAL_I2S_Init+0x1a8>
 8008598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	4932      	ldr	r1, [pc, #200]	; (800866c <HAL_I2S_Init+0x278>)
 80085a4:	428a      	cmp	r2, r1
 80085a6:	d101      	bne.n	80085ac <HAL_I2S_Init+0x1b8>
 80085a8:	4a31      	ldr	r2, [pc, #196]	; (8008670 <HAL_I2S_Init+0x27c>)
 80085aa:	e001      	b.n	80085b0 <HAL_I2S_Init+0x1bc>
 80085ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80085b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80085b4:	f023 030f 	bic.w	r3, r3, #15
 80085b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2b      	ldr	r2, [pc, #172]	; (800866c <HAL_I2S_Init+0x278>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d101      	bne.n	80085c8 <HAL_I2S_Init+0x1d4>
 80085c4:	4b2a      	ldr	r3, [pc, #168]	; (8008670 <HAL_I2S_Init+0x27c>)
 80085c6:	e001      	b.n	80085cc <HAL_I2S_Init+0x1d8>
 80085c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085cc:	2202      	movs	r2, #2
 80085ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a25      	ldr	r2, [pc, #148]	; (800866c <HAL_I2S_Init+0x278>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d101      	bne.n	80085de <HAL_I2S_Init+0x1ea>
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <HAL_I2S_Init+0x27c>)
 80085dc:	e001      	b.n	80085e2 <HAL_I2S_Init+0x1ee>
 80085de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ee:	d003      	beq.n	80085f8 <HAL_I2S_Init+0x204>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80085f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	e001      	b.n	8008604 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800860e:	4313      	orrs	r3, r2
 8008610:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008618:	4313      	orrs	r3, r2
 800861a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008622:	4313      	orrs	r3, r2
 8008624:	b29a      	uxth	r2, r3
 8008626:	897b      	ldrh	r3, [r7, #10]
 8008628:	4313      	orrs	r3, r2
 800862a:	b29b      	uxth	r3, r3
 800862c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008630:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a0d      	ldr	r2, [pc, #52]	; (800866c <HAL_I2S_Init+0x278>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d101      	bne.n	8008640 <HAL_I2S_Init+0x24c>
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <HAL_I2S_Init+0x27c>)
 800863e:	e001      	b.n	8008644 <HAL_I2S_Init+0x250>
 8008640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008644:	897a      	ldrh	r2, [r7, #10]
 8008646:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	08008951 	.word	0x08008951
 8008664:	cccccccd 	.word	0xcccccccd
 8008668:	08008a65 	.word	0x08008a65
 800866c:	40003800 	.word	0x40003800
 8008670:	40003400 	.word	0x40003400

08008674 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <HAL_I2S_Transmit_DMA+0x1a>
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e08e      	b.n	80087b0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_I2S_Transmit_DMA+0x2e>
 800869e:	2302      	movs	r3, #2
 80086a0:	e086      	b.n	80087b0 <HAL_I2S_Transmit_DMA+0x13c>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d005      	beq.n	80086c2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
 80086c0:	e076      	b.n	80087b0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2203      	movs	r2, #3
 80086c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d002      	beq.n	80086ee <HAL_I2S_Transmit_DMA+0x7a>
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d10a      	bne.n	8008704 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80086ee:	88fb      	ldrh	r3, [r7, #6]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008702:	e005      	b.n	8008710 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	88fa      	ldrh	r2, [r7, #6]
 800870e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <HAL_I2S_Transmit_DMA+0x144>)
 8008716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	4a27      	ldr	r2, [pc, #156]	; (80087bc <HAL_I2S_Transmit_DMA+0x148>)
 800871e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <HAL_I2S_Transmit_DMA+0x14c>)
 8008726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008730:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008738:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008740:	f7fe f916 	bl	8006970 <HAL_DMA_Start_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00f      	beq.n	800876a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	f043 0208 	orr.w	r2, r3, #8
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e022      	b.n	80087b0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008774:	2b00      	cmp	r3, #0
 8008776:	d107      	bne.n	8008788 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69da      	ldr	r2, [r3, #28]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008786:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d107      	bne.n	80087a6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0202 	orr.w	r2, r2, #2
 80087a4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	0800882f 	.word	0x0800882f
 80087bc:	080087ed 	.word	0x080087ed
 80087c0:	0800884b 	.word	0x0800884b

080087c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10e      	bne.n	8008820 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0202 	bic.w	r2, r2, #2
 8008810:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7f8 fdef 	bl	8001404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7f8 fdd1 	bl	80013e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0203 	bic.w	r2, r2, #3
 8008866:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008880:	f043 0208 	orr.w	r2, r3, #8
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff ffa5 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	881a      	ldrh	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	1c9a      	adds	r2, r3, #2
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10e      	bne.n	80088ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7f8 fd8d 	bl	8001404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	b292      	uxth	r2, r2
 8008906:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	1c9a      	adds	r2, r3, #2
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008916:	b29b      	uxth	r3, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008924:	b29b      	uxth	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10e      	bne.n	8008948 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008938:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff ff3e 	bl	80087c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b04      	cmp	r3, #4
 800896a:	d13a      	bne.n	80089e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b01      	cmp	r3, #1
 8008974:	d109      	bne.n	800898a <I2S_IRQHandler+0x3a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d102      	bne.n	800898a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff ffb4 	bl	80088f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d126      	bne.n	80089e2 <I2S_IRQHandler+0x92>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d11f      	bne.n	80089e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80089b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d4:	f043 0202 	orr.w	r2, r3, #2
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fefb 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d136      	bne.n	8008a5c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d109      	bne.n	8008a0c <I2S_IRQHandler+0xbc>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a02:	2b80      	cmp	r3, #128	; 0x80
 8008a04:	d102      	bne.n	8008a0c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ff45 	bl	8008896 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d122      	bne.n	8008a5c <I2S_IRQHandler+0x10c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d11b      	bne.n	8008a5c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a32:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4e:	f043 0204 	orr.w	r2, r3, #4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff febe 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a92      	ldr	r2, [pc, #584]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d101      	bne.n	8008a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008a7e:	4b92      	ldr	r3, [pc, #584]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a80:	e001      	b.n	8008a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a8b      	ldr	r2, [pc, #556]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d101      	bne.n	8008aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008a9c:	4b8a      	ldr	r3, [pc, #552]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a9e:	e001      	b.n	8008aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab0:	d004      	beq.n	8008abc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 8099 	bne.w	8008bee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d107      	bne.n	8008ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f925 	bl	8008d20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d107      	bne.n	8008af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f9c8 	bl	8008e80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d13a      	bne.n	8008b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d035      	beq.n	8008b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a6e      	ldr	r2, [pc, #440]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d101      	bne.n	8008b12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008b0e:	4b6e      	ldr	r3, [pc, #440]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b10:	e001      	b.n	8008b16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4969      	ldr	r1, [pc, #420]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b1e:	428b      	cmp	r3, r1
 8008b20:	d101      	bne.n	8008b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008b22:	4b69      	ldr	r3, [pc, #420]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b24:	e001      	b.n	8008b2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b62:	f043 0202 	orr.w	r2, r3, #2
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fe34 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	f040 80c3 	bne.w	8008d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80bd 	beq.w	8008d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a49      	ldr	r2, [pc, #292]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008ba2:	4b49      	ldr	r3, [pc, #292]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008ba4:	e001      	b.n	8008baa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4944      	ldr	r1, [pc, #272]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008bb2:	428b      	cmp	r3, r1
 8008bb4:	d101      	bne.n	8008bba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008bb6:	4b44      	ldr	r3, [pc, #272]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008bb8:	e001      	b.n	8008bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008bc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60bb      	str	r3, [r7, #8]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	60bb      	str	r3, [r7, #8]
 8008bd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	f043 0204 	orr.w	r2, r3, #4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fdf6 	bl	80087d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008bec:	e089      	b.n	8008d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d107      	bne.n	8008c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8be 	bl	8008d84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d107      	bne.n	8008c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f8fd 	bl	8008e1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c28:	2b40      	cmp	r3, #64	; 0x40
 8008c2a:	d12f      	bne.n	8008c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d02a      	beq.n	8008c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d101      	bne.n	8008c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008c50:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008c52:	e001      	b.n	8008c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4919      	ldr	r1, [pc, #100]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008c60:	428b      	cmp	r3, r1
 8008c62:	d101      	bne.n	8008c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008c66:	e001      	b.n	8008c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	f043 0202 	orr.w	r2, r3, #2
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff fda6 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d136      	bne.n	8008d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d031      	beq.n	8008d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d101      	bne.n	8008cae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008cac:	e001      	b.n	8008cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4902      	ldr	r1, [pc, #8]	; (8008cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008cba:	428b      	cmp	r3, r1
 8008cbc:	d106      	bne.n	8008ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008cbe:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008cc0:	e006      	b.n	8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008cc2:	bf00      	nop
 8008cc4:	40003800 	.word	0x40003800
 8008cc8:	40003400 	.word	0x40003400
 8008ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cd4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ce4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf2:	f043 0204 	orr.w	r2, r3, #4
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fd6c 	bl	80087d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d00:	e000      	b.n	8008d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008d02:	bf00      	nop
}
 8008d04:	bf00      	nop
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	1c99      	adds	r1, r3, #2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6251      	str	r1, [r2, #36]	; 0x24
 8008d32:	881a      	ldrh	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d113      	bne.n	8008d7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d106      	bne.n	8008d7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff ffc9 	bl	8008d0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	1c99      	adds	r1, r3, #2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6251      	str	r1, [r2, #36]	; 0x24
 8008d96:	8819      	ldrh	r1, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <I2SEx_TxISR_I2SExt+0x90>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d101      	bne.n	8008da6 <I2SEx_TxISR_I2SExt+0x22>
 8008da2:	4b1d      	ldr	r3, [pc, #116]	; (8008e18 <I2SEx_TxISR_I2SExt+0x94>)
 8008da4:	e001      	b.n	8008daa <I2SEx_TxISR_I2SExt+0x26>
 8008da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008daa:	460a      	mov	r2, r1
 8008dac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d121      	bne.n	8008e0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a12      	ldr	r2, [pc, #72]	; (8008e14 <I2SEx_TxISR_I2SExt+0x90>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d101      	bne.n	8008dd4 <I2SEx_TxISR_I2SExt+0x50>
 8008dd0:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <I2SEx_TxISR_I2SExt+0x94>)
 8008dd2:	e001      	b.n	8008dd8 <I2SEx_TxISR_I2SExt+0x54>
 8008dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	490d      	ldr	r1, [pc, #52]	; (8008e14 <I2SEx_TxISR_I2SExt+0x90>)
 8008de0:	428b      	cmp	r3, r1
 8008de2:	d101      	bne.n	8008de8 <I2SEx_TxISR_I2SExt+0x64>
 8008de4:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <I2SEx_TxISR_I2SExt+0x94>)
 8008de6:	e001      	b.n	8008dec <I2SEx_TxISR_I2SExt+0x68>
 8008de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008dec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008df0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff ff81 	bl	8008d0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40003800 	.word	0x40003800
 8008e18:	40003400 	.word	0x40003400

08008e1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68d8      	ldr	r0, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	1c99      	adds	r1, r3, #2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008e34:	b282      	uxth	r2, r0
 8008e36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d113      	bne.n	8008e78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff ff4a 	bl	8008d0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <I2SEx_RxISR_I2SExt+0x90>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d101      	bne.n	8008e96 <I2SEx_RxISR_I2SExt+0x16>
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <I2SEx_RxISR_I2SExt+0x94>)
 8008e94:	e001      	b.n	8008e9a <I2SEx_RxISR_I2SExt+0x1a>
 8008e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e9a:	68d8      	ldr	r0, [r3, #12]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	1c99      	adds	r1, r3, #2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008ea6:	b282      	uxth	r2, r0
 8008ea8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d121      	bne.n	8008f06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a12      	ldr	r2, [pc, #72]	; (8008f10 <I2SEx_RxISR_I2SExt+0x90>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d101      	bne.n	8008ed0 <I2SEx_RxISR_I2SExt+0x50>
 8008ecc:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <I2SEx_RxISR_I2SExt+0x94>)
 8008ece:	e001      	b.n	8008ed4 <I2SEx_RxISR_I2SExt+0x54>
 8008ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	490d      	ldr	r1, [pc, #52]	; (8008f10 <I2SEx_RxISR_I2SExt+0x90>)
 8008edc:	428b      	cmp	r3, r1
 8008ede:	d101      	bne.n	8008ee4 <I2SEx_RxISR_I2SExt+0x64>
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <I2SEx_RxISR_I2SExt+0x94>)
 8008ee2:	e001      	b.n	8008ee8 <I2SEx_RxISR_I2SExt+0x68>
 8008ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ee8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008eec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff03 	bl	8008d0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	40003800 	.word	0x40003800
 8008f14:	40003400 	.word	0x40003400

08008f18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f22:	2300      	movs	r3, #0
 8008f24:	603b      	str	r3, [r7, #0]
 8008f26:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4a1f      	ldr	r2, [pc, #124]	; (8008fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f30:	6413      	str	r3, [r2, #64]	; 0x40
 8008f32:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f3e:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <HAL_PWREx_EnableOverDrive+0x94>)
 8008f40:	2201      	movs	r2, #1
 8008f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f44:	f7fd fb22 	bl	800658c <HAL_GetTick>
 8008f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f4a:	e009      	b.n	8008f60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f4c:	f7fd fb1e 	bl	800658c <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f5a:	d901      	bls.n	8008f60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e01f      	b.n	8008fa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6c:	d1ee      	bne.n	8008f4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008f6e:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f74:	f7fd fb0a 	bl	800658c <HAL_GetTick>
 8008f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f7a:	e009      	b.n	8008f90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f7c:	f7fd fb06 	bl	800658c <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f8a:	d901      	bls.n	8008f90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e007      	b.n	8008fa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f90:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f9c:	d1ee      	bne.n	8008f7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	420e0040 	.word	0x420e0040
 8008fb0:	40007000 	.word	0x40007000
 8008fb4:	420e0044 	.word	0x420e0044

08008fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e267      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d075      	beq.n	80090c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fd6:	4b88      	ldr	r3, [pc, #544]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 030c 	and.w	r3, r3, #12
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d00c      	beq.n	8008ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fe2:	4b85      	ldr	r3, [pc, #532]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d112      	bne.n	8009014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fee:	4b82      	ldr	r3, [pc, #520]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffa:	d10b      	bne.n	8009014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ffc:	4b7e      	ldr	r3, [pc, #504]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d05b      	beq.n	80090c0 <HAL_RCC_OscConfig+0x108>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d157      	bne.n	80090c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e242      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901c:	d106      	bne.n	800902c <HAL_RCC_OscConfig+0x74>
 800901e:	4b76      	ldr	r3, [pc, #472]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a75      	ldr	r2, [pc, #468]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e01d      	b.n	8009068 <HAL_RCC_OscConfig+0xb0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009034:	d10c      	bne.n	8009050 <HAL_RCC_OscConfig+0x98>
 8009036:	4b70      	ldr	r3, [pc, #448]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a6f      	ldr	r2, [pc, #444]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800903c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	4b6d      	ldr	r3, [pc, #436]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a6c      	ldr	r2, [pc, #432]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	e00b      	b.n	8009068 <HAL_RCC_OscConfig+0xb0>
 8009050:	4b69      	ldr	r3, [pc, #420]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a68      	ldr	r2, [pc, #416]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800905a:	6013      	str	r3, [r2, #0]
 800905c:	4b66      	ldr	r3, [pc, #408]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a65      	ldr	r2, [pc, #404]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d013      	beq.n	8009098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009070:	f7fd fa8c 	bl	800658c <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009078:	f7fd fa88 	bl	800658c <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b64      	cmp	r3, #100	; 0x64
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e207      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800908a:	4b5b      	ldr	r3, [pc, #364]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f0      	beq.n	8009078 <HAL_RCC_OscConfig+0xc0>
 8009096:	e014      	b.n	80090c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009098:	f7fd fa78 	bl	800658c <HAL_GetTick>
 800909c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090a0:	f7fd fa74 	bl	800658c <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b64      	cmp	r3, #100	; 0x64
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e1f3      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090b2:	4b51      	ldr	r3, [pc, #324]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f0      	bne.n	80090a0 <HAL_RCC_OscConfig+0xe8>
 80090be:	e000      	b.n	80090c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d063      	beq.n	8009196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090ce:	4b4a      	ldr	r3, [pc, #296]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 030c 	and.w	r3, r3, #12
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00b      	beq.n	80090f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090da:	4b47      	ldr	r3, [pc, #284]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d11c      	bne.n	8009120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090e6:	4b44      	ldr	r3, [pc, #272]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d116      	bne.n	8009120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090f2:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <HAL_RCC_OscConfig+0x152>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d001      	beq.n	800910a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e1c7      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800910a:	4b3b      	ldr	r3, [pc, #236]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	4937      	ldr	r1, [pc, #220]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800911a:	4313      	orrs	r3, r2
 800911c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800911e:	e03a      	b.n	8009196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d020      	beq.n	800916a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009128:	4b34      	ldr	r3, [pc, #208]	; (80091fc <HAL_RCC_OscConfig+0x244>)
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800912e:	f7fd fa2d 	bl	800658c <HAL_GetTick>
 8009132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009136:	f7fd fa29 	bl	800658c <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e1a8      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009148:	4b2b      	ldr	r3, [pc, #172]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009154:	4b28      	ldr	r3, [pc, #160]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	4925      	ldr	r1, [pc, #148]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 8009164:	4313      	orrs	r3, r2
 8009166:	600b      	str	r3, [r1, #0]
 8009168:	e015      	b.n	8009196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800916a:	4b24      	ldr	r3, [pc, #144]	; (80091fc <HAL_RCC_OscConfig+0x244>)
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009170:	f7fd fa0c 	bl	800658c <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009178:	f7fd fa08 	bl	800658c <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b02      	cmp	r3, #2
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e187      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1f0      	bne.n	8009178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0308 	and.w	r3, r3, #8
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d036      	beq.n	8009210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d016      	beq.n	80091d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <HAL_RCC_OscConfig+0x248>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b0:	f7fd f9ec 	bl	800658c <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091b8:	f7fd f9e8 	bl	800658c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e167      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ca:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_RCC_OscConfig+0x240>)
 80091cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0x200>
 80091d6:	e01b      	b.n	8009210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091d8:	4b09      	ldr	r3, [pc, #36]	; (8009200 <HAL_RCC_OscConfig+0x248>)
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091de:	f7fd f9d5 	bl	800658c <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091e4:	e00e      	b.n	8009204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091e6:	f7fd f9d1 	bl	800658c <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d907      	bls.n	8009204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e150      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
 80091f8:	40023800 	.word	0x40023800
 80091fc:	42470000 	.word	0x42470000
 8009200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009204:	4b88      	ldr	r3, [pc, #544]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1ea      	bne.n	80091e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 8097 	beq.w	800934c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009222:	4b81      	ldr	r3, [pc, #516]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10f      	bne.n	800924e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800922e:	2300      	movs	r3, #0
 8009230:	60bb      	str	r3, [r7, #8]
 8009232:	4b7d      	ldr	r3, [pc, #500]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	4a7c      	ldr	r2, [pc, #496]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800923c:	6413      	str	r3, [r2, #64]	; 0x40
 800923e:	4b7a      	ldr	r3, [pc, #488]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009246:	60bb      	str	r3, [r7, #8]
 8009248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800924e:	4b77      	ldr	r3, [pc, #476]	; (800942c <HAL_RCC_OscConfig+0x474>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d118      	bne.n	800928c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800925a:	4b74      	ldr	r3, [pc, #464]	; (800942c <HAL_RCC_OscConfig+0x474>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a73      	ldr	r2, [pc, #460]	; (800942c <HAL_RCC_OscConfig+0x474>)
 8009260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009266:	f7fd f991 	bl	800658c <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800926e:	f7fd f98d 	bl	800658c <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e10c      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009280:	4b6a      	ldr	r3, [pc, #424]	; (800942c <HAL_RCC_OscConfig+0x474>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d106      	bne.n	80092a2 <HAL_RCC_OscConfig+0x2ea>
 8009294:	4b64      	ldr	r3, [pc, #400]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009298:	4a63      	ldr	r2, [pc, #396]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	6713      	str	r3, [r2, #112]	; 0x70
 80092a0:	e01c      	b.n	80092dc <HAL_RCC_OscConfig+0x324>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	d10c      	bne.n	80092c4 <HAL_RCC_OscConfig+0x30c>
 80092aa:	4b5f      	ldr	r3, [pc, #380]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	4a5e      	ldr	r2, [pc, #376]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092b0:	f043 0304 	orr.w	r3, r3, #4
 80092b4:	6713      	str	r3, [r2, #112]	; 0x70
 80092b6:	4b5c      	ldr	r3, [pc, #368]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4a5b      	ldr	r2, [pc, #364]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	6713      	str	r3, [r2, #112]	; 0x70
 80092c2:	e00b      	b.n	80092dc <HAL_RCC_OscConfig+0x324>
 80092c4:	4b58      	ldr	r3, [pc, #352]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c8:	4a57      	ldr	r2, [pc, #348]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092ca:	f023 0301 	bic.w	r3, r3, #1
 80092ce:	6713      	str	r3, [r2, #112]	; 0x70
 80092d0:	4b55      	ldr	r3, [pc, #340]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	4a54      	ldr	r2, [pc, #336]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80092d6:	f023 0304 	bic.w	r3, r3, #4
 80092da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d015      	beq.n	8009310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e4:	f7fd f952 	bl	800658c <HAL_GetTick>
 80092e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ea:	e00a      	b.n	8009302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ec:	f7fd f94e 	bl	800658c <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e0cb      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009302:	4b49      	ldr	r3, [pc, #292]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0ee      	beq.n	80092ec <HAL_RCC_OscConfig+0x334>
 800930e:	e014      	b.n	800933a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009310:	f7fd f93c 	bl	800658c <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009316:	e00a      	b.n	800932e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009318:	f7fd f938 	bl	800658c <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f241 3288 	movw	r2, #5000	; 0x1388
 8009326:	4293      	cmp	r3, r2
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e0b5      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800932e:	4b3e      	ldr	r3, [pc, #248]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1ee      	bne.n	8009318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d105      	bne.n	800934c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009340:	4b39      	ldr	r3, [pc, #228]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	4a38      	ldr	r2, [pc, #224]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800934a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80a1 	beq.w	8009498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009356:	4b34      	ldr	r3, [pc, #208]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 030c 	and.w	r3, r3, #12
 800935e:	2b08      	cmp	r3, #8
 8009360:	d05c      	beq.n	800941c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	2b02      	cmp	r3, #2
 8009368:	d141      	bne.n	80093ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800936a:	4b31      	ldr	r3, [pc, #196]	; (8009430 <HAL_RCC_OscConfig+0x478>)
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009370:	f7fd f90c 	bl	800658c <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009378:	f7fd f908 	bl	800658c <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e087      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800938a:	4b27      	ldr	r3, [pc, #156]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f0      	bne.n	8009378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69da      	ldr	r2, [r3, #28]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	019b      	lsls	r3, r3, #6
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	085b      	lsrs	r3, r3, #1
 80093ae:	3b01      	subs	r3, #1
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	061b      	lsls	r3, r3, #24
 80093ba:	491b      	ldr	r1, [pc, #108]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80093bc:	4313      	orrs	r3, r2
 80093be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093c0:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <HAL_RCC_OscConfig+0x478>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093c6:	f7fd f8e1 	bl	800658c <HAL_GetTick>
 80093ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093cc:	e008      	b.n	80093e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ce:	f7fd f8dd 	bl	800658c <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d901      	bls.n	80093e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e05c      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093e0:	4b11      	ldr	r3, [pc, #68]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0f0      	beq.n	80093ce <HAL_RCC_OscConfig+0x416>
 80093ec:	e054      	b.n	8009498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <HAL_RCC_OscConfig+0x478>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093f4:	f7fd f8ca 	bl	800658c <HAL_GetTick>
 80093f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093fa:	e008      	b.n	800940e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093fc:	f7fd f8c6 	bl	800658c <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d901      	bls.n	800940e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e045      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <HAL_RCC_OscConfig+0x470>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f0      	bne.n	80093fc <HAL_RCC_OscConfig+0x444>
 800941a:	e03d      	b.n	8009498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d107      	bne.n	8009434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e038      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
 8009428:	40023800 	.word	0x40023800
 800942c:	40007000 	.word	0x40007000
 8009430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009434:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <HAL_RCC_OscConfig+0x4ec>)
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d028      	beq.n	8009494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800944c:	429a      	cmp	r2, r3
 800944e:	d121      	bne.n	8009494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800945a:	429a      	cmp	r2, r3
 800945c:	d11a      	bne.n	8009494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009464:	4013      	ands	r3, r2
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800946a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800946c:	4293      	cmp	r3, r2
 800946e:	d111      	bne.n	8009494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	3b01      	subs	r3, #1
 800947e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009480:	429a      	cmp	r2, r3
 8009482:	d107      	bne.n	8009494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009490:	429a      	cmp	r2, r3
 8009492:	d001      	beq.n	8009498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40023800 	.word	0x40023800

080094a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e0cc      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094bc:	4b68      	ldr	r3, [pc, #416]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d90c      	bls.n	80094e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ca:	4b65      	ldr	r3, [pc, #404]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094d2:	4b63      	ldr	r3, [pc, #396]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d001      	beq.n	80094e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e0b8      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d020      	beq.n	8009532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0304 	and.w	r3, r3, #4
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094fc:	4b59      	ldr	r3, [pc, #356]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	4a58      	ldr	r2, [pc, #352]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	d005      	beq.n	8009520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009514:	4b53      	ldr	r3, [pc, #332]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	4a52      	ldr	r2, [pc, #328]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 800951a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800951e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009520:	4b50      	ldr	r3, [pc, #320]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	494d      	ldr	r1, [pc, #308]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 800952e:	4313      	orrs	r3, r2
 8009530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d044      	beq.n	80095c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d107      	bne.n	8009556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009546:	4b47      	ldr	r3, [pc, #284]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d119      	bne.n	8009586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e07f      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d003      	beq.n	8009566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009562:	2b03      	cmp	r3, #3
 8009564:	d107      	bne.n	8009576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009566:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e06f      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009576:	4b3b      	ldr	r3, [pc, #236]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e067      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009586:	4b37      	ldr	r3, [pc, #220]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f023 0203 	bic.w	r2, r3, #3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	4934      	ldr	r1, [pc, #208]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009594:	4313      	orrs	r3, r2
 8009596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009598:	f7fc fff8 	bl	800658c <HAL_GetTick>
 800959c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800959e:	e00a      	b.n	80095b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095a0:	f7fc fff4 	bl	800658c <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d901      	bls.n	80095b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e04f      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b6:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 020c 	and.w	r2, r3, #12
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d1eb      	bne.n	80095a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095c8:	4b25      	ldr	r3, [pc, #148]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d20c      	bcs.n	80095f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095d6:	4b22      	ldr	r3, [pc, #136]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095de:	4b20      	ldr	r3, [pc, #128]	; (8009660 <HAL_RCC_ClockConfig+0x1b8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d001      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e032      	b.n	8009656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d008      	beq.n	800960e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095fc:	4b19      	ldr	r3, [pc, #100]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	4916      	ldr	r1, [pc, #88]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 800960a:	4313      	orrs	r3, r2
 800960c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	490e      	ldr	r1, [pc, #56]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 800962a:	4313      	orrs	r3, r2
 800962c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800962e:	f000 f821 	bl	8009674 <HAL_RCC_GetSysClockFreq>
 8009632:	4602      	mov	r2, r0
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <HAL_RCC_ClockConfig+0x1bc>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	091b      	lsrs	r3, r3, #4
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	490a      	ldr	r1, [pc, #40]	; (8009668 <HAL_RCC_ClockConfig+0x1c0>)
 8009640:	5ccb      	ldrb	r3, [r1, r3]
 8009642:	fa22 f303 	lsr.w	r3, r2, r3
 8009646:	4a09      	ldr	r2, [pc, #36]	; (800966c <HAL_RCC_ClockConfig+0x1c4>)
 8009648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800964a:	4b09      	ldr	r3, [pc, #36]	; (8009670 <HAL_RCC_ClockConfig+0x1c8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7fc fd74 	bl	800613c <HAL_InitTick>

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40023c00 	.word	0x40023c00
 8009664:	40023800 	.word	0x40023800
 8009668:	080256b4 	.word	0x080256b4
 800966c:	2000000c 	.word	0x2000000c
 8009670:	20000010 	.word	0x20000010

08009674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009678:	b094      	sub	sp, #80	; 0x50
 800967a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	647b      	str	r3, [r7, #68]	; 0x44
 8009680:	2300      	movs	r3, #0
 8009682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009684:	2300      	movs	r3, #0
 8009686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800968c:	4b79      	ldr	r3, [pc, #484]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 030c 	and.w	r3, r3, #12
 8009694:	2b08      	cmp	r3, #8
 8009696:	d00d      	beq.n	80096b4 <HAL_RCC_GetSysClockFreq+0x40>
 8009698:	2b08      	cmp	r3, #8
 800969a:	f200 80e1 	bhi.w	8009860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_RCC_GetSysClockFreq+0x34>
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d003      	beq.n	80096ae <HAL_RCC_GetSysClockFreq+0x3a>
 80096a6:	e0db      	b.n	8009860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096a8:	4b73      	ldr	r3, [pc, #460]	; (8009878 <HAL_RCC_GetSysClockFreq+0x204>)
 80096aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80096ac:	e0db      	b.n	8009866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096ae:	4b73      	ldr	r3, [pc, #460]	; (800987c <HAL_RCC_GetSysClockFreq+0x208>)
 80096b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096b2:	e0d8      	b.n	8009866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096b4:	4b6f      	ldr	r3, [pc, #444]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096be:	4b6d      	ldr	r3, [pc, #436]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d063      	beq.n	8009792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096ca:	4b6a      	ldr	r3, [pc, #424]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	099b      	lsrs	r3, r3, #6
 80096d0:	2200      	movs	r2, #0
 80096d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096dc:	633b      	str	r3, [r7, #48]	; 0x30
 80096de:	2300      	movs	r3, #0
 80096e0:	637b      	str	r3, [r7, #52]	; 0x34
 80096e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096e6:	4622      	mov	r2, r4
 80096e8:	462b      	mov	r3, r5
 80096ea:	f04f 0000 	mov.w	r0, #0
 80096ee:	f04f 0100 	mov.w	r1, #0
 80096f2:	0159      	lsls	r1, r3, #5
 80096f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096f8:	0150      	lsls	r0, r2, #5
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4621      	mov	r1, r4
 8009700:	1a51      	subs	r1, r2, r1
 8009702:	6139      	str	r1, [r7, #16]
 8009704:	4629      	mov	r1, r5
 8009706:	eb63 0301 	sbc.w	r3, r3, r1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	f04f 0200 	mov.w	r2, #0
 8009710:	f04f 0300 	mov.w	r3, #0
 8009714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009718:	4659      	mov	r1, fp
 800971a:	018b      	lsls	r3, r1, #6
 800971c:	4651      	mov	r1, sl
 800971e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009722:	4651      	mov	r1, sl
 8009724:	018a      	lsls	r2, r1, #6
 8009726:	4651      	mov	r1, sl
 8009728:	ebb2 0801 	subs.w	r8, r2, r1
 800972c:	4659      	mov	r1, fp
 800972e:	eb63 0901 	sbc.w	r9, r3, r1
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800973e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009746:	4690      	mov	r8, r2
 8009748:	4699      	mov	r9, r3
 800974a:	4623      	mov	r3, r4
 800974c:	eb18 0303 	adds.w	r3, r8, r3
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	462b      	mov	r3, r5
 8009754:	eb49 0303 	adc.w	r3, r9, r3
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009766:	4629      	mov	r1, r5
 8009768:	024b      	lsls	r3, r1, #9
 800976a:	4621      	mov	r1, r4
 800976c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009770:	4621      	mov	r1, r4
 8009772:	024a      	lsls	r2, r1, #9
 8009774:	4610      	mov	r0, r2
 8009776:	4619      	mov	r1, r3
 8009778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977a:	2200      	movs	r2, #0
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
 800977e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009784:	f7f7 f8a2 	bl	80008cc <__aeabi_uldivmod>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4613      	mov	r3, r2
 800978e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009790:	e058      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009792:	4b38      	ldr	r3, [pc, #224]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	099b      	lsrs	r3, r3, #6
 8009798:	2200      	movs	r2, #0
 800979a:	4618      	mov	r0, r3
 800979c:	4611      	mov	r1, r2
 800979e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80097a2:	623b      	str	r3, [r7, #32]
 80097a4:	2300      	movs	r3, #0
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
 80097a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80097ac:	4642      	mov	r2, r8
 80097ae:	464b      	mov	r3, r9
 80097b0:	f04f 0000 	mov.w	r0, #0
 80097b4:	f04f 0100 	mov.w	r1, #0
 80097b8:	0159      	lsls	r1, r3, #5
 80097ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097be:	0150      	lsls	r0, r2, #5
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4641      	mov	r1, r8
 80097c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80097ca:	4649      	mov	r1, r9
 80097cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097e4:	ebb2 040a 	subs.w	r4, r2, sl
 80097e8:	eb63 050b 	sbc.w	r5, r3, fp
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	00eb      	lsls	r3, r5, #3
 80097f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097fa:	00e2      	lsls	r2, r4, #3
 80097fc:	4614      	mov	r4, r2
 80097fe:	461d      	mov	r5, r3
 8009800:	4643      	mov	r3, r8
 8009802:	18e3      	adds	r3, r4, r3
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	464b      	mov	r3, r9
 8009808:	eb45 0303 	adc.w	r3, r5, r3
 800980c:	607b      	str	r3, [r7, #4]
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800981a:	4629      	mov	r1, r5
 800981c:	028b      	lsls	r3, r1, #10
 800981e:	4621      	mov	r1, r4
 8009820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009824:	4621      	mov	r1, r4
 8009826:	028a      	lsls	r2, r1, #10
 8009828:	4610      	mov	r0, r2
 800982a:	4619      	mov	r1, r3
 800982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800982e:	2200      	movs	r2, #0
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	61fa      	str	r2, [r7, #28]
 8009834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009838:	f7f7 f848 	bl	80008cc <__aeabi_uldivmod>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4613      	mov	r3, r2
 8009842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <HAL_RCC_GetSysClockFreq+0x200>)
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	0c1b      	lsrs	r3, r3, #16
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	3301      	adds	r3, #1
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009858:	fbb2 f3f3 	udiv	r3, r2, r3
 800985c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800985e:	e002      	b.n	8009866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <HAL_RCC_GetSysClockFreq+0x204>)
 8009862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009868:	4618      	mov	r0, r3
 800986a:	3750      	adds	r7, #80	; 0x50
 800986c:	46bd      	mov	sp, r7
 800986e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009872:	bf00      	nop
 8009874:	40023800 	.word	0x40023800
 8009878:	00f42400 	.word	0x00f42400
 800987c:	007a1200 	.word	0x007a1200

08009880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <HAL_RCC_GetHCLKFreq+0x14>)
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	2000000c 	.word	0x2000000c

08009898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800989c:	f7ff fff0 	bl	8009880 <HAL_RCC_GetHCLKFreq>
 80098a0:	4602      	mov	r2, r0
 80098a2:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	0a9b      	lsrs	r3, r3, #10
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	4903      	ldr	r1, [pc, #12]	; (80098bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ae:	5ccb      	ldrb	r3, [r1, r3]
 80098b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	40023800 	.word	0x40023800
 80098bc:	080256c4 	.word	0x080256c4

080098c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098c4:	f7ff ffdc 	bl	8009880 <HAL_RCC_GetHCLKFreq>
 80098c8:	4602      	mov	r2, r0
 80098ca:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	0b5b      	lsrs	r3, r3, #13
 80098d0:	f003 0307 	and.w	r3, r3, #7
 80098d4:	4903      	ldr	r1, [pc, #12]	; (80098e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098d6:	5ccb      	ldrb	r3, [r1, r3]
 80098d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40023800 	.word	0x40023800
 80098e4:	080256c4 	.word	0x080256c4

080098e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	220f      	movs	r2, #15
 80098f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80098f8:	4b12      	ldr	r3, [pc, #72]	; (8009944 <HAL_RCC_GetClockConfig+0x5c>)
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f003 0203 	and.w	r2, r3, #3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009904:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <HAL_RCC_GetClockConfig+0x5c>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <HAL_RCC_GetClockConfig+0x5c>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800991c:	4b09      	ldr	r3, [pc, #36]	; (8009944 <HAL_RCC_GetClockConfig+0x5c>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	08db      	lsrs	r3, r3, #3
 8009922:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800992a:	4b07      	ldr	r3, [pc, #28]	; (8009948 <HAL_RCC_GetClockConfig+0x60>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 020f 	and.w	r2, r3, #15
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	601a      	str	r2, [r3, #0]
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	40023800 	.word	0x40023800
 8009948:	40023c00 	.word	0x40023c00

0800994c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10b      	bne.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800997c:	2b00      	cmp	r3, #0
 800997e:	d075      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009980:	4b91      	ldr	r3, [pc, #580]	; (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009986:	f7fc fe01 	bl	800658c <HAL_GetTick>
 800998a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800998c:	e008      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800998e:	f7fc fdfd 	bl	800658c <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e189      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099a0:	4b8a      	ldr	r3, [pc, #552]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f0      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	019a      	lsls	r2, r3, #6
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	071b      	lsls	r3, r3, #28
 80099c4:	4981      	ldr	r1, [pc, #516]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01f      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099d8:	4b7c      	ldr	r3, [pc, #496]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099de:	0f1b      	lsrs	r3, r3, #28
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	019a      	lsls	r2, r3, #6
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	061b      	lsls	r3, r3, #24
 80099f2:	431a      	orrs	r2, r3
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	071b      	lsls	r3, r3, #28
 80099f8:	4974      	ldr	r1, [pc, #464]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a00:	4b72      	ldr	r3, [pc, #456]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a06:	f023 021f 	bic.w	r2, r3, #31
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	496e      	ldr	r1, [pc, #440]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00d      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	019a      	lsls	r2, r3, #6
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	061b      	lsls	r3, r3, #24
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	071b      	lsls	r3, r3, #28
 8009a38:	4964      	ldr	r1, [pc, #400]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a40:	4b61      	ldr	r3, [pc, #388]	; (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009a42:	2201      	movs	r2, #1
 8009a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a46:	f7fc fda1 	bl	800658c <HAL_GetTick>
 8009a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a4c:	e008      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a4e:	f7fc fd9d 	bl	800658c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e129      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a60:	4b5a      	ldr	r3, [pc, #360]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0f0      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d079      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a84:	4b52      	ldr	r3, [pc, #328]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a8a:	f7fc fd7f 	bl	800658c <HAL_GetTick>
 8009a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009a92:	f7fc fd7b 	bl	800658c <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e107      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009aa4:	4b49      	ldr	r3, [pc, #292]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab0:	d0ef      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0304 	and.w	r3, r3, #4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d020      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009abe:	4b43      	ldr	r3, [pc, #268]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac4:	0f1b      	lsrs	r3, r3, #28
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	019a      	lsls	r2, r3, #6
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	061b      	lsls	r3, r3, #24
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	071b      	lsls	r3, r3, #28
 8009ade:	493b      	ldr	r1, [pc, #236]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ae6:	4b39      	ldr	r3, [pc, #228]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	4934      	ldr	r1, [pc, #208]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01e      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b0c:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	019a      	lsls	r2, r3, #6
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	061b      	lsls	r3, r3, #24
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	071b      	lsls	r3, r3, #28
 8009b2c:	4927      	ldr	r1, [pc, #156]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b34:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	4922      	ldr	r1, [pc, #136]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009b4a:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b50:	f7fc fd1c 	bl	800658c <HAL_GetTick>
 8009b54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009b58:	f7fc fd18 	bl	800658c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e0a4      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b6a:	4b18      	ldr	r3, [pc, #96]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b76:	d1ef      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0320 	and.w	r3, r3, #32
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 808b 	beq.w	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	4a0f      	ldr	r2, [pc, #60]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b94:	6413      	str	r3, [r2, #64]	; 0x40
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0b      	ldr	r2, [pc, #44]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bae:	f7fc fced 	bl	800658c <HAL_GetTick>
 8009bb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009bb4:	e010      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009bb6:	f7fc fce9 	bl	800658c <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d909      	bls.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e075      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009bc8:	42470068 	.word	0x42470068
 8009bcc:	40023800 	.word	0x40023800
 8009bd0:	42470070 	.word	0x42470070
 8009bd4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009bd8:	4b38      	ldr	r3, [pc, #224]	; (8009cbc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0e8      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009be4:	4b36      	ldr	r3, [pc, #216]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02f      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d028      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c02:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c0c:	4b2d      	ldr	r3, [pc, #180]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c12:	4b2c      	ldr	r3, [pc, #176]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009c18:	4a29      	ldr	r2, [pc, #164]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009c1e:	4b28      	ldr	r3, [pc, #160]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d114      	bne.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009c2a:	f7fc fcaf 	bl	800658c <HAL_GetTick>
 8009c2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c30:	e00a      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c32:	f7fc fcab 	bl	800658c <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d901      	bls.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e035      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c48:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	f003 0302 	and.w	r3, r3, #2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0ee      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c60:	d10d      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c76:	4912      	ldr	r1, [pc, #72]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	608b      	str	r3, [r1, #8]
 8009c7c:	e005      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	4a0f      	ldr	r2, [pc, #60]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c88:	6093      	str	r3, [r2, #8]
 8009c8a:	4b0d      	ldr	r3, [pc, #52]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c96:	490a      	ldr	r1, [pc, #40]	; (8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0310 	and.w	r3, r3, #16
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009cb0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40007000 	.word	0x40007000
 8009cc0:	40023800 	.word	0x40023800
 8009cc4:	42470e40 	.word	0x42470e40
 8009cc8:	424711e0 	.word	0x424711e0

08009ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d13e      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009cea:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d12f      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d00:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009d02:	617b      	str	r3, [r7, #20]
          break;
 8009d04:	e02f      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009d06:	4b1c      	ldr	r3, [pc, #112]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d12:	d108      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d14:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	e007      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2e:	4a15      	ldr	r2, [pc, #84]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d3c:	099b      	lsrs	r3, r3, #6
 8009d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	fb02 f303 	mul.w	r3, r2, r3
 8009d48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d50:	0f1b      	lsrs	r3, r3, #28
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5c:	617b      	str	r3, [r7, #20]
          break;
 8009d5e:	e002      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
          break;
 8009d64:	bf00      	nop
        }
      }
      break;
 8009d66:	bf00      	nop
    }
  }
  return frequency;
 8009d68:	697b      	ldr	r3, [r7, #20]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40023800 	.word	0x40023800
 8009d7c:	00bb8000 	.word	0x00bb8000
 8009d80:	007a1200 	.word	0x007a1200
 8009d84:	00f42400 	.word	0x00f42400

08009d88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e066      	b.n	8009e6c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7f5b      	ldrb	r3, [r3, #29]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fb fe5e 	bl	8005a70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	22ca      	movs	r2, #202	; 0xca
 8009dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2253      	movs	r2, #83	; 0x53
 8009dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fbce 	bl	800a56c <RTC_EnterInitMode>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d12c      	bne.n	8009e34 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6899      	ldr	r1, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	68d2      	ldr	r2, [r2, #12]
 8009e14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6919      	ldr	r1, [r3, #16]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	041a      	lsls	r2, r3, #16
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fbd5 	bl	800a5da <RTC_ExitInitMode>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d113      	bne.n	8009e62 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699a      	ldr	r2, [r3, #24]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	22ff      	movs	r2, #255	; 0xff
 8009e68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	7f1b      	ldrb	r3, [r3, #28]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d101      	bne.n	8009e90 <HAL_RTC_SetTime+0x1c>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e087      	b.n	8009fa0 <HAL_RTC_SetTime+0x12c>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2201      	movs	r2, #1
 8009e94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d126      	bne.n	8009ef0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fbb2 	bl	800a624 <RTC_ByteToBcd2>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fbab 	bl	800a624 <RTC_ByteToBcd2>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ed2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	789b      	ldrb	r3, [r3, #2]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fba3 	bl	800a624 <RTC_ByteToBcd2>
 8009ede:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ee0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	78db      	ldrb	r3, [r3, #3]
 8009ee8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]
 8009eee:	e018      	b.n	8009f22 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2200      	movs	r2, #0
 8009f02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f10:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f16:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	78db      	ldrb	r3, [r3, #3]
 8009f1c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	22ca      	movs	r2, #202	; 0xca
 8009f28:	625a      	str	r2, [r3, #36]	; 0x24
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2253      	movs	r2, #83	; 0x53
 8009f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb1a 	bl	800a56c <RTC_EnterInitMode>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009f3c:	7cfb      	ldrb	r3, [r7, #19]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d120      	bne.n	8009f84 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009f4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009f50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6899      	ldr	r1, [r3, #8]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fb2d 	bl	800a5da <RTC_ExitInitMode>
 8009f80:	4603      	mov	r3, r0
 8009f82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009f84:	7cfb      	ldrb	r3, [r7, #19]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	22ff      	movs	r2, #255	; 0xff
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	771a      	strb	r2, [r3, #28]

  return status;
 8009f9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}

08009fa8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009fda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009fde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	0d9b      	lsrs	r3, r3, #22
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11a      	bne.n	800a05a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fb18 	bl	800a65e <RTC_Bcd2ToByte>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	785b      	ldrb	r3, [r3, #1]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fb0f 	bl	800a65e <RTC_Bcd2ToByte>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	789b      	ldrb	r3, [r3, #2]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fb06 	bl	800a65e <RTC_Bcd2ToByte>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	7f1b      	ldrb	r3, [r3, #28]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_RTC_SetDate+0x1c>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e071      	b.n	800a164 <HAL_RTC_SetDate+0x100>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2202      	movs	r2, #2
 800a08a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10e      	bne.n	800a0b0 <HAL_RTC_SetDate+0x4c>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d008      	beq.n	800a0b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	f023 0310 	bic.w	r3, r3, #16
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	330a      	adds	r3, #10
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d11c      	bne.n	800a0f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	78db      	ldrb	r3, [r3, #3]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fab2 	bl	800a624 <RTC_ByteToBcd2>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 faab 	bl	800a624 <RTC_ByteToBcd2>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	789b      	ldrb	r3, [r3, #2]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 faa3 	bl	800a624 <RTC_ByteToBcd2>
 800a0de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a0e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	e00e      	b.n	800a10e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	78db      	ldrb	r3, [r3, #3]
 800a0f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0fc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a102:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a10a:	4313      	orrs	r3, r2
 800a10c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	22ca      	movs	r2, #202	; 0xca
 800a114:	625a      	str	r2, [r3, #36]	; 0x24
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2253      	movs	r2, #83	; 0x53
 800a11c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fa24 	bl	800a56c <RTC_EnterInitMode>
 800a124:	4603      	mov	r3, r0
 800a126:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a128:	7cfb      	ldrb	r3, [r7, #19]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10c      	bne.n	800a148 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a13c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fa4b 	bl	800a5da <RTC_ExitInitMode>
 800a144:	4603      	mov	r3, r0
 800a146:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a148:	7cfb      	ldrb	r3, [r7, #19]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2201      	movs	r2, #1
 800a152:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	22ff      	movs	r2, #255	; 0xff
 800a15a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	771a      	strb	r2, [r3, #28]

  return status;
 800a162:	7cfb      	ldrb	r3, [r7, #19]
}
 800a164:	4618      	mov	r0, r3
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd90      	pop	{r4, r7, pc}

0800a16c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a186:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a18a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	0c1b      	lsrs	r3, r3, #16
 800a190:	b2da      	uxtb	r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	0a1b      	lsrs	r3, r3, #8
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	0b5b      	lsrs	r3, r3, #13
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d11a      	bne.n	800a200 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	78db      	ldrb	r3, [r3, #3]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fa45 	bl	800a65e <RTC_Bcd2ToByte>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fa3c 	bl	800a65e <RTC_Bcd2ToByte>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	789b      	ldrb	r3, [r3, #2]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fa33 	bl	800a65e <RTC_Bcd2ToByte>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a20c:	b590      	push	{r4, r7, lr}
 800a20e:	b089      	sub	sp, #36	; 0x24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a218:	4b9a      	ldr	r3, [pc, #616]	; (800a484 <HAL_RTC_SetAlarm_IT+0x278>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a9a      	ldr	r2, [pc, #616]	; (800a488 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	0adb      	lsrs	r3, r3, #11
 800a224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	7f1b      	ldrb	r3, [r3, #28]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_RTC_SetAlarm_IT+0x36>
 800a23e:	2302      	movs	r3, #2
 800a240:	e11c      	b.n	800a47c <HAL_RTC_SetAlarm_IT+0x270>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2202      	movs	r2, #2
 800a24c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d137      	bne.n	800a2c4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2200      	movs	r2, #0
 800a266:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f9d9 	bl	800a624 <RTC_ByteToBcd2>
 800a272:	4603      	mov	r3, r0
 800a274:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f9d2 	bl	800a624 <RTC_ByteToBcd2>
 800a280:	4603      	mov	r3, r0
 800a282:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a284:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	789b      	ldrb	r3, [r3, #2]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f9ca 	bl	800a624 <RTC_ByteToBcd2>
 800a290:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a292:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	78db      	ldrb	r3, [r3, #3]
 800a29a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a29c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f9bc 	bl	800a624 <RTC_ByteToBcd2>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a2b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a2b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e023      	b.n	800a30c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2e4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	78db      	ldrb	r3, [r3, #3]
 800a2f0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a2fc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a302:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a308:	4313      	orrs	r3, r2
 800a30a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a314:	4313      	orrs	r3, r2
 800a316:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	22ca      	movs	r2, #202	; 0xca
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2253      	movs	r2, #83	; 0x53
 800a326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a330:	d141      	bne.n	800a3b6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a340:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a352:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	1e5a      	subs	r2, r3, #1
 800a358:	617a      	str	r2, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	22ff      	movs	r2, #255	; 0xff
 800a364:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2203      	movs	r2, #3
 800a36a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e082      	b.n	800a47c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0e7      	beq.n	800a354 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3a2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3b2:	609a      	str	r2, [r3, #8]
 800a3b4:	e04b      	b.n	800a44e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3c4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a3d6:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a3d8:	4b2a      	ldr	r3, [pc, #168]	; (800a484 <HAL_RTC_SetAlarm_IT+0x278>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a2a      	ldr	r2, [pc, #168]	; (800a488 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a3de:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e2:	0adb      	lsrs	r3, r3, #11
 800a3e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ec:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	617a      	str	r2, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10b      	bne.n	800a410 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2203      	movs	r2, #3
 800a404:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e035      	b.n	800a47c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0e7      	beq.n	800a3ee <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a43c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a44c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a44e:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <HAL_RTC_SetAlarm_IT+0x280>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a0e      	ldr	r2, [pc, #56]	; (800a48c <HAL_RTC_SetAlarm_IT+0x280>)
 800a454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a458:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <HAL_RTC_SetAlarm_IT+0x280>)
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	4a0b      	ldr	r2, [pc, #44]	; (800a48c <HAL_RTC_SetAlarm_IT+0x280>)
 800a460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a464:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	22ff      	movs	r2, #255	; 0xff
 800a46c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3724      	adds	r7, #36	; 0x24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd90      	pop	{r4, r7, pc}
 800a484:	2000000c 	.word	0x2000000c
 800a488:	10624dd3 	.word	0x10624dd3
 800a48c:	40013c00 	.word	0x40013c00

0800a490 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d012      	beq.n	800a4cc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00b      	beq.n	800a4cc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fa fd3f 	bl	8004f38 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a4ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d012      	beq.n	800a500 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f8d4 	bl	800a696 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a4fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a500:	4b05      	ldr	r3, [pc, #20]	; (800a518 <HAL_RTC_AlarmIRQHandler+0x88>)
 800a502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a506:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	775a      	strb	r2, [r3, #29]
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	40013c00 	.word	0x40013c00

0800a51c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a536:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a538:	f7fc f828 	bl	800658c <HAL_GetTick>
 800a53c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a53e:	e009      	b.n	800a554 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a540:	f7fc f824 	bl	800658c <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a54e:	d901      	bls.n	800a554 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e007      	b.n	800a564 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0ee      	beq.n	800a540 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	d122      	bne.n	800a5d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a598:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a59a:	f7fb fff7 	bl	800658c <HAL_GetTick>
 800a59e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5a0:	e00c      	b.n	800a5bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5a2:	f7fb fff3 	bl	800658c <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5b0:	d904      	bls.n	800a5bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <RTC_EnterInitMode+0x64>
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d1e8      	bne.n	800a5a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ff89 	bl	800a51c <HAL_RTC_WaitForSynchro>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2204      	movs	r2, #4
 800a614:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a632:	e005      	b.n	800a640 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	3301      	adds	r3, #1
 800a638:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	3b0a      	subs	r3, #10
 800a63e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b09      	cmp	r3, #9
 800a644:	d8f6      	bhi.n	800a634 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	4313      	orrs	r3, r2
 800a650:	b2db      	uxtb	r3, r3
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	4603      	mov	r3, r0
 800a666:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	091b      	lsrs	r3, r3, #4
 800a670:	b2db      	uxtb	r3, r3
 800a672:	461a      	mov	r2, r3
 800a674:	0092      	lsls	r2, r2, #2
 800a676:	4413      	add	r3, r2
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	f003 030f 	and.w	r3, r3, #15
 800a682:	b2da      	uxtb	r2, r3
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	4413      	add	r3, r2
 800a688:	b2db      	uxtb	r3, r3
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e07b      	b.n	800a7b4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d108      	bne.n	800a6d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6cc:	d009      	beq.n	800a6e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	61da      	str	r2, [r3, #28]
 800a6d4:	e005      	b.n	800a6e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7fb f9e9 	bl	8005ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2202      	movs	r2, #2
 800a706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a718:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a734:	431a      	orrs	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	431a      	orrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a766:	ea42 0103 	orr.w	r1, r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	f003 0104 	and.w	r1, r3, #4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	f003 0210 	and.w	r2, r3, #16
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	69da      	ldr	r2, [r3, #28]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	603b      	str	r3, [r7, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d101      	bne.n	800a7de <HAL_SPI_Transmit+0x22>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e126      	b.n	800aa2c <HAL_SPI_Transmit+0x270>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7e6:	f7fb fed1 	bl	800658c <HAL_GetTick>
 800a7ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d002      	beq.n	800a802 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a800:	e10b      	b.n	800aa1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <HAL_SPI_Transmit+0x52>
 800a808:	88fb      	ldrh	r3, [r7, #6]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a812:	e102      	b.n	800aa1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2203      	movs	r2, #3
 800a818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	88fa      	ldrh	r2, [r7, #6]
 800a832:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85a:	d10f      	bne.n	800a87c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a86a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a87a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a886:	2b40      	cmp	r3, #64	; 0x40
 800a888:	d007      	beq.n	800a89a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8a2:	d14b      	bne.n	800a93c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <HAL_SPI_Transmit+0xf6>
 800a8ac:	8afb      	ldrh	r3, [r7, #22]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d13e      	bne.n	800a930 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	881a      	ldrh	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	1c9a      	adds	r2, r3, #2
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a8d6:	e02b      	b.n	800a930 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d112      	bne.n	800a90c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ea:	881a      	ldrh	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	1c9a      	adds	r2, r3, #2
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a900:	b29b      	uxth	r3, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	86da      	strh	r2, [r3, #54]	; 0x36
 800a90a:	e011      	b.n	800a930 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a90c:	f7fb fe3e 	bl	800658c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d803      	bhi.n	800a924 <HAL_SPI_Transmit+0x168>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a922:	d102      	bne.n	800a92a <HAL_SPI_Transmit+0x16e>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a92e:	e074      	b.n	800aa1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a934:	b29b      	uxth	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1ce      	bne.n	800a8d8 <HAL_SPI_Transmit+0x11c>
 800a93a:	e04c      	b.n	800a9d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <HAL_SPI_Transmit+0x18e>
 800a944:	8afb      	ldrh	r3, [r7, #22]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d140      	bne.n	800a9cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	7812      	ldrb	r2, [r2, #0]
 800a956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a966:	b29b      	uxth	r3, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a970:	e02c      	b.n	800a9cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d113      	bne.n	800a9a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	7812      	ldrb	r2, [r2, #0]
 800a98c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a9a6:	e011      	b.n	800a9cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9a8:	f7fb fdf0 	bl	800658c <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d803      	bhi.n	800a9c0 <HAL_SPI_Transmit+0x204>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d102      	bne.n	800a9c6 <HAL_SPI_Transmit+0x20a>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d102      	bne.n	800a9cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a9ca:	e026      	b.n	800aa1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1cd      	bne.n	800a972 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fb66 	bl	800b0ac <SPI_EndRxTxTransaction>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	77fb      	strb	r3, [r7, #31]
 800aa16:	e000      	b.n	800aa1a <HAL_SPI_Transmit+0x25e>
  }

error:
 800aa18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3720      	adds	r7, #32
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08c      	sub	sp, #48	; 0x30
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa42:	2301      	movs	r3, #1
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_SPI_TransmitReceive+0x26>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e18a      	b.n	800ad70 <HAL_SPI_TransmitReceive+0x33c>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa62:	f7fb fd93 	bl	800658c <HAL_GetTick>
 800aa66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aa78:	887b      	ldrh	r3, [r7, #2]
 800aa7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d00f      	beq.n	800aaa4 <HAL_SPI_TransmitReceive+0x70>
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa8a:	d107      	bne.n	800aa9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <HAL_SPI_TransmitReceive+0x68>
 800aa94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d003      	beq.n	800aaa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aaa2:	e15b      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d005      	beq.n	800aab6 <HAL_SPI_TransmitReceive+0x82>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <HAL_SPI_TransmitReceive+0x82>
 800aab0:	887b      	ldrh	r3, [r7, #2]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d103      	bne.n	800aabe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aabc:	e14e      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d003      	beq.n	800aad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2205      	movs	r2, #5
 800aace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	887a      	ldrh	r2, [r7, #2]
 800aae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	887a      	ldrh	r2, [r7, #2]
 800aae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	887a      	ldrh	r2, [r7, #2]
 800aaf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	887a      	ldrh	r2, [r7, #2]
 800aafa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab12:	2b40      	cmp	r3, #64	; 0x40
 800ab14:	d007      	beq.n	800ab26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab2e:	d178      	bne.n	800ac22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <HAL_SPI_TransmitReceive+0x10a>
 800ab38:	8b7b      	ldrh	r3, [r7, #26]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d166      	bne.n	800ac0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab42:	881a      	ldrh	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	1c9a      	adds	r2, r3, #2
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab62:	e053      	b.n	800ac0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d11b      	bne.n	800abaa <HAL_SPI_TransmitReceive+0x176>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d016      	beq.n	800abaa <HAL_SPI_TransmitReceive+0x176>
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d113      	bne.n	800abaa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	881a      	ldrh	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab92:	1c9a      	adds	r2, r3, #2
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d119      	bne.n	800abec <HAL_SPI_TransmitReceive+0x1b8>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d014      	beq.n	800abec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abcc:	b292      	uxth	r2, r2
 800abce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	1c9a      	adds	r2, r3, #2
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abde:	b29b      	uxth	r3, r3
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abe8:	2301      	movs	r3, #1
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800abec:	f7fb fcce 	bl	800658c <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d807      	bhi.n	800ac0c <HAL_SPI_TransmitReceive+0x1d8>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d003      	beq.n	800ac0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac0a:	e0a7      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1a6      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x130>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1a1      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x130>
 800ac20:	e07c      	b.n	800ad1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <HAL_SPI_TransmitReceive+0x1fc>
 800ac2a:	8b7b      	ldrh	r3, [r7, #26]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d16b      	bne.n	800ad08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	330c      	adds	r3, #12
 800ac3a:	7812      	ldrb	r2, [r2, #0]
 800ac3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac56:	e057      	b.n	800ad08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d11c      	bne.n	800aca0 <HAL_SPI_TransmitReceive+0x26c>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d017      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0x26c>
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d114      	bne.n	800aca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	330c      	adds	r3, #12
 800ac80:	7812      	ldrb	r2, [r2, #0]
 800ac82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	3b01      	subs	r3, #1
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d119      	bne.n	800ace2 <HAL_SPI_TransmitReceive+0x2ae>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d014      	beq.n	800ace2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	b2d2      	uxtb	r2, r2
 800acc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	3b01      	subs	r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acde:	2301      	movs	r3, #1
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ace2:	f7fb fc53 	bl	800658c <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acee:	429a      	cmp	r2, r3
 800acf0:	d803      	bhi.n	800acfa <HAL_SPI_TransmitReceive+0x2c6>
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d102      	bne.n	800ad00 <HAL_SPI_TransmitReceive+0x2cc>
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad06:	e029      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1a2      	bne.n	800ac58 <HAL_SPI_TransmitReceive+0x224>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d19d      	bne.n	800ac58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 f9c3 	bl	800b0ac <SPI_EndRxTxTransaction>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2220      	movs	r2, #32
 800ad36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ad38:	e010      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10b      	bne.n	800ad5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	617b      	str	r3, [r7, #20]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	e000      	b.n	800ad5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ad5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3730      	adds	r7, #48	; 0x30
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10e      	bne.n	800adb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
    return;
 800adb6:	e0ce      	b.n	800af56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d009      	beq.n	800add6 <HAL_SPI_IRQHandler+0x5e>
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
    return;
 800add4:	e0bf      	b.n	800af56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <HAL_SPI_IRQHandler+0x7e>
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80b0 	beq.w	800af56 <HAL_SPI_IRQHandler+0x1de>
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 80aa 	beq.w	800af56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d023      	beq.n	800ae54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d011      	beq.n	800ae3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1c:	f043 0204 	orr.w	r2, r3, #4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	e00b      	b.n	800ae54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	613b      	str	r3, [r7, #16]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	693b      	ldr	r3, [r7, #16]
        return;
 800ae52:	e080      	b.n	800af56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	f003 0320 	and.w	r3, r3, #32
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d014      	beq.n	800ae88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae62:	f043 0201 	orr.w	r2, r3, #1
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00c      	beq.n	800aeac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae96:	f043 0208 	orr.w	r2, r3, #8
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	60bb      	str	r3, [r7, #8]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d04f      	beq.n	800af54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aec2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <HAL_SPI_IRQHandler+0x168>
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d034      	beq.n	800af4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 0203 	bic.w	r2, r2, #3
 800aeee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d011      	beq.n	800af1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefc:	4a17      	ldr	r2, [pc, #92]	; (800af5c <HAL_SPI_IRQHandler+0x1e4>)
 800aefe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af04:	4618      	mov	r0, r3
 800af06:	f7fb fdfb 	bl	8006b00 <HAL_DMA_Abort_IT>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af20:	2b00      	cmp	r3, #0
 800af22:	d016      	beq.n	800af52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af28:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <HAL_SPI_IRQHandler+0x1e4>)
 800af2a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af30:	4618      	mov	r0, r3
 800af32:	f7fb fde5 	bl	8006b00 <HAL_DMA_Abort_IT>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00a      	beq.n	800af52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800af48:	e003      	b.n	800af52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f808 	bl	800af60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800af50:	e000      	b.n	800af54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800af52:	bf00      	nop
    return;
 800af54:	bf00      	nop
  }
}
 800af56:	3720      	adds	r7, #32
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	0800af75 	.word	0x0800af75

0800af60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff ffe6 	bl	800af60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800afac:	f7fb faee 	bl	800658c <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4413      	add	r3, r2
 800afba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afbc:	f7fb fae6 	bl	800658c <HAL_GetTick>
 800afc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afc2:	4b39      	ldr	r3, [pc, #228]	; (800b0a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	015b      	lsls	r3, r3, #5
 800afc8:	0d1b      	lsrs	r3, r3, #20
 800afca:	69fa      	ldr	r2, [r7, #28]
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afd2:	e054      	b.n	800b07e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d050      	beq.n	800b07e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afdc:	f7fb fad6 	bl	800658c <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d902      	bls.n	800aff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d13d      	bne.n	800b06e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b00a:	d111      	bne.n	800b030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b014:	d004      	beq.n	800b020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b01e:	d107      	bne.n	800b030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b02e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b038:	d10f      	bne.n	800b05a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e017      	b.n	800b09e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4013      	ands	r3, r2
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	bf0c      	ite	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	2300      	movne	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	461a      	mov	r2, r3
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d19b      	bne.n	800afd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	2000000c 	.word	0x2000000c

0800b0ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b0b8:	4b1b      	ldr	r3, [pc, #108]	; (800b128 <SPI_EndRxTxTransaction+0x7c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <SPI_EndRxTxTransaction+0x80>)
 800b0be:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c2:	0d5b      	lsrs	r3, r3, #21
 800b0c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0c8:	fb02 f303 	mul.w	r3, r2, r3
 800b0cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0d6:	d112      	bne.n	800b0fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2180      	movs	r1, #128	; 0x80
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f7ff ff5a 	bl	800af9c <SPI_WaitFlagStateUntilTimeout>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d016      	beq.n	800b11c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f2:	f043 0220 	orr.w	r2, r3, #32
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e00f      	b.n	800b11e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3b01      	subs	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	2b80      	cmp	r3, #128	; 0x80
 800b116:	d0f2      	beq.n	800b0fe <SPI_EndRxTxTransaction+0x52>
 800b118:	e000      	b.n	800b11c <SPI_EndRxTxTransaction+0x70>
        break;
 800b11a:	bf00      	nop
  }

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	2000000c 	.word	0x2000000c
 800b12c:	165e9f81 	.word	0x165e9f81

0800b130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e041      	b.n	800b1c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f839 	bl	800b1ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	f000 fbb2 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d001      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e04e      	b.n	800b29a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0201 	orr.w	r2, r2, #1
 800b212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a23      	ldr	r2, [pc, #140]	; (800b2a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d022      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b226:	d01d      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a1f      	ldr	r2, [pc, #124]	; (800b2ac <HAL_TIM_Base_Start_IT+0xc8>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d018      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a1e      	ldr	r2, [pc, #120]	; (800b2b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d013      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1c      	ldr	r2, [pc, #112]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00e      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a1b      	ldr	r2, [pc, #108]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d009      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a19      	ldr	r2, [pc, #100]	; (800b2bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d004      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a18      	ldr	r2, [pc, #96]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d111      	bne.n	800b288 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f003 0307 	and.w	r3, r3, #7
 800b26e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b06      	cmp	r3, #6
 800b274:	d010      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f042 0201 	orr.w	r2, r2, #1
 800b284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b286:	e007      	b.n	800b298 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40010000 	.word	0x40010000
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40000800 	.word	0x40000800
 800b2b4:	40000c00 	.word	0x40000c00
 800b2b8:	40010400 	.word	0x40010400
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	40001800 	.word	0x40001800

0800b2c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e041      	b.n	800b35a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7fa fd12 	bl	8005d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f000 fae8 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d109      	bne.n	800b388 <HAL_TIM_PWM_Start+0x24>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	bf14      	ite	ne
 800b380:	2301      	movne	r3, #1
 800b382:	2300      	moveq	r3, #0
 800b384:	b2db      	uxtb	r3, r3
 800b386:	e022      	b.n	800b3ce <HAL_TIM_PWM_Start+0x6a>
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d109      	bne.n	800b3a2 <HAL_TIM_PWM_Start+0x3e>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b01      	cmp	r3, #1
 800b398:	bf14      	ite	ne
 800b39a:	2301      	movne	r3, #1
 800b39c:	2300      	moveq	r3, #0
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	e015      	b.n	800b3ce <HAL_TIM_PWM_Start+0x6a>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d109      	bne.n	800b3bc <HAL_TIM_PWM_Start+0x58>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	bf14      	ite	ne
 800b3b4:	2301      	movne	r3, #1
 800b3b6:	2300      	moveq	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	e008      	b.n	800b3ce <HAL_TIM_PWM_Start+0x6a>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e07c      	b.n	800b4d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d104      	bne.n	800b3e6 <HAL_TIM_PWM_Start+0x82>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3e4:	e013      	b.n	800b40e <HAL_TIM_PWM_Start+0xaa>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	d104      	bne.n	800b3f6 <HAL_TIM_PWM_Start+0x92>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3f4:	e00b      	b.n	800b40e <HAL_TIM_PWM_Start+0xaa>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d104      	bne.n	800b406 <HAL_TIM_PWM_Start+0xa2>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b404:	e003      	b.n	800b40e <HAL_TIM_PWM_Start+0xaa>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2202      	movs	r2, #2
 800b40a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2201      	movs	r2, #1
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fcae 	bl	800bd78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a2d      	ldr	r2, [pc, #180]	; (800b4d8 <HAL_TIM_PWM_Start+0x174>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d004      	beq.n	800b430 <HAL_TIM_PWM_Start+0xcc>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a2c      	ldr	r2, [pc, #176]	; (800b4dc <HAL_TIM_PWM_Start+0x178>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d101      	bne.n	800b434 <HAL_TIM_PWM_Start+0xd0>
 800b430:	2301      	movs	r3, #1
 800b432:	e000      	b.n	800b436 <HAL_TIM_PWM_Start+0xd2>
 800b434:	2300      	movs	r3, #0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d007      	beq.n	800b44a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a22      	ldr	r2, [pc, #136]	; (800b4d8 <HAL_TIM_PWM_Start+0x174>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d022      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45c:	d01d      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <HAL_TIM_PWM_Start+0x17c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d018      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <HAL_TIM_PWM_Start+0x180>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d013      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a1c      	ldr	r2, [pc, #112]	; (800b4e8 <HAL_TIM_PWM_Start+0x184>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00e      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a16      	ldr	r2, [pc, #88]	; (800b4dc <HAL_TIM_PWM_Start+0x178>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d009      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a18      	ldr	r2, [pc, #96]	; (800b4ec <HAL_TIM_PWM_Start+0x188>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d004      	beq.n	800b49a <HAL_TIM_PWM_Start+0x136>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a16      	ldr	r2, [pc, #88]	; (800b4f0 <HAL_TIM_PWM_Start+0x18c>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d111      	bne.n	800b4be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f003 0307 	and.w	r3, r3, #7
 800b4a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b06      	cmp	r3, #6
 800b4aa:	d010      	beq.n	800b4ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0201 	orr.w	r2, r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4bc:	e007      	b.n	800b4ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f042 0201 	orr.w	r2, r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	40010000 	.word	0x40010000
 800b4dc:	40010400 	.word	0x40010400
 800b4e0:	40000400 	.word	0x40000400
 800b4e4:	40000800 	.word	0x40000800
 800b4e8:	40000c00 	.word	0x40000c00
 800b4ec:	40014000 	.word	0x40014000
 800b4f0:	40001800 	.word	0x40001800

0800b4f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	f003 0302 	and.w	r3, r3, #2
 800b506:	2b02      	cmp	r3, #2
 800b508:	d122      	bne.n	800b550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b02      	cmp	r3, #2
 800b516:	d11b      	bne.n	800b550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f06f 0202 	mvn.w	r2, #2
 800b520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9b0 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b53c:	e005      	b.n	800b54a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f9a2 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f9b3 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0304 	and.w	r3, r3, #4
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d122      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b04      	cmp	r3, #4
 800b56a:	d11b      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f06f 0204 	mvn.w	r2, #4
 800b574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f986 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b590:	e005      	b.n	800b59e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f978 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f989 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0308 	and.w	r3, r3, #8
 800b5ae:	2b08      	cmp	r3, #8
 800b5b0:	d122      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0308 	and.w	r3, r3, #8
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d11b      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0208 	mvn.w	r2, #8
 800b5c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2204      	movs	r2, #4
 800b5ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f95c 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b5e4:	e005      	b.n	800b5f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f94e 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f95f 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	f003 0310 	and.w	r3, r3, #16
 800b602:	2b10      	cmp	r3, #16
 800b604:	d122      	bne.n	800b64c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f003 0310 	and.w	r3, r3, #16
 800b610:	2b10      	cmp	r3, #16
 800b612:	d11b      	bne.n	800b64c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f06f 0210 	mvn.w	r2, #16
 800b61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2208      	movs	r2, #8
 800b622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	69db      	ldr	r3, [r3, #28]
 800b62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f932 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b638:	e005      	b.n	800b646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f924 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f935 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b01      	cmp	r3, #1
 800b658:	d10e      	bne.n	800b678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b01      	cmp	r3, #1
 800b666:	d107      	bne.n	800b678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f06f 0201 	mvn.w	r2, #1
 800b670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7f9 fe68 	bl	8005348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b682:	2b80      	cmp	r3, #128	; 0x80
 800b684:	d10e      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b690:	2b80      	cmp	r3, #128	; 0x80
 800b692:	d107      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fc68 	bl	800bf74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ae:	2b40      	cmp	r3, #64	; 0x40
 800b6b0:	d10e      	bne.n	800b6d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	d107      	bne.n	800b6d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f8fa 	bl	800b8c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d10e      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f003 0320 	and.w	r3, r3, #32
 800b6e8:	2b20      	cmp	r3, #32
 800b6ea:	d107      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f06f 0220 	mvn.w	r2, #32
 800b6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fc32 	bl	800bf60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b71e:	2302      	movs	r3, #2
 800b720:	e0ae      	b.n	800b880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b0c      	cmp	r3, #12
 800b72e:	f200 809f 	bhi.w	800b870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b76d 	.word	0x0800b76d
 800b73c:	0800b871 	.word	0x0800b871
 800b740:	0800b871 	.word	0x0800b871
 800b744:	0800b871 	.word	0x0800b871
 800b748:	0800b7ad 	.word	0x0800b7ad
 800b74c:	0800b871 	.word	0x0800b871
 800b750:	0800b871 	.word	0x0800b871
 800b754:	0800b871 	.word	0x0800b871
 800b758:	0800b7ef 	.word	0x0800b7ef
 800b75c:	0800b871 	.word	0x0800b871
 800b760:	0800b871 	.word	0x0800b871
 800b764:	0800b871 	.word	0x0800b871
 800b768:	0800b82f 	.word	0x0800b82f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 f950 	bl	800ba18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699a      	ldr	r2, [r3, #24]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f042 0208 	orr.w	r2, r2, #8
 800b786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0204 	bic.w	r2, r2, #4
 800b796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6999      	ldr	r1, [r3, #24]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	691a      	ldr	r2, [r3, #16]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	619a      	str	r2, [r3, #24]
      break;
 800b7aa:	e064      	b.n	800b876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f9a0 	bl	800baf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699a      	ldr	r2, [r3, #24]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	699a      	ldr	r2, [r3, #24]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6999      	ldr	r1, [r3, #24]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	021a      	lsls	r2, r3, #8
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	619a      	str	r2, [r3, #24]
      break;
 800b7ec:	e043      	b.n	800b876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 f9f5 	bl	800bbe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69da      	ldr	r2, [r3, #28]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f042 0208 	orr.w	r2, r2, #8
 800b808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69da      	ldr	r2, [r3, #28]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0204 	bic.w	r2, r2, #4
 800b818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69d9      	ldr	r1, [r3, #28]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	691a      	ldr	r2, [r3, #16]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	430a      	orrs	r2, r1
 800b82a:	61da      	str	r2, [r3, #28]
      break;
 800b82c:	e023      	b.n	800b876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fa49 	bl	800bccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	69da      	ldr	r2, [r3, #28]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	69da      	ldr	r2, [r3, #28]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69d9      	ldr	r1, [r3, #28]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	021a      	lsls	r2, r3, #8
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	61da      	str	r2, [r3, #28]
      break;
 800b86e:	e002      	b.n	800b876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	75fb      	strb	r3, [r7, #23]
      break;
 800b874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a40      	ldr	r2, [pc, #256]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d013      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d00f      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a3d      	ldr	r2, [pc, #244]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a3c      	ldr	r2, [pc, #240]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a3b      	ldr	r2, [pc, #236]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a3a      	ldr	r2, [pc, #232]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d108      	bne.n	800b92a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2f      	ldr	r2, [pc, #188]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d02b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b938:	d027      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2c      	ldr	r2, [pc, #176]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d023      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a2b      	ldr	r2, [pc, #172]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d01b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a29      	ldr	r2, [pc, #164]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d017      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a28      	ldr	r2, [pc, #160]	; (800ba00 <TIM_Base_SetConfig+0x128>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a27      	ldr	r2, [pc, #156]	; (800ba04 <TIM_Base_SetConfig+0x12c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a26      	ldr	r2, [pc, #152]	; (800ba08 <TIM_Base_SetConfig+0x130>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a25      	ldr	r2, [pc, #148]	; (800ba0c <TIM_Base_SetConfig+0x134>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d007      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a24      	ldr	r2, [pc, #144]	; (800ba10 <TIM_Base_SetConfig+0x138>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d003      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a23      	ldr	r2, [pc, #140]	; (800ba14 <TIM_Base_SetConfig+0x13c>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d108      	bne.n	800b99c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a0a      	ldr	r2, [pc, #40]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_Base_SetConfig+0xf8>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d103      	bne.n	800b9d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	691a      	ldr	r2, [r3, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	615a      	str	r2, [r3, #20]
}
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40000400 	.word	0x40000400
 800b9f4:	40000800 	.word	0x40000800
 800b9f8:	40000c00 	.word	0x40000c00
 800b9fc:	40010400 	.word	0x40010400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800
 800ba0c:	40001800 	.word	0x40001800
 800ba10:	40001c00 	.word	0x40001c00
 800ba14:	40002000 	.word	0x40002000

0800ba18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	f023 0201 	bic.w	r2, r3, #1
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f023 0302 	bic.w	r3, r3, #2
 800ba60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a20      	ldr	r2, [pc, #128]	; (800baf0 <TIM_OC1_SetConfig+0xd8>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d003      	beq.n	800ba7c <TIM_OC1_SetConfig+0x64>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a1f      	ldr	r2, [pc, #124]	; (800baf4 <TIM_OC1_SetConfig+0xdc>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d10c      	bne.n	800ba96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f023 0308 	bic.w	r3, r3, #8
 800ba82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f023 0304 	bic.w	r3, r3, #4
 800ba94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a15      	ldr	r2, [pc, #84]	; (800baf0 <TIM_OC1_SetConfig+0xd8>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d003      	beq.n	800baa6 <TIM_OC1_SetConfig+0x8e>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a14      	ldr	r2, [pc, #80]	; (800baf4 <TIM_OC1_SetConfig+0xdc>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d111      	bne.n	800baca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	4313      	orrs	r3, r2
 800babe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	621a      	str	r2, [r3, #32]
}
 800bae4:	bf00      	nop
 800bae6:	371c      	adds	r7, #28
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	40010000 	.word	0x40010000
 800baf4:	40010400 	.word	0x40010400

0800baf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	f023 0210 	bic.w	r2, r3, #16
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	021b      	lsls	r3, r3, #8
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f023 0320 	bic.w	r3, r3, #32
 800bb42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a22      	ldr	r2, [pc, #136]	; (800bbdc <TIM_OC2_SetConfig+0xe4>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <TIM_OC2_SetConfig+0x68>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a21      	ldr	r2, [pc, #132]	; (800bbe0 <TIM_OC2_SetConfig+0xe8>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10d      	bne.n	800bb7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a17      	ldr	r2, [pc, #92]	; (800bbdc <TIM_OC2_SetConfig+0xe4>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d003      	beq.n	800bb8c <TIM_OC2_SetConfig+0x94>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a16      	ldr	r2, [pc, #88]	; (800bbe0 <TIM_OC2_SetConfig+0xe8>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d113      	bne.n	800bbb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40010400 	.word	0x40010400

0800bbe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 0303 	bic.w	r3, r3, #3
 800bc1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a21      	ldr	r2, [pc, #132]	; (800bcc4 <TIM_OC3_SetConfig+0xe0>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d003      	beq.n	800bc4a <TIM_OC3_SetConfig+0x66>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a20      	ldr	r2, [pc, #128]	; (800bcc8 <TIM_OC3_SetConfig+0xe4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d10d      	bne.n	800bc66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a16      	ldr	r2, [pc, #88]	; (800bcc4 <TIM_OC3_SetConfig+0xe0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d003      	beq.n	800bc76 <TIM_OC3_SetConfig+0x92>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a15      	ldr	r2, [pc, #84]	; (800bcc8 <TIM_OC3_SetConfig+0xe4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d113      	bne.n	800bc9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	011b      	lsls	r3, r3, #4
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	621a      	str	r2, [r3, #32]
}
 800bcb8:	bf00      	nop
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	40010000 	.word	0x40010000
 800bcc8:	40010400 	.word	0x40010400

0800bccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	021b      	lsls	r3, r3, #8
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	031b      	lsls	r3, r3, #12
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a12      	ldr	r2, [pc, #72]	; (800bd70 <TIM_OC4_SetConfig+0xa4>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d003      	beq.n	800bd34 <TIM_OC4_SetConfig+0x68>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <TIM_OC4_SetConfig+0xa8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d109      	bne.n	800bd48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	695b      	ldr	r3, [r3, #20]
 800bd40:	019b      	lsls	r3, r3, #6
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	621a      	str	r2, [r3, #32]
}
 800bd62:	bf00      	nop
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40010400 	.word	0x40010400

0800bd78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f003 031f 	and.w	r3, r3, #31
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6a1a      	ldr	r2, [r3, #32]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	401a      	ands	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a1a      	ldr	r2, [r3, #32]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f003 031f 	and.w	r3, r3, #31
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb0:	431a      	orrs	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	621a      	str	r2, [r3, #32]
}
 800bdb6:	bf00      	nop
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e05a      	b.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2202      	movs	r2, #2
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a21      	ldr	r2, [pc, #132]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d022      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be28:	d01d      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1d      	ldr	r2, [pc, #116]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d018      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a1b      	ldr	r2, [pc, #108]	; (800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d013      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a1a      	ldr	r2, [pc, #104]	; (800beac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d00e      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a18      	ldr	r2, [pc, #96]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d009      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a17      	ldr	r2, [pc, #92]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d004      	beq.n	800be66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d10c      	bne.n	800be80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	4313      	orrs	r3, r2
 800be76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	40010000 	.word	0x40010000
 800bea4:	40000400 	.word	0x40000400
 800bea8:	40000800 	.word	0x40000800
 800beac:	40000c00 	.word	0x40000c00
 800beb0:	40010400 	.word	0x40010400
 800beb4:	40014000 	.word	0x40014000
 800beb8:	40001800 	.word	0x40001800

0800bebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d101      	bne.n	800bed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bed4:	2302      	movs	r3, #2
 800bed6:	e03d      	b.n	800bf54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	4313      	orrs	r3, r2
 800beec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e03f      	b.n	800c01a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7f9 ffc2 	bl	8005f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2224      	movs	r2, #36	; 0x24
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fddf 	bl	800cb90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	695a      	ldr	r2, [r3, #20]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68da      	ldr	r2, [r3, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2220      	movs	r2, #32
 800c00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b08a      	sub	sp, #40	; 0x28
 800c026:	af02      	add	r7, sp, #8
 800c028:	60f8      	str	r0, [r7, #12]
 800c02a:	60b9      	str	r1, [r7, #8]
 800c02c:	603b      	str	r3, [r7, #0]
 800c02e:	4613      	mov	r3, r2
 800c030:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b20      	cmp	r3, #32
 800c040:	d17c      	bne.n	800c13c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <HAL_UART_Transmit+0x2c>
 800c048:	88fb      	ldrh	r3, [r7, #6]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e075      	b.n	800c13e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_UART_Transmit+0x3e>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e06e      	b.n	800c13e <HAL_UART_Transmit+0x11c>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2221      	movs	r2, #33	; 0x21
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c076:	f7fa fa89 	bl	800658c <HAL_GetTick>
 800c07a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	88fa      	ldrh	r2, [r7, #6]
 800c080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	88fa      	ldrh	r2, [r7, #6]
 800c086:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c090:	d108      	bne.n	800c0a4 <HAL_UART_Transmit+0x82>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d104      	bne.n	800c0a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	61bb      	str	r3, [r7, #24]
 800c0a2:	e003      	b.n	800c0ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c0b4:	e02a      	b.n	800c10c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2180      	movs	r1, #128	; 0x80
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 fb1f 	bl	800c704 <UART_WaitOnFlagUntilTimeout>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e036      	b.n	800c13e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10b      	bne.n	800c0ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	61bb      	str	r3, [r7, #24]
 800c0ec:	e007      	b.n	800c0fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c102:	b29b      	uxth	r3, r3
 800c104:	3b01      	subs	r3, #1
 800c106:	b29a      	uxth	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c110:	b29b      	uxth	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1cf      	bne.n	800c0b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	2200      	movs	r2, #0
 800c11e:	2140      	movs	r1, #64	; 0x40
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 faef 	bl	800c704 <UART_WaitOnFlagUntilTimeout>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e006      	b.n	800c13e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2220      	movs	r2, #32
 800c134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	e000      	b.n	800c13e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c13c:	2302      	movs	r3, #2
  }
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3720      	adds	r7, #32
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	4613      	mov	r3, r2
 800c152:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	d11d      	bne.n	800c19c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d002      	beq.n	800c16c <HAL_UART_Receive_IT+0x26>
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e016      	b.n	800c19e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c176:	2b01      	cmp	r3, #1
 800c178:	d101      	bne.n	800c17e <HAL_UART_Receive_IT+0x38>
 800c17a:	2302      	movs	r3, #2
 800c17c:	e00f      	b.n	800c19e <HAL_UART_Receive_IT+0x58>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c18c:	88fb      	ldrh	r3, [r7, #6]
 800c18e:	461a      	mov	r2, r3
 800c190:	68b9      	ldr	r1, [r7, #8]
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f000 fb24 	bl	800c7e0 <UART_Start_Receive_IT>
 800c198:	4603      	mov	r3, r0
 800c19a:	e000      	b.n	800c19e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c19c:	2302      	movs	r3, #2
  }
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b0ba      	sub	sp, #232	; 0xe8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1de:	f003 030f 	and.w	r3, r3, #15
 800c1e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c1e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10f      	bne.n	800c20e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1f2:	f003 0320 	and.w	r3, r3, #32
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <HAL_UART_IRQHandler+0x66>
 800c1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fc07 	bl	800ca1a <UART_Receive_IT>
      return;
 800c20c:	e256      	b.n	800c6bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c20e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 80de 	beq.w	800c3d4 <HAL_UART_IRQHandler+0x22c>
 800c218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 80d1 	beq.w	800c3d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00b      	beq.n	800c256 <HAL_UART_IRQHandler+0xae>
 800c23e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c246:	2b00      	cmp	r3, #0
 800c248:	d005      	beq.n	800c256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	f043 0201 	orr.w	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <HAL_UART_IRQHandler+0xd2>
 800c262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c272:	f043 0202 	orr.w	r2, r3, #2
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27e:	f003 0302 	and.w	r3, r3, #2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00b      	beq.n	800c29e <HAL_UART_IRQHandler+0xf6>
 800c286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	f043 0204 	orr.w	r2, r3, #4
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a2:	f003 0308 	and.w	r3, r3, #8
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d011      	beq.n	800c2ce <HAL_UART_IRQHandler+0x126>
 800c2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ae:	f003 0320 	and.w	r3, r3, #32
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d005      	beq.n	800c2ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c6:	f043 0208 	orr.w	r2, r3, #8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 81ed 	beq.w	800c6b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2dc:	f003 0320 	and.w	r3, r3, #32
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d008      	beq.n	800c2f6 <HAL_UART_IRQHandler+0x14e>
 800c2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e8:	f003 0320 	and.w	r3, r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fb92 	bl	800ca1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c300:	2b40      	cmp	r3, #64	; 0x40
 800c302:	bf0c      	ite	eq
 800c304:	2301      	moveq	r3, #1
 800c306:	2300      	movne	r3, #0
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c312:	f003 0308 	and.w	r3, r3, #8
 800c316:	2b00      	cmp	r3, #0
 800c318:	d103      	bne.n	800c322 <HAL_UART_IRQHandler+0x17a>
 800c31a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d04f      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa9a 	bl	800c85c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	d141      	bne.n	800c3ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3314      	adds	r3, #20
 800c33c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c344:	e853 3f00 	ldrex	r3, [r3]
 800c348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c34c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3314      	adds	r3, #20
 800c35e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c36e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c37a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1d9      	bne.n	800c336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	2b00      	cmp	r3, #0
 800c388:	d013      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38e:	4a7d      	ldr	r2, [pc, #500]	; (800c584 <HAL_UART_IRQHandler+0x3dc>)
 800c390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	4618      	mov	r0, r3
 800c398:	f7fa fbb2 	bl	8006b00 <HAL_DMA_Abort_IT>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d016      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b0:	e00e      	b.n	800c3d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f990 	bl	800c6d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b8:	e00a      	b.n	800c3d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f98c 	bl	800c6d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c0:	e006      	b.n	800c3d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f988 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c3ce:	e170      	b.n	800c6b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3d0:	bf00      	nop
    return;
 800c3d2:	e16e      	b.n	800c6b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	f040 814a 	bne.w	800c672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3e2:	f003 0310 	and.w	r3, r3, #16
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 8143 	beq.w	800c672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f0:	f003 0310 	and.w	r3, r3, #16
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 813c 	beq.w	800c672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60bb      	str	r3, [r7, #8]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	60bb      	str	r3, [r7, #8]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	60bb      	str	r3, [r7, #8]
 800c40e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41a:	2b40      	cmp	r3, #64	; 0x40
 800c41c:	f040 80b4 	bne.w	800c588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c42c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 8140 	beq.w	800c6b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c43a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c43e:	429a      	cmp	r2, r3
 800c440:	f080 8139 	bcs.w	800c6b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c44a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c456:	f000 8088 	beq.w	800c56a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	330c      	adds	r3, #12
 800c460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	330c      	adds	r3, #12
 800c482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c48a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c49e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1d9      	bne.n	800c45a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3314      	adds	r3, #20
 800c4ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4b8:	f023 0301 	bic.w	r3, r3, #1
 800c4bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3314      	adds	r3, #20
 800c4c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4d6:	e841 2300 	strex	r3, r2, [r1]
 800c4da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1e1      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3314      	adds	r3, #20
 800c4e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3314      	adds	r3, #20
 800c502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c506:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c50c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c50e:	e841 2300 	strex	r3, r2, [r1]
 800c512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e3      	bne.n	800c4e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2220      	movs	r2, #32
 800c51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	330c      	adds	r3, #12
 800c52e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c532:	e853 3f00 	ldrex	r3, [r3]
 800c536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53a:	f023 0310 	bic.w	r3, r3, #16
 800c53e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	330c      	adds	r3, #12
 800c548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c54c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c54e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c554:	e841 2300 	strex	r3, r2, [r1]
 800c558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e3      	bne.n	800c528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c564:	4618      	mov	r0, r3
 800c566:	f7fa fa5b 	bl	8006a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c572:	b29b      	uxth	r3, r3
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	b29b      	uxth	r3, r3
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f8b6 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c580:	e099      	b.n	800c6b6 <HAL_UART_IRQHandler+0x50e>
 800c582:	bf00      	nop
 800c584:	0800c923 	.word	0x0800c923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c590:	b29b      	uxth	r3, r3
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 808b 	beq.w	800c6ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c5a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 8086 	beq.w	800c6ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	330c      	adds	r3, #12
 800c5b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c5d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c5d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e3      	bne.n	800c5ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3314      	adds	r3, #20
 800c606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c60a:	633a      	str	r2, [r7, #48]	; 0x30
 800c60c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e3      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	330c      	adds	r3, #12
 800c632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f023 0310 	bic.w	r3, r3, #16
 800c642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	330c      	adds	r3, #12
 800c64c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c650:	61fa      	str	r2, [r7, #28]
 800c652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	69b9      	ldr	r1, [r7, #24]
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	e841 2300 	strex	r3, r2, [r1]
 800c65c:	617b      	str	r3, [r7, #20]
   return(result);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e3      	bne.n	800c62c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f83e 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c670:	e023      	b.n	800c6ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <HAL_UART_IRQHandler+0x4ea>
 800c67e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f95d 	bl	800c94a <UART_Transmit_IT>
    return;
 800c690:	e014      	b.n	800c6bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00e      	beq.n	800c6bc <HAL_UART_IRQHandler+0x514>
 800c69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d008      	beq.n	800c6bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f99d 	bl	800c9ea <UART_EndTransmit_IT>
    return;
 800c6b0:	e004      	b.n	800c6bc <HAL_UART_IRQHandler+0x514>
    return;
 800c6b2:	bf00      	nop
 800c6b4:	e002      	b.n	800c6bc <HAL_UART_IRQHandler+0x514>
      return;
 800c6b6:	bf00      	nop
 800c6b8:	e000      	b.n	800c6bc <HAL_UART_IRQHandler+0x514>
      return;
 800c6ba:	bf00      	nop
  }
}
 800c6bc:	37e8      	adds	r7, #232	; 0xe8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop

0800c6c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b090      	sub	sp, #64	; 0x40
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	4613      	mov	r3, r2
 800c712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c714:	e050      	b.n	800c7b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71c:	d04c      	beq.n	800c7b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c720:	2b00      	cmp	r3, #0
 800c722:	d007      	beq.n	800c734 <UART_WaitOnFlagUntilTimeout+0x30>
 800c724:	f7f9 ff32 	bl	800658c <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c730:	429a      	cmp	r2, r3
 800c732:	d241      	bcs.n	800c7b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	330c      	adds	r3, #12
 800c73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	e853 3f00 	ldrex	r3, [r3]
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	330c      	adds	r3, #12
 800c752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c754:	637a      	str	r2, [r7, #52]	; 0x34
 800c756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c75c:	e841 2300 	strex	r3, r2, [r1]
 800c760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e5      	bne.n	800c734 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3314      	adds	r3, #20
 800c76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	e853 3f00 	ldrex	r3, [r3]
 800c776:	613b      	str	r3, [r7, #16]
   return(result);
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f023 0301 	bic.w	r3, r3, #1
 800c77e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3314      	adds	r3, #20
 800c786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c788:	623a      	str	r2, [r7, #32]
 800c78a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	69f9      	ldr	r1, [r7, #28]
 800c78e:	6a3a      	ldr	r2, [r7, #32]
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	61bb      	str	r3, [r7, #24]
   return(result);
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e5      	bne.n	800c768 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e00f      	b.n	800c7d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2301      	moveq	r3, #1
 800c7ca:	2300      	movne	r3, #0
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	79fb      	ldrb	r3, [r7, #7]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d09f      	beq.n	800c716 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3740      	adds	r7, #64	; 0x40
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	88fa      	ldrh	r2, [r7, #6]
 800c7f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	88fa      	ldrh	r2, [r7, #6]
 800c7fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2222      	movs	r2, #34	; 0x22
 800c80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d007      	beq.n	800c82e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68da      	ldr	r2, [r3, #12]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c82c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	695a      	ldr	r2, [r3, #20]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f042 0201 	orr.w	r2, r2, #1
 800c83c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68da      	ldr	r2, [r3, #12]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f042 0220 	orr.w	r2, r2, #32
 800c84c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b095      	sub	sp, #84	; 0x54
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	330c      	adds	r3, #12
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c87a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c884:	643a      	str	r2, [r7, #64]	; 0x40
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c88a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e5      	bne.n	800c864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3314      	adds	r3, #20
 800c89e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	f023 0301 	bic.w	r3, r3, #1
 800c8ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e5      	bne.n	800c898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d119      	bne.n	800c908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	330c      	adds	r3, #12
 800c8da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	f023 0310 	bic.w	r3, r3, #16
 800c8ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	330c      	adds	r3, #12
 800c8f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f4:	61ba      	str	r2, [r7, #24]
 800c8f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	6979      	ldr	r1, [r7, #20]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	613b      	str	r3, [r7, #16]
   return(result);
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e5      	bne.n	800c8d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2220      	movs	r2, #32
 800c90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c916:	bf00      	nop
 800c918:	3754      	adds	r7, #84	; 0x54
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f7ff fecb 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b085      	sub	sp, #20
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b21      	cmp	r3, #33	; 0x21
 800c95c:	d13e      	bne.n	800c9dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c966:	d114      	bne.n	800c992 <UART_Transmit_IT+0x48>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d110      	bne.n	800c992 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	1c9a      	adds	r2, r3, #2
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	621a      	str	r2, [r3, #32]
 800c990:	e008      	b.n	800c9a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	1c59      	adds	r1, r3, #1
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	6211      	str	r1, [r2, #32]
 800c99c:	781a      	ldrb	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10f      	bne.n	800c9d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68da      	ldr	r2, [r3, #12]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68da      	ldr	r2, [r3, #12]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	e000      	b.n	800c9de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9dc:	2302      	movs	r3, #2
  }
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fe5a 	bl	800c6c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b08c      	sub	sp, #48	; 0x30
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b22      	cmp	r3, #34	; 0x22
 800ca2c:	f040 80ab 	bne.w	800cb86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca38:	d117      	bne.n	800ca6a <UART_Receive_IT+0x50>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d113      	bne.n	800ca6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	1c9a      	adds	r2, r3, #2
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	629a      	str	r2, [r3, #40]	; 0x28
 800ca68:	e026      	b.n	800cab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca7c:	d007      	beq.n	800ca8e <UART_Receive_IT+0x74>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10a      	bne.n	800ca9c <UART_Receive_IT+0x82>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	e008      	b.n	800caae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	3b01      	subs	r3, #1
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	4619      	mov	r1, r3
 800cac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d15a      	bne.n	800cb82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68da      	ldr	r2, [r3, #12]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f022 0220 	bic.w	r2, r2, #32
 800cada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	695a      	ldr	r2, [r3, #20]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f022 0201 	bic.w	r2, r2, #1
 800cafa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2220      	movs	r2, #32
 800cb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d135      	bne.n	800cb78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	e853 3f00 	ldrex	r3, [r3]
 800cb20:	613b      	str	r3, [r7, #16]
   return(result);
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f023 0310 	bic.w	r3, r3, #16
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	330c      	adds	r3, #12
 800cb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb32:	623a      	str	r2, [r7, #32]
 800cb34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb36:	69f9      	ldr	r1, [r7, #28]
 800cb38:	6a3a      	ldr	r2, [r7, #32]
 800cb3a:	e841 2300 	strex	r3, r2, [r1]
 800cb3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1e5      	bne.n	800cb12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0310 	and.w	r3, r3, #16
 800cb50:	2b10      	cmp	r3, #16
 800cb52:	d10a      	bne.n	800cb6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fdbb 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
 800cb76:	e002      	b.n	800cb7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7f8 f8d3 	bl	8004d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e002      	b.n	800cb88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	e000      	b.n	800cb88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cb86:	2302      	movs	r3, #2
  }
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3730      	adds	r7, #48	; 0x30
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb94:	b0c0      	sub	sp, #256	; 0x100
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbac:	68d9      	ldr	r1, [r3, #12]
 800cbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	ea40 0301 	orr.w	r3, r0, r1
 800cbb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	431a      	orrs	r2, r3
 800cbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cbdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cbe8:	f021 010c 	bic.w	r1, r1, #12
 800cbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc0a:	6999      	ldr	r1, [r3, #24]
 800cc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	ea40 0301 	orr.w	r3, r0, r1
 800cc16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	4b8f      	ldr	r3, [pc, #572]	; (800ce5c <UART_SetConfig+0x2cc>)
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d005      	beq.n	800cc30 <UART_SetConfig+0xa0>
 800cc24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	4b8d      	ldr	r3, [pc, #564]	; (800ce60 <UART_SetConfig+0x2d0>)
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d104      	bne.n	800cc3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc30:	f7fc fe46 	bl	80098c0 <HAL_RCC_GetPCLK2Freq>
 800cc34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cc38:	e003      	b.n	800cc42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc3a:	f7fc fe2d 	bl	8009898 <HAL_RCC_GetPCLK1Freq>
 800cc3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc46:	69db      	ldr	r3, [r3, #28]
 800cc48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc4c:	f040 810c 	bne.w	800ce68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cc5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cc62:	4622      	mov	r2, r4
 800cc64:	462b      	mov	r3, r5
 800cc66:	1891      	adds	r1, r2, r2
 800cc68:	65b9      	str	r1, [r7, #88]	; 0x58
 800cc6a:	415b      	adcs	r3, r3
 800cc6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cc72:	4621      	mov	r1, r4
 800cc74:	eb12 0801 	adds.w	r8, r2, r1
 800cc78:	4629      	mov	r1, r5
 800cc7a:	eb43 0901 	adc.w	r9, r3, r1
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	f04f 0300 	mov.w	r3, #0
 800cc86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc92:	4690      	mov	r8, r2
 800cc94:	4699      	mov	r9, r3
 800cc96:	4623      	mov	r3, r4
 800cc98:	eb18 0303 	adds.w	r3, r8, r3
 800cc9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cca0:	462b      	mov	r3, r5
 800cca2:	eb49 0303 	adc.w	r3, r9, r3
 800cca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ccb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ccba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	18db      	adds	r3, r3, r3
 800ccc2:	653b      	str	r3, [r7, #80]	; 0x50
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	eb42 0303 	adc.w	r3, r2, r3
 800ccca:	657b      	str	r3, [r7, #84]	; 0x54
 800cccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ccd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ccd4:	f7f3 fdfa 	bl	80008cc <__aeabi_uldivmod>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4b61      	ldr	r3, [pc, #388]	; (800ce64 <UART_SetConfig+0x2d4>)
 800ccde:	fba3 2302 	umull	r2, r3, r3, r2
 800cce2:	095b      	lsrs	r3, r3, #5
 800cce4:	011c      	lsls	r4, r3, #4
 800cce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccea:	2200      	movs	r2, #0
 800ccec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ccf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ccf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ccf8:	4642      	mov	r2, r8
 800ccfa:	464b      	mov	r3, r9
 800ccfc:	1891      	adds	r1, r2, r2
 800ccfe:	64b9      	str	r1, [r7, #72]	; 0x48
 800cd00:	415b      	adcs	r3, r3
 800cd02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cd08:	4641      	mov	r1, r8
 800cd0a:	eb12 0a01 	adds.w	sl, r2, r1
 800cd0e:	4649      	mov	r1, r9
 800cd10:	eb43 0b01 	adc.w	fp, r3, r1
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	f04f 0300 	mov.w	r3, #0
 800cd1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cd20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cd24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd28:	4692      	mov	sl, r2
 800cd2a:	469b      	mov	fp, r3
 800cd2c:	4643      	mov	r3, r8
 800cd2e:	eb1a 0303 	adds.w	r3, sl, r3
 800cd32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd36:	464b      	mov	r3, r9
 800cd38:	eb4b 0303 	adc.w	r3, fp, r3
 800cd3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cd50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cd54:	460b      	mov	r3, r1
 800cd56:	18db      	adds	r3, r3, r3
 800cd58:	643b      	str	r3, [r7, #64]	; 0x40
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	eb42 0303 	adc.w	r3, r2, r3
 800cd60:	647b      	str	r3, [r7, #68]	; 0x44
 800cd62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cd6a:	f7f3 fdaf 	bl	80008cc <__aeabi_uldivmod>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	4b3b      	ldr	r3, [pc, #236]	; (800ce64 <UART_SetConfig+0x2d4>)
 800cd76:	fba3 2301 	umull	r2, r3, r3, r1
 800cd7a:	095b      	lsrs	r3, r3, #5
 800cd7c:	2264      	movs	r2, #100	; 0x64
 800cd7e:	fb02 f303 	mul.w	r3, r2, r3
 800cd82:	1acb      	subs	r3, r1, r3
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cd8a:	4b36      	ldr	r3, [pc, #216]	; (800ce64 <UART_SetConfig+0x2d4>)
 800cd8c:	fba3 2302 	umull	r2, r3, r3, r2
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cd98:	441c      	add	r4, r3
 800cd9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cda4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cda8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cdac:	4642      	mov	r2, r8
 800cdae:	464b      	mov	r3, r9
 800cdb0:	1891      	adds	r1, r2, r2
 800cdb2:	63b9      	str	r1, [r7, #56]	; 0x38
 800cdb4:	415b      	adcs	r3, r3
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cdbc:	4641      	mov	r1, r8
 800cdbe:	1851      	adds	r1, r2, r1
 800cdc0:	6339      	str	r1, [r7, #48]	; 0x30
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	414b      	adcs	r3, r1
 800cdc6:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc8:	f04f 0200 	mov.w	r2, #0
 800cdcc:	f04f 0300 	mov.w	r3, #0
 800cdd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cdd4:	4659      	mov	r1, fp
 800cdd6:	00cb      	lsls	r3, r1, #3
 800cdd8:	4651      	mov	r1, sl
 800cdda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdde:	4651      	mov	r1, sl
 800cde0:	00ca      	lsls	r2, r1, #3
 800cde2:	4610      	mov	r0, r2
 800cde4:	4619      	mov	r1, r3
 800cde6:	4603      	mov	r3, r0
 800cde8:	4642      	mov	r2, r8
 800cdea:	189b      	adds	r3, r3, r2
 800cdec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cdf0:	464b      	mov	r3, r9
 800cdf2:	460a      	mov	r2, r1
 800cdf4:	eb42 0303 	adc.w	r3, r2, r3
 800cdf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ce08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ce0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ce10:	460b      	mov	r3, r1
 800ce12:	18db      	adds	r3, r3, r3
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce16:	4613      	mov	r3, r2
 800ce18:	eb42 0303 	adc.w	r3, r2, r3
 800ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ce26:	f7f3 fd51 	bl	80008cc <__aeabi_uldivmod>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <UART_SetConfig+0x2d4>)
 800ce30:	fba3 1302 	umull	r1, r3, r3, r2
 800ce34:	095b      	lsrs	r3, r3, #5
 800ce36:	2164      	movs	r1, #100	; 0x64
 800ce38:	fb01 f303 	mul.w	r3, r1, r3
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	3332      	adds	r3, #50	; 0x32
 800ce42:	4a08      	ldr	r2, [pc, #32]	; (800ce64 <UART_SetConfig+0x2d4>)
 800ce44:	fba2 2303 	umull	r2, r3, r2, r3
 800ce48:	095b      	lsrs	r3, r3, #5
 800ce4a:	f003 0207 	and.w	r2, r3, #7
 800ce4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4422      	add	r2, r4
 800ce56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce58:	e106      	b.n	800d068 <UART_SetConfig+0x4d8>
 800ce5a:	bf00      	nop
 800ce5c:	40011000 	.word	0x40011000
 800ce60:	40011400 	.word	0x40011400
 800ce64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ce72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ce76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ce7a:	4642      	mov	r2, r8
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	1891      	adds	r1, r2, r2
 800ce80:	6239      	str	r1, [r7, #32]
 800ce82:	415b      	adcs	r3, r3
 800ce84:	627b      	str	r3, [r7, #36]	; 0x24
 800ce86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce8a:	4641      	mov	r1, r8
 800ce8c:	1854      	adds	r4, r2, r1
 800ce8e:	4649      	mov	r1, r9
 800ce90:	eb43 0501 	adc.w	r5, r3, r1
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	f04f 0300 	mov.w	r3, #0
 800ce9c:	00eb      	lsls	r3, r5, #3
 800ce9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cea2:	00e2      	lsls	r2, r4, #3
 800cea4:	4614      	mov	r4, r2
 800cea6:	461d      	mov	r5, r3
 800cea8:	4643      	mov	r3, r8
 800ceaa:	18e3      	adds	r3, r4, r3
 800ceac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ceb0:	464b      	mov	r3, r9
 800ceb2:	eb45 0303 	adc.w	r3, r5, r3
 800ceb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ceba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ceca:	f04f 0200 	mov.w	r2, #0
 800cece:	f04f 0300 	mov.w	r3, #0
 800ced2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ced6:	4629      	mov	r1, r5
 800ced8:	008b      	lsls	r3, r1, #2
 800ceda:	4621      	mov	r1, r4
 800cedc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cee0:	4621      	mov	r1, r4
 800cee2:	008a      	lsls	r2, r1, #2
 800cee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cee8:	f7f3 fcf0 	bl	80008cc <__aeabi_uldivmod>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4b60      	ldr	r3, [pc, #384]	; (800d074 <UART_SetConfig+0x4e4>)
 800cef2:	fba3 2302 	umull	r2, r3, r3, r2
 800cef6:	095b      	lsrs	r3, r3, #5
 800cef8:	011c      	lsls	r4, r3, #4
 800cefa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cefe:	2200      	movs	r2, #0
 800cf00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cf04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cf08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cf0c:	4642      	mov	r2, r8
 800cf0e:	464b      	mov	r3, r9
 800cf10:	1891      	adds	r1, r2, r2
 800cf12:	61b9      	str	r1, [r7, #24]
 800cf14:	415b      	adcs	r3, r3
 800cf16:	61fb      	str	r3, [r7, #28]
 800cf18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf1c:	4641      	mov	r1, r8
 800cf1e:	1851      	adds	r1, r2, r1
 800cf20:	6139      	str	r1, [r7, #16]
 800cf22:	4649      	mov	r1, r9
 800cf24:	414b      	adcs	r3, r1
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	f04f 0200 	mov.w	r2, #0
 800cf2c:	f04f 0300 	mov.w	r3, #0
 800cf30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf34:	4659      	mov	r1, fp
 800cf36:	00cb      	lsls	r3, r1, #3
 800cf38:	4651      	mov	r1, sl
 800cf3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf3e:	4651      	mov	r1, sl
 800cf40:	00ca      	lsls	r2, r1, #3
 800cf42:	4610      	mov	r0, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	4603      	mov	r3, r0
 800cf48:	4642      	mov	r2, r8
 800cf4a:	189b      	adds	r3, r3, r2
 800cf4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf50:	464b      	mov	r3, r9
 800cf52:	460a      	mov	r2, r1
 800cf54:	eb42 0303 	adc.w	r3, r2, r3
 800cf58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf66:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	f04f 0300 	mov.w	r3, #0
 800cf70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cf74:	4649      	mov	r1, r9
 800cf76:	008b      	lsls	r3, r1, #2
 800cf78:	4641      	mov	r1, r8
 800cf7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf7e:	4641      	mov	r1, r8
 800cf80:	008a      	lsls	r2, r1, #2
 800cf82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cf86:	f7f3 fca1 	bl	80008cc <__aeabi_uldivmod>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4611      	mov	r1, r2
 800cf90:	4b38      	ldr	r3, [pc, #224]	; (800d074 <UART_SetConfig+0x4e4>)
 800cf92:	fba3 2301 	umull	r2, r3, r3, r1
 800cf96:	095b      	lsrs	r3, r3, #5
 800cf98:	2264      	movs	r2, #100	; 0x64
 800cf9a:	fb02 f303 	mul.w	r3, r2, r3
 800cf9e:	1acb      	subs	r3, r1, r3
 800cfa0:	011b      	lsls	r3, r3, #4
 800cfa2:	3332      	adds	r3, #50	; 0x32
 800cfa4:	4a33      	ldr	r2, [pc, #204]	; (800d074 <UART_SetConfig+0x4e4>)
 800cfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfaa:	095b      	lsrs	r3, r3, #5
 800cfac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfb0:	441c      	add	r4, r3
 800cfb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	673b      	str	r3, [r7, #112]	; 0x70
 800cfba:	677a      	str	r2, [r7, #116]	; 0x74
 800cfbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	1891      	adds	r1, r2, r2
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	415b      	adcs	r3, r3
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfd0:	4641      	mov	r1, r8
 800cfd2:	1851      	adds	r1, r2, r1
 800cfd4:	6039      	str	r1, [r7, #0]
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	414b      	adcs	r3, r1
 800cfda:	607b      	str	r3, [r7, #4]
 800cfdc:	f04f 0200 	mov.w	r2, #0
 800cfe0:	f04f 0300 	mov.w	r3, #0
 800cfe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cfe8:	4659      	mov	r1, fp
 800cfea:	00cb      	lsls	r3, r1, #3
 800cfec:	4651      	mov	r1, sl
 800cfee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cff2:	4651      	mov	r1, sl
 800cff4:	00ca      	lsls	r2, r1, #3
 800cff6:	4610      	mov	r0, r2
 800cff8:	4619      	mov	r1, r3
 800cffa:	4603      	mov	r3, r0
 800cffc:	4642      	mov	r2, r8
 800cffe:	189b      	adds	r3, r3, r2
 800d000:	66bb      	str	r3, [r7, #104]	; 0x68
 800d002:	464b      	mov	r3, r9
 800d004:	460a      	mov	r2, r1
 800d006:	eb42 0303 	adc.w	r3, r2, r3
 800d00a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	663b      	str	r3, [r7, #96]	; 0x60
 800d016:	667a      	str	r2, [r7, #100]	; 0x64
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	f04f 0300 	mov.w	r3, #0
 800d020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d024:	4649      	mov	r1, r9
 800d026:	008b      	lsls	r3, r1, #2
 800d028:	4641      	mov	r1, r8
 800d02a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d02e:	4641      	mov	r1, r8
 800d030:	008a      	lsls	r2, r1, #2
 800d032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d036:	f7f3 fc49 	bl	80008cc <__aeabi_uldivmod>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <UART_SetConfig+0x4e4>)
 800d040:	fba3 1302 	umull	r1, r3, r3, r2
 800d044:	095b      	lsrs	r3, r3, #5
 800d046:	2164      	movs	r1, #100	; 0x64
 800d048:	fb01 f303 	mul.w	r3, r1, r3
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	011b      	lsls	r3, r3, #4
 800d050:	3332      	adds	r3, #50	; 0x32
 800d052:	4a08      	ldr	r2, [pc, #32]	; (800d074 <UART_SetConfig+0x4e4>)
 800d054:	fba2 2303 	umull	r2, r3, r2, r3
 800d058:	095b      	lsrs	r3, r3, #5
 800d05a:	f003 020f 	and.w	r2, r3, #15
 800d05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4422      	add	r2, r4
 800d066:	609a      	str	r2, [r3, #8]
}
 800d068:	bf00      	nop
 800d06a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d06e:	46bd      	mov	sp, r7
 800d070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d074:	51eb851f 	.word	0x51eb851f

0800d078 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d07c:	4904      	ldr	r1, [pc, #16]	; (800d090 <MX_FATFS_Init+0x18>)
 800d07e:	4805      	ldr	r0, [pc, #20]	; (800d094 <MX_FATFS_Init+0x1c>)
 800d080:	f008 f996 	bl	80153b0 <FATFS_LinkDriver>
 800d084:	4603      	mov	r3, r0
 800d086:	461a      	mov	r2, r3
 800d088:	4b03      	ldr	r3, [pc, #12]	; (800d098 <MX_FATFS_Init+0x20>)
 800d08a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d08c:	bf00      	nop
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2001344c 	.word	0x2001344c
 800d094:	20000018 	.word	0x20000018
 800d098:	20013448 	.word	0x20013448

0800d09c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d09c:	b480      	push	{r7}
 800d09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f4 fc5d 	bl	8001978 <SD_disk_initialize>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	b2db      	uxtb	r3, r3
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f4 fd34 	bl	8001b44 <SD_disk_status>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	b2db      	uxtb	r3, r3
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	607a      	str	r2, [r7, #4]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800d0f8:	7bf8      	ldrb	r0, [r7, #15]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	f7f4 fd36 	bl	8001b70 <SD_disk_read>
 800d104:	4603      	mov	r3, r0
 800d106:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END READ */
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800d120:	7bf8      	ldrb	r0, [r7, #15]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	68b9      	ldr	r1, [r7, #8]
 800d128:	f7f4 fd90 	bl	8001c4c <SD_disk_write>
 800d12c:	4603      	mov	r3, r0
 800d12e:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	603a      	str	r2, [r7, #0]
 800d142:	71fb      	strb	r3, [r7, #7]
 800d144:	460b      	mov	r3, r1
 800d146:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	79b9      	ldrb	r1, [r7, #6]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7f4 fe06 	bl	8001d60 <SD_disk_ioctl>
 800d154:	4603      	mov	r3, r0
 800d156:	b2db      	uxtb	r3, r3
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <xmp3_SetBitstreamPointer>:
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d160:	2300      	movs	r3, #0
 800d162:	e9c0 2300 	strd	r2, r3, [r0]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
	bsi->nBytes = nBytes;
 800d166:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 800d16a:	4770      	bx	lr

0800d16c <xmp3_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 800d16c:	4603      	mov	r3, r0
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d16e:	6842      	ldr	r2, [r0, #4]
	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800d170:	f001 011f 	and.w	r1, r1, #31
{
 800d174:	b4f0      	push	{r4, r5, r6, r7}
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d176:	f1c1 001f 	rsb	r0, r1, #31
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
	bsi->iCache <<= nBits;					/* left-justify cache */
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d17a:	689c      	ldr	r4, [r3, #8]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d17c:	fa22 f000 	lsr.w	r0, r2, r0
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d180:	408a      	lsls	r2, r1
 800d182:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d184:	1a62      	subs	r2, r4, r1

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800d186:	2a00      	cmp	r2, #0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d188:	ea4f 0050 	mov.w	r0, r0, lsr #1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d18c:	609a      	str	r2, [r3, #8]
	if (bsi->cachedBits < 0) {
 800d18e:	db01      	blt.n	800d194 <xmp3_GetBits+0x28>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 800d190:	bcf0      	pop	{r4, r5, r6, r7}
 800d192:	4770      	bx	lr
	int nBytes = bsi->nBytes;
 800d194:	68de      	ldr	r6, [r3, #12]
	if (nBytes >= 4) {
 800d196:	2e03      	cmp	r6, #3
		lowBits = -bsi->cachedBits;
 800d198:	eba1 0104 	sub.w	r1, r1, r4
	if (nBytes >= 4) {
 800d19c:	dc1d      	bgt.n	800d1da <xmp3_GetBits+0x6e>
		bsi->iCache = 0;
 800d19e:	2400      	movs	r4, #0
 800d1a0:	605c      	str	r4, [r3, #4]
		while (nBytes--) {
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	d03b      	beq.n	800d21e <xmp3_GetBits+0xb2>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d1a6:	681d      	ldr	r5, [r3, #0]
 800d1a8:	19af      	adds	r7, r5, r6
			bsi->iCache |= (*bsi->bytePtr++);
 800d1aa:	3501      	adds	r5, #1
 800d1ac:	601d      	str	r5, [r3, #0]
 800d1ae:	f815 cc01 	ldrb.w	ip, [r5, #-1]
 800d1b2:	ea4c 0404 	orr.w	r4, ip, r4
			bsi->iCache <<= 8;
 800d1b6:	0224      	lsls	r4, r4, #8
		while (nBytes--) {
 800d1b8:	42bd      	cmp	r5, r7
			bsi->iCache <<= 8;
 800d1ba:	605c      	str	r4, [r3, #4]
		while (nBytes--) {
 800d1bc:	d1f5      	bne.n	800d1aa <xmp3_GetBits+0x3e>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d1be:	f1c6 0503 	rsb	r5, r6, #3
 800d1c2:	00ed      	lsls	r5, r5, #3
 800d1c4:	40ac      	lsls	r4, r5
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1c6:	f102 0520 	add.w	r5, r2, #32
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d1ca:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1ce:	40ec      	lsrs	r4, r5
 800d1d0:	4320      	orrs	r0, r4
		bsi->nBytes = 0;
 800d1d2:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	e01c      	b.n	800d214 <xmp3_GetBits+0xa8>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d1da:	681d      	ldr	r5, [r3, #0]
 800d1dc:	462f      	mov	r7, r5
 800d1de:	1c6c      	adds	r4, r5, #1
 800d1e0:	601c      	str	r4, [r3, #0]
 800d1e2:	f817 4b02 	ldrb.w	r4, [r7], #2
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d1e6:	601f      	str	r7, [r3, #0]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d1e8:	0624      	lsls	r4, r4, #24
 800d1ea:	605c      	str	r4, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d1ec:	786f      	ldrb	r7, [r5, #1]
 800d1ee:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d1f2:	1cef      	adds	r7, r5, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d1f4:	605c      	str	r4, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d1f6:	601f      	str	r7, [r3, #0]
 800d1f8:	78af      	ldrb	r7, [r5, #2]
 800d1fa:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800d1fe:	1d2f      	adds	r7, r5, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d200:	605c      	str	r4, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 800d202:	601f      	str	r7, [r3, #0]
 800d204:	78ed      	ldrb	r5, [r5, #3]
 800d206:	3220      	adds	r2, #32
 800d208:	432c      	orrs	r4, r5
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d20a:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d20e:	40d4      	lsrs	r4, r2
		bsi->nBytes -= 4;
 800d210:	3e04      	subs	r6, #4
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d212:	4320      	orrs	r0, r4
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800d214:	e9c3 2602 	strd	r2, r6, [r3, #8]
}
 800d218:	bcf0      	pop	{r4, r5, r6, r7}
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d21a:	6059      	str	r1, [r3, #4]
}
 800d21c:	4770      	bx	lr
		while (nBytes--) {
 800d21e:	4631      	mov	r1, r6
 800d220:	e7d7      	b.n	800d1d2 <xmp3_GetBits+0x66>
 800d222:	bf00      	nop

0800d224 <xmp3_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 800d224:	b410      	push	{r4}
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800d226:	6804      	ldr	r4, [r0, #0]
	bitsUsed -= bsi->cachedBits;
 800d228:	6883      	ldr	r3, [r0, #8]
	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800d22a:	1a61      	subs	r1, r4, r1
	bitsUsed -= bsi->cachedBits;
 800d22c:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 800d230:	1a98      	subs	r0, r3, r2
 800d232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <xmp3_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800d238:	b130      	cbz	r0, 800d248 <xmp3_CheckPadBit+0x10>
 800d23a:	6803      	ldr	r3, [r0, #0]
 800d23c:	b123      	cbz	r3, 800d248 <xmp3_CheckPadBit+0x10>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 800d23e:	6958      	ldr	r0, [r3, #20]
 800d240:	3800      	subs	r0, #0
 800d242:	bf18      	it	ne
 800d244:	2001      	movne	r0, #1
 800d246:	4770      	bx	lr
		return -1;
 800d248:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop

0800d250 <xmp3_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800d250:	2800      	cmp	r0, #0
 800d252:	f000 80d1 	beq.w	800d3f8 <xmp3_UnpackFrameHeader+0x1a8>
 800d256:	6803      	ldr	r3, [r0, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 80cd 	beq.w	800d3f8 <xmp3_UnpackFrameHeader+0x1a8>
 800d25e:	780a      	ldrb	r2, [r1, #0]
 800d260:	2aff      	cmp	r2, #255	; 0xff
 800d262:	f040 80c9 	bne.w	800d3f8 <xmp3_UnpackFrameHeader+0x1a8>
{
 800d266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800d26a:	784c      	ldrb	r4, [r1, #1]
 800d26c:	f004 02e0 	and.w	r2, r4, #224	; 0xe0
 800d270:	2ae0      	cmp	r2, #224	; 0xe0
 800d272:	f040 80be 	bne.w	800d3f2 <xmp3_UnpackFrameHeader+0x1a2>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800d276:	08e2      	lsrs	r2, r4, #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800d278:	f014 0f18 	tst.w	r4, #24
 800d27c:	bf1a      	itte	ne
 800d27e:	43d2      	mvnne	r2, r2
 800d280:	f002 0201 	andne.w	r2, r2, #1
 800d284:	2202      	moveq	r2, #2
 800d286:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800d288:	f891 c001 	ldrb.w	ip, [r1, #1]
 800d28c:	f3cc 0c41 	ubfx	ip, ip, #1, #2
 800d290:	f1cc 0904 	rsb	r9, ip, #4
 800d294:	f8c3 9004 	str.w	r9, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800d298:	784d      	ldrb	r5, [r1, #1]
 800d29a:	43ed      	mvns	r5, r5
 800d29c:	f005 0501 	and.w	r5, r5, #1
 800d2a0:	609d      	str	r5, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800d2a2:	788f      	ldrb	r7, [r1, #2]
 800d2a4:	093f      	lsrs	r7, r7, #4
 800d2a6:	60df      	str	r7, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800d2a8:	788c      	ldrb	r4, [r1, #2]
 800d2aa:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800d2ae:	611c      	str	r4, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800d2b0:	788e      	ldrb	r6, [r1, #2]
 800d2b2:	f3c6 0640 	ubfx	r6, r6, #1, #1
 800d2b6:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800d2b8:	f891 e002 	ldrb.w	lr, [r1, #2]
 800d2bc:	f00e 0e01 	and.w	lr, lr, #1
 800d2c0:	f8c3 e018 	str.w	lr, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800d2c4:	f891 e003 	ldrb.w	lr, [r1, #3]
 800d2c8:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800d2cc:	f883 e01c 	strb.w	lr, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800d2d0:	f891 8003 	ldrb.w	r8, [r1, #3]
 800d2d4:	f3c8 1801 	ubfx	r8, r8, #4, #2
 800d2d8:	f8c3 8020 	str.w	r8, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800d2dc:	f891 8003 	ldrb.w	r8, [r1, #3]
 800d2e0:	f3c8 08c0 	ubfx	r8, r8, #3, #1
 800d2e4:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800d2e8:	f891 8003 	ldrb.w	r8, [r1, #3]
 800d2ec:	f3c8 0880 	ubfx	r8, r8, #2, #1
 800d2f0:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800d2f4:	f891 8003 	ldrb.w	r8, [r1, #3]

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800d2f8:	2c03      	cmp	r4, #3
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800d2fa:	f008 0803 	and.w	r8, r8, #3
 800d2fe:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800d302:	d076      	beq.n	800d3f2 <xmp3_UnpackFrameHeader+0x1a2>
 800d304:	f1b9 0f04 	cmp.w	r9, #4
 800d308:	d073      	beq.n	800d3f2 <xmp3_UnpackFrameHeader+0x1a2>
 800d30a:	2f0f      	cmp	r7, #15
 800d30c:	d071      	beq.n	800d3f2 <xmp3_UnpackFrameHeader+0x1a2>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800d30e:	f04f 0bde 	mov.w	fp, #222	; 0xde
 800d312:	f8df a100 	ldr.w	sl, [pc, #256]	; 800d414 <xmp3_UnpackFrameHeader+0x1c4>
 800d316:	fb0b fb02 	mul.w	fp, fp, r2
 800d31a:	f04f 084a 	mov.w	r8, #74	; 0x4a
 800d31e:	fb18 b804 	smlabb	r8, r8, r4, fp
 800d322:	44d0      	add	r8, sl
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800d324:	f1be 0f01 	cmp.w	lr, #1
	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800d328:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800d32c:	d009      	beq.n	800d342 <xmp3_UnpackFrameHeader+0xf2>
		fh->modeExt = 0;
 800d32e:	f04f 0800 	mov.w	r8, #0

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800d332:	f1be 0f03 	cmp.w	lr, #3
		fh->modeExt = 0;
 800d336:	f8c3 8020 	str.w	r8, [r3, #32]
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800d33a:	d102      	bne.n	800d342 <xmp3_UnpackFrameHeader+0xf2>
 800d33c:	f04f 0801 	mov.w	r8, #1
 800d340:	e001      	b.n	800d346 <xmp3_UnpackFrameHeader+0xf6>
 800d342:	f04f 0802 	mov.w	r8, #2
 800d346:	f8c0 87bc 	str.w	r8, [r0, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d34a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800d34e:	2a00      	cmp	r2, #0
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
	mp3DecInfo->layer = fh->layer;
 800d350:	f8c0 97d0 	str.w	r9, [r0, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 800d354:	f880 27d4 	strb.w	r2, [r0, #2004]	; 0x7d4
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d358:	eb08 0904 	add.w	r9, r8, r4
 800d35c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 800d360:	4a27      	ldr	r2, [pc, #156]	; (800d400 <xmp3_UnpackFrameHeader+0x1b0>)
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d362:	f1cc 0c03 	rsb	ip, ip, #3
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d366:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800d36a:	f8c0 27c0 	str.w	r2, [r0, #1984]	; 0x7c0
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d36e:	eb08 090c 	add.w	r9, r8, ip
 800d372:	4a24      	ldr	r2, [pc, #144]	; (800d404 <xmp3_UnpackFrameHeader+0x1b4>)
 800d374:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800d378:	bf0c      	ite	eq
 800d37a:	2202      	moveq	r2, #2
 800d37c:	2201      	movne	r2, #1
 800d37e:	f8c0 27c4 	str.w	r2, [r0, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d382:	fb99 f2f2 	sdiv	r2, r9, r2
 800d386:	f8c0 27c8 	str.w	r2, [r0, #1992]	; 0x7c8
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800d38a:	b337      	cbz	r7, 800d3da <xmp3_UnpackFrameHeader+0x18a>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d38c:	f1be 0f03 	cmp.w	lr, #3
 800d390:	bf0c      	ite	eq
 800d392:	4652      	moveq	r2, sl
 800d394:	f10a 0201 	addne.w	r2, sl, #1
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d398:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d39c:	ebc8 1e08 	rsb	lr, r8, r8, lsl #4
 800d3a0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3a4:	4474      	add	r4, lr
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3a6:	44f4      	add	ip, lr
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3a8:	443c      	add	r4, r7
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3aa:	44bc      	add	ip, r7
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3ac:	4f16      	ldr	r7, [pc, #88]	; (800d408 <xmp3_UnpackFrameHeader+0x1b8>)
 800d3ae:	f937 4014 	ldrsh.w	r4, [r7, r4, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d3b2:	4f16      	ldr	r7, [pc, #88]	; (800d40c <xmp3_UnpackFrameHeader+0x1bc>)
 800d3b4:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3b8:	1aa2      	subs	r2, r4, r2
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d3ba:	3a04      	subs	r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800d3bc:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
 800d3c0:	4432      	add	r2, r6
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3c2:	f8c0 27cc 	str.w	r2, [r0, #1996]	; 0x7cc
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3c6:	4a12      	ldr	r2, [pc, #72]	; (800d410 <xmp3_UnpackFrameHeader+0x1c0>)
 800d3c8:	f932 201c 	ldrsh.w	r2, [r2, ip, lsl #1]
 800d3cc:	ebc2 1442 	rsb	r4, r2, r2, lsl #5
 800d3d0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d3d4:	00d2      	lsls	r2, r2, #3
 800d3d6:	f8c0 27b8 	str.w	r2, [r0, #1976]	; 0x7b8
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800d3da:	b91d      	cbnz	r5, 800d3e4 <xmp3_UnpackFrameHeader+0x194>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
		return 6;
	} else {
		fh->CRCWord = 0;
 800d3dc:	631d      	str	r5, [r3, #48]	; 0x30
		return 4;
 800d3de:	2004      	movs	r0, #4
	}
}
 800d3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800d3e4:	888a      	ldrh	r2, [r1, #4]
 800d3e6:	ba52      	rev16	r2, r2
 800d3e8:	b292      	uxth	r2, r2
		return 6;
 800d3ea:	2006      	movs	r0, #6
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800d3ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f6:	e7f3      	b.n	800d3e0 <xmp3_UnpackFrameHeader+0x190>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	08027e3c 	.word	0x08027e3c
 800d404:	08027e60 	.word	0x08027e60
 800d408:	0802811c 	.word	0x0802811c
 800d40c:	08028110 	.word	0x08028110
 800d410:	08027d2c 	.word	0x08027d2c
 800d414:	08027e74 	.word	0x08027e74

0800d418 <xmp3_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	b08b      	sub	sp, #44	; 0x2c
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800d41e:	2800      	cmp	r0, #0
 800d420:	f000 812c 	beq.w	800d67c <xmp3_UnpackSideInfo+0x264>
 800d424:	6803      	ldr	r3, [r0, #0]
 800d426:	4607      	mov	r7, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f000 8127 	beq.w	800d67c <xmp3_UnpackSideInfo+0x264>
 800d42e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800d432:	f1ba 0f00 	cmp.w	sl, #0
 800d436:	f000 8121 	beq.w	800d67c <xmp3_UnpackSideInfo+0x264>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	9200      	str	r2, [sp, #0]
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d43e:	7f1b      	ldrb	r3, [r3, #28]
	if (fh->ver == MPEG1) {
 800d440:	2a00      	cmp	r2, #0
 800d442:	f000 80a1 	beq.w	800d588 <xmp3_UnpackSideInfo+0x170>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d446:	2b03      	cmp	r3, #3
 800d448:	f000 810a 	beq.w	800d660 <xmp3_UnpackSideInfo+0x248>
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d44c:	2300      	movs	r3, #0
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 8);
 800d44e:	ad06      	add	r5, sp, #24
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d450:	e9cd 1306 	strd	r1, r3, [sp, #24]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d454:	9308      	str	r3, [sp, #32]
		si->mainDataBegin = GetBits(bsi, 8);
 800d456:	2108      	movs	r1, #8
	bsi->nBytes = nBytes;
 800d458:	2311      	movs	r3, #17
		si->mainDataBegin = GetBits(bsi, 8);
 800d45a:	4628      	mov	r0, r5
	bsi->nBytes = nBytes;
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d45e:	9303      	str	r3, [sp, #12]
		si->mainDataBegin = GetBits(bsi, 8);
 800d460:	f7ff fe84 	bl	800d16c <xmp3_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800d464:	2102      	movs	r1, #2
		si->mainDataBegin = GetBits(bsi, 8);
 800d466:	f8ca 0000 	str.w	r0, [sl]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800d46a:	4628      	mov	r0, r5
 800d46c:	f7ff fe7e 	bl	800d16c <xmp3_GetBits>
 800d470:	f8ca 0004 	str.w	r0, [sl, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800d474:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 800d478:	9302      	str	r3, [sp, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	dd7c      	ble.n	800d578 <xmp3_UnpackSideInfo+0x160>
 800d47e:	9b00      	ldr	r3, [sp, #0]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d480:	f8d7 97bc 	ldr.w	r9, [r7, #1980]	; 0x7bc
 800d484:	f8cd a010 	str.w	sl, [sp, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	bf0c      	ite	eq
 800d48c:	f04f 0b04 	moveq.w	fp, #4
 800d490:	f04f 0b09 	movne.w	fp, #9
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800d494:	f04f 0800 	mov.w	r8, #0
 800d498:	9705      	str	r7, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d49a:	f1b9 0f00 	cmp.w	r9, #0
 800d49e:	dd62      	ble.n	800d566 <xmp3_UnpackSideInfo+0x14e>
 800d4a0:	4654      	mov	r4, sl
 800d4a2:	2600      	movs	r6, #0
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
 800d4a4:	210c      	movs	r1, #12
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f7ff fe60 	bl	800d16c <xmp3_GetBits>
			sis->nBigvals =        GetBits(bsi, 9);
 800d4ac:	2109      	movs	r1, #9
			sis->part23Length =    GetBits(bsi, 12);
 800d4ae:	62a0      	str	r0, [r4, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f7ff fe5b 	bl	800d16c <xmp3_GetBits>
			sis->globalGain =      GetBits(bsi, 8);
 800d4b6:	2108      	movs	r1, #8
			sis->nBigvals =        GetBits(bsi, 9);
 800d4b8:	62e0      	str	r0, [r4, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	f7ff fe56 	bl	800d16c <xmp3_GetBits>
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800d4c0:	4659      	mov	r1, fp
			sis->globalGain =      GetBits(bsi, 8);
 800d4c2:	6320      	str	r0, [r4, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f7ff fe51 	bl	800d16c <xmp3_GetBits>
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800d4ca:	2101      	movs	r1, #1
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800d4cc:	6360      	str	r0, [r4, #52]	; 0x34
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f7ff fe4c 	bl	800d16c <xmp3_GetBits>
 800d4d4:	63a0      	str	r0, [r4, #56]	; 0x38

			if(sis->winSwitchFlag) {
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	f000 8085 	beq.w	800d5e6 <xmp3_UnpackSideInfo+0x1ce>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800d4dc:	2102      	movs	r1, #2
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f7ff fe44 	bl	800d16c <xmp3_GetBits>
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d4e4:	2101      	movs	r1, #1
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800d4e6:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d4e8:	9001      	str	r0, [sp, #4]
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff fe3e 	bl	800d16c <xmp3_GetBits>
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d4f0:	2105      	movs	r1, #5
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d4f2:	6420      	str	r0, [r4, #64]	; 0x40
 800d4f4:	4607      	mov	r7, r0
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f7ff fe38 	bl	800d16c <xmp3_GetBits>
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d4fc:	2105      	movs	r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d4fe:	6460      	str	r0, [r4, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d500:	4628      	mov	r0, r5
 800d502:	f7ff fe33 	bl	800d16c <xmp3_GetBits>
				sis->tableSelect[2] =  0;					/* unused */
 800d506:	2100      	movs	r1, #0
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d508:	64a0      	str	r0, [r4, #72]	; 0x48
				sis->tableSelect[2] =  0;					/* unused */
 800d50a:	64e1      	str	r1, [r4, #76]	; 0x4c
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800d50c:	4628      	mov	r0, r5
 800d50e:	2103      	movs	r1, #3
 800d510:	f7ff fe2c 	bl	800d16c <xmp3_GetBits>
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d514:	2103      	movs	r1, #3
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800d516:	6520      	str	r0, [r4, #80]	; 0x50
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d518:	4628      	mov	r0, r5
 800d51a:	f7ff fe27 	bl	800d16c <xmp3_GetBits>
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d51e:	2103      	movs	r1, #3
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d520:	6560      	str	r0, [r4, #84]	; 0x54
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d522:	4628      	mov	r0, r5
 800d524:	f7ff fe22 	bl	800d16c <xmp3_GetBits>

				/* TODO - check logic */
				if (sis->blockType == 0) {
 800d528:	9b01      	ldr	r3, [sp, #4]
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d52a:	65a0      	str	r0, [r4, #88]	; 0x58
				if (sis->blockType == 0) {
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d17d      	bne.n	800d62c <xmp3_UnpackSideInfo+0x214>
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
				}
				sis->region1Count = 20 - sis->region0Count;
 800d530:	6de0      	ldr	r0, [r4, #92]	; 0x5c
					sis->sfCompress = 0;
 800d532:	6363      	str	r3, [r4, #52]	; 0x34
					sis->part23Length = 0;
 800d534:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
				sis->region1Count = 20 - sis->region0Count;
 800d538:	f1c0 0014 	rsb	r0, r0, #20
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d53c:	9b00      	ldr	r3, [sp, #0]
				sis->region1Count = 20 - sis->region0Count;
 800d53e:	6620      	str	r0, [r4, #96]	; 0x60
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d540:	2b00      	cmp	r3, #0
 800d542:	d06e      	beq.n	800d622 <xmp3_UnpackSideInfo+0x20a>
 800d544:	2000      	movs	r0, #0
 800d546:	6660      	str	r0, [r4, #100]	; 0x64
			sis->sfactScale =        GetBits(bsi, 1);
 800d548:	2101      	movs	r1, #1
 800d54a:	4628      	mov	r0, r5
 800d54c:	f7ff fe0e 	bl	800d16c <xmp3_GetBits>
			sis->count1TableSelect = GetBits(bsi, 1);
 800d550:	2101      	movs	r1, #1
			sis->sfactScale =        GetBits(bsi, 1);
 800d552:	66a0      	str	r0, [r4, #104]	; 0x68
			sis->count1TableSelect = GetBits(bsi, 1);
 800d554:	4628      	mov	r0, r5
 800d556:	f7ff fe09 	bl	800d16c <xmp3_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d55a:	3601      	adds	r6, #1
 800d55c:	45b1      	cmp	r9, r6
			sis->count1TableSelect = GetBits(bsi, 1);
 800d55e:	66e0      	str	r0, [r4, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d560:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800d564:	d19e      	bne.n	800d4a4 <xmp3_UnpackSideInfo+0x8c>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800d566:	9b02      	ldr	r3, [sp, #8]
 800d568:	f108 0801 	add.w	r8, r8, #1
 800d56c:	4598      	cmp	r8, r3
 800d56e:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
 800d572:	d192      	bne.n	800d49a <xmp3_UnpackSideInfo+0x82>
 800d574:	e9dd a704 	ldrd	sl, r7, [sp, #16]
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800d578:	f8da 3000 	ldr.w	r3, [sl]
 800d57c:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800d580:	9803      	ldr	r0, [sp, #12]
 800d582:	b00b      	add	sp, #44	; 0x2c
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d05b      	beq.n	800d644 <xmp3_UnpackSideInfo+0x22c>
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d58c:	9a00      	ldr	r2, [sp, #0]
	bsi->bytePtr = buf;
 800d58e:	9106      	str	r1, [sp, #24]
		si->mainDataBegin = GetBits(bsi, 9);
 800d590:	ad06      	add	r5, sp, #24
	bsi->nBytes = nBytes;
 800d592:	2320      	movs	r3, #32
		si->mainDataBegin = GetBits(bsi, 9);
 800d594:	2109      	movs	r1, #9
 800d596:	4628      	mov	r0, r5
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d598:	e9cd 2207 	strd	r2, r2, [sp, #28]
	bsi->nBytes = nBytes;
 800d59c:	9309      	str	r3, [sp, #36]	; 0x24
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d59e:	9303      	str	r3, [sp, #12]
		si->mainDataBegin = GetBits(bsi, 9);
 800d5a0:	f7ff fde4 	bl	800d16c <xmp3_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d5a4:	2103      	movs	r1, #3
		si->mainDataBegin = GetBits(bsi, 9);
 800d5a6:	f8ca 0000 	str.w	r0, [sl]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f7ff fdde 	bl	800d16c <xmp3_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d5b0:	f8d7 97bc 	ldr.w	r9, [r7, #1980]	; 0x7bc
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d5b4:	f8ca 0004 	str.w	r0, [sl, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d5b8:	f1b9 0f00 	cmp.w	r9, #0
 800d5bc:	f77f af5a 	ble.w	800d474 <xmp3_UnpackSideInfo+0x5c>
 800d5c0:	f10a 0414 	add.w	r4, sl, #20
 800d5c4:	2600      	movs	r6, #0
 800d5c6:	f1a4 0810 	sub.w	r8, r4, #16
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f7ff fdcd 	bl	800d16c <xmp3_GetBits>
 800d5d2:	f848 0f04 	str.w	r0, [r8, #4]!
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800d5d6:	45a0      	cmp	r8, r4
 800d5d8:	d1f7      	bne.n	800d5ca <xmp3_UnpackSideInfo+0x1b2>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d5da:	3601      	adds	r6, #1
 800d5dc:	454e      	cmp	r6, r9
 800d5de:	f104 0410 	add.w	r4, r4, #16
 800d5e2:	d1f0      	bne.n	800d5c6 <xmp3_UnpackSideInfo+0x1ae>
 800d5e4:	e746      	b.n	800d474 <xmp3_UnpackSideInfo+0x5c>
				sis->mixedBlock = 0;
 800d5e6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d5ea:	2105      	movs	r1, #5
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f7ff fdbd 	bl	800d16c <xmp3_GetBits>
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d5f2:	2105      	movs	r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d5f4:	6460      	str	r0, [r4, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f7ff fdb8 	bl	800d16c <xmp3_GetBits>
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d5fc:	2105      	movs	r1, #5
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d5fe:	64a0      	str	r0, [r4, #72]	; 0x48
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d600:	4628      	mov	r0, r5
 800d602:	f7ff fdb3 	bl	800d16c <xmp3_GetBits>
				sis->region0Count =    GetBits(bsi, 4);
 800d606:	2104      	movs	r1, #4
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d608:	64e0      	str	r0, [r4, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800d60a:	4628      	mov	r0, r5
 800d60c:	f7ff fdae 	bl	800d16c <xmp3_GetBits>
				sis->region1Count =    GetBits(bsi, 3);
 800d610:	2103      	movs	r1, #3
				sis->region0Count =    GetBits(bsi, 4);
 800d612:	65e0      	str	r0, [r4, #92]	; 0x5c
				sis->region1Count =    GetBits(bsi, 3);
 800d614:	4628      	mov	r0, r5
 800d616:	f7ff fda9 	bl	800d16c <xmp3_GetBits>
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d61a:	9b00      	ldr	r3, [sp, #0]
				sis->region1Count = 20 - sis->region0Count;
 800d61c:	6620      	str	r0, [r4, #96]	; 0x60
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d190      	bne.n	800d544 <xmp3_UnpackSideInfo+0x12c>
 800d622:	2101      	movs	r1, #1
 800d624:	4628      	mov	r0, r5
 800d626:	f7ff fda1 	bl	800d16c <xmp3_GetBits>
 800d62a:	e78c      	b.n	800d546 <xmp3_UnpackSideInfo+0x12e>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d003      	beq.n	800d638 <xmp3_UnpackSideInfo+0x220>
					sis->region0Count = 7;
 800d630:	2307      	movs	r3, #7
 800d632:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d634:	200d      	movs	r0, #13
				sis->region1Count = 20 - sis->region0Count;
 800d636:	e781      	b.n	800d53c <xmp3_UnpackSideInfo+0x124>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800d638:	2f00      	cmp	r7, #0
 800d63a:	d1f9      	bne.n	800d630 <xmp3_UnpackSideInfo+0x218>
					sis->region0Count = 8;
 800d63c:	2308      	movs	r3, #8
 800d63e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d640:	200c      	movs	r0, #12
 800d642:	e77b      	b.n	800d53c <xmp3_UnpackSideInfo+0x124>
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d644:	9a00      	ldr	r2, [sp, #0]
	bsi->bytePtr = buf;
 800d646:	9106      	str	r1, [sp, #24]
		si->mainDataBegin = GetBits(bsi, 9);
 800d648:	ad06      	add	r5, sp, #24
	bsi->nBytes = nBytes;
 800d64a:	2311      	movs	r3, #17
		si->mainDataBegin = GetBits(bsi, 9);
 800d64c:	2109      	movs	r1, #9
 800d64e:	4628      	mov	r0, r5
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d650:	e9cd 2207 	strd	r2, r2, [sp, #28]
	bsi->nBytes = nBytes;
 800d654:	9309      	str	r3, [sp, #36]	; 0x24
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d656:	9303      	str	r3, [sp, #12]
		si->mainDataBegin = GetBits(bsi, 9);
 800d658:	f7ff fd88 	bl	800d16c <xmp3_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d65c:	2105      	movs	r1, #5
 800d65e:	e7a2      	b.n	800d5a6 <xmp3_UnpackSideInfo+0x18e>
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d660:	2300      	movs	r3, #0
		si->mainDataBegin = GetBits(bsi, 8);
 800d662:	ad06      	add	r5, sp, #24
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d664:	e9cd 1306 	strd	r1, r3, [sp, #24]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d668:	9308      	str	r3, [sp, #32]
		si->mainDataBegin = GetBits(bsi, 8);
 800d66a:	2108      	movs	r1, #8
	bsi->nBytes = nBytes;
 800d66c:	2309      	movs	r3, #9
		si->mainDataBegin = GetBits(bsi, 8);
 800d66e:	4628      	mov	r0, r5
	bsi->nBytes = nBytes;
 800d670:	9309      	str	r3, [sp, #36]	; 0x24
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d672:	9303      	str	r3, [sp, #12]
		si->mainDataBegin = GetBits(bsi, 8);
 800d674:	f7ff fd7a 	bl	800d16c <xmp3_GetBits>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800d678:	2101      	movs	r1, #1
 800d67a:	e6f4      	b.n	800d466 <xmp3_UnpackSideInfo+0x4e>
		return -1;
 800d67c:	f04f 33ff 	mov.w	r3, #4294967295
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	e77d      	b.n	800d580 <xmp3_UnpackSideInfo+0x168>

0800d684 <xmp3_AllocateBuffers>:
 *
 * Notes:       if one or more mallocs fail, function frees any buffers already
 *                allocated before returning
 **************************************************************************************/
MP3DecInfo *AllocateBuffers(void)
{
 800d684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cbuf[i] = 0;
 800d688:	4c22      	ldr	r4, [pc, #136]	; (800d714 <xmp3_AllocateBuffers+0x90>)
 800d68a:	f8df b098 	ldr.w	fp, [pc, #152]	; 800d724 <xmp3_AllocateBuffers+0xa0>
 800d68e:	f8df a098 	ldr.w	sl, [pc, #152]	; 800d728 <xmp3_AllocateBuffers+0xa4>
 800d692:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800d72c <xmp3_AllocateBuffers+0xa8>
 800d696:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800d730 <xmp3_AllocateBuffers+0xac>
 800d69a:	4f1f      	ldr	r7, [pc, #124]	; (800d718 <xmp3_AllocateBuffers+0x94>)
 800d69c:	4e1f      	ldr	r6, [pc, #124]	; (800d71c <xmp3_AllocateBuffers+0x98>)
 800d69e:	4d20      	ldr	r5, [pc, #128]	; (800d720 <xmp3_AllocateBuffers+0x9c>)
 800d6a0:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f011 f804 	bl	801e6b4 <memset>
 800d6ac:	2238      	movs	r2, #56	; 0x38
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	4658      	mov	r0, fp
 800d6b2:	f010 ffff 	bl	801e6b4 <memset>
 800d6b6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	4650      	mov	r0, sl
 800d6be:	f010 fff9 	bl	801e6b4 <memset>
 800d6c2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4648      	mov	r0, r9
 800d6ca:	f010 fff3 	bl	801e6b4 <memset>
 800d6ce:	f241 2210 	movw	r2, #4624	; 0x1210
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4640      	mov	r0, r8
 800d6d6:	f010 ffed 	bl	801e6b4 <memset>
 800d6da:	f44f 7252 	mov.w	r2, #840	; 0x348
 800d6de:	2100      	movs	r1, #0
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f010 ffe7 	bl	801e6b4 <memset>
 800d6e6:	f44f 52d9 	mov.w	r2, #6944	; 0x1b20
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f010 ffe1 	bl	801e6b4 <memset>
 800d6f2:	f242 2204 	movw	r2, #8708	; 0x2204
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f010 ffdb 	bl	801e6b4 <memset>
	ClearBuffer(sbi, sizeof(SubbandInfo));

#endif

	mp3DecInfo->FrameHeaderPS =     (void *)fh;
	mp3DecInfo->SideInfoPS =        (void *)si;
 800d6fe:	e9c4 ba00 	strd	fp, sl, [r4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800d702:	e9c4 9802 	strd	r9, r8, [r4, #8]
	mp3DecInfo->DequantInfoPS =     (void *)di;
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800d706:	e9c4 7604 	strd	r7, r6, [r4, #16]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800d70a:	61a5      	str	r5, [r4, #24]
	DV_DEBUG_USART_Trace( COPY_DEBUG_BUFFER );
#endif
#endif

	return mp3DecInfo;
}
 800d70c:	4620      	mov	r0, r4
 800d70e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d712:	bf00      	nop
 800d714:	20016500 	.word	0x20016500
 800d718:	20013450 	.word	0x20013450
 800d71c:	200149e0 	.word	0x200149e0
 800d720:	20016cf0 	.word	0x20016cf0
 800d724:	20013798 	.word	0x20013798
 800d728:	20019010 	.word	0x20019010
 800d72c:	20018ef4 	.word	0x20018ef4
 800d730:	200137d0 	.word	0x200137d0

0800d734 <xmp3_FDCT32>:
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
// about 1ms faster in RAM
/*__attribute__ ((section (".data")))*/ void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d738:	b08b      	sub	sp, #44	; 0x2c
 800d73a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d73e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800d740:	9308      	str	r3, [sp, #32]
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800d742:	2c05      	cmp	r4, #5
 800d744:	f300 8338 	bgt.w	800ddb8 <xmp3_FDCT32+0x684>
		es = 6 - gb;
 800d748:	f1c4 0b06 	rsb	fp, r4, #6
		for (i = 0; i < 32; i++)
 800d74c:	1f03      	subs	r3, r0, #4
 800d74e:	f100 017c 	add.w	r1, r0, #124	; 0x7c
			buf[i] >>= es;
 800d752:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800d756:	fa42 f20b 	asr.w	r2, r2, fp
		for (i = 0; i < 32; i++)
 800d75a:	4299      	cmp	r1, r3
			buf[i] >>= es;
 800d75c:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 800d75e:	d1f8      	bne.n	800d752 <xmp3_FDCT32+0x1e>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800d760:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800d762:	6802      	ldr	r2, [r0, #0]
 800d764:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d766:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d768:	1a53      	subs	r3, r2, r1
 800d76a:	440a      	add	r2, r1
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800d76c:	49c0      	ldr	r1, [pc, #768]	; (800da70 <xmp3_FDCT32+0x33c>)
 800d76e:	fb81 6303 	smull	r6, r3, r1, r3
 800d772:	1b61      	subs	r1, r4, r5
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	442c      	add	r4, r5
 800d778:	4dbe      	ldr	r5, [pc, #760]	; (800da74 <xmp3_FDCT32+0x340>)
 800d77a:	fb85 6101 	smull	r6, r1, r5, r1
 800d77e:	1917      	adds	r7, r2, r4
 800d780:	0149      	lsls	r1, r1, #5
 800d782:	1b12      	subs	r2, r2, r4
 800d784:	6007      	str	r7, [r0, #0]
 800d786:	4cbc      	ldr	r4, [pc, #752]	; (800da78 <xmp3_FDCT32+0x344>)
 800d788:	fb84 5202 	smull	r5, r2, r4, r2
 800d78c:	0052      	lsls	r2, r2, #1
 800d78e:	63c2      	str	r2, [r0, #60]	; 0x3c
 800d790:	185a      	adds	r2, r3, r1
 800d792:	6402      	str	r2, [r0, #64]	; 0x40
 800d794:	1a5b      	subs	r3, r3, r1
 800d796:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(1, 1, 3, 1);
 800d79a:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800d79c:	6842      	ldr	r2, [r0, #4]
 800d79e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800d7a0:	6c44      	ldr	r4, [r0, #68]	; 0x44
	D32FP(0, 1, 5, 1);
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800d7a6:	1a53      	subs	r3, r2, r1
 800d7a8:	440a      	add	r2, r1
 800d7aa:	49b4      	ldr	r1, [pc, #720]	; (800da7c <xmp3_FDCT32+0x348>)
 800d7ac:	fb81 6303 	smull	r6, r3, r1, r3
 800d7b0:	1b29      	subs	r1, r5, r4
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	442c      	add	r4, r5
 800d7b6:	4db2      	ldr	r5, [pc, #712]	; (800da80 <xmp3_FDCT32+0x34c>)
 800d7b8:	fb85 6101 	smull	r6, r1, r5, r1
 800d7bc:	1915      	adds	r5, r2, r4
 800d7be:	00c9      	lsls	r1, r1, #3
 800d7c0:	1b12      	subs	r2, r2, r4
 800d7c2:	9506      	str	r5, [sp, #24]
 800d7c4:	6045      	str	r5, [r0, #4]
 800d7c6:	4caf      	ldr	r4, [pc, #700]	; (800da84 <xmp3_FDCT32+0x350>)
 800d7c8:	fb84 5202 	smull	r5, r2, r4, r2
 800d7cc:	0052      	lsls	r2, r2, #1
 800d7ce:	6382      	str	r2, [r0, #56]	; 0x38
 800d7d0:	185a      	adds	r2, r3, r1
 800d7d2:	6442      	str	r2, [r0, #68]	; 0x44
 800d7d4:	1a5b      	subs	r3, r3, r1
 800d7d6:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(2, 1, 3, 1);
 800d7da:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800d7dc:	6882      	ldr	r2, [r0, #8]
 800d7de:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800d7e0:	6c85      	ldr	r5, [r0, #72]	; 0x48
	D32FP(1, 1, 3, 1);
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800d7e6:	1b13      	subs	r3, r2, r4
 800d7e8:	4422      	add	r2, r4
 800d7ea:	4ca7      	ldr	r4, [pc, #668]	; (800da88 <xmp3_FDCT32+0x354>)
 800d7ec:	fb84 6303 	smull	r6, r3, r4, r3
 800d7f0:	1b4c      	subs	r4, r1, r5
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	4429      	add	r1, r5
 800d7f6:	4da5      	ldr	r5, [pc, #660]	; (800da8c <xmp3_FDCT32+0x358>)
 800d7f8:	fb85 6404 	smull	r6, r4, r5, r4
 800d7fc:	1856      	adds	r6, r2, r1
 800d7fe:	00e4      	lsls	r4, r4, #3
 800d800:	1a52      	subs	r2, r2, r1
 800d802:	9607      	str	r6, [sp, #28]
 800d804:	6086      	str	r6, [r0, #8]
 800d806:	49a2      	ldr	r1, [pc, #648]	; (800da90 <xmp3_FDCT32+0x35c>)
 800d808:	fb81 5202 	smull	r5, r2, r1, r2
 800d80c:	0052      	lsls	r2, r2, #1
 800d80e:	6342      	str	r2, [r0, #52]	; 0x34
 800d810:	191a      	adds	r2, r3, r4
 800d812:	6482      	str	r2, [r0, #72]	; 0x48
 800d814:	1b1b      	subs	r3, r3, r4
 800d816:	fb81 2303 	smull	r2, r3, r1, r3
	D32FP(3, 1, 2, 1);
 800d81a:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800d81c:	68c2      	ldr	r2, [r0, #12]
 800d81e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d820:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
	D32FP(2, 1, 3, 1);
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800d826:	1b13      	subs	r3, r2, r4
 800d828:	4422      	add	r2, r4
 800d82a:	4c9a      	ldr	r4, [pc, #616]	; (800da94 <xmp3_FDCT32+0x360>)
 800d82c:	fb84 6303 	smull	r6, r3, r4, r3
 800d830:	1b4c      	subs	r4, r1, r5
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	4429      	add	r1, r5
 800d836:	4d98      	ldr	r5, [pc, #608]	; (800da98 <xmp3_FDCT32+0x364>)
 800d838:	fb85 6404 	smull	r6, r4, r5, r4
 800d83c:	eb02 0e01 	add.w	lr, r2, r1
 800d840:	00a4      	lsls	r4, r4, #2
 800d842:	1a52      	subs	r2, r2, r1
 800d844:	f8c0 e00c 	str.w	lr, [r0, #12]
 800d848:	4994      	ldr	r1, [pc, #592]	; (800da9c <xmp3_FDCT32+0x368>)
 800d84a:	fb81 5202 	smull	r5, r2, r1, r2
 800d84e:	0052      	lsls	r2, r2, #1
 800d850:	6302      	str	r2, [r0, #48]	; 0x30
 800d852:	191a      	adds	r2, r3, r4
 800d854:	64c2      	str	r2, [r0, #76]	; 0x4c
 800d856:	1b1b      	subs	r3, r3, r4
 800d858:	fb81 2303 	smull	r2, r3, r1, r3
	D32FP(4, 1, 2, 1);
 800d85c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800d85e:	6902      	ldr	r2, [r0, #16]
 800d860:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d862:	6d05      	ldr	r5, [r0, #80]	; 0x50
	D32FP(3, 1, 2, 1);
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800d868:	1a53      	subs	r3, r2, r1
 800d86a:	440a      	add	r2, r1
 800d86c:	498c      	ldr	r1, [pc, #560]	; (800daa0 <xmp3_FDCT32+0x36c>)
 800d86e:	fb81 6303 	smull	r6, r3, r1, r3
 800d872:	1b61      	subs	r1, r4, r5
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	442c      	add	r4, r5
 800d878:	4d8a      	ldr	r5, [pc, #552]	; (800daa4 <xmp3_FDCT32+0x370>)
 800d87a:	fb85 6101 	smull	r6, r1, r5, r1
 800d87e:	1915      	adds	r5, r2, r4
 800d880:	0089      	lsls	r1, r1, #2
 800d882:	1b12      	subs	r2, r2, r4
 800d884:	9503      	str	r5, [sp, #12]
 800d886:	6105      	str	r5, [r0, #16]
 800d888:	4c87      	ldr	r4, [pc, #540]	; (800daa8 <xmp3_FDCT32+0x374>)
 800d88a:	fb84 5202 	smull	r5, r2, r4, r2
 800d88e:	0052      	lsls	r2, r2, #1
 800d890:	62c2      	str	r2, [r0, #44]	; 0x2c
 800d892:	185a      	adds	r2, r3, r1
 800d894:	6502      	str	r2, [r0, #80]	; 0x50
 800d896:	1a5b      	subs	r3, r3, r1
 800d898:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(5, 1, 1, 2);
 800d89c:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800d89e:	6942      	ldr	r2, [r0, #20]
 800d8a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d8a2:	6d45      	ldr	r5, [r0, #84]	; 0x54
	D32FP(4, 1, 2, 1);
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800d8a8:	1a53      	subs	r3, r2, r1
 800d8aa:	440a      	add	r2, r1
 800d8ac:	497f      	ldr	r1, [pc, #508]	; (800daac <xmp3_FDCT32+0x378>)
 800d8ae:	fb81 6303 	smull	r6, r3, r1, r3
 800d8b2:	1b61      	subs	r1, r4, r5
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	442c      	add	r4, r5
 800d8b8:	4d7d      	ldr	r5, [pc, #500]	; (800dab0 <xmp3_FDCT32+0x37c>)
 800d8ba:	fb85 6101 	smull	r6, r1, r5, r1
 800d8be:	eb02 0804 	add.w	r8, r2, r4
 800d8c2:	0049      	lsls	r1, r1, #1
 800d8c4:	1b12      	subs	r2, r2, r4
 800d8c6:	f8c0 8014 	str.w	r8, [r0, #20]
 800d8ca:	4c7a      	ldr	r4, [pc, #488]	; (800dab4 <xmp3_FDCT32+0x380>)
 800d8cc:	fb84 5202 	smull	r5, r2, r4, r2
 800d8d0:	0092      	lsls	r2, r2, #2
 800d8d2:	6282      	str	r2, [r0, #40]	; 0x28
 800d8d4:	185a      	adds	r2, r3, r1
 800d8d6:	6542      	str	r2, [r0, #84]	; 0x54
 800d8d8:	1a5b      	subs	r3, r3, r1
 800d8da:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(6, 1, 1, 2);
 800d8de:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800d8e0:	6982      	ldr	r2, [r0, #24]
 800d8e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d8e4:	6d85      	ldr	r5, [r0, #88]	; 0x58
	D32FP(5, 1, 1, 2);
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800d8ea:	1a53      	subs	r3, r2, r1
 800d8ec:	440a      	add	r2, r1
 800d8ee:	4972      	ldr	r1, [pc, #456]	; (800dab8 <xmp3_FDCT32+0x384>)
 800d8f0:	fb81 6303 	smull	r6, r3, r1, r3
 800d8f4:	1b61      	subs	r1, r4, r5
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	442c      	add	r4, r5
 800d8fa:	4d70      	ldr	r5, [pc, #448]	; (800dabc <xmp3_FDCT32+0x388>)
 800d8fc:	fb85 6101 	smull	r6, r1, r5, r1
 800d900:	eb02 0904 	add.w	r9, r2, r4
 800d904:	0049      	lsls	r1, r1, #1
 800d906:	1b12      	subs	r2, r2, r4
 800d908:	f8c0 9018 	str.w	r9, [r0, #24]
 800d90c:	4c6c      	ldr	r4, [pc, #432]	; (800dac0 <xmp3_FDCT32+0x38c>)
 800d90e:	fb84 5202 	smull	r5, r2, r4, r2
 800d912:	0092      	lsls	r2, r2, #2
 800d914:	6242      	str	r2, [r0, #36]	; 0x24
 800d916:	185a      	adds	r2, r3, r1
 800d918:	6582      	str	r2, [r0, #88]	; 0x58
 800d91a:	1a5b      	subs	r3, r3, r1
 800d91c:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(7, 1, 1, 4);
 800d920:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800d922:	69c2      	ldr	r2, [r0, #28]
 800d924:	6a06      	ldr	r6, [r0, #32]
 800d926:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
	D32FP(6, 1, 1, 2);
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800d92c:	1a53      	subs	r3, r2, r1
 800d92e:	440a      	add	r2, r1
 800d930:	4964      	ldr	r1, [pc, #400]	; (800dac4 <xmp3_FDCT32+0x390>)
 800d932:	fb81 5303 	smull	r5, r3, r1, r3
 800d936:	4d64      	ldr	r5, [pc, #400]	; (800dac8 <xmp3_FDCT32+0x394>)
 800d938:	1b31      	subs	r1, r6, r4
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	4434      	add	r4, r6
 800d93e:	fb85 6101 	smull	r6, r1, r5, r1
 800d942:	eb02 0c04 	add.w	ip, r2, r4
 800d946:	0049      	lsls	r1, r1, #1
 800d948:	1b12      	subs	r2, r2, r4
 800d94a:	f8c0 c01c 	str.w	ip, [r0, #28]
 800d94e:	4c5f      	ldr	r4, [pc, #380]	; (800dacc <xmp3_FDCT32+0x398>)
 800d950:	fb84 5202 	smull	r5, r2, r4, r2
 800d954:	0112      	lsls	r2, r2, #4
 800d956:	6202      	str	r2, [r0, #32]
 800d958:	185a      	adds	r2, r3, r1
 800d95a:	65c2      	str	r2, [r0, #92]	; 0x5c
 800d95c:	1a5b      	subs	r3, r3, r1
 800d95e:	fb84 2303 	smull	r2, r3, r4, r3
 800d962:	011b      	lsls	r3, r3, #4
 800d964:	4a5a      	ldr	r2, [pc, #360]	; (800dad0 <xmp3_FDCT32+0x39c>)
 800d966:	4e5b      	ldr	r6, [pc, #364]	; (800dad4 <xmp3_FDCT32+0x3a0>)
 800d968:	4c5b      	ldr	r4, [pc, #364]	; (800dad8 <xmp3_FDCT32+0x3a4>)
 800d96a:	6603      	str	r3, [r0, #96]	; 0x60
 800d96c:	4b5b      	ldr	r3, [pc, #364]	; (800dadc <xmp3_FDCT32+0x3a8>)
 800d96e:	495c      	ldr	r1, [pc, #368]	; (800dae0 <xmp3_FDCT32+0x3ac>)
 800d970:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800daf0 <xmp3_FDCT32+0x3bc>
 800d974:	4d5b      	ldr	r5, [pc, #364]	; (800dae4 <xmp3_FDCT32+0x3b0>)
 800d976:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d97a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d97e:	9b07      	ldr	r3, [sp, #28]
 800d980:	9007      	str	r0, [sp, #28]
 800d982:	f100 0220 	add.w	r2, r0, #32
 800d986:	4670      	mov	r0, lr
 800d988:	46b6      	mov	lr, r6
 800d98a:	4626      	mov	r6, r4
 800d98c:	9c06      	ldr	r4, [sp, #24]
 800d98e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d992:	9103      	str	r1, [sp, #12]

	/* second pass */
	for (i = 4; i > 0; i--) {
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800d994:	eba7 010c 	sub.w	r1, r7, ip
 800d998:	4467      	add	r7, ip
 800d99a:	fb86 c101 	smull	ip, r1, r6, r1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d99e:	eba0 060b 	sub.w	r6, r0, fp
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800d9a2:	0049      	lsls	r1, r1, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d9a4:	4458      	add	r0, fp
 800d9a6:	fb8e c606 	smull	ip, r6, lr, r6
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9aa:	eba7 0c00 	sub.w	ip, r7, r0
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d9ae:	00f6      	lsls	r6, r6, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9b0:	4438      	add	r0, r7
 800d9b2:	fb85 7c0c 	smull	r7, ip, r5, ip
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9b6:	1b8f      	subs	r7, r1, r6
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9bc:	440e      	add	r6, r1
 800d9be:	4639      	mov	r1, r7
 800d9c0:	fb85 7101 	smull	r7, r1, r5, r1

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9c4:	eba4 0509 	sub.w	r5, r4, r9
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9c8:	ea4f 0b41 	mov.w	fp, r1, lsl #1
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9cc:	444c      	add	r4, r9
 800d9ce:	9903      	ldr	r1, [sp, #12]
 800d9d0:	fb81 7505 	smull	r7, r5, r1, r5
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9d4:	eba3 0708 	sub.w	r7, r3, r8
 800d9d8:	9901      	ldr	r1, [sp, #4]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9da:	006d      	lsls	r5, r5, #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9dc:	4443      	add	r3, r8
 800d9de:	fb81 e707 	smull	lr, r7, r1, r7
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d9e2:	eba4 0e03 	sub.w	lr, r4, r3
 800d9e6:	9902      	ldr	r1, [sp, #8]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9e8:	007f      	lsls	r7, r7, #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d9ea:	4423      	add	r3, r4
 800d9ec:	fb81 4e0e 	smull	r4, lr, r1, lr
 800d9f0:	ea4f 048e 	mov.w	r4, lr, lsl #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800d9f4:	eba5 0e07 	sub.w	lr, r5, r7
 800d9f8:	442f      	add	r7, r5
 800d9fa:	fb81 5e0e 	smull	r5, lr, r1, lr
 800d9fe:	493a      	ldr	r1, [pc, #232]	; (800dae8 <xmp3_FDCT32+0x3b4>)
 800da00:	ea4f 058e 	mov.w	r5, lr, lsl #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da04:	eba0 0803 	sub.w	r8, r0, r3
 800da08:	fb81 e808 	smull	lr, r8, r1, r8
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800da0c:	ebac 0e04 	sub.w	lr, ip, r4
 800da10:	fb81 9e0e 	smull	r9, lr, r1, lr
 800da14:	4464      	add	r4, ip
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da16:	4403      	add	r3, r0
		buf[0] = b0;	    buf[1] = b1;
		buf[2] = b2 + b3;	buf[3] = b3;
 800da18:	eb04 044e 	add.w	r4, r4, lr, lsl #1
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da1c:	ea4f 0848 	mov.w	r8, r8, lsl #1
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800da20:	ea4f 004e 	mov.w	r0, lr, lsl #1
		buf[2] = b2 + b3;	buf[3] = b3;
 800da24:	e942 8407 	strd	r8, r4, [r2, #-28]
		buf[0] = b0;	    buf[1] = b1;
 800da28:	f842 3c20 	str.w	r3, [r2, #-32]
		buf[2] = b2 + b3;	buf[3] = b3;
 800da2c:	f842 0c14 	str.w	r0, [r2, #-20]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da30:	1bf3      	subs	r3, r6, r7
 800da32:	460c      	mov	r4, r1
 800da34:	fb81 0303 	smull	r0, r3, r1, r3
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800da38:	ebab 0005 	sub.w	r0, fp, r5
 800da3c:	eb0b 0105 	add.w	r1, fp, r5
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	4625      	mov	r5, r4
 800da44:	fb85 4000 	smull	r4, r0, r5, r0
		b6 += b7;
 800da48:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800da4c:	0044      	lsls	r4, r0, #1
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da4e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
		buf[6] = b5 + b6;	buf[7] = b7;
 800da52:	440b      	add	r3, r1
 800da54:	e942 3402 	strd	r3, r4, [r2, #-8]
	for (i = 4; i > 0; i--) {
 800da58:	4b24      	ldr	r3, [pc, #144]	; (800daec <xmp3_FDCT32+0x3b8>)
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da5a:	443e      	add	r6, r7
	for (i = 4; i > 0; i--) {
 800da5c:	f10a 0a18 	add.w	sl, sl, #24
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da60:	440e      	add	r6, r1
	for (i = 4; i > 0; i--) {
 800da62:	4553      	cmp	r3, sl
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da64:	e942 6004 	strd	r6, r0, [r2, #-16]
	for (i = 4; i > 0; i--) {
 800da68:	f102 0220 	add.w	r2, r2, #32
 800da6c:	d05e      	beq.n	800db2c <xmp3_FDCT32+0x3f8>
 800da6e:	e041      	b.n	800daf4 <xmp3_FDCT32+0x3c0>
 800da70:	4013c251 	.word	0x4013c251
 800da74:	518522fb 	.word	0x518522fb
 800da78:	404f4672 	.word	0x404f4672
 800da7c:	40b345bd 	.word	0x40b345bd
 800da80:	6d0b20cf 	.word	0x6d0b20cf
 800da84:	42e13c10 	.word	0x42e13c10
 800da88:	41fa2d6d 	.word	0x41fa2d6d
 800da8c:	41d95790 	.word	0x41d95790
 800da90:	48919f44 	.word	0x48919f44
 800da94:	43f93421 	.word	0x43f93421
 800da98:	5efc8d96 	.word	0x5efc8d96
 800da9c:	52cb0e63 	.word	0x52cb0e63
 800daa0:	46cc1bc4 	.word	0x46cc1bc4
 800daa4:	4ad81a97 	.word	0x4ad81a97
 800daa8:	64e2402e 	.word	0x64e2402e
 800daac:	4a9d9cf0 	.word	0x4a9d9cf0
 800dab0:	7c7d1db3 	.word	0x7c7d1db3
 800dab4:	43e224a9 	.word	0x43e224a9
 800dab8:	4fae3711 	.word	0x4fae3711
 800dabc:	6b6fcf26 	.word	0x6b6fcf26
 800dac0:	6e3c92c1 	.word	0x6e3c92c1
 800dac4:	56601ea7 	.word	0x56601ea7
 800dac8:	5f4cf6eb 	.word	0x5f4cf6eb
 800dacc:	519e4e04 	.word	0x519e4e04
 800dad0:	73326bbf 	.word	0x73326bbf
 800dad4:	52036742 	.word	0x52036742
 800dad8:	4140fb46 	.word	0x4140fb46
 800dadc:	539eba45 	.word	0x539eba45
 800dae0:	4cf8de88 	.word	0x4cf8de88
 800dae4:	4545e9ef 	.word	0x4545e9ef
 800dae8:	5a82799a 	.word	0x5a82799a
 800daec:	08025734 	.word	0x08025734
 800daf0:	080256d4 	.word	0x080256d4
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800daf4:	e9da 531a 	ldrd	r5, r3, [sl, #104]	; 0x68
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800daf8:	f8da 1074 	ldr.w	r1, [sl, #116]	; 0x74
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800dafc:	9303      	str	r3, [sp, #12]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800dafe:	f8da 3070 	ldr.w	r3, [sl, #112]	; 0x70
 800db02:	9301      	str	r3, [sp, #4]
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800db04:	e952 0b05 	ldrd	r0, fp, [r2, #-20]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800db08:	f8da 6060 	ldr.w	r6, [sl, #96]	; 0x60
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800db0c:	f852 7c20 	ldr.w	r7, [r2, #-32]
 800db10:	f852 cc04 	ldr.w	ip, [r2, #-4]
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800db14:	f8da e064 	ldr.w	lr, [sl, #100]	; 0x64
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800db18:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 800db1c:	f852 9c08 	ldr.w	r9, [r2, #-8]
 800db20:	f852 3c18 	ldr.w	r3, [r2, #-24]
 800db24:	f852 8c0c 	ldr.w	r8, [r2, #-12]
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800db28:	9102      	str	r1, [sp, #8]
 800db2a:	e733      	b.n	800d994 <xmp3_FDCT32+0x260>
		buf += 8;
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db2c:	9a05      	ldr	r2, [sp, #20]
 800db2e:	9b08      	ldr	r3, [sp, #32]
 800db30:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800db34:	9807      	ldr	r0, [sp, #28]
 800db36:	1ad2      	subs	r2, r2, r3
 800db38:	f002 0207 	and.w	r2, r2, #7
 800db3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db40:	0091      	lsls	r1, r2, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 812c 	beq.w	800dda0 <xmp3_FDCT32+0x66c>
 800db48:	9d04      	ldr	r5, [sp, #16]
	s = buf[ 0];				d[0] = d[8] = s;
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db4a:	9b05      	ldr	r3, [sp, #20]
	s = buf[ 0];				d[0] = d[8] = s;
 800db4c:	6804      	ldr	r4, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db4e:	186e      	adds	r6, r5, r1
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db50:	009b      	lsls	r3, r3, #2
	s = buf[ 0];				d[0] = d[8] = s;
 800db52:	6234      	str	r4, [r6, #32]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db54:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 800db58:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db5c:	2400      	movs	r4, #0
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db5e:	9d04      	ldr	r5, [sp, #16]
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
	s = buf[15];				d[0] = d[8] = s;	d += 64;
	s = tmp;					d[0] = d[8] = s;

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db60:	f5a1 617c 	sub.w	r1, r1, #4032	; 0xfc0
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db64:	18ea      	adds	r2, r5, r3
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db66:	440c      	add	r4, r1
	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800db68:	6841      	ldr	r1, [r0, #4]
 800db6a:	6211      	str	r1, [r2, #32]
 800db6c:	50e9      	str	r1, [r5, r3]
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db6e:	192b      	adds	r3, r5, r4
	tmp = buf[25] + buf[29];
 800db70:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800db72:	6f45      	ldr	r5, [r0, #116]	; 0x74
 800db74:	4429      	add	r1, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800db76:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800db78:	440d      	add	r5, r1
 800db7a:	f8c2 5120 	str.w	r5, [r2, #288]	; 0x120
 800db7e:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800db82:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800db84:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db86:	443d      	add	r5, r7
 800db88:	f8c2 5220 	str.w	r5, [r2, #544]	; 0x220
 800db8c:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800db90:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800db92:	4429      	add	r1, r5
 800db94:	f8c2 1320 	str.w	r1, [r2, #800]	; 0x320
 800db98:	f8c2 1300 	str.w	r1, [r2, #768]	; 0x300
	tmp = buf[29] + buf[27];
 800db9c:	6f45      	ldr	r5, [r0, #116]	; 0x74
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800db9e:	6947      	ldr	r7, [r0, #20]
	tmp = buf[29] + buf[27];
 800dba0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800dba2:	f8c2 7420 	str.w	r7, [r2, #1056]	; 0x420
 800dba6:	f8c2 7400 	str.w	r7, [r2, #1024]	; 0x400
	tmp = buf[29] + buf[27];
 800dbaa:	4429      	add	r1, r5
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbac:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800dbae:	440d      	add	r5, r1
 800dbb0:	f8c2 5520 	str.w	r5, [r2, #1312]	; 0x520
 800dbb4:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800dbb8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800dbba:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dbbc:	443d      	add	r5, r7
 800dbbe:	f8c2 5620 	str.w	r5, [r2, #1568]	; 0x620
 800dbc2:	f8c2 5600 	str.w	r5, [r2, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbc6:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800dbc8:	4429      	add	r1, r5
 800dbca:	f8c2 1720 	str.w	r1, [r2, #1824]	; 0x720
 800dbce:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
	tmp = buf[27] + buf[31];
 800dbd2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800dbd4:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800dbd6:	4429      	add	r1, r5
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800dbd8:	68c5      	ldr	r5, [r0, #12]
 800dbda:	f8c2 5820 	str.w	r5, [r2, #2080]	; 0x820
 800dbde:	f8c2 5800 	str.w	r5, [r2, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbe2:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800dbe4:	440d      	add	r5, r1
 800dbe6:	f8c2 5920 	str.w	r5, [r2, #2336]	; 0x920
 800dbea:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800dbee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800dbf0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800dbf2:	443d      	add	r5, r7
 800dbf4:	f8c2 5a20 	str.w	r5, [r2, #2592]	; 0xa20
 800dbf8:	f8c2 5a00 	str.w	r5, [r2, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbfc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800dbfe:	4429      	add	r1, r5
 800dc00:	f8c2 1b20 	str.w	r1, [r2, #2848]	; 0xb20
 800dc04:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dc08:	69c1      	ldr	r1, [r0, #28]
	tmp = buf[31];
 800dc0a:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dc0c:	f8c2 1c20 	str.w	r1, [r2, #3104]	; 0xc20
 800dc10:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc14:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800dc16:	4429      	add	r1, r5
 800dc18:	f8c2 1d20 	str.w	r1, [r2, #3360]	; 0xd20
 800dc1c:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800dc22:	f8c2 1e20 	str.w	r1, [r2, #3616]	; 0xe20
	s = tmp;					d[0] = d[8] = s;
 800dc26:	f8c2 5f20 	str.w	r5, [r2, #3872]	; 0xf20
 800dc2a:	f8c2 5f00 	str.w	r5, [r2, #3840]	; 0xf00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc2e:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800dc32:	9d04      	ldr	r5, [sp, #16]
 800dc34:	6841      	ldr	r1, [r0, #4]
 800dc36:	6219      	str	r1, [r3, #32]
 800dc38:	5129      	str	r1, [r5, r4]

	tmp = buf[30] + buf[25];
 800dc3a:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800dc3c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800dc3e:	4421      	add	r1, r4
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc40:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800dc42:	440c      	add	r4, r1
 800dc44:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 800dc48:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800dc4c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800dc50:	442c      	add	r4, r5
 800dc52:	f8c3 4220 	str.w	r4, [r3, #544]	; 0x220
 800dc56:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc5a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800dc5c:	4421      	add	r1, r4
 800dc5e:	f8c3 1320 	str.w	r1, [r3, #800]	; 0x320
 800dc62:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800dc66:	6981      	ldr	r1, [r0, #24]
 800dc68:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
 800dc6c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800dc70:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800dc72:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800dc74:	4421      	add	r1, r4
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc76:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800dc78:	440c      	add	r4, r1
 800dc7a:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
 800dc7e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800dc82:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800dc84:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc86:	442c      	add	r4, r5
 800dc88:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
 800dc8c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc90:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dc92:	4421      	add	r1, r4
 800dc94:	f8c3 1720 	str.w	r1, [r3, #1824]	; 0x720
 800dc98:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800dc9c:	6881      	ldr	r1, [r0, #8]
 800dc9e:	f8c3 1820 	str.w	r1, [r3, #2080]	; 0x820
 800dca2:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800dca6:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800dca8:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800dcaa:	4421      	add	r1, r4
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dcae:	440c      	add	r4, r1
 800dcb0:	f8c3 4920 	str.w	r4, [r3, #2336]	; 0x920
 800dcb4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800dcb8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800dcba:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800dcbc:	442c      	add	r4, r5
 800dcbe:	f8c3 4a20 	str.w	r4, [r3, #2592]	; 0xa20
 800dcc2:	f8c3 4a00 	str.w	r4, [r3, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcc6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800dcc8:	4421      	add	r1, r4
 800dcca:	f8c3 1b20 	str.w	r1, [r3, #2848]	; 0xb20
 800dcce:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800dcd2:	6901      	ldr	r1, [r0, #16]
 800dcd4:	f8c3 1c20 	str.w	r1, [r3, #3104]	; 0xc20
 800dcd8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800dcdc:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800dcde:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800dce0:	4421      	add	r1, r4
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dce2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800dce4:	440c      	add	r4, r1
 800dce6:	f8c3 4d20 	str.w	r4, [r3, #3360]	; 0xd20
 800dcea:	f8c3 4d00 	str.w	r4, [r3, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800dcee:	6a04      	ldr	r4, [r0, #32]
 800dcf0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800dcf2:	442c      	add	r4, r5
 800dcf4:	f8c3 4e20 	str.w	r4, [r3, #3616]	; 0xe20
 800dcf8:	f8c3 4e00 	str.w	r4, [r3, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800dcfc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800dcfe:	4401      	add	r1, r0
 800dd00:	f8c3 1f20 	str.w	r1, [r3, #3872]	; 0xf20
 800dd04:	f8c3 1f00 	str.w	r1, [r3, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800dd08:	f1bb 0f00 	cmp.w	fp, #0
 800dd0c:	d045      	beq.n	800dd9a <xmp3_FDCT32+0x666>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800dd0e:	6831      	ldr	r1, [r6, #0]
 800dd10:	f1cb 041f 	rsb	r4, fp, #31
 800dd14:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800dd18:	fa41 f004 	asr.w	r0, r1, r4
 800dd1c:	fa25 f50b 	lsr.w	r5, r5, fp
 800dd20:	ebb0 7fe1 	cmp.w	r0, r1, asr #31
 800dd24:	ea4f 77e1 	mov.w	r7, r1, asr #31
 800dd28:	f105 35ff 	add.w	r5, r5, #4294967295
 800dd2c:	bf18      	it	ne
 800dd2e:	ea85 0107 	eorne.w	r1, r5, r7
 800dd32:	fa01 f10b 	lsl.w	r1, r1, fp
 800dd36:	f102 0020 	add.w	r0, r2, #32
 800dd3a:	6231      	str	r1, [r6, #32]
 800dd3c:	6031      	str	r1, [r6, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800dd3e:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800dd42:	f850 1c20 	ldr.w	r1, [r0, #-32]
 800dd46:	fa41 f604 	asr.w	r6, r1, r4
 800dd4a:	ebb6 7fe1 	cmp.w	r6, r1, asr #31
 800dd4e:	ea4f 77e1 	mov.w	r7, r1, asr #31
 800dd52:	bf18      	it	ne
 800dd54:	ea85 0107 	eorne.w	r1, r5, r7
 800dd58:	fa01 f10b 	lsl.w	r1, r1, fp
 800dd5c:	6001      	str	r1, [r0, #0]
 800dd5e:	f840 1c20 	str.w	r1, [r0, #-32]
		for (i = 16; i <= 31; i++) {
 800dd62:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800dd66:	4282      	cmp	r2, r0
 800dd68:	d1eb      	bne.n	800dd42 <xmp3_FDCT32+0x60e>
 800dd6a:	f103 0120 	add.w	r1, r3, #32
 800dd6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800dd72:	f851 2c20 	ldr.w	r2, [r1, #-32]
 800dd76:	fa42 f004 	asr.w	r0, r2, r4
 800dd7a:	ebb0 7fe2 	cmp.w	r0, r2, asr #31
 800dd7e:	ea4f 76e2 	mov.w	r6, r2, asr #31
 800dd82:	bf18      	it	ne
 800dd84:	ea85 0206 	eorne.w	r2, r5, r6
 800dd88:	fa02 f20b 	lsl.w	r2, r2, fp
 800dd8c:	600a      	str	r2, [r1, #0]
 800dd8e:	f841 2c20 	str.w	r2, [r1, #-32]
		for (i = 15; i >= 0; i--) {
 800dd92:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800dd96:	428b      	cmp	r3, r1
 800dd98:	d1eb      	bne.n	800dd72 <xmp3_FDCT32+0x63e>
		}
	}
}
 800dd9a:	b00b      	add	sp, #44	; 0x2c
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dda0:	9d04      	ldr	r5, [sp, #16]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800dda2:	9b05      	ldr	r3, [sp, #20]
	s = buf[ 0];				d[0] = d[8] = s;
 800dda4:	6804      	ldr	r4, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dda6:	f501 5288 	add.w	r2, r1, #4352	; 0x1100
 800ddaa:	18ae      	adds	r6, r5, r2
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800ddac:	009b      	lsls	r3, r3, #2
	s = buf[ 0];				d[0] = d[8] = s;
 800ddae:	6234      	str	r4, [r6, #32]
 800ddb0:	50ac      	str	r4, [r5, r2]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800ddb2:	f44f 5488 	mov.w	r4, #4352	; 0x1100
 800ddb6:	e6d2      	b.n	800db5e <xmp3_FDCT32+0x42a>
	es = 0;
 800ddb8:	f04f 0b00 	mov.w	fp, #0
 800ddbc:	e4d0      	b.n	800d760 <xmp3_FDCT32+0x2c>
 800ddbe:	bf00      	nop

0800ddc0 <xmp3_Dequantize>:
 *                round to PCM (>> by 15 less than we otherwise would have).
 *              Equivalently, we can think of the dequantized coefficients as 
 *                Q(DQ_FRACBITS_OUT - 15) with no implicit bias. 
 **************************************************************************************/
int Dequantize(MP3DecInfo *mp3DecInfo, int gr)
{
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	b08f      	sub	sp, #60	; 0x3c
 800ddc6:	9108      	str	r1, [sp, #32]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	f000 8131 	beq.w	800e030 <xmp3_Dequantize+0x270>
 800ddce:	f8d0 9000 	ldr.w	r9, [r0]
 800ddd2:	f1b9 0f00 	cmp.w	r9, #0
 800ddd6:	f000 812b 	beq.w	800e030 <xmp3_Dequantize+0x270>
 800ddda:	6843      	ldr	r3, [r0, #4]
 800dddc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 8126 	beq.w	800e030 <xmp3_Dequantize+0x270>
 800dde4:	6883      	ldr	r3, [r0, #8]
 800dde6:	930a      	str	r3, [sp, #40]	; 0x28
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 8121 	beq.w	800e030 <xmp3_Dequantize+0x270>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ddee:	68c3      	ldr	r3, [r0, #12]
 800ddf0:	9307      	str	r3, [sp, #28]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f000 811c 	beq.w	800e030 <xmp3_Dequantize+0x270>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ddf8:	6901      	ldr	r1, [r0, #16]
 800ddfa:	2900      	cmp	r1, #0
 800ddfc:	f000 8118 	beq.w	800e030 <xmp3_Dequantize+0x270>
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800de00:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
	mOut[0] = mOut[1] = 0;
 800de04:	2500      	movs	r5, #0
	cbi = di->cbi;
 800de06:	f501 7246 	add.w	r2, r1, #792	; 0x318
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800de0a:	42ab      	cmp	r3, r5
	mOut[0] = mOut[1] = 0;
 800de0c:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	cbi = di->cbi;
 800de10:	920b      	str	r2, [sp, #44]	; 0x2c
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800de12:	dd30      	ble.n	800de76 <xmp3_Dequantize+0xb6>
 800de14:	9b08      	ldr	r3, [sp, #32]
 800de16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de18:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800de1c:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
 800de20:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 800de24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de26:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800de2a:	9b07      	ldr	r3, [sp, #28]
 800de2c:	f503 5790 	add.w	r7, r3, #4608	; 0x1200
 800de30:	3704      	adds	r7, #4
 800de32:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 800de36:	4644      	mov	r4, r8
 800de38:	3628      	adds	r6, #40	; 0x28
 800de3a:	46b8      	mov	r8, r7
 800de3c:	469b      	mov	fp, r3
 800de3e:	4657      	mov	r7, sl
 800de40:	4682      	mov	sl, r0
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800de42:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800de46:	9600      	str	r6, [sp, #0]
 800de48:	f1a8 0204 	sub.w	r2, r8, #4
 800de4c:	4658      	mov	r0, fp
 800de4e:	464b      	mov	r3, r9
 800de50:	9106      	str	r1, [sp, #24]
 800de52:	f000 f9e5 	bl	800e220 <xmp3_DequantChannel>
 800de56:	f848 0f04 	str.w	r0, [r8, #4]!
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800de5a:	f8da 37bc 	ldr.w	r3, [sl, #1980]	; 0x7bc
 800de5e:	9906      	ldr	r1, [sp, #24]
 800de60:	3501      	adds	r5, #1
 800de62:	42ab      	cmp	r3, r5
 800de64:	f106 0648 	add.w	r6, r6, #72	; 0x48
 800de68:	f104 043e 	add.w	r4, r4, #62	; 0x3e
 800de6c:	f107 0718 	add.w	r7, r7, #24
 800de70:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 800de74:	dce5      	bgt.n	800de42 <xmp3_Dequantize+0x82>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800de76:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d06d      	beq.n	800df5a <xmp3_Dequantize+0x19a>
 800de7e:	9b07      	ldr	r3, [sp, #28]
 800de80:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800de84:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dd69      	ble.n	800df60 <xmp3_Dequantize+0x1a0>
 800de8c:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800de90:	2b00      	cmp	r3, #0
 800de92:	dd65      	ble.n	800df60 <xmp3_Dequantize+0x1a0>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800de94:	0843      	lsrs	r3, r0, #1
 800de96:	f000 80ce 	beq.w	800e036 <xmp3_Dequantize+0x276>
		if (fh->modeExt & 0x01) {
 800de9a:	07c2      	lsls	r2, r0, #31
 800de9c:	d50c      	bpl.n	800deb8 <xmp3_Dequantize+0xf8>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800de9e:	f8d1 3330 	ldr.w	r3, [r1, #816]	; 0x330
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 80af 	bne.w	800e006 <xmp3_Dequantize+0x246>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800dea8:	f8d1 3344 	ldr.w	r3, [r1, #836]	; 0x344
 800deac:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 800deb0:	3301      	adds	r3, #1
 800deb2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800deb6:	e004      	b.n	800dec2 <xmp3_Dequantize+0x102>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800deb8:	e9d4 3180 	ldrd	r3, r1, [r4, #512]	; 0x200
 800debc:	4299      	cmp	r1, r3
 800debe:	bfb8      	it	lt
 800dec0:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800dec2:	ad0c      	add	r5, sp, #48	; 0x30
 800dec4:	9807      	ldr	r0, [sp, #28]
 800dec6:	462a      	mov	r2, r5
 800dec8:	f003 f946 	bl	8011158 <xmp3_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800decc:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800ded0:	07c3      	lsls	r3, r0, #31
 800ded2:	d51f      	bpl.n	800df14 <xmp3_Dequantize+0x154>
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
 800ded4:	f899 3000 	ldrb.w	r3, [r9]
		nSamps = hi->nonZeroBound[0];
 800ded8:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
		if (fh->ver == MPEG1) {
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d175      	bne.n	800dfcc <xmp3_Dequantize+0x20c>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800dee0:	9503      	str	r5, [sp, #12]
 800dee2:	1045      	asrs	r5, r0, #1
 800dee4:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 800dee8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800deea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800deee:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 800def2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800def4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800def8:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800defc:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800df00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df06:	9200      	str	r2, [sp, #0]
 800df08:	333e      	adds	r3, #62	; 0x3e
 800df0a:	464a      	mov	r2, r9
 800df0c:	f003 f958 	bl	80111c0 <xmp3_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800df10:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800df14:	b308      	cbz	r0, 800df5a <xmp3_Dequantize+0x19a>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800df16:	9b0c      	ldr	r3, [sp, #48]	; 0x30

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 8081 	beq.w	800e020 <xmp3_Dequantize+0x260>
		return (sizeof(int) * 8);

	numZeros = 0;
	while (!(x & 0x80000000)) {
 800df1e:	f2c0 8084 	blt.w	800e02a <xmp3_Dequantize+0x26a>
	numZeros = 0;
 800df22:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	4611      	mov	r1, r2
		numZeros++;
 800df28:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800df2c:	d5fa      	bpl.n	800df24 <xmp3_Dequantize+0x164>
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800df2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800df30:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
	if (!x)
 800df34:	2b00      	cmp	r3, #0
 800df36:	d071      	beq.n	800e01c <xmp3_Dequantize+0x25c>
	while (!(x & 0x80000000)) {
 800df38:	db74      	blt.n	800e024 <xmp3_Dequantize+0x264>
	numZeros = 0;
 800df3a:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800df3c:	005b      	lsls	r3, r3, #1
 800df3e:	4611      	mov	r1, r2
		numZeros++;
 800df40:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800df44:	d5fa      	bpl.n	800df3c <xmp3_Dequantize+0x17c>
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800df46:	e9d4 2380 	ldrd	r2, r3, [r4, #512]	; 0x200
 800df4a:	4293      	cmp	r3, r2
 800df4c:	bfb8      	it	lt
 800df4e:	4613      	movlt	r3, r2
		hi->nonZeroBound[0] = nSamps;
		hi->nonZeroBound[1] = nSamps;
 800df50:	e9c4 3380 	strd	r3, r3, [r4, #512]	; 0x200
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800df54:	f8c4 120c 	str.w	r1, [r4, #524]	; 0x20c
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800df58:	2000      	movs	r0, #0
}
 800df5a:	b00f      	add	sp, #60	; 0x3c
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df60:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
 800df64:	2d00      	cmp	r5, #0
 800df66:	dd15      	ble.n	800df94 <xmp3_Dequantize+0x1d4>
 800df68:	9b07      	ldr	r3, [sp, #28]
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df6a:	4f34      	ldr	r7, [pc, #208]	; (800e03c <xmp3_Dequantize+0x27c>)
 800df6c:	3b04      	subs	r3, #4
 800df6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800df72:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800df76:	e002      	b.n	800df7e <xmp3_Dequantize+0x1be>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df78:	429d      	cmp	r5, r3
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df7a:	601f      	str	r7, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df7c:	d00a      	beq.n	800df94 <xmp3_Dequantize+0x1d4>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df7e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800df82:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800df86:	ddf7      	ble.n	800df78 <xmp3_Dequantize+0x1b8>
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800df88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800df8c:	bfa8      	it	ge
 800df8e:	601e      	strge	r6, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df90:	429d      	cmp	r5, r3
 800df92:	d1f4      	bne.n	800df7e <xmp3_Dequantize+0x1be>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800df94:	f8d4 5204 	ldr.w	r5, [r4, #516]	; 0x204
 800df98:	2d00      	cmp	r5, #0
 800df9a:	f77f af7b 	ble.w	800de94 <xmp3_Dequantize+0xd4>
 800df9e:	9b07      	ldr	r3, [sp, #28]
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800dfa0:	4f26      	ldr	r7, [pc, #152]	; (800e03c <xmp3_Dequantize+0x27c>)
 800dfa2:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 800dfa6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800dfaa:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800dfae:	e003      	b.n	800dfb8 <xmp3_Dequantize+0x1f8>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800dfb0:	601f      	str	r7, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800dfb2:	42ab      	cmp	r3, r5
 800dfb4:	f43f af6e 	beq.w	800de94 <xmp3_Dequantize+0xd4>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800dfb8:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800dfbc:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800dfc0:	ddf6      	ble.n	800dfb0 <xmp3_Dequantize+0x1f0>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800dfc2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800dfc6:	bfa8      	it	ge
 800dfc8:	601e      	strge	r6, [r3, #0]
 800dfca:	e7f2      	b.n	800dfb2 <xmp3_Dequantize+0x1f2>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dfcc:	9504      	str	r5, [sp, #16]
 800dfce:	1045      	asrs	r5, r0, #1
 800dfd0:	e9dd 0607 	ldrd	r0, r6, [sp, #28]
 800dfd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfd6:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800dfda:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800dfde:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800dfe2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dfe6:	e9cd 5202 	strd	r5, r2, [sp, #8]
 800dfea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfec:	9200      	str	r2, [sp, #0]
 800dfee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dff0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dff4:	32f8      	adds	r2, #248	; 0xf8
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	333e      	adds	r3, #62	; 0x3e
 800dffa:	464a      	mov	r2, r9
 800dffc:	f003 fa5e 	bl	80114bc <xmp3_IntensityProcMPEG2>
	if (fh->modeExt) {
 800e000:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800e004:	e786      	b.n	800df14 <xmp3_Dequantize+0x154>
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800e006:	f8d1 2340 	ldr.w	r2, [r1, #832]	; 0x340
 800e00a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800e00e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e012:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 800e016:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e01a:	e752      	b.n	800dec2 <xmp3_Dequantize+0x102>
 800e01c:	211f      	movs	r1, #31
 800e01e:	e792      	b.n	800df46 <xmp3_Dequantize+0x186>
 800e020:	211f      	movs	r1, #31
 800e022:	e784      	b.n	800df2e <xmp3_Dequantize+0x16e>
 800e024:	f04f 31ff 	mov.w	r1, #4294967295
 800e028:	e78d      	b.n	800df46 <xmp3_Dequantize+0x186>
 800e02a:	f04f 31ff 	mov.w	r1, #4294967295
 800e02e:	e77e      	b.n	800df2e <xmp3_Dequantize+0x16e>
		return -1;
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
 800e034:	e791      	b.n	800df5a <xmp3_Dequantize+0x19a>
 800e036:	2001      	movs	r0, #1
 800e038:	ad0c      	add	r5, sp, #48	; 0x30
 800e03a:	e74b      	b.n	800ded4 <xmp3_Dequantize+0x114>
 800e03c:	c0000001 	.word	0xc0000001

0800e040 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
/*__attribute__ ((section (".data")))*/ static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
	scalef = pow14[scale & 0x3];
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e044:	ea4f 08a3 	mov.w	r8, r3, asr #2
	tab16 = pow43_14[scale & 0x3];
 800e048:	f003 0403 	and.w	r4, r3, #3
 800e04c:	4b64      	ldr	r3, [pc, #400]	; (800e1e0 <DequantBlock+0x1a0>)
 800e04e:	eb03 1984 	add.w	r9, r3, r4, lsl #6

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800e052:	4643      	mov	r3, r8
 800e054:	2b1c      	cmp	r3, #28
{
 800e056:	4686      	mov	lr, r0
	scalef = pow14[scale & 0x3];
 800e058:	4862      	ldr	r0, [pc, #392]	; (800e1e4 <DequantBlock+0x1a4>)
	shift = MIN(scalei + 3, 31);
 800e05a:	bfa8      	it	ge
 800e05c:	231c      	movge	r3, #28
	scalef = pow14[scale & 0x3];
 800e05e:	f850 a024 	ldr.w	sl, [r0, r4, lsl #2]
	shift = MAX(shift, 0);
	tab4[0] = 0;
	tab4[1] = tab16[1] >> shift;
 800e062:	f8d9 0004 	ldr.w	r0, [r9, #4]
	shift = MIN(scalei + 3, 31);
 800e066:	3303      	adds	r3, #3
{
 800e068:	b089      	sub	sp, #36	; 0x24
	shift = MAX(shift, 0);
 800e06a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	tab4[1] = tab16[1] >> shift;
 800e06e:	4118      	asrs	r0, r3
 800e070:	9005      	str	r0, [sp, #20]
	tab4[2] = tab16[2] >> shift;
 800e072:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800e076:	4118      	asrs	r0, r3
 800e078:	9006      	str	r0, [sp, #24]
	tab4[3] = tab16[3] >> shift;
 800e07a:	f8d9 000c 	ldr.w	r0, [r9, #12]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e07e:	f1b8 0f1f 	cmp.w	r8, #31
 800e082:	46c3      	mov	fp, r8
	tab4[3] = tab16[3] >> shift;
 800e084:	fa40 f003 	asr.w	r0, r0, r3
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e088:	bfa8      	it	ge
 800e08a:	f04f 0b1f 	movge.w	fp, #31
 800e08e:	465b      	mov	r3, fp
	tab4[3] = tab16[3] >> shift;
 800e090:	9007      	str	r0, [sp, #28]
	tab4[0] = 0;
 800e092:	2000      	movs	r0, #0
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e094:	46c3      	mov	fp, r8
	tab4[0] = 0;
 800e096:	9004      	str	r0, [sp, #16]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e098:	46c8      	mov	r8, r9
 800e09a:	46d1      	mov	r9, sl
 800e09c:	469a      	mov	sl, r3
 800e09e:	e00e      	b.n	800e0be <DequantBlock+0x7e>
		sx = *inbuf++;
		x = sx & 0x7fffffff;	/* sx = sign|mag */

		if (x < 4) {

			y = tab4[x];
 800e0a0:	ac08      	add	r4, sp, #32
 800e0a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e0a6:	f855 4c10 	ldr.w	r4, [r5, #-16]
			}
		}

		/* sign and store */
		mask |= y;
		*outbuf++ = (sx < 0) ? -y : y;
 800e0aa:	2b00      	cmp	r3, #0
		mask |= y;
 800e0ac:	ea40 0004 	orr.w	r0, r0, r4
		*outbuf++ = (sx < 0) ? -y : y;
 800e0b0:	bfb8      	it	lt
 800e0b2:	4264      	neglt	r4, r4

	} while (--num);
 800e0b4:	3a01      	subs	r2, #1
		*outbuf++ = (sx < 0) ? -y : y;
 800e0b6:	f841 4b04 	str.w	r4, [r1], #4
	} while (--num);
 800e0ba:	f000 808e 	beq.w	800e1da <DequantBlock+0x19a>
		sx = *inbuf++;
 800e0be:	f85e 3b04 	ldr.w	r3, [lr], #4
		if (x < 4) {
 800e0c2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0c6:	f024 0403 	bic.w	r4, r4, #3
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800e0ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800e0ce:	2c00      	cmp	r4, #0
 800e0d0:	d0e6      	beq.n	800e0a0 <DequantBlock+0x60>
		} else if (x < 16) {
 800e0d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0d6:	f024 040f 	bic.w	r4, r4, #15
 800e0da:	b954      	cbnz	r4, 800e0f2 <DequantBlock+0xb2>
			y = tab16[x];
 800e0dc:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800e0e0:	f1bb 0f00 	cmp.w	fp, #0
 800e0e4:	bfba      	itte	lt
 800e0e6:	f1ca 0500 	rsblt	r5, sl, #0
 800e0ea:	40ac      	lsllt	r4, r5
 800e0ec:	fa44 f40a 	asrge.w	r4, r4, sl
 800e0f0:	e7db      	b.n	800e0aa <DequantBlock+0x6a>
			if (x < 64) {
 800e0f2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0f6:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800e0fa:	b974      	cbnz	r4, 800e11a <DequantBlock+0xda>
				y = pow43[x-16];
 800e0fc:	4c3a      	ldr	r4, [pc, #232]	; (800e1e8 <DequantBlock+0x1a8>)
 800e0fe:	3d10      	subs	r5, #16
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e100:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800e104:	464c      	mov	r4, r9
 800e106:	fb85 6404 	smull	r6, r4, r5, r4
 800e10a:	4625      	mov	r5, r4
				shift = scalei - 3;
 800e10c:	f1aa 0403 	sub.w	r4, sl, #3
			if (shift < 0) {
 800e110:	2c00      	cmp	r4, #0
 800e112:	db57      	blt.n	800e1c4 <DequantBlock+0x184>
				y >>= shift;
 800e114:	fa45 f404 	asr.w	r4, r5, r4
 800e118:	e7c7      	b.n	800e0aa <DequantBlock+0x6a>
				x <<= 17;
 800e11a:	046c      	lsls	r4, r5, #17
				if (x < 0x08000000)
 800e11c:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
					x <<= 4, shift += 4;
 800e120:	bfb6      	itet	lt
 800e122:	056c      	lsllt	r4, r5, #21
				shift = 0;
 800e124:	2500      	movge	r5, #0
					x <<= 4, shift += 4;
 800e126:	2504      	movlt	r5, #4
				if (x < 0x20000000)
 800e128:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
				shift = 0;
 800e12c:	9500      	str	r5, [sp, #0]
				if (x < 0x20000000)
 800e12e:	da03      	bge.n	800e138 <DequantBlock+0xf8>
					x <<= 2, shift += 2;
 800e130:	9d00      	ldr	r5, [sp, #0]
 800e132:	3502      	adds	r5, #2
 800e134:	00a4      	lsls	r4, r4, #2
 800e136:	9500      	str	r5, [sp, #0]
				if (x < 0x40000000)
 800e138:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e13c:	da03      	bge.n	800e146 <DequantBlock+0x106>
					x <<= 1, shift += 1;
 800e13e:	9d00      	ldr	r5, [sp, #0]
 800e140:	3501      	adds	r5, #1
 800e142:	0064      	lsls	r4, r4, #1
 800e144:	9500      	str	r5, [sp, #0]
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800e146:	4d29      	ldr	r5, [pc, #164]	; (800e1ec <DequantBlock+0x1ac>)
 800e148:	4e29      	ldr	r6, [pc, #164]	; (800e1f0 <DequantBlock+0x1b0>)
 800e14a:	4f2a      	ldr	r7, [pc, #168]	; (800e1f4 <DequantBlock+0x1b4>)
 800e14c:	42ac      	cmp	r4, r5
 800e14e:	4d2a      	ldr	r5, [pc, #168]	; (800e1f8 <DequantBlock+0x1b8>)
 800e150:	bfc8      	it	gt
 800e152:	46ac      	movgt	ip, r5
 800e154:	4d29      	ldr	r5, [pc, #164]	; (800e1fc <DequantBlock+0x1bc>)
 800e156:	bfd8      	it	le
 800e158:	46b4      	movle	ip, r6
 800e15a:	4e29      	ldr	r6, [pc, #164]	; (800e200 <DequantBlock+0x1c0>)
 800e15c:	bfd8      	it	le
 800e15e:	462e      	movle	r6, r5
 800e160:	4d28      	ldr	r5, [pc, #160]	; (800e204 <DequantBlock+0x1c4>)
 800e162:	bfd8      	it	le
 800e164:	462f      	movle	r7, r5
 800e166:	4d28      	ldr	r5, [pc, #160]	; (800e208 <DequantBlock+0x1c8>)
 800e168:	9702      	str	r7, [sp, #8]
 800e16a:	4f28      	ldr	r7, [pc, #160]	; (800e20c <DequantBlock+0x1cc>)
 800e16c:	bfd8      	it	le
 800e16e:	462f      	movle	r7, r5
 800e170:	4d27      	ldr	r5, [pc, #156]	; (800e210 <DequantBlock+0x1d0>)
 800e172:	9701      	str	r7, [sp, #4]
 800e174:	4f27      	ldr	r7, [pc, #156]	; (800e214 <DequantBlock+0x1d4>)
 800e176:	bfd8      	it	le
 800e178:	462f      	movle	r7, r5
 800e17a:	9703      	str	r7, [sp, #12]
 800e17c:	4625      	mov	r5, r4
 800e17e:	fb86 7505 	smull	r7, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[1];
 800e182:	4465      	add	r5, ip
 800e184:	4626      	mov	r6, r4
 800e186:	fb85 c606 	smull	ip, r6, r5, r6
				y = MULSHIFT32(y, x) + coef[2];
 800e18a:	9f03      	ldr	r7, [sp, #12]
 800e18c:	4625      	mov	r5, r4
 800e18e:	443e      	add	r6, r7
 800e190:	fb86 c505 	smull	ip, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[3];
 800e194:	9f01      	ldr	r7, [sp, #4]
 800e196:	443d      	add	r5, r7
 800e198:	fb85 6404 	smull	r6, r4, r5, r4
				y = MULSHIFT32(y, x) + coef[4];
 800e19c:	9f02      	ldr	r7, [sp, #8]
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e19e:	4d1e      	ldr	r5, [pc, #120]	; (800e218 <DequantBlock+0x1d8>)
				y = MULSHIFT32(y, x) + coef[4];
 800e1a0:	443c      	add	r4, r7
 800e1a2:	9f00      	ldr	r7, [sp, #0]
 800e1a4:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 800e1a8:	fb84 6505 	smull	r6, r5, r4, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e1ac:	00ed      	lsls	r5, r5, #3
 800e1ae:	464c      	mov	r4, r9
 800e1b0:	fb85 6404 	smull	r6, r4, r5, r4
 800e1b4:	4625      	mov	r5, r4
				shift = scalei - pow2exp[shift];
 800e1b6:	4c19      	ldr	r4, [pc, #100]	; (800e21c <DequantBlock+0x1dc>)
 800e1b8:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 800e1bc:	ebaa 0404 	sub.w	r4, sl, r4
			if (shift < 0) {
 800e1c0:	2c00      	cmp	r4, #0
 800e1c2:	daa7      	bge.n	800e114 <DequantBlock+0xd4>
				shift = -shift;
 800e1c4:	4266      	negs	r6, r4
				if (y > (0x7fffffff >> shift))
 800e1c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e1ca:	fa44 f706 	asr.w	r7, r4, r6
 800e1ce:	42af      	cmp	r7, r5
 800e1d0:	f6ff af6b 	blt.w	800e0aa <DequantBlock+0x6a>
					y <<= shift;
 800e1d4:	fa05 f406 	lsl.w	r4, r5, r6
 800e1d8:	e767      	b.n	800e0aa <DequantBlock+0x6a>

	return mask;
}
 800e1da:	b009      	add	sp, #36	; 0x24
 800e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e0:	080258a4 	.word	0x080258a4
 800e1e4:	08025794 	.word	0x08025794
 800e1e8:	080257e4 	.word	0x080257e4
 800e1ec:	5a827999 	.word	0x5a827999
 800e1f0:	b02e4828 	.word	0xb02e4828
 800e1f4:	fef577b4 	.word	0xfef577b4
 800e1f8:	d333f6a4 	.word	0xd333f6a4
 800e1fc:	29a0bda9 	.word	0x29a0bda9
 800e200:	10852163 	.word	0x10852163
 800e204:	ff581859 	.word	0xff581859
 800e208:	236c498d 	.word	0x236c498d
 800e20c:	27c2cef0 	.word	0x27c2cef0
 800e210:	5957aa1b 	.word	0x5957aa1b
 800e214:	46e9408b 	.word	0x46e9408b
 800e218:	080257c4 	.word	0x080257c4
 800e21c:	080257a4 	.word	0x080257a4

0800e220 <xmp3_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
/*__attribute__ ((section (".data")))*/ int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	b093      	sub	sp, #76	; 0x4c
 800e226:	4698      	mov	r8, r3
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800e228:	9b1c      	ldr	r3, [sp, #112]	; 0x70
{
 800e22a:	9007      	str	r0, [sp, #28]
	if (sis->blockType == 2) {
 800e22c:	695b      	ldr	r3, [r3, #20]
{
 800e22e:	910b      	str	r1, [sp, #44]	; 0x2c
	if (sis->blockType == 2) {
 800e230:	2b02      	cmp	r3, #2
{
 800e232:	9206      	str	r2, [sp, #24]
	if (sis->blockType == 2) {
 800e234:	f000 811d 	beq.w	800e472 <xmp3_DequantChannel+0x252>
		}
		cbEndS = 13;
	} else {
		/* long block */
		cbEndL =   22;
		cbStartS = 13;
 800e238:	230d      	movs	r3, #13
 800e23a:	9303      	str	r3, [sp, #12]
		cbEndL =   22;
 800e23c:	f04f 0916 	mov.w	r9, #22

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e240:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e242:	4d9b      	ldr	r5, [pc, #620]	; (800e4b0 <xmp3_DequantChannel+0x290>)
 800e244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e246:	f8cd 9014 	str.w	r9, [sp, #20]
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800e24a:	2200      	movs	r2, #0
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e24c:	3301      	adds	r3, #1
 800e24e:	005b      	lsls	r3, r3, #1
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800e250:	920f      	str	r2, [sp, #60]	; 0x3c

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800e252:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e254:	9301      	str	r3, [sp, #4]
	if (fh->modeExt >> 1)
 800e256:	f8d8 3020 	ldr.w	r3, [r8, #32]
	globalGain = sis->globalGain;
 800e25a:	6892      	ldr	r2, [r2, #8]
 800e25c:	9209      	str	r2, [sp, #36]	; 0x24
	if (fh->modeExt >> 1)
 800e25e:	085b      	lsrs	r3, r3, #1
		 globalGain -= 2;
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800e260:	bf08      	it	eq
 800e262:	3202      	addeq	r2, #2
 800e264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e266:	bf08      	it	eq
 800e268:	9209      	streq	r2, [sp, #36]	; 0x24

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800e26a:	1e5e      	subs	r6, r3, #1

		nonZero = 0;
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e26e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800e272:	9502      	str	r5, [sp, #8]
	gbMask = 0;
 800e274:	f04f 0b00 	mov.w	fp, #0
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e278:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
	for (cb = 0; cb < cbEndL; cb++) {
 800e27c:	465c      	mov	r4, fp
	i = 0;
 800e27e:	46da      	mov	sl, fp
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e280:	9308      	str	r3, [sp, #32]
 800e282:	9604      	str	r6, [sp, #16]
	for (cb = 0; cb < cbEndL; cb++) {
 800e284:	e029      	b.n	800e2da <xmp3_DequantChannel+0xba>
 800e286:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e28a:	9d04      	ldr	r5, [sp, #16]
 800e28c:	f8d9 603c 	ldr.w	r6, [r9, #60]	; 0x3c
 800e290:	eb03 0244 	add.w	r2, r3, r4, lsl #1
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e294:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 800e298:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e29c:	1ad2      	subs	r2, r2, r3
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e29e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800e2a2:	9504      	str	r5, [sp, #16]
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e2a4:	1c67      	adds	r7, r4, #1

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
		i += nSamps;
 800e2a6:	4492      	add	sl, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e2a8:	4608      	mov	r0, r1
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e2aa:	b11e      	cbz	r6, 800e2b4 <xmp3_DequantChannel+0x94>
 800e2ac:	9d02      	ldr	r5, [sp, #8]
 800e2ae:	f895 c000 	ldrb.w	ip, [r5]
 800e2b2:	4463      	add	r3, ip
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e2b4:	9e08      	ldr	r6, [sp, #32]
 800e2b6:	9d01      	ldr	r5, [sp, #4]
 800e2b8:	fb03 6305 	mla	r3, r3, r5, r6
 800e2bc:	f7ff fec0 	bl	800e040 <DequantBlock>
		/* update highest non-zero critical band */
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;

		if (i >= *nonZeroBound) 
 800e2c0:	9b02      	ldr	r3, [sp, #8]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	9302      	str	r3, [sp, #8]
		gbMask |= nonZero;
 800e2c6:	ea4b 0b00 	orr.w	fp, fp, r0
		if (nonZero) 
 800e2ca:	b900      	cbnz	r0, 800e2ce <xmp3_DequantChannel+0xae>
			cbMax[0] = cb;
 800e2cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		if (i >= *nonZeroBound) 
 800e2ce:	9b06      	ldr	r3, [sp, #24]
 800e2d0:	940f      	str	r4, [sp, #60]	; 0x3c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4553      	cmp	r3, sl
 800e2d6:	dd07      	ble.n	800e2e8 <xmp3_DequantChannel+0xc8>
	for (cb = 0; cb < cbEndL; cb++) {
 800e2d8:	463c      	mov	r4, r7
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e2da:	9b07      	ldr	r3, [sp, #28]
 800e2dc:	eb03 018a 	add.w	r1, r3, sl, lsl #2
	for (cb = 0; cb < cbEndL; cb++) {
 800e2e0:	9b05      	ldr	r3, [sp, #20]
 800e2e2:	429c      	cmp	r4, r3
 800e2e4:	d1cf      	bne.n	800e286 <xmp3_DequantChannel+0x66>
			cbMax[0] = cb;
 800e2e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
	cbi->cbEndL  = cbMax[0];
 800e2e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	cbi->cbType = 0;			/* long only */
 800e2ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	cbi->cbEndL  = cbMax[0];
 800e2ec:	615c      	str	r4, [r3, #20]
	cbi->cbType = 0;			/* long only */
 800e2ee:	2300      	movs	r3, #0
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e2f0:	e9c2 3302 	strd	r3, r3, [r2, #8]
	cbi->cbType = 0;			/* long only */
 800e2f4:	6013      	str	r3, [r2, #0]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e2f6:	6053      	str	r3, [r2, #4]
	cbi->cbEndSMax = 0;
 800e2f8:	6113      	str	r3, [r2, #16]
	
	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800e2fa:	9a03      	ldr	r2, [sp, #12]
 800e2fc:	2a0b      	cmp	r2, #11
 800e2fe:	f300 80ac 	bgt.w	800e45a <xmp3_DequantChannel+0x23a>
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e302:	9b09      	ldr	r3, [sp, #36]	; 0x24
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e304:	9903      	ldr	r1, [sp, #12]
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e306:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e30a:	9111      	str	r1, [sp, #68]	; 0x44
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e30c:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 800e310:	9304      	str	r3, [sp, #16]
	for (cb = cbStartS; cb < cbEndS; cb++) {

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e312:	eb02 0341 	add.w	r3, r2, r1, lsl #1
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e316:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e31a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e31e:	9309      	str	r3, [sp, #36]	; 0x24
 800e320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e324:	3317      	adds	r3, #23
 800e326:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800e32a:	930a      	str	r3, [sp, #40]	; 0x28
 800e32c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e32e:	f8cd a008 	str.w	sl, [sp, #8]
 800e332:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e336:	3316      	adds	r3, #22
 800e338:	18d3      	adds	r3, r2, r3
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e33e:	3324      	adds	r3, #36	; 0x24
 800e340:	930d      	str	r3, [sp, #52]	; 0x34
 800e342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e346:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
 800e34a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		for (w = 0; w < 3; w++) {
			nonZero =  0;
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e34e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e352:	f8dd 9014 	ldr.w	r9, [sp, #20]
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e356:	1a8a      	subs	r2, r1, r2
 800e358:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	9902      	ldr	r1, [sp, #8]
 800e360:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800e364:	9b03      	ldr	r3, [sp, #12]
 800e366:	9308      	str	r3, [sp, #32]
 800e368:	3301      	adds	r3, #1
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e36a:	4627      	mov	r7, r4
 800e36c:	940c      	str	r4, [sp, #48]	; 0x30
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e36e:	9303      	str	r3, [sp, #12]
 800e370:	0095      	lsls	r5, r2, #2
 800e372:	ae0f      	add	r6, sp, #60	; 0x3c
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e374:	4614      	mov	r4, r2
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	f85a 3f04 	ldr.w	r3, [sl, #4]!
 800e37c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800e380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e384:	9a01      	ldr	r2, [sp, #4]
 800e386:	4638      	mov	r0, r7
 800e388:	fb02 3301 	mla	r3, r2, r1, r3
 800e38c:	4641      	mov	r1, r8
 800e38e:	4622      	mov	r2, r4
 800e390:	f7ff fe56 	bl	800e040 <DequantBlock>
		for (w = 0; w < 3; w++) {
 800e394:	44a8      	add	r8, r5
 800e396:	442f      	add	r7, r5

			/* update highest non-zero critical band */
			if (nonZero)
				cbMax[w] = cb;
			gbMask |= nonZero;
 800e398:	ea4b 0b00 	orr.w	fp, fp, r0
			if (nonZero)
 800e39c:	b108      	cbz	r0, 800e3a2 <xmp3_DequantChannel+0x182>
				cbMax[w] = cb;
 800e39e:	9b08      	ldr	r3, [sp, #32]
 800e3a0:	6033      	str	r3, [r6, #0]
		for (w = 0; w < 3; w++) {
 800e3a2:	3604      	adds	r6, #4
 800e3a4:	ab12      	add	r3, sp, #72	; 0x48
 800e3a6:	42b3      	cmp	r3, r6
 800e3a8:	d1e5      	bne.n	800e376 <xmp3_DequantChannel+0x156>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
		i += 3*nSamps;
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	9902      	ldr	r1, [sp, #8]
 800e3ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e3b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e3b4:	4419      	add	r1, r3
		for (j = 0; j < nSamps; j++) {
 800e3b6:	2a00      	cmp	r2, #0
		i += 3*nSamps;
 800e3b8:	9102      	str	r1, [sp, #8]
 800e3ba:	ea4f 0142 	mov.w	r1, r2, lsl #1
		for (j = 0; j < nSamps; j++) {
 800e3be:	dd19      	ble.n	800e3f4 <xmp3_DequantChannel+0x1d4>
 800e3c0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800e3c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800e3c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	3901      	subs	r1, #1
 800e3ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3d2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e3d6:	3a04      	subs	r2, #4
 800e3d8:	4415      	add	r5, r2
			buf[j][0] = workBuf[0*nSamps + j];
 800e3da:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e3de:	6020      	str	r0, [r4, #0]
			buf[j][1] = workBuf[1*nSamps + j];
 800e3e0:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800e3e4:	6060      	str	r0, [r4, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800e3e6:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800e3ea:	60a0      	str	r0, [r4, #8]
		for (j = 0; j < nSamps; j++) {
 800e3ec:	4295      	cmp	r5, r2
 800e3ee:	f104 040c 	add.w	r4, r4, #12
 800e3f2:	d1f2      	bne.n	800e3da <xmp3_DequantChannel+0x1ba>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800e3f4:	9b06      	ldr	r3, [sp, #24]
 800e3f6:	9a02      	ldr	r2, [sp, #8]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	dd4b      	ble.n	800e496 <xmp3_DequantChannel+0x276>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	3303      	adds	r3, #3
 800e402:	9305      	str	r3, [sp, #20]
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	2b0d      	cmp	r3, #13
 800e408:	d19b      	bne.n	800e342 <xmp3_DequantChannel+0x122>
 800e40a:	f8dd a008 	ldr.w	sl, [sp, #8]
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800e40e:	9b06      	ldr	r3, [sp, #24]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e410:	981e      	ldr	r0, [sp, #120]	; 0x78
	*nonZeroBound = i;
 800e412:	f8c3 a000 	str.w	sl, [r3]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e416:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e418:	699a      	ldr	r2, [r3, #24]

	cbi->cbEndS[0] = cbMax[0];
	cbi->cbEndS[1] = cbMax[1];
 800e41a:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e41e:	2a00      	cmp	r2, #0
 800e420:	bf14      	ite	ne
 800e422:	2202      	movne	r2, #2
 800e424:	2201      	moveq	r2, #1
 800e426:	6002      	str	r2, [r0, #0]
	cbi->cbEndS[2] = cbMax[2];

	cbi->cbEndSMax = cbMax[0];
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e428:	428b      	cmp	r3, r1
	cbi->cbEndS[2] = cbMax[2];
 800e42a:	9a11      	ldr	r2, [sp, #68]	; 0x44
	cbi->cbEndS[0] = cbMax[0];
 800e42c:	6043      	str	r3, [r0, #4]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e42e:	bfb8      	it	lt
 800e430:	460b      	movlt	r3, r1
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e432:	4293      	cmp	r3, r2
 800e434:	bfb8      	it	lt
 800e436:	4613      	movlt	r3, r2
	if (!x)
 800e438:	f1bb 0f00 	cmp.w	fp, #0
	cbi->cbEndS[2] = cbMax[2];
 800e43c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e440:	6103      	str	r3, [r0, #16]
 800e442:	d02a      	beq.n	800e49a <xmp3_DequantChannel+0x27a>
	while (!(x & 0x80000000)) {
 800e444:	db30      	blt.n	800e4a8 <xmp3_DequantChannel+0x288>
	numZeros = 0;
 800e446:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800e448:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e44c:	4618      	mov	r0, r3
		numZeros++;
 800e44e:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e452:	d5f9      	bpl.n	800e448 <xmp3_DequantChannel+0x228>

	return CLZ(gbMask) - 1;
}
 800e454:	b013      	add	sp, #76	; 0x4c
 800e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!x)
 800e45a:	459b      	cmp	fp, r3
 800e45c:	d01d      	beq.n	800e49a <xmp3_DequantChannel+0x27a>
	while (!(x & 0x80000000)) {
 800e45e:	db23      	blt.n	800e4a8 <xmp3_DequantChannel+0x288>
 800e460:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e464:	4618      	mov	r0, r3
		numZeros++;
 800e466:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e46a:	d5f9      	bpl.n	800e460 <xmp3_DequantChannel+0x240>
 800e46c:	b013      	add	sp, #76	; 0x4c
 800e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sis->mixedBlock) { 
 800e472:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e474:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800e478:	f1b9 0f00 	cmp.w	r9, #0
 800e47c:	d011      	beq.n	800e4a2 <xmp3_DequantChannel+0x282>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800e47e:	f898 3000 	ldrb.w	r3, [r8]
			cbStartS = 3; 
 800e482:	2b00      	cmp	r3, #0
 800e484:	f04f 0303 	mov.w	r3, #3
 800e488:	9303      	str	r3, [sp, #12]
 800e48a:	bf0c      	ite	eq
 800e48c:	f04f 0908 	moveq.w	r9, #8
 800e490:	f04f 0906 	movne.w	r9, #6
 800e494:	e6d4      	b.n	800e240 <xmp3_DequantChannel+0x20>
 800e496:	4692      	mov	sl, r2
 800e498:	e7b9      	b.n	800e40e <xmp3_DequantChannel+0x1ee>
 800e49a:	201f      	movs	r0, #31
}
 800e49c:	b013      	add	sp, #76	; 0x4c
 800e49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cbStartS = 0;
 800e4a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e4a6:	e6cb      	b.n	800e240 <xmp3_DequantChannel+0x20>
 800e4a8:	f04f 30ff 	mov.w	r0, #4294967295
	return CLZ(gbMask) - 1;
 800e4ac:	e7d2      	b.n	800e454 <xmp3_DequantChannel+0x234>
 800e4ae:	bf00      	nop
 800e4b0:	080259a4 	.word	0x080259a4

0800e4b4 <xmp3_DecodeHuffman>:
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
// .data about 1ms faster per frame
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b8:	b099      	sub	sp, #100	; 0x64
 800e4ba:	910f      	str	r1, [sp, #60]	; 0x3c
 800e4bc:	9208      	str	r2, [sp, #32]
 800e4be:	9301      	str	r3, [sp, #4]
	SideInfo *si;
	SideInfoSub *sis;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f000 8140 	beq.w	800e746 <xmp3_DecodeHuffman+0x292>
 800e4c6:	6801      	ldr	r1, [r0, #0]
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	f000 813c 	beq.w	800e746 <xmp3_DecodeHuffman+0x292>
 800e4ce:	6844      	ldr	r4, [r0, #4]
 800e4d0:	940c      	str	r4, [sp, #48]	; 0x30
 800e4d2:	2c00      	cmp	r4, #0
 800e4d4:	f000 8137 	beq.w	800e746 <xmp3_DecodeHuffman+0x292>
 800e4d8:	6883      	ldr	r3, [r0, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 8133 	beq.w	800e746 <xmp3_DecodeHuffman+0x292>
 800e4e0:	68c3      	ldr	r3, [r0, #12]
 800e4e2:	9310      	str	r3, [sp, #64]	; 0x40
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 812e 	beq.w	800e746 <xmp3_DecodeHuffman+0x292>
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0)
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f2c0 812a 	blt.w	800e746 <xmp3_DecodeHuffman+0x292>
		return -1;

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e4f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e4f6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800e4fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e4fc:	0112      	lsls	r2, r2, #4
 800e4fe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e502:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e508:	4422      	add	r2, r4
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	9309      	str	r3, [sp, #36]	; 0x24
 800e50e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e510:	00c0      	lsls	r0, r0, #3
 800e512:	900d      	str	r0, [sp, #52]	; 0x34
 800e514:	2b00      	cmp	r3, #0
 800e516:	f040 826b 	bne.w	800e9f0 <xmp3_DecodeHuffman+0x53c>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e51a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800e51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e51e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e520:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800e522:	440b      	add	r3, r1
 800e524:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e526:	011b      	lsls	r3, r3, #4
 800e528:	4401      	add	r1, r0
 800e52a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e52e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e530:	440b      	add	r3, r1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e532:	e9d3 1317 	ldrd	r1, r3, [r3, #92]	; 0x5c
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e536:	3101      	adds	r1, #1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e538:	440b      	add	r3, r1
 800e53a:	3301      	adds	r3, #1
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e53c:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e540:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e548:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800e54a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e54c:	4413      	add	r3, r2
 800e54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	4422      	add	r2, r4
 800e554:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800e558:	442c      	add	r4, r5
 800e55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e55e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800e560:	0064      	lsls	r4, r4, #1
 800e562:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
 800e566:	bfa8      	it	ge
 800e568:	f44f 7410 	movge.w	r4, #576	; 0x240
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800e572:	bfa8      	it	ge
 800e574:	4620      	movge	r0, r4
 800e576:	18eb      	adds	r3, r5, r3
 800e578:	9016      	str	r0, [sp, #88]	; 0x58
 800e57a:	9307      	str	r3, [sp, #28]
	hi->nonZeroBound[ch] = rEnd[3];

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e57c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e57e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e580:	9413      	str	r4, [sp, #76]	; 0x4c
 800e582:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	hi->nonZeroBound[ch] = rEnd[3];
 800e586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e58a:	9312      	str	r3, [sp, #72]	; 0x48
 800e58c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e590:	2300      	movs	r3, #0
 800e592:	eb00 2202 	add.w	r2, r0, r2, lsl #8
 800e596:	9306      	str	r3, [sp, #24]
 800e598:	9b08      	ldr	r3, [sp, #32]
 800e59a:	920e      	str	r2, [sp, #56]	; 0x38
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800e59c:	42a1      	cmp	r1, r4
 800e59e:	aa14      	add	r2, sp, #80	; 0x50
 800e5a0:	bfa8      	it	ge
 800e5a2:	4621      	movge	r1, r4
 800e5a4:	9204      	str	r2, [sp, #16]
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800e5aa:	9115      	str	r1, [sp, #84]	; 0x54
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e5ac:	9417      	str	r4, [sp, #92]	; 0x5c
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5ae:	9203      	str	r2, [sp, #12]
 800e5b0:	9a04      	ldr	r2, [sp, #16]
 800e5b2:	9d06      	ldr	r5, [sp, #24]
 800e5b4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800e5b8:	9807      	ldr	r0, [sp, #28]
 800e5ba:	9106      	str	r1, [sp, #24]
 800e5bc:	1b49      	subs	r1, r1, r5
 800e5be:	9204      	str	r2, [sp, #16]
	if(nVals <= 0) 
 800e5c0:	2900      	cmp	r1, #0
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5c2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800e5c6:	9007      	str	r0, [sp, #28]
	if(nVals <= 0) 
 800e5c8:	f340 8142 	ble.w	800e850 <xmp3_DecodeHuffman+0x39c>
	if (bitsLeft < 0)
 800e5cc:	9801      	ldr	r0, [sp, #4]
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	f2c0 80b9 	blt.w	800e746 <xmp3_DecodeHuffman+0x292>
	tabType = huffTabLookup[tabIdx].tabType;
 800e5d4:	4c9b      	ldr	r4, [pc, #620]	; (800e844 <xmp3_DecodeHuffman+0x390>)
 800e5d6:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
	cachedBits = (8 - bitOffset) & 0x07;
 800e5da:	425b      	negs	r3, r3
	tabType = huffTabLookup[tabIdx].tabType;
 800e5dc:	7907      	ldrb	r7, [r0, #4]
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e5de:	489a      	ldr	r0, [pc, #616]	; (800e848 <xmp3_DecodeHuffman+0x394>)
 800e5e0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
	linBits = huffTabLookup[tabIdx].linBits;
 800e5e4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e5e8:	9c03      	ldr	r4, [sp, #12]
	linBits = huffTabLookup[tabIdx].linBits;
 800e5ea:	9205      	str	r2, [sp, #20]
	if (cachedBits)
 800e5ec:	f013 0207 	ands.w	r2, r3, #7
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e5f0:	bf1e      	ittt	ne
 800e5f2:	f814 3b01 	ldrbne.w	r3, [r4], #1
 800e5f6:	f1c2 0620 	rsbne	r6, r2, #32
 800e5fa:	40b3      	lslne	r3, r6
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	cache = 0;
 800e5fe:	bf08      	it	eq
 800e600:	4613      	moveq	r3, r2
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e602:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	if (tabType == noBits) {
 800e606:	2f00      	cmp	r7, #0
 800e608:	f000 81e7 	beq.w	800e9da <xmp3_DecodeHuffman+0x526>
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e60c:	4e8f      	ldr	r6, [pc, #572]	; (800e84c <xmp3_DecodeHuffman+0x398>)
 800e60e:	eb06 0e40 	add.w	lr, r6, r0, lsl #1
	bitsLeft -= cachedBits;
 800e612:	9e01      	ldr	r6, [sp, #4]
	} else if (tabType == oneShot) {
 800e614:	2f01      	cmp	r7, #1
	bitsLeft -= cachedBits;
 800e616:	eba6 0b02 	sub.w	fp, r6, r2
	} else if (tabType == oneShot) {
 800e61a:	f000 8232 	beq.w	800ea82 <xmp3_DecodeHuffman+0x5ce>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800e61e:	1eb8      	subs	r0, r7, #2
 800e620:	2801      	cmp	r0, #1
 800e622:	f200 8090 	bhi.w	800e746 <xmp3_DecodeHuffman+0x292>
					minBits = linBits + 1;
 800e626:	9805      	ldr	r0, [sp, #20]
			if (bitsLeft >= 16) {
 800e628:	f1bb 0f0f 	cmp.w	fp, #15
					minBits = linBits + 1;
 800e62c:	f100 0601 	add.w	r6, r0, #1
					y += (int)(cache >> (32 - linBits));
 800e630:	f1c0 0020 	rsb	r0, r0, #32
					minBits = linBits + 1;
 800e634:	960a      	str	r6, [sp, #40]	; 0x28
		padBits = 0;
 800e636:	f04f 0900 	mov.w	r9, #0
					y += (int)(cache >> (32 - linBits));
 800e63a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e63c:	46ba      	mov	sl, r7
 800e63e:	4676      	mov	r6, lr
			if (bitsLeft >= 16) {
 800e640:	dd42      	ble.n	800e6c8 <xmp3_DecodeHuffman+0x214>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e642:	7867      	ldrb	r7, [r4, #1]
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e644:	f814 cb02 	ldrb.w	ip, [r4], #2
 800e648:	9402      	str	r4, [sp, #8]
 800e64a:	f1c2 0018 	rsb	r0, r2, #24
 800e64e:	fa0c f000 	lsl.w	r0, ip, r0
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e652:	f1c2 0c10 	rsb	ip, r2, #16
 800e656:	fa07 f70c 	lsl.w	r7, r7, ip
 800e65a:	4338      	orrs	r0, r7
				bitsLeft -= 16;
 800e65c:	f1ab 0b10 	sub.w	fp, fp, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e660:	4303      	orrs	r3, r0
				cachedBits += 16;
 800e662:	3210      	adds	r2, #16
			while (nVals > 0 && cachedBits >= 11 ) {
 800e664:	2a0a      	cmp	r2, #10
 800e666:	dd2b      	ble.n	800e6c0 <xmp3_DecodeHuffman+0x20c>
				maxBits = GetMaxbits(tCurr[0]);
 800e668:	8837      	ldrh	r7, [r6, #0]
 800e66a:	f007 070f 	and.w	r7, r7, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800e66e:	f1c7 0020 	rsb	r0, r7, #32
 800e672:	fa23 f000 	lsr.w	r0, r3, r0
 800e676:	3001      	adds	r0, #1
 800e678:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
				if (!len) {
 800e67c:	ea5f 3c10 	movs.w	ip, r0, lsr #12
 800e680:	d066      	beq.n	800e750 <xmp3_DecodeHuffman+0x29c>
				cachedBits -= len;
 800e682:	f3c0 1703 	ubfx	r7, r0, #4, #4
 800e686:	f3c0 2603 	ubfx	r6, r0, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800e68a:	2f0f      	cmp	r7, #15
				cachedBits -= len;
 800e68c:	eba2 020c 	sub.w	r2, r2, ip
				cache <<= len;
 800e690:	fa03 f30c 	lsl.w	r3, r3, ip
				y = GetCWY(cw);
 800e694:	4630      	mov	r0, r6
				if (x == 15 && tabType == loopLinbits) {
 800e696:	d03c      	beq.n	800e712 <xmp3_DecodeHuffman+0x25e>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e698:	2f00      	cmp	r7, #0
 800e69a:	d13d      	bne.n	800e718 <xmp3_DecodeHuffman+0x264>
				if (y == 15 && tabType == loopLinbits) {
 800e69c:	2e0f      	cmp	r6, #15
 800e69e:	d045      	beq.n	800e72c <xmp3_DecodeHuffman+0x278>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d147      	bne.n	800e734 <xmp3_DecodeHuffman+0x280>
				if (cachedBits < padBits)
 800e6a4:	454a      	cmp	r2, r9
 800e6a6:	db4e      	blt.n	800e746 <xmp3_DecodeHuffman+0x292>
				nVals -= 2;
 800e6a8:	3902      	subs	r1, #2
				*xy++ = x;
 800e6aa:	462e      	mov	r6, r5
			while (nVals > 0 && cachedBits >= 11 ) {
 800e6ac:	2900      	cmp	r1, #0
				*xy++ = x;
 800e6ae:	f846 7b08 	str.w	r7, [r6], #8
				*xy++ = y;
 800e6b2:	6068      	str	r0, [r5, #4]
			while (nVals > 0 && cachedBits >= 11 ) {
 800e6b4:	f340 8277 	ble.w	800eba6 <xmp3_DecodeHuffman+0x6f2>
 800e6b8:	2a0a      	cmp	r2, #10
				*xy++ = y;
 800e6ba:	4635      	mov	r5, r6
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e6bc:	4676      	mov	r6, lr
			while (nVals > 0 && cachedBits >= 11 ) {
 800e6be:	dcd3      	bgt.n	800e668 <xmp3_DecodeHuffman+0x1b4>
			if (bitsLeft >= 16) {
 800e6c0:	f1bb 0f0f 	cmp.w	fp, #15
 800e6c4:	9c02      	ldr	r4, [sp, #8]
 800e6c6:	dcbc      	bgt.n	800e642 <xmp3_DecodeHuffman+0x18e>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800e6c8:	eb0b 0002 	add.w	r0, fp, r2
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	dd3a      	ble.n	800e746 <xmp3_DecodeHuffman+0x292>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e6d0:	f1bb 0f00 	cmp.w	fp, #0
 800e6d4:	dd06      	ble.n	800e6e4 <xmp3_DecodeHuffman+0x230>
 800e6d6:	f814 7b01 	ldrb.w	r7, [r4], #1
 800e6da:	f1c2 0c18 	rsb	ip, r2, #24
 800e6de:	fa07 f70c 	lsl.w	r7, r7, ip
 800e6e2:	433b      	orrs	r3, r7
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e6e4:	f1bb 0f08 	cmp.w	fp, #8
 800e6e8:	dd05      	ble.n	800e6f6 <xmp3_DecodeHuffman+0x242>
 800e6ea:	f1c2 0710 	rsb	r7, r2, #16
 800e6ee:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e6f2:	40ba      	lsls	r2, r7
 800e6f4:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e6f6:	1e42      	subs	r2, r0, #1
 800e6f8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e6fc:	fa47 f202 	asr.w	r2, r7, r2
 800e700:	4013      	ands	r3, r2
				padBits = 11;
 800e702:	f04f 090b 	mov.w	r9, #11
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800e706:	f100 020b 	add.w	r2, r0, #11
				bitsLeft = 0;
 800e70a:	f04f 0b00 	mov.w	fp, #0
			while (nVals > 0 && cachedBits >= 11 ) {
 800e70e:	9402      	str	r4, [sp, #8]
 800e710:	e7a8      	b.n	800e664 <xmp3_DecodeHuffman+0x1b0>
				if (x == 15 && tabType == loopLinbits) {
 800e712:	f1ba 0f03 	cmp.w	sl, #3
 800e716:	d020      	beq.n	800e75a <xmp3_DecodeHuffman+0x2a6>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e718:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
				if (y == 15 && tabType == loopLinbits) {
 800e71c:	2e0f      	cmp	r6, #15
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e71e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e722:	ea47 070c 	orr.w	r7, r7, ip
 800e726:	ea4f 0343 	mov.w	r3, r3, lsl #1
				if (y == 15 && tabType == loopLinbits) {
 800e72a:	d1b9      	bne.n	800e6a0 <xmp3_DecodeHuffman+0x1ec>
 800e72c:	f1ba 0f03 	cmp.w	sl, #3
 800e730:	d050      	beq.n	800e7d4 <xmp3_DecodeHuffman+0x320>
				y = GetCWY(cw);
 800e732:	4630      	mov	r0, r6
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e734:	3a01      	subs	r2, #1
 800e736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
				if (cachedBits < padBits)
 800e73a:	454a      	cmp	r2, r9
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e73c:	ea40 0006 	orr.w	r0, r0, r6
 800e740:	ea4f 0343 	mov.w	r3, r3, lsl #1
				if (cachedBits < padBits)
 800e744:	dab0      	bge.n	800e6a8 <xmp3_DecodeHuffman+0x1f4>
		return -1;
 800e746:	f04f 30ff 	mov.w	r0, #4294967295
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
	
	return (buf - startBuf);
}
 800e74a:	b019      	add	sp, #100	; 0x64
 800e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tCurr += cw;
 800e750:	eb06 0640 	add.w	r6, r6, r0, lsl #1
					cachedBits -= maxBits;
 800e754:	1bd2      	subs	r2, r2, r7
					cache <<= maxBits;
 800e756:	40bb      	lsls	r3, r7
			while (nVals > 0 && cachedBits >= 11 ) {
 800e758:	e784      	b.n	800e664 <xmp3_DecodeHuffman+0x1b0>
					minBits = linBits + 1 + (y ? 1 : 0);
 800e75a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
					if (cachedBits + bitsLeft < minBits)
 800e75c:	eb02 0c0b 	add.w	ip, r2, fp
					minBits = linBits + 1 + (y ? 1 : 0);
 800e760:	2e00      	cmp	r6, #0
 800e762:	bf18      	it	ne
 800e764:	3701      	addne	r7, #1
					if (cachedBits + bitsLeft < minBits)
 800e766:	4567      	cmp	r7, ip
 800e768:	dced      	bgt.n	800e746 <xmp3_DecodeHuffman+0x292>
					while (cachedBits < minBits) {
 800e76a:	42ba      	cmp	r2, r7
 800e76c:	f280 8200 	bge.w	800eb70 <xmp3_DecodeHuffman+0x6bc>
 800e770:	1abf      	subs	r7, r7, r2
 800e772:	3f01      	subs	r7, #1
 800e774:	08fc      	lsrs	r4, r7, #3
 800e776:	f104 0801 	add.w	r8, r4, #1
 800e77a:	9411      	str	r4, [sp, #68]	; 0x44
 800e77c:	9c02      	ldr	r4, [sp, #8]
 800e77e:	f1c2 0c18 	rsb	ip, r2, #24
 800e782:	44a0      	add	r8, r4
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e784:	f814 7b01 	ldrb.w	r7, [r4], #1
 800e788:	fa07 f70c 	lsl.w	r7, r7, ip
					while (cachedBits < minBits) {
 800e78c:	4544      	cmp	r4, r8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e78e:	ea43 0307 	orr.w	r3, r3, r7
					while (cachedBits < minBits) {
 800e792:	f1ac 0c08 	sub.w	ip, ip, #8
 800e796:	d1f5      	bne.n	800e784 <xmp3_DecodeHuffman+0x2d0>
						cachedBits += 8;
 800e798:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800e79a:	f1ab 0408 	sub.w	r4, fp, #8
 800e79e:	f102 0c08 	add.w	ip, r2, #8
					if (bitsLeft < 0) {
 800e7a2:	ebb4 0bc7 	subs.w	fp, r4, r7, lsl #3
						cachedBits += 8;
 800e7a6:	eb0c 02c7 	add.w	r2, ip, r7, lsl #3
					if (bitsLeft < 0) {
 800e7aa:	d509      	bpl.n	800e7c0 <xmp3_DecodeHuffman+0x30c>
						cachedBits += bitsLeft;
 800e7ac:	eb04 020c 	add.w	r2, r4, ip
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e7b0:	1e54      	subs	r4, r2, #1
 800e7b2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e7b6:	fa47 f404 	asr.w	r4, r7, r4
 800e7ba:	4023      	ands	r3, r4
						bitsLeft = 0;
 800e7bc:	f04f 0b00 	mov.w	fp, #0
					x += (int)(cache >> (32 - linBits));
 800e7c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
					cachedBits -= linBits;
 800e7c2:	9c05      	ldr	r4, [sp, #20]
					cache <<= linBits;
 800e7c4:	f8cd 8008 	str.w	r8, [sp, #8]
					x += (int)(cache >> (32 - linBits));
 800e7c8:	fa23 f707 	lsr.w	r7, r3, r7
					cachedBits -= linBits;
 800e7cc:	1b12      	subs	r2, r2, r4
					x += (int)(cache >> (32 - linBits));
 800e7ce:	370f      	adds	r7, #15
					cache <<= linBits;
 800e7d0:	40a3      	lsls	r3, r4
 800e7d2:	e761      	b.n	800e698 <xmp3_DecodeHuffman+0x1e4>
					if (cachedBits + bitsLeft < minBits)
 800e7d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e7d6:	eb0b 0002 	add.w	r0, fp, r2
 800e7da:	4284      	cmp	r4, r0
 800e7dc:	dcb3      	bgt.n	800e746 <xmp3_DecodeHuffman+0x292>
					while (cachedBits < minBits) {
 800e7de:	4294      	cmp	r4, r2
 800e7e0:	f340 81c9 	ble.w	800eb76 <xmp3_DecodeHuffman+0x6c2>
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	9c02      	ldr	r4, [sp, #8]
 800e7e8:	eba0 0802 	sub.w	r8, r0, r2
 800e7ec:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800e7f0:	f108 0c01 	add.w	ip, r8, #1
 800e7f4:	44a4      	add	ip, r4
 800e7f6:	f1c2 0618 	rsb	r6, r2, #24
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e7fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e7fe:	40b0      	lsls	r0, r6
					while (cachedBits < minBits) {
 800e800:	4564      	cmp	r4, ip
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e802:	ea43 0300 	orr.w	r3, r3, r0
					while (cachedBits < minBits) {
 800e806:	f1a6 0608 	sub.w	r6, r6, #8
 800e80a:	d1f6      	bne.n	800e7fa <xmp3_DecodeHuffman+0x346>
					if (bitsLeft < 0) {
 800e80c:	f1ab 0008 	sub.w	r0, fp, #8
 800e810:	f102 0408 	add.w	r4, r2, #8
 800e814:	ebb0 0bc8 	subs.w	fp, r0, r8, lsl #3
						cachedBits += 8;
 800e818:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
					if (bitsLeft < 0) {
 800e81c:	d508      	bpl.n	800e830 <xmp3_DecodeHuffman+0x37c>
						cachedBits += bitsLeft;
 800e81e:	1902      	adds	r2, r0, r4
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e820:	1e50      	subs	r0, r2, #1
 800e822:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e826:	fa44 f000 	asr.w	r0, r4, r0
 800e82a:	4003      	ands	r3, r0
						bitsLeft = 0;
 800e82c:	f04f 0b00 	mov.w	fp, #0
					y += (int)(cache >> (32 - linBits));
 800e830:	980b      	ldr	r0, [sp, #44]	; 0x2c
					cachedBits -= linBits;
 800e832:	9c05      	ldr	r4, [sp, #20]
					cache <<= linBits;
 800e834:	f8cd c008 	str.w	ip, [sp, #8]
					y += (int)(cache >> (32 - linBits));
 800e838:	fa23 f000 	lsr.w	r0, r3, r0
					cachedBits -= linBits;
 800e83c:	1b12      	subs	r2, r2, r4
					y += (int)(cache >> (32 - linBits));
 800e83e:	300f      	adds	r0, #15
					cache <<= linBits;
 800e840:	40a3      	lsls	r3, r4
 800e842:	e72d      	b.n	800e6a0 <xmp3_DecodeHuffman+0x1ec>
 800e844:	080259bc 	.word	0x080259bc
 800e848:	08025abc 	.word	0x08025abc
 800e84c:	08025b3c 	.word	0x08025b3c
		return 0;
 800e850:	2300      	movs	r3, #0
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800e852:	9a01      	ldr	r2, [sp, #4]
 800e854:	4293      	cmp	r3, r2
 800e856:	f73f af76 	bgt.w	800e746 <xmp3_DecodeHuffman+0x292>
		bitsLeft -= bitsUsed;
 800e85a:	1ad2      	subs	r2, r2, r3
 800e85c:	9201      	str	r2, [sp, #4]
		buf += (bitsUsed + *bitOffset) >> 3;
 800e85e:	9908      	ldr	r1, [sp, #32]
 800e860:	680a      	ldr	r2, [r1, #0]
 800e862:	4413      	add	r3, r2
 800e864:	9a03      	ldr	r2, [sp, #12]
 800e866:	eb02 02e3 	add.w	r2, r2, r3, asr #3
 800e86a:	9203      	str	r2, [sp, #12]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e86c:	f003 0307 	and.w	r3, r3, #7
	for (i = 0; i < 3; i++) {
 800e870:	9a04      	ldr	r2, [sp, #16]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e872:	600b      	str	r3, [r1, #0]
	for (i = 0; i < 3; i++) {
 800e874:	a917      	add	r1, sp, #92	; 0x5c
 800e876:	4291      	cmp	r1, r2
 800e878:	f47f ae9a 	bne.w	800e5b0 <xmp3_DecodeHuffman+0xfc>
	if (bitsLeft <= 0)
 800e87c:	9a01      	ldr	r2, [sp, #4]
 800e87e:	2a00      	cmp	r2, #0
 800e880:	f340 8174 	ble.w	800eb6c <xmp3_DecodeHuffman+0x6b8>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e884:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e888:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800e88a:	440a      	add	r2, r1
 800e88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e88e:	0112      	lsls	r2, r2, #4
 800e890:	4401      	add	r1, r0
 800e892:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e896:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e898:	4411      	add	r1, r2
	cachedBits = (8 - bitOffset) & 0x07;
 800e89a:	425b      	negs	r3, r3
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e89c:	6eca      	ldr	r2, [r1, #108]	; 0x6c
	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800e89e:	49c6      	ldr	r1, [pc, #792]	; (800ebb8 <xmp3_DecodeHuffman+0x704>)
 800e8a0:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800e8a4:	49c5      	ldr	r1, [pc, #788]	; (800ebbc <xmp3_DecodeHuffman+0x708>)
	if (cachedBits)
 800e8a6:	f013 0307 	ands.w	r3, r3, #7
	maxBits = quadTabMaxBits[tabIdx];
 800e8aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e8ae:	9a03      	ldr	r2, [sp, #12]
	if (cachedBits)
 800e8b0:	f040 80b8 	bne.w	800ea24 <xmp3_DecodeHuffman+0x570>
		buf += (bitsUsed + *bitOffset) >> 3;
 800e8b4:	9202      	str	r2, [sp, #8]
	cache = 0;
 800e8b6:	4619      	mov	r1, r3
	while (i < (nVals - 3)) {
 800e8b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	bitsLeft -= cachedBits;
 800e8ba:	9c01      	ldr	r4, [sp, #4]
	while (i < (nVals - 3)) {
 800e8bc:	f5c2 7e0f 	rsb	lr, r2, #572	; 0x23c
 800e8c0:	f10e 0e01 	add.w	lr, lr, #1
 800e8c4:	f1be 0f00 	cmp.w	lr, #0
	bitsLeft -= cachedBits;
 800e8c8:	eba4 0b03 	sub.w	fp, r4, r3
	while (i < (nVals - 3)) {
 800e8cc:	f340 814e 	ble.w	800eb6c <xmp3_DecodeHuffman+0x6b8>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e8d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e8d2:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800ebc4 <xmp3_DecodeHuffman+0x710>
	i = padBits = 0;
 800e8d6:	f04f 0c00 	mov.w	ip, #0
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e8da:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			cw = tBase[cache >> (32 - maxBits)];
 800e8de:	f1c0 0820 	rsb	r8, r0, #32
	i = padBits = 0;
 800e8e2:	4667      	mov	r7, ip
		if (bitsLeft >= 16) {
 800e8e4:	f1bb 0f0f 	cmp.w	fp, #15
 800e8e8:	f340 80a4 	ble.w	800ea34 <xmp3_DecodeHuffman+0x580>
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8ec:	9802      	ldr	r0, [sp, #8]
 800e8ee:	7844      	ldrb	r4, [r0, #1]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e8f0:	f810 5b02 	ldrb.w	r5, [r0], #2
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8f4:	9002      	str	r0, [sp, #8]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e8f6:	f1c3 0018 	rsb	r0, r3, #24
 800e8fa:	fa05 f000 	lsl.w	r0, r5, r0
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8fe:	f1c3 0510 	rsb	r5, r3, #16
 800e902:	40ac      	lsls	r4, r5
 800e904:	4320      	orrs	r0, r4
			bitsLeft -= 16;
 800e906:	f1ab 0b10 	sub.w	fp, fp, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e90a:	4301      	orrs	r1, r0
			cachedBits += 16;
 800e90c:	3310      	adds	r3, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e90e:	f102 0010 	add.w	r0, r2, #16
 800e912:	e003      	b.n	800e91c <xmp3_DecodeHuffman+0x468>
 800e914:	2b09      	cmp	r3, #9
 800e916:	f100 0010 	add.w	r0, r0, #16
 800e91a:	dde3      	ble.n	800e8e4 <xmp3_DecodeHuffman+0x430>
			cw = tBase[cache >> (32 - maxBits)];
 800e91c:	fa21 f208 	lsr.w	r2, r1, r8
 800e920:	444a      	add	r2, r9
 800e922:	f81a 2002 	ldrb.w	r2, [sl, r2]
			len = GetHLenQ(cw);
 800e926:	0914      	lsrs	r4, r2, #4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800e928:	f012 0608 	ands.w	r6, r2, #8
			cachedBits -= len;
 800e92c:	eba3 1312 	sub.w	r3, r3, r2, lsr #4
			cache <<= len;
 800e930:	fa01 f104 	lsl.w	r1, r1, r4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800e934:	d005      	beq.n	800e942 <xmp3_DecodeHuffman+0x48e>
 800e936:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e93a:	3b01      	subs	r3, #1
 800e93c:	f046 0601 	orr.w	r6, r6, #1
 800e940:	0049      	lsls	r1, r1, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800e942:	f012 0504 	ands.w	r5, r2, #4
 800e946:	d005      	beq.n	800e954 <xmp3_DecodeHuffman+0x4a0>
 800e948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e94c:	3b01      	subs	r3, #1
 800e94e:	f045 0501 	orr.w	r5, r5, #1
 800e952:	0049      	lsls	r1, r1, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e954:	f012 0402 	ands.w	r4, r2, #2
 800e958:	d005      	beq.n	800e966 <xmp3_DecodeHuffman+0x4b2>
 800e95a:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800e95e:	3b01      	subs	r3, #1
 800e960:	f044 0401 	orr.w	r4, r4, #1
 800e964:	0049      	lsls	r1, r1, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e966:	f012 0201 	ands.w	r2, r2, #1
 800e96a:	d005      	beq.n	800e978 <xmp3_DecodeHuffman+0x4c4>
 800e96c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e970:	3b01      	subs	r3, #1
 800e972:	f042 0201 	orr.w	r2, r2, #1
 800e976:	0049      	lsls	r1, r1, #1
			if (cachedBits < padBits)
 800e978:	4563      	cmp	r3, ip
 800e97a:	db07      	blt.n	800e98c <xmp3_DecodeHuffman+0x4d8>
			i += 4;
 800e97c:	3704      	adds	r7, #4
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e97e:	45be      	cmp	lr, r7
			*vwxy++ = y;
 800e980:	e940 4202 	strd	r4, r2, [r0, #-8]
			*vwxy++ = w;
 800e984:	e940 6504 	strd	r6, r5, [r0, #-16]
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e988:	4602      	mov	r2, r0
 800e98a:	dcc3      	bgt.n	800e914 <xmp3_DecodeHuffman+0x460>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e98e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800e992:	441f      	add	r7, r3
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++) {
 800e994:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e998:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++) {
 800e99c:	da0d      	bge.n	800e9ba <xmp3_DecodeHuffman+0x506>
		hi->huffDecBuf[ch][i] = 0;
 800e99e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9a2:	4418      	add	r0, r3
 800e9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9a6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800e9aa:	f5c7 7710 	rsb	r7, r7, #576	; 0x240
 800e9ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e9b2:	00ba      	lsls	r2, r7, #2
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	f00f fe7d 	bl	801e6b4 <memset>
	buf += (bitsLeft + *bitOffset) >> 3;
 800e9ba:	9a08      	ldr	r2, [sp, #32]
 800e9bc:	9b01      	ldr	r3, [sp, #4]
 800e9be:	6810      	ldr	r0, [r2, #0]
 800e9c0:	9903      	ldr	r1, [sp, #12]
 800e9c2:	4403      	add	r3, r0
 800e9c4:	4618      	mov	r0, r3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	6013      	str	r3, [r2, #0]
	return (buf - startBuf);
 800e9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	buf += (bitsLeft + *bitOffset) >> 3;
 800e9ce:	eb01 00e0 	add.w	r0, r1, r0, asr #3
	return (buf - startBuf);
 800e9d2:	1ac0      	subs	r0, r0, r3
}
 800e9d4:	b019      	add	sp, #100	; 0x64
 800e9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9da:	1d2b      	adds	r3, r5, #4
			xy[i+0] = 0;
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f845 2027 	str.w	r2, [r5, r7, lsl #2]
			xy[i+1] = 0;
 800e9e2:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800e9e6:	3702      	adds	r7, #2
 800e9e8:	42b9      	cmp	r1, r7
 800e9ea:	dcf7      	bgt.n	800e9dc <xmp3_DecodeHuffman+0x528>
		return 0;
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	e736      	b.n	800e85e <xmp3_DecodeHuffman+0x3aa>
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e9f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	f47f ad91 	bne.w	800e51a <xmp3_DecodeHuffman+0x66>
		if (sis->mixedBlock == 0) {
 800e9f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f040 80be 	bne.w	800eb7c <xmp3_DecodeHuffman+0x6c8>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800ea00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ea02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ea04:	3201      	adds	r2, #1
 800ea06:	f1a3 33aa 	sub.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ea0a:	fb83 0302 	smull	r0, r3, r3, r2
 800ea0e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800ea12:	eb01 0143 	add.w	r1, r1, r3, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800ea16:	f44f 7010 	mov.w	r0, #576	; 0x240
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800ea1a:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	; 0x2e
 800ea1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ea22:	e58f      	b.n	800e544 <xmp3_DecodeHuffman+0x90>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800ea24:	4614      	mov	r4, r2
 800ea26:	f1c3 0220 	rsb	r2, r3, #32
 800ea2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea2e:	9402      	str	r4, [sp, #8]
 800ea30:	4091      	lsls	r1, r2
 800ea32:	e741      	b.n	800e8b8 <xmp3_DecodeHuffman+0x404>
			if (cachedBits + bitsLeft <= 0) return i;
 800ea34:	eb03 000b 	add.w	r0, r3, fp
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	dda7      	ble.n	800e98c <xmp3_DecodeHuffman+0x4d8>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ea3c:	f1bb 0f00 	cmp.w	fp, #0
 800ea40:	dd07      	ble.n	800ea52 <xmp3_DecodeHuffman+0x59e>
 800ea42:	9c02      	ldr	r4, [sp, #8]
 800ea44:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ea48:	9402      	str	r4, [sp, #8]
 800ea4a:	f1c3 0618 	rsb	r6, r3, #24
 800ea4e:	40b5      	lsls	r5, r6
 800ea50:	4329      	orrs	r1, r5
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea52:	f1bb 0f08 	cmp.w	fp, #8
 800ea56:	dd07      	ble.n	800ea68 <xmp3_DecodeHuffman+0x5b4>
 800ea58:	9c02      	ldr	r4, [sp, #8]
 800ea5a:	f1c3 0510 	rsb	r5, r3, #16
 800ea5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea62:	9402      	str	r4, [sp, #8]
 800ea64:	40ab      	lsls	r3, r5
 800ea66:	4319      	orrs	r1, r3
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ea68:	1e43      	subs	r3, r0, #1
 800ea6a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ea6e:	fa44 f303 	asr.w	r3, r4, r3
 800ea72:	4019      	ands	r1, r3
			padBits = 10;
 800ea74:	f04f 0c0a 	mov.w	ip, #10
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800ea78:	f100 030a 	add.w	r3, r0, #10
			bitsLeft = 0;
 800ea7c:	f04f 0b00 	mov.w	fp, #0
 800ea80:	e745      	b.n	800e90e <xmp3_DecodeHuffman+0x45a>
		maxBits = GetMaxbits(tBase[0]);
 800ea82:	4e4f      	ldr	r6, [pc, #316]	; (800ebc0 <xmp3_DecodeHuffman+0x70c>)
 800ea84:	f836 c010 	ldrh.w	ip, [r6, r0, lsl #1]
 800ea88:	f00c 0c0f 	and.w	ip, ip, #15
				cw = tBase[cache >> (32 - maxBits)];
 800ea8c:	f1cc 0c20 	rsb	ip, ip, #32
		padBits = 0;
 800ea90:	f04f 0800 	mov.w	r8, #0
 800ea94:	4628      	mov	r0, r5
			if (bitsLeft >= 16) {
 800ea96:	f1bb 0f0f 	cmp.w	fp, #15
 800ea9a:	dd43      	ble.n	800eb24 <xmp3_DecodeHuffman+0x670>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea9c:	7866      	ldrb	r6, [r4, #1]
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ea9e:	f814 5b02 	ldrb.w	r5, [r4], #2
 800eaa2:	f1c2 0718 	rsb	r7, r2, #24
 800eaa6:	40bd      	lsls	r5, r7
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eaa8:	f1c2 0710 	rsb	r7, r2, #16
 800eaac:	40be      	lsls	r6, r7
 800eaae:	4335      	orrs	r5, r6
				bitsLeft -= 16;
 800eab0:	f1ab 0b10 	sub.w	fp, fp, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eab4:	432b      	orrs	r3, r5
				cachedBits += 16;
 800eab6:	3210      	adds	r2, #16
			while (nVals > 0 && cachedBits >= 11 ) {
 800eab8:	f100 0608 	add.w	r6, r0, #8
 800eabc:	e001      	b.n	800eac2 <xmp3_DecodeHuffman+0x60e>
 800eabe:	2a0a      	cmp	r2, #10
 800eac0:	dde9      	ble.n	800ea96 <xmp3_DecodeHuffman+0x5e2>
				cw = tBase[cache >> (32 - maxBits)];
 800eac2:	fa23 f00c 	lsr.w	r0, r3, ip
 800eac6:	3001      	adds	r0, #1
 800eac8:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
				len = GetHLen(cw);
 800eacc:	0b05      	lsrs	r5, r0, #12
				cache <<= len;
 800eace:	40ab      	lsls	r3, r5
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800ead0:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 800ead4:	f3c0 1503 	ubfx	r5, r0, #4, #4
 800ead8:	f003 4700 	and.w	r7, r3, #2147483648	; 0x80000000
				cachedBits -= len;
 800eadc:	eba2 3210 	sub.w	r2, r2, r0, lsr #12
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eae0:	bf1b      	ittet	ne
 800eae2:	432f      	orrne	r7, r5
 800eae4:	005b      	lslne	r3, r3, #1
 800eae6:	462f      	moveq	r7, r5
 800eae8:	f102 32ff 	addne.w	r2, r2, #4294967295
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800eaec:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 800eaf0:	f3c0 2503 	ubfx	r5, r0, #8, #4
 800eaf4:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 800eaf8:	d002      	beq.n	800eb00 <xmp3_DecodeHuffman+0x64c>
 800eafa:	4305      	orrs	r5, r0
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	3a01      	subs	r2, #1
				if (cachedBits < padBits)
 800eb00:	4542      	cmp	r2, r8
				nVals -= 2;
 800eb02:	f1a1 0102 	sub.w	r1, r1, #2
 800eb06:	4630      	mov	r0, r6
				if (cachedBits < padBits)
 800eb08:	f6ff ae1d 	blt.w	800e746 <xmp3_DecodeHuffman+0x292>
			while (nVals > 0 && cachedBits >= 11 ) {
 800eb0c:	2900      	cmp	r1, #0
				*xy++ = y;
 800eb0e:	e946 7502 	strd	r7, r5, [r6, #-8]
			while (nVals > 0 && cachedBits >= 11 ) {
 800eb12:	f106 0608 	add.w	r6, r6, #8
 800eb16:	dcd2      	bgt.n	800eabe <xmp3_DecodeHuffman+0x60a>
		bitsLeft += (cachedBits - padBits);
 800eb18:	eba2 0308 	sub.w	r3, r2, r8
		return (startBits - bitsLeft);
 800eb1c:	9a01      	ldr	r2, [sp, #4]
		bitsLeft += (cachedBits - padBits);
 800eb1e:	445b      	add	r3, fp
		return (startBits - bitsLeft);
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	e045      	b.n	800ebb0 <xmp3_DecodeHuffman+0x6fc>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800eb24:	eb0b 0502 	add.w	r5, fp, r2
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	f77f ae0c 	ble.w	800e746 <xmp3_DecodeHuffman+0x292>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eb2e:	f1bb 0f00 	cmp.w	fp, #0
 800eb32:	dd05      	ble.n	800eb40 <xmp3_DecodeHuffman+0x68c>
 800eb34:	f814 6b01 	ldrb.w	r6, [r4], #1
 800eb38:	f1c2 0718 	rsb	r7, r2, #24
 800eb3c:	40be      	lsls	r6, r7
 800eb3e:	4333      	orrs	r3, r6
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eb40:	f1bb 0f08 	cmp.w	fp, #8
 800eb44:	dd05      	ble.n	800eb52 <xmp3_DecodeHuffman+0x69e>
 800eb46:	f1c2 0610 	rsb	r6, r2, #16
 800eb4a:	f814 2b01 	ldrb.w	r2, [r4], #1
 800eb4e:	40b2      	lsls	r2, r6
 800eb50:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800eb52:	1e6a      	subs	r2, r5, #1
 800eb54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eb58:	fa46 f202 	asr.w	r2, r6, r2
 800eb5c:	4013      	ands	r3, r2
				padBits = 11;
 800eb5e:	f04f 080b 	mov.w	r8, #11
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800eb62:	f105 020b 	add.w	r2, r5, #11
				bitsLeft = 0;
 800eb66:	f04f 0b00 	mov.w	fp, #0
 800eb6a:	e7a5      	b.n	800eab8 <xmp3_DecodeHuffman+0x604>
		return 0;
 800eb6c:	2700      	movs	r7, #0
 800eb6e:	e70d      	b.n	800e98c <xmp3_DecodeHuffman+0x4d8>
					while (cachedBits < minBits) {
 800eb70:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eb74:	e624      	b.n	800e7c0 <xmp3_DecodeHuffman+0x30c>
					while (cachedBits < minBits) {
 800eb76:	f8dd c008 	ldr.w	ip, [sp, #8]
 800eb7a:	e659      	b.n	800e830 <xmp3_DecodeHuffman+0x37c>
			if (fh->ver == MPEG1) {
 800eb7c:	780b      	ldrb	r3, [r1, #0]
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb7e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
			if (fh->ver == MPEG1) {
 800eb80:	bb13      	cbnz	r3, 800ebc8 <xmp3_DecodeHuffman+0x714>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb82:	9922      	ldr	r1, [sp, #136]	; 0x88
 800eb84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb86:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800eb88:	440b      	add	r3, r1
 800eb8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	4401      	add	r1, r0
 800eb90:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800eb94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb96:	440b      	add	r3, r1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800eb98:	f44f 7010 	mov.w	r0, #576	; 0x240
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb9e:	3301      	adds	r3, #1
 800eba0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eba4:	e4ce      	b.n	800e544 <xmp3_DecodeHuffman+0x90>
		bitsLeft += (cachedBits - padBits);
 800eba6:	eba2 0309 	sub.w	r3, r2, r9
		return (startBits - bitsLeft);
 800ebaa:	9a01      	ldr	r2, [sp, #4]
		bitsLeft += (cachedBits - padBits);
 800ebac:	445b      	add	r3, fp
		return (startBits - bitsLeft);
 800ebae:	1ad3      	subs	r3, r2, r3
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f6bf ae4e 	bge.w	800e852 <xmp3_DecodeHuffman+0x39e>
 800ebb6:	e5c6      	b.n	800e746 <xmp3_DecodeHuffman+0x292>
 800ebb8:	08027c68 	.word	0x08027c68
 800ebbc:	08027c60 	.word	0x08027c60
 800ebc0:	08025b3c 	.word	0x08025b3c
 800ebc4:	08027c70 	.word	0x08027c70
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800ebc8:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
 800ebcc:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800ebd0:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800ebd2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800ebd6:	f44f 7010 	mov.w	r0, #576	; 0x240
				r1Start = fh->sfBand->l[6] + 2*w;
 800ebda:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800ebde:	e4b1      	b.n	800e544 <xmp3_DecodeHuffman+0x90>

0800ebe0 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800ebe0:	4684      	mov	ip, r0
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800ebe2:	bb93      	cbnz	r3, 800ec4a <FreqInvertRescale+0x6a>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800ebe4:	f012 0001 	ands.w	r0, r2, #1
 800ebe8:	d02e      	beq.n	800ec48 <FreqInvertRescale+0x68>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
			y1 = *y;	y += 2*NBANDS;
 800ebea:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
			y2 = *y;	y += 2*NBANDS;
 800ebee:	f8dc 1280 	ldr.w	r1, [ip, #640]	; 0x280
			y3 = *y;	y += 2*NBANDS;
 800ebf2:	f8dc 2380 	ldr.w	r2, [ip, #896]	; 0x380
			y7 = *y;	y += 2*NBANDS;
			y8 = *y;	y += 2*NBANDS;

			y -= 18*NBANDS;
			*y = -y0;	y += 2*NBANDS;
			*y = -y1;	y += 2*NBANDS;
 800ebf6:	4240      	negs	r0, r0
			*y = -y2;	y += 2*NBANDS;
 800ebf8:	4249      	negs	r1, r1
			*y = -y3;	y += 2*NBANDS;
 800ebfa:	4252      	negs	r2, r2
			*y = -y1;	y += 2*NBANDS;
 800ebfc:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
			*y = -y2;	y += 2*NBANDS;
 800ec00:	f8cc 1280 	str.w	r1, [ip, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 800ec04:	f8cc 2380 	str.w	r2, [ip, #896]	; 0x380
			y4 = *y;	y += 2*NBANDS;
 800ec08:	f8dc 1480 	ldr.w	r1, [ip, #1152]	; 0x480
			y5 = *y;	y += 2*NBANDS;
 800ec0c:	f8dc 2580 	ldr.w	r2, [ip, #1408]	; 0x580
			*y = -y5;	y += 2*NBANDS;
			*y = -y6;	y += 2*NBANDS;
			*y = -y7;	y += 2*NBANDS;
			*y = -y8;	y += 2*NBANDS;
		}
		return 0;
 800ec10:	4618      	mov	r0, r3
			y6 = *y;	y += 2*NBANDS;
 800ec12:	f8dc 3680 	ldr.w	r3, [ip, #1664]	; 0x680
			*y = -y4;	y += 2*NBANDS;
 800ec16:	4249      	negs	r1, r1
			*y = -y5;	y += 2*NBANDS;
 800ec18:	4252      	negs	r2, r2
			*y = -y6;	y += 2*NBANDS;
 800ec1a:	425b      	negs	r3, r3
			*y = -y4;	y += 2*NBANDS;
 800ec1c:	f8cc 1480 	str.w	r1, [ip, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800ec20:	f8cc 2580 	str.w	r2, [ip, #1408]	; 0x580
			*y = -y0;	y += 2*NBANDS;
 800ec24:	f8dc 1080 	ldr.w	r1, [ip, #128]	; 0x80
			y7 = *y;	y += 2*NBANDS;
 800ec28:	f8dc 2780 	ldr.w	r2, [ip, #1920]	; 0x780
			*y = -y6;	y += 2*NBANDS;
 800ec2c:	f8cc 3680 	str.w	r3, [ip, #1664]	; 0x680
			y8 = *y;	y += 2*NBANDS;
 800ec30:	f8dc 3880 	ldr.w	r3, [ip, #2176]	; 0x880
			*y = -y7;	y += 2*NBANDS;
 800ec34:	4252      	negs	r2, r2
			*y = -y0;	y += 2*NBANDS;
 800ec36:	4249      	negs	r1, r1
			*y = -y8;	y += 2*NBANDS;
 800ec38:	425b      	negs	r3, r3
			*y = -y0;	y += 2*NBANDS;
 800ec3a:	f8cc 1080 	str.w	r1, [ip, #128]	; 0x80
			*y = -y7;	y += 2*NBANDS;
 800ec3e:	f8cc 2780 	str.w	r2, [ip, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 800ec42:	f8cc 3880 	str.w	r3, [ip, #2176]	; 0x880
 800ec46:	4770      	bx	lr
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800ec48:	4770      	bx	lr
{
 800ec4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec4e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ec52:	40df      	lsrs	r7, r3
		if (blockIdx & 0x01) {
 800ec54:	f012 0001 	ands.w	r0, r2, #1
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec58:	f107 37ff 	add.w	r7, r7, #4294967295
 800ec5c:	f1c3 061f 	rsb	r6, r3, #31
		if (blockIdx & 0x01) {
 800ec60:	d046      	beq.n	800ecf0 <FreqInvertRescale+0x110>
		mOut = 0;
 800ec62:	2000      	movs	r0, #0
 800ec64:	f10c 0580 	add.w	r5, ip, #128	; 0x80
 800ec68:	f50c 6910 	add.w	r9, ip, #2304	; 0x900
	__asm__ volatile (
 800ec6c:	4680      	mov	r8, r0
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec6e:	f855 4c80 	ldr.w	r4, [r5, #-128]
 800ec72:	fa44 fe06 	asr.w	lr, r4, r6
 800ec76:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800ec7a:	ebbe 7fe4 	cmp.w	lr, r4, asr #31
 800ec7e:	bf18      	it	ne
 800ec80:	ea87 040a 	eorne.w	r4, r7, sl
 800ec84:	409c      	lsls	r4, r3
 800ec86:	4642      	mov	r2, r8
 800ec88:	f845 4c80 	str.w	r4, [r5, #-128]
 800ec8c:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 800ec90:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec94:	f8dc 4080 	ldr.w	r4, [ip, #128]	; 0x80
 800ec98:	f1c4 0e00 	rsb	lr, r4, #0
 800ec9c:	fa4e f406 	asr.w	r4, lr, r6
 800eca0:	ebb4 7fee 	cmp.w	r4, lr, asr #31
 800eca4:	ea4f 7bee 	mov.w	fp, lr, asr #31
 800eca8:	bf18      	it	ne
 800ecaa:	ea87 0e0b 	eorne.w	lr, r7, fp
 800ecae:	fa0e f403 	lsl.w	r4, lr, r3
 800ecb2:	46c2      	mov	sl, r8
 800ecb4:	f8cc 4080 	str.w	r4, [ip, #128]	; 0x80
 800ecb8:	ea84 7ae4 	eor.w	sl, r4, r4, asr #31
 800ecbc:	ebaa 7ae4 	sub.w	sl, sl, r4, asr #31
 800ecc0:	ea42 020a 	orr.w	r2, r2, sl
 800ecc4:	4310      	orrs	r0, r2
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ecc6:	680a      	ldr	r2, [r1, #0]
 800ecc8:	fa42 f406 	asr.w	r4, r2, r6
 800eccc:	ebb4 7fe2 	cmp.w	r4, r2, asr #31
 800ecd0:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 800ecd4:	bf18      	it	ne
 800ecd6:	ea87 020e 	eorne.w	r2, r7, lr
 800ecda:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800ecde:	409a      	lsls	r2, r3
			for (i = 0; i < 18; i+=2) {
 800ece0:	45cc      	cmp	ip, r9
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ece2:	f841 2b04 	str.w	r2, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800ece6:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800ecea:	d1c0      	bne.n	800ec6e <FreqInvertRescale+0x8e>
}
 800ecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf0:	f10c 0580 	add.w	r5, ip, #128	; 0x80
 800ecf4:	f50c 6810 	add.w	r8, ip, #2304	; 0x900
 800ecf8:	4686      	mov	lr, r0
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ecfa:	f855 4c80 	ldr.w	r4, [r5, #-128]
 800ecfe:	fa44 f906 	asr.w	r9, r4, r6
 800ed02:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800ed06:	ebb9 7fe4 	cmp.w	r9, r4, asr #31
 800ed0a:	bf18      	it	ne
 800ed0c:	ea87 040a 	eorne.w	r4, r7, sl
 800ed10:	409c      	lsls	r4, r3
 800ed12:	4672      	mov	r2, lr
 800ed14:	f845 4c80 	str.w	r4, [r5, #-128]
 800ed18:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 800ed1c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ed20:	f8dc 4080 	ldr.w	r4, [ip, #128]	; 0x80
 800ed24:	fa44 fa06 	asr.w	sl, r4, r6
 800ed28:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800ed2c:	ebba 7fe4 	cmp.w	sl, r4, asr #31
 800ed30:	bf18      	it	ne
 800ed32:	ea87 040b 	eorne.w	r4, r7, fp
 800ed36:	409c      	lsls	r4, r3
 800ed38:	46f1      	mov	r9, lr
 800ed3a:	f8cc 4080 	str.w	r4, [ip, #128]	; 0x80
 800ed3e:	ea84 79e4 	eor.w	r9, r4, r4, asr #31
 800ed42:	eba9 79e4 	sub.w	r9, r9, r4, asr #31
 800ed46:	ea42 0209 	orr.w	r2, r2, r9
 800ed4a:	4310      	orrs	r0, r2
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ed4c:	680a      	ldr	r2, [r1, #0]
 800ed4e:	fa42 f406 	asr.w	r4, r2, r6
 800ed52:	ebb4 7fe2 	cmp.w	r4, r2, asr #31
 800ed56:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ed5a:	bf18      	it	ne
 800ed5c:	ea87 0209 	eorne.w	r2, r7, r9
 800ed60:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800ed64:	409a      	lsls	r2, r3
			for (i = 0; i < 18; i+=2) {
 800ed66:	45e0      	cmp	r8, ip
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ed68:	f841 2b04 	str.w	r2, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800ed6c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800ed70:	d1c3      	bne.n	800ecfa <FreqInvertRescale+0x11a>
}
 800ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed76:	bf00      	nop

0800ed78 <WinPrevious>:
	if (btPrev == 2) {
 800ed78:	2a02      	cmp	r2, #2
{
 800ed7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800ed7e:	4b46      	ldr	r3, [pc, #280]	; (800ee98 <WinPrevious+0x120>)
	if (btPrev == 2) {
 800ed80:	d01e      	beq.n	800edc0 <WinPrevious+0x48>
		wpLo = imdctWin[btPrev] + 18;
 800ed82:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ed86:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800ed8a:	f10c 0648 	add.w	r6, ip, #72	; 0x48
		xpwHi = xPrevWin + 17;
 800ed8e:	f101 0e44 	add.w	lr, r1, #68	; 0x44
		wpHi = wpLo + 17;
 800ed92:	f10c 0c8c 	add.w	ip, ip, #140	; 0x8c
		for (i = 9; i > 0; i--) {
 800ed96:	f100 0724 	add.w	r7, r0, #36	; 0x24
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ed9a:	f850 3b04 	ldr.w	r3, [r0], #4
 800ed9e:	f85c 4904 	ldr.w	r4, [ip], #-4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800eda2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eda6:	461a      	mov	r2, r3
 800eda8:	fb85 8202 	smull	r8, r2, r5, r2
			*xpwLo++ = MULSHIFT32(wLo, x);
 800edac:	f841 2b04 	str.w	r2, [r1], #4
 800edb0:	fb84 2303 	smull	r2, r3, r4, r3
		for (i = 9; i > 0; i--) {
 800edb4:	4287      	cmp	r7, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800edb6:	f84e 3904 	str.w	r3, [lr], #-4
		for (i = 9; i > 0; i--) {
 800edba:	d1ee      	bne.n	800ed9a <WinPrevious+0x22>
}
 800edbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc0:	6882      	ldr	r2, [r0, #8]
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800edc2:	f8d3 c138 	ldr.w	ip, [r3, #312]	; 0x138
 800edc6:	fb8c 4202 	smull	r4, r2, ip, r2
 800edca:	6984      	ldr	r4, [r0, #24]
 800edcc:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 800edd0:	fb85 6404 	smull	r6, r4, r5, r4
 800edd4:	4422      	add	r2, r4
 800edd6:	600a      	str	r2, [r1, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800edd8:	f8d3 713c 	ldr.w	r7, [r3, #316]	; 0x13c
 800eddc:	6842      	ldr	r2, [r0, #4]
 800edde:	fb87 4202 	smull	r4, r2, r7, r2
 800ede2:	69c4      	ldr	r4, [r0, #28]
 800ede4:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 800ede8:	fb85 6404 	smull	r6, r4, r5, r4
 800edec:	4422      	add	r2, r4
 800edee:	604a      	str	r2, [r1, #4]
 800edf0:	6802      	ldr	r2, [r0, #0]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800edf2:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
 800edf6:	fb86 4202 	smull	r4, r2, r6, r2
 800edfa:	6a05      	ldr	r5, [r0, #32]
 800edfc:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800ee00:	fb84 e505 	smull	lr, r5, r4, r5
 800ee04:	442a      	add	r2, r5
 800ee06:	608a      	str	r2, [r1, #8]
 800ee08:	6802      	ldr	r2, [r0, #0]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800ee0a:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800ee0e:	4696      	mov	lr, r2
 800ee10:	fb85 2e0e 	smull	r2, lr, r5, lr
 800ee14:	6a02      	ldr	r2, [r0, #32]
 800ee16:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800ee1a:	fb84 8202 	smull	r8, r2, r4, r2
 800ee1e:	4472      	add	r2, lr
 800ee20:	60ca      	str	r2, [r1, #12]
 800ee22:	6842      	ldr	r2, [r0, #4]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800ee24:	f8d3 e148 	ldr.w	lr, [r3, #328]	; 0x148
 800ee28:	4691      	mov	r9, r2
 800ee2a:	fb8e 4909 	smull	r4, r9, lr, r9
 800ee2e:	69c4      	ldr	r4, [r0, #28]
 800ee30:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800ee34:	fb82 8404 	smull	r8, r4, r2, r4
 800ee38:	eb09 0204 	add.w	r2, r9, r4
 800ee3c:	610a      	str	r2, [r1, #16]
 800ee3e:	6882      	ldr	r2, [r0, #8]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800ee40:	f8d3 814c 	ldr.w	r8, [r3, #332]	; 0x14c
 800ee44:	fb88 4202 	smull	r4, r2, r8, r2
 800ee48:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
 800ee4c:	6983      	ldr	r3, [r0, #24]
 800ee4e:	fb84 9303 	smull	r9, r3, r4, r3
 800ee52:	441a      	add	r2, r3
 800ee54:	614a      	str	r2, [r1, #20]
 800ee56:	6943      	ldr	r3, [r0, #20]
 800ee58:	fb8c 2303 	smull	r2, r3, ip, r3
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800ee5c:	618b      	str	r3, [r1, #24]
 800ee5e:	6903      	ldr	r3, [r0, #16]
 800ee60:	fb87 2303 	smull	r2, r3, r7, r3
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800ee64:	61cb      	str	r3, [r1, #28]
 800ee66:	68c3      	ldr	r3, [r0, #12]
 800ee68:	fb86 2303 	smull	r2, r3, r6, r3
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800ee6c:	620b      	str	r3, [r1, #32]
 800ee6e:	68c3      	ldr	r3, [r0, #12]
 800ee70:	fb85 2303 	smull	r2, r3, r5, r3
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800ee74:	624b      	str	r3, [r1, #36]	; 0x24
 800ee76:	6903      	ldr	r3, [r0, #16]
 800ee78:	fb8e 2303 	smull	r2, r3, lr, r3
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800ee7c:	628b      	str	r3, [r1, #40]	; 0x28
 800ee7e:	6942      	ldr	r2, [r0, #20]
 800ee80:	fb88 3202 	smull	r3, r2, r8, r2
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	e9c1 3310 	strd	r3, r3, [r1, #64]	; 0x40
 800ee8a:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
 800ee8e:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800ee92:	62ca      	str	r2, [r1, #44]	; 0x2c
}
 800ee94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee98:	0802841c 	.word	0x0802841c

0800ee9c <xmp3_IMDCT>:
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
 // a bit faster in RAM
/*__attribute__ ((section (".data")))*/ int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	b0c5      	sub	sp, #276	; 0x114
 800eea2:	921a      	str	r2, [sp, #104]	; 0x68
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f000 86a0 	beq.w	800fbea <xmp3_IMDCT+0xd4e>
 800eeaa:	6803      	ldr	r3, [r0, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 869c 	beq.w	800fbea <xmp3_IMDCT+0xd4e>
 800eeb2:	6844      	ldr	r4, [r0, #4]
 800eeb4:	941c      	str	r4, [sp, #112]	; 0x70
 800eeb6:	2c00      	cmp	r4, #0
 800eeb8:	f000 8697 	beq.w	800fbea <xmp3_IMDCT+0xd4e>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800eebc:	68c6      	ldr	r6, [r0, #12]
 800eebe:	960c      	str	r6, [sp, #48]	; 0x30
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800eec0:	2e00      	cmp	r6, #0
 800eec2:	f000 8692 	beq.w	800fbea <xmp3_IMDCT+0xd4e>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800eec6:	6940      	ldr	r0, [r0, #20]
 800eec8:	900d      	str	r0, [sp, #52]	; 0x34
 800eeca:	2800      	cmp	r0, #0
 800eecc:	f000 868d 	beq.w	800fbea <xmp3_IMDCT+0xd4e>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eed0:	4617      	mov	r7, r2
 800eed2:	781a      	ldrb	r2, [r3, #0]
	if (si->sis[gr][ch].blockType != 2) {
 800eed4:	911d      	str	r1, [sp, #116]	; 0x74
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eed6:	2a00      	cmp	r2, #0
 800eed8:	468c      	mov	ip, r1
 800eeda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eedc:	48c3      	ldr	r0, [pc, #780]	; (800f1ec <xmp3_IMDCT+0x350>)
	if (si->sis[gr][ch].blockType != 2) {
 800eede:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eee2:	bf0c      	ite	eq
 800eee4:	2108      	moveq	r1, #8
 800eee6:	2106      	movne	r1, #6
	if (si->sis[gr][ch].blockType != 2) {
 800eee8:	011b      	lsls	r3, r3, #4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eeea:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
	if (si->sis[gr][ch].blockType != 2) {
 800eeee:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
 800eef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eef6:	4423      	add	r3, r4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eef8:	17cc      	asrs	r4, r1, #31
 800eefa:	fb80 5101 	smull	r5, r1, r0, r1
 800eefe:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
 800ef02:	b209      	sxth	r1, r1
 800ef04:	9116      	str	r1, [sp, #88]	; 0x58
	if (si->sis[gr][ch].blockType != 2) {
 800ef06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ef08:	4664      	mov	r4, ip
 800ef0a:	00fd      	lsls	r5, r7, #3
 800ef0c:	00e4      	lsls	r4, r4, #3
 800ef0e:	2902      	cmp	r1, #2
 800ef10:	951b      	str	r5, [sp, #108]	; 0x6c
 800ef12:	941e      	str	r4, [sp, #120]	; 0x78
 800ef14:	f000 863e 	beq.w	800fb94 <xmp3_IMDCT+0xcf8>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800ef18:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800ef1c:	f240 2126 	movw	r1, #550	; 0x226
 800ef20:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ef24:	428b      	cmp	r3, r1
 800ef26:	f340 8303 	ble.w	800f530 <xmp3_IMDCT+0x694>
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800ef2a:	0213      	lsls	r3, r2, #8
 800ef2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ef2e:	eb06 2302 	add.w	r3, r6, r2, lsl #8
 800ef32:	9318      	str	r3, [sp, #96]	; 0x60
 800ef34:	f240 2336 	movw	r3, #566	; 0x236
 800ef38:	930f      	str	r3, [sp, #60]	; 0x3c
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800ef3a:	2320      	movs	r3, #32
 800ef3c:	9305      	str	r3, [sp, #20]
 800ef3e:	22f8      	movs	r2, #248	; 0xf8
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800ef40:	231f      	movs	r3, #31
 800ef42:	441a      	add	r2, r3
 800ef44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef46:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ef4a:	9209      	str	r2, [sp, #36]	; 0x24
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800ef4c:	4aa8      	ldr	r2, [pc, #672]	; (800f1f0 <xmp3_IMDCT+0x354>)
 800ef4e:	6811      	ldr	r1, [r2, #0]
 800ef50:	9100      	str	r1, [sp, #0]
 800ef52:	6851      	ldr	r1, [r2, #4]
 800ef54:	9101      	str	r1, [sp, #4]
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800ef56:	6891      	ldr	r1, [r2, #8]
 800ef58:	9102      	str	r1, [sp, #8]
 800ef5a:	68d1      	ldr	r1, [r2, #12]
 800ef5c:	9103      	str	r1, [sp, #12]
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800ef5e:	6911      	ldr	r1, [r2, #16]
 800ef60:	9104      	str	r1, [sp, #16]
 800ef62:	6951      	ldr	r1, [r2, #20]
 800ef64:	9106      	str	r1, [sp, #24]
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800ef66:	6991      	ldr	r1, [r2, #24]
 800ef68:	9107      	str	r1, [sp, #28]
 800ef6a:	69d1      	ldr	r1, [r2, #28]
 800ef6c:	9108      	str	r1, [sp, #32]
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800ef6e:	e9d2 010e 	ldrd	r0, r1, [r2, #56]	; 0x38
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800ef72:	e9d2 c708 	ldrd	ip, r7, [r2, #32]
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800ef76:	e9d2 650a 	ldrd	r6, r5, [r2, #40]	; 0x28
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800ef7a:	e9d2 4b0c 	ldrd	r4, fp, [r2, #48]	; 0x30
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800ef7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800ef82:	e9d3 8211 	ldrd	r8, r2, [r3, #68]	; 0x44
 800ef86:	9900      	ldr	r1, [sp, #0]
 800ef88:	46c6      	mov	lr, r8
 800ef8a:	fb81 9e0e 	smull	r9, lr, r1, lr
 800ef8e:	9801      	ldr	r0, [sp, #4]
 800ef90:	4691      	mov	r9, r2
 800ef92:	fb80 a909 	smull	sl, r9, r0, r9
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800ef96:	ebae 0e09 	sub.w	lr, lr, r9
 800ef9a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ef9e:	9900      	ldr	r1, [sp, #0]
 800efa0:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
 800efa4:	fb81 e202 	smull	lr, r2, r1, r2
 800efa8:	fb80 e808 	smull	lr, r8, r0, r8
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efac:	4442      	add	r2, r8
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800efae:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
 800efb2:	9902      	ldr	r1, [sp, #8]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efb4:	0052      	lsls	r2, r2, #1
 800efb6:	649a      	str	r2, [r3, #72]	; 0x48
 800efb8:	46c6      	mov	lr, r8
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800efba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efbc:	fb81 9e0e 	smull	r9, lr, r1, lr
 800efc0:	9803      	ldr	r0, [sp, #12]
 800efc2:	4691      	mov	r9, r2
 800efc4:	fb80 a909 	smull	sl, r9, r0, r9
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800efc8:	ebae 0e09 	sub.w	lr, lr, r9
 800efcc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800efd0:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
 800efd4:	fb81 e202 	smull	lr, r2, r1, r2
 800efd8:	fb80 e808 	smull	lr, r8, r0, r8
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efdc:	4442      	add	r2, r8
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800efde:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 800efe2:	9904      	ldr	r1, [sp, #16]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efe4:	0052      	lsls	r2, r2, #1
 800efe6:	64da      	str	r2, [r3, #76]	; 0x4c
 800efe8:	46c6      	mov	lr, r8
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800efea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efec:	fb81 9e0e 	smull	r9, lr, r1, lr
 800eff0:	9806      	ldr	r0, [sp, #24]
 800eff2:	4691      	mov	r9, r2
 800eff4:	fb80 a909 	smull	sl, r9, r0, r9
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800eff8:	ebae 0e09 	sub.w	lr, lr, r9
 800effc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f000:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
 800f004:	fb81 e202 	smull	lr, r2, r1, r2
 800f008:	fb80 e808 	smull	lr, r8, r0, r8
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f00c:	4442      	add	r2, r8
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f00e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 800f012:	9907      	ldr	r1, [sp, #28]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f014:	0052      	lsls	r2, r2, #1
 800f016:	651a      	str	r2, [r3, #80]	; 0x50
 800f018:	46c6      	mov	lr, r8
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f01a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f01c:	fb81 9e0e 	smull	r9, lr, r1, lr
 800f020:	9808      	ldr	r0, [sp, #32]
 800f022:	4691      	mov	r9, r2
 800f024:	fb80 a909 	smull	sl, r9, r0, r9
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f028:	ebae 0e09 	sub.w	lr, lr, r9
 800f02c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f030:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
 800f034:	fb81 e202 	smull	lr, r2, r1, r2
 800f038:	fb80 e808 	smull	lr, r8, r0, r8
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f03c:	4442      	add	r2, r8
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f03e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f042:	0052      	lsls	r2, r2, #1
 800f044:	655a      	str	r2, [r3, #84]	; 0x54
 800f046:	46c6      	mov	lr, r8
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f04a:	fb8c 9e0e 	smull	r9, lr, ip, lr
 800f04e:	4691      	mov	r9, r2
 800f050:	fb87 a909 	smull	sl, r9, r7, r9
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f054:	ebae 0e09 	sub.w	lr, lr, r9
 800f058:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f05c:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
 800f060:	fb8c e202 	smull	lr, r2, ip, r2
 800f064:	fb87 e808 	smull	lr, r8, r7, r8
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f068:	4442      	add	r2, r8
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f06a:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f06e:	0052      	lsls	r2, r2, #1
 800f070:	659a      	str	r2, [r3, #88]	; 0x58
 800f072:	46c6      	mov	lr, r8
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f076:	fb86 9e0e 	smull	r9, lr, r6, lr
 800f07a:	4691      	mov	r9, r2
 800f07c:	fb85 a909 	smull	sl, r9, r5, r9
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f080:	ebae 0e09 	sub.w	lr, lr, r9
 800f084:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f088:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 800f08c:	fb86 e202 	smull	lr, r2, r6, r2
 800f090:	fb85 e808 	smull	lr, r8, r5, r8
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f094:	4442      	add	r2, r8
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f096:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f09a:	0052      	lsls	r2, r2, #1
 800f09c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f09e:	46c6      	mov	lr, r8
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f0a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f0a2:	fb84 9e0e 	smull	r9, lr, r4, lr
 800f0a6:	4691      	mov	r9, r2
 800f0a8:	fb8b a909 	smull	sl, r9, fp, r9
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f0ac:	ebae 0e09 	sub.w	lr, lr, r9
 800f0b0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f0b4:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
 800f0b8:	fb84 e202 	smull	lr, r2, r4, r2
 800f0bc:	fb8b e808 	smull	lr, r8, fp, r8
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0c0:	4442      	add	r2, r8
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f0c2:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800f0c6:	980a      	ldr	r0, [sp, #40]	; 0x28
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0c8:	0052      	lsls	r2, r2, #1
 800f0ca:	661a      	str	r2, [r3, #96]	; 0x60
 800f0cc:	46c6      	mov	lr, r8
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f0ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f0d0:	fb80 9e0e 	smull	r9, lr, r0, lr
 800f0d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0d6:	4691      	mov	r9, r2
 800f0d8:	fb81 a909 	smull	sl, r9, r1, r9
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f0dc:	ebae 0e09 	sub.w	lr, lr, r9
 800f0e0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f0e4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 800f0e8:	fb80 e202 	smull	lr, r2, r0, r2
 800f0ec:	fb81 e808 	smull	lr, r8, r1, r8
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0f0:	4442      	add	r2, r8
 800f0f2:	0052      	lsls	r2, r2, #1
 800f0f4:	665a      	str	r2, [r3, #100]	; 0x64
	for (k = nBfly; k > 0; k--) {
 800f0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f8:	3348      	adds	r3, #72	; 0x48
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	f47f af41 	bne.w	800ef82 <xmp3_IMDCT+0xe6>
	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
	bc.prevType = mi->prevType[ch];
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f100:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800f104:	4413      	add	r3, r2
 800f106:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	440a      	add	r2, r1
 800f10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f112:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f114:	4413      	add	r3, r2
 800f116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f118:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f11a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f11c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f11e:	eb02 0185 	add.w	r1, r2, r5, lsl #2
 800f122:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	bc.gbIn = hi->gb[ch];

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f126:	e9dd 640d 	ldrd	r6, r4, [sp, #52]	; 0x34
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f12a:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
	bc.gbIn = hi->gb[ch];
 800f12e:	f8d1 7208 	ldr.w	r7, [r1, #520]	; 0x208
 800f132:	970c      	str	r7, [sp, #48]	; 0x30
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f134:	4290      	cmp	r0, r2
 800f136:	bfb8      	it	lt
 800f138:	4610      	movlt	r0, r2
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f13a:	2b00      	cmp	r3, #0
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f13c:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f140:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f142:	bf08      	it	eq
 800f144:	2100      	moveq	r1, #0
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f146:	4602      	mov	r2, r0
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f148:	9116      	str	r1, [sp, #88]	; 0x58
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f14a:	4928      	ldr	r1, [pc, #160]	; (800f1ec <xmp3_IMDCT+0x350>)
 800f14c:	3211      	adds	r2, #17
 800f14e:	fb81 0102 	smull	r0, r1, r1, r2
 800f152:	17d2      	asrs	r2, r2, #31
 800f154:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800f158:	920b      	str	r2, [sp, #44]	; 0x2c
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f15a:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 800f15e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f162:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f164:	901f      	str	r0, [sp, #124]	; 0x7c
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f166:	1951      	adds	r1, r2, r5
 800f168:	eb06 12c1 	add.w	r2, r6, r1, lsl #7
 800f16c:	f502 5590 	add.w	r5, r2, #4608	; 0x1200
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f170:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f174:	9213      	str	r2, [sp, #76]	; 0x4c
	bc.prevType = mi->prevType[ch];
 800f176:	f8d0 2b08 	ldr.w	r2, [r0, #2824]	; 0xb08
 800f17a:	920a      	str	r2, [sp, #40]	; 0x28
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f17c:	f8d0 2b10 	ldr.w	r2, [r0, #2832]	; 0xb10
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f180:	9805      	ldr	r0, [sp, #20]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f182:	9517      	str	r5, [sp, #92]	; 0x5c
 800f184:	4434      	add	r4, r6
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f186:	2800      	cmp	r0, #0
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f188:	9414      	str	r4, [sp, #80]	; 0x50
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f18a:	9207      	str	r2, [sp, #28]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f18c:	f340 8526 	ble.w	800fbdc <xmp3_IMDCT+0xd40>
		currWinIdx = sis->blockType;
 800f190:	e9dd 621d 	ldrd	r6, r2, [sp, #116]	; 0x74
 800f194:	4432      	add	r2, r6
 800f196:	0112      	lsls	r2, r2, #4
 800f198:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f19c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f19e:	9401      	str	r4, [sp, #4]
 800f1a0:	188a      	adds	r2, r1, r2
 800f1a2:	2f06      	cmp	r7, #6
	mOut = 0;
 800f1a4:	f04f 0100 	mov.w	r1, #0
		currWinIdx = sis->blockType;
 800f1a8:	9211      	str	r2, [sp, #68]	; 0x44
		es = 7 - gb;
 800f1aa:	f1c7 0207 	rsb	r2, r7, #7
 800f1ae:	9219      	str	r2, [sp, #100]	; 0x64
 800f1b0:	bfc8      	it	gt
 800f1b2:	460a      	movgt	r2, r1
 800f1b4:	ee07 2a90 	vmov	s15, r2
 800f1b8:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800f1bc:	9204      	str	r2, [sp, #16]
 800f1be:	4622      	mov	r2, r4
 800f1c0:	9c18      	ldr	r4, [sp, #96]	; 0x60
	mOut = 0;
 800f1c2:	9102      	str	r1, [sp, #8]
 800f1c4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f1c8:	3c0c      	subs	r4, #12
 800f1ca:	9215      	str	r2, [sp, #84]	; 0x54
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f1cc:	9103      	str	r1, [sp, #12]
		currWinIdx = sis->blockType;
 800f1ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1d0:	9904      	ldr	r1, [sp, #16]
 800f1d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f1d4:	9200      	str	r2, [sp, #0]
 800f1d6:	3924      	subs	r1, #36	; 0x24
 800f1d8:	9106      	str	r1, [sp, #24]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800f1da:	b15b      	cbz	r3, 800f1f4 <xmp3_IMDCT+0x358>
			currWinIdx = 0;
 800f1dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1de:	9903      	ldr	r1, [sp, #12]
 800f1e0:	428b      	cmp	r3, r1
 800f1e2:	bfc8      	it	gt
 800f1e4:	2200      	movgt	r2, #0
 800f1e6:	9200      	str	r2, [sp, #0]
 800f1e8:	e004      	b.n	800f1f4 <xmp3_IMDCT+0x358>
 800f1ea:	bf00      	nop
 800f1ec:	38e38e39 	.word	0x38e38e39
 800f1f0:	080283dc 	.word	0x080283dc
		if (i < bc->prevWinSwitch)
 800f1f4:	9b07      	ldr	r3, [sp, #28]
 800f1f6:	9a03      	ldr	r2, [sp, #12]
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	f300 822f 	bgt.w	800f65c <xmp3_IMDCT+0x7c0>
 800f1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f200:	9a00      	ldr	r2, [sp, #0]
		prevWinIdx = bc->prevType;
 800f202:	9312      	str	r3, [sp, #72]	; 0x48
 800f204:	ea43 0502 	orr.w	r5, r3, r2
	if (gb < 7) {
 800f208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f20a:	2b06      	cmp	r3, #6
 800f20c:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800f210:	9310      	str	r3, [sp, #64]	; 0x40
	acc1 = acc2 = 0;
 800f212:	f04f 0000 	mov.w	r0, #0
 800f216:	4619      	mov	r1, r3
	if (gb < 7) {
 800f218:	f300 8211 	bgt.w	800f63e <xmp3_IMDCT+0x7a2>
 800f21c:	9e04      	ldr	r6, [sp, #16]
	acc1 = acc2 = 0;
 800f21e:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800f222:	af29      	add	r7, sp, #164	; 0xa4
 800f224:	4603      	mov	r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800f226:	688a      	ldr	r2, [r1, #8]
 800f228:	fa42 f20c 	asr.w	r2, r2, ip
 800f22c:	1ad3      	subs	r3, r2, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 800f22e:	684a      	ldr	r2, [r1, #4]
 800f230:	fa42 f20c 	asr.w	r2, r2, ip
			acc2 = acc1 - acc2;
 800f234:	1a18      	subs	r0, r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800f236:	1ad3      	subs	r3, r2, r3
			xPrev[i] >>= es;
 800f238:	f856 2d04 	ldr.w	r2, [r6, #-4]!
			xBuf[i+9] = acc2;	/* odd */
 800f23c:	6238      	str	r0, [r7, #32]
		for (i = 8; i >= 0; i--) {	
 800f23e:	3908      	subs	r1, #8
			xPrev[i] >>= es;
 800f240:	fa42 f20c 	asr.w	r2, r2, ip
		for (i = 8; i >= 0; i--) {	
 800f244:	428c      	cmp	r4, r1
			xBuf[i+0] = acc1;	/* even */
 800f246:	f847 3d04 	str.w	r3, [r7, #-4]!
			xPrev[i] >>= es;
 800f24a:	6032      	str	r2, [r6, #0]
		for (i = 8; i >= 0; i--) {	
 800f24c:	d1eb      	bne.n	800f226 <xmp3_IMDCT+0x38a>
 800f24e:	9823      	ldr	r0, [sp, #140]	; 0x8c
	xBuf[9] >>= 1;
 800f250:	9a29      	ldr	r2, [sp, #164]	; 0xa4
	xBuf[0] >>= 1;
 800f252:	9920      	ldr	r1, [sp, #128]	; 0x80
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800f254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f256:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800f25a:	9e21      	ldr	r6, [sp, #132]	; 0x84
	xBuf[9] >>= 1;
 800f25c:	1052      	asrs	r2, r2, #1
 800f25e:	4680      	mov	r8, r0
	a1 = x0 - x6;
 800f260:	9826      	ldr	r0, [sp, #152]	; 0x98
	xBuf[9] >>= 1;
 800f262:	9208      	str	r2, [sp, #32]
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800f264:	e9dd 2727 	ldrd	r2, r7, [sp, #156]	; 0x9c
	xBuf[0] >>= 1;
 800f268:	104c      	asrs	r4, r1, #1
	a1 = x0 - x6;
 800f26a:	ebc0 0e61 	rsb	lr, r0, r1, asr #1
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f26e:	9925      	ldr	r1, [sp, #148]	; 0x94
	xBuf[0] >>= 1;
 800f270:	940d      	str	r4, [sp, #52]	; 0x34
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f272:	1a89      	subs	r1, r1, r2
	a4 = x2 - x4;
 800f274:	eba3 090a 	sub.w	r9, r3, sl
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f278:	9109      	str	r1, [sp, #36]	; 0x24
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f27a:	eba9 0907 	sub.w	r9, r9, r7
 800f27e:	49be      	ldr	r1, [pc, #760]	; (800f578 <xmp3_IMDCT+0x6dc>)
	a5 = x2 + x4;
 800f280:	eb03 000a 	add.w	r0, r3, sl
 800f284:	fb81 4808 	smull	r4, r8, r1, r8
	a2 = x1 - x5;
 800f288:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f28a:	eba6 0c01 	sub.w	ip, r6, r1
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800f28e:	ebac 0c02 	sub.w	ip, ip, r2
 800f292:	49b9      	ldr	r1, [pc, #740]	; (800f578 <xmp3_IMDCT+0x6dc>)
 800f294:	fb81 4c0c 	smull	r4, ip, r1, ip
 800f298:	49b8      	ldr	r1, [pc, #736]	; (800f57c <xmp3_IMDCT+0x6e0>)
 800f29a:	4604      	mov	r4, r0
 800f29c:	fb81 b404 	smull	fp, r4, r1, r4
 800f2a0:	940e      	str	r4, [sp, #56]	; 0x38
	a6 = x2 + x8;
 800f2a2:	443b      	add	r3, r7
 800f2a4:	4cb6      	ldr	r4, [pc, #728]	; (800f580 <xmp3_IMDCT+0x6e4>)
 800f2a6:	fb84 b303 	smull	fp, r3, r4, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800f2aa:	eba7 070a 	sub.w	r7, r7, sl
 800f2ae:	fb81 a707 	smull	sl, r7, r1, r7
 800f2b2:	970f      	str	r7, [sp, #60]	; 0x3c
 800f2b4:	fb84 a000 	smull	sl, r0, r4, r0
 800f2b8:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 800f2bc:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 800f2c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f2c4:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800f2c8:	fb84 ba0a 	smull	fp, sl, r4, sl
 800f2cc:	49ad      	ldr	r1, [pc, #692]	; (800f584 <xmp3_IMDCT+0x6e8>)
	a7 = x1 + x7;
 800f2ce:	4432      	add	r2, r6
 800f2d0:	460f      	mov	r7, r1
 800f2d2:	fb81 b202 	smull	fp, r2, r1, r2
	a3 = x1 + x5;
 800f2d6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f2d8:	440e      	add	r6, r1
 800f2da:	fb84 b606 	smull	fp, r6, r4, r6
 800f2de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2e0:	fb87 b101 	smull	fp, r1, r7, r1
	a12 = x[0] +  (x[6] >> 1);
 800f2e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f2e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800f2e8:	eb04 0b67 	add.w	fp, r4, r7, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f2ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	a17 = ( m7 << 1) - (m8 << 1);
 800f2ee:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	a16 = ( m5 << 1) + (m6 << 1);
 800f2f0:	005b      	lsls	r3, r3, #1
	a17 = ( m7 << 1) - (m8 << 1);
 800f2f2:	0040      	lsls	r0, r0, #1
	a20 = (m11 << 1) - (m12 << 1);
 800f2f4:	0049      	lsls	r1, r1, #1
 800f2f6:	ebc1 0146 	rsb	r1, r1, r6, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f2fa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	a13 = a12  +  (  m1 << 1);
 800f2fe:	eb0b 0648 	add.w	r6, fp, r8, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800f302:	ebc0 0047 	rsb	r0, r0, r7, lsl #1
	a14 = a12  -  (  m1 << 1);
 800f306:	ebab 0b48 	sub.w	fp, fp, r8, lsl #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f30a:	0052      	lsls	r2, r2, #1
 800f30c:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	a18 = a16 + a17;
 800f310:	181f      	adds	r7, r3, r0
	a15 = a1   +  ( a11 >> 1);
 800f312:	eb0e 0a69 	add.w	sl, lr, r9, asr #1
	x4 = a1 - a11;			x[4] = x4;
 800f316:	ebae 0409 	sub.w	r4, lr, r9
	a22 = a13 + a16;
 800f31a:	eb06 0903 	add.w	r9, r6, r3
	a23 = a14 + a16;
 800f31e:	445b      	add	r3, fp
	x8 = a23 - a19;			x[8] = x8;
 800f320:	1a9b      	subs	r3, r3, r2
	a21 = a20 - a19;
 800f322:	eba1 0e02 	sub.w	lr, r1, r2
	x8 = a23 - a19;			x[8] = x8;
 800f326:	9309      	str	r3, [sp, #36]	; 0x24
 800f328:	9328      	str	r3, [sp, #160]	; 0xa0
	a24 = a14 + a17;
 800f32a:	eb0b 0300 	add.w	r3, fp, r0
	a26 = a14 - a18;
 800f32e:	ebab 0b07 	sub.w	fp, fp, r7
	a27 = a13 - a18;
 800f332:	1bf7      	subs	r7, r6, r7
	x2 = a24 + a20;			x[2] = x2;
 800f334:	440b      	add	r3, r1
	x5 = a27 + a21;			x[5] = x5;
 800f336:	4477      	add	r7, lr
	a25 = a13 + a17;
 800f338:	4406      	add	r6, r0
	x2 = a24 + a20;			x[2] = x2;
 800f33a:	9322      	str	r3, [sp, #136]	; 0x88
	a4 = x2 - x4;
 800f33c:	982d      	ldr	r0, [sp, #180]	; 0xb4
	x5 = a27 + a21;			x[5] = x5;
 800f33e:	9725      	str	r7, [sp, #148]	; 0x94
	x3 = a26 - a21;			x[3] = x3;
 800f340:	ebab 030e 	sub.w	r3, fp, lr
	a4 = x2 - x4;
 800f344:	9f2b      	ldr	r7, [sp, #172]	; 0xac
	x3 = a26 - a21;			x[3] = x3;
 800f346:	9323      	str	r3, [sp, #140]	; 0x8c
	x0 = a22 + a19;			x[0] = x0;
 800f348:	4491      	add	r9, r2
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f34a:	eb0a 034c 	add.w	r3, sl, ip, lsl #1
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f34e:	ebaa 024c 	sub.w	r2, sl, ip, lsl #1
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f352:	9321      	str	r3, [sp, #132]	; 0x84
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f354:	9227      	str	r2, [sp, #156]	; 0x9c
	a4 = x2 - x4;
 800f356:	1a3b      	subs	r3, r7, r0
	a1 = x0 - x6;
 800f358:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f35a:	9808      	ldr	r0, [sp, #32]
	x0 = a22 + a19;			x[0] = x0;
 800f35c:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	a1 = x0 - x6;
 800f360:	eba0 0902 	sub.w	r9, r0, r2
	a5 = x2 + x4;
 800f364:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f366:	982b      	ldr	r0, [sp, #172]	; 0xac
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f368:	9f31      	ldr	r7, [sp, #196]	; 0xc4
	x4 = a1 - a11;			x[4] = x4;
 800f36a:	9424      	str	r4, [sp, #144]	; 0x90
	x6 = a25 - a20;			x[6] = x6;
 800f36c:	1a76      	subs	r6, r6, r1
 800f36e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800f370:	9626      	str	r6, [sp, #152]	; 0x98
	a5 = x2 + x4;
 800f372:	4410      	add	r0, r2
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f374:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800f376:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f378:	1bdf      	subs	r7, r3, r7
 800f37a:	970d      	str	r7, [sp, #52]	; 0x34
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f37c:	1b91      	subs	r1, r2, r6
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800f37e:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800f380:	4a7d      	ldr	r2, [pc, #500]	; (800f578 <xmp3_IMDCT+0x6dc>)
 800f382:	46a0      	mov	r8, r4
 800f384:	fb82 3808 	smull	r3, r8, r2, r8
	a2 = x1 - x5;
 800f388:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800f38a:	eba7 0e06 	sub.w	lr, r7, r6
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800f38e:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800f390:	ebae 0e06 	sub.w	lr, lr, r6
 800f394:	fb82 3e0e 	smull	r3, lr, r2, lr
 800f398:	4e78      	ldr	r6, [pc, #480]	; (800f57c <xmp3_IMDCT+0x6e0>)
 800f39a:	4683      	mov	fp, r0
 800f39c:	fb86 3b0b 	smull	r3, fp, r6, fp
	a6 = x2 + x8;
 800f3a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f3a2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f3a4:	4c76      	ldr	r4, [pc, #472]	; (800f580 <xmp3_IMDCT+0x6e4>)
 800f3a6:	18d3      	adds	r3, r2, r3
 800f3a8:	fb84 2303 	smull	r2, r3, r4, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800f3ac:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f3ae:	930e      	str	r3, [sp, #56]	; 0x38
 800f3b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f3b2:	eba2 0c03 	sub.w	ip, r2, r3
 800f3b6:	fb86 2c0c 	smull	r2, ip, r6, ip
 800f3ba:	fb84 2000 	smull	r2, r0, r4, r0
 800f3be:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 800f3c2:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 800f3c6:	468a      	mov	sl, r1
 800f3c8:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800f3cc:	fb84 2a0a 	smull	r2, sl, r4, sl
	a7 = x1 + x7;
 800f3d0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f3d2:	4b6c      	ldr	r3, [pc, #432]	; (800f584 <xmp3_IMDCT+0x6e8>)
 800f3d4:	18ba      	adds	r2, r7, r2
 800f3d6:	fb83 6202 	smull	r6, r2, r3, r2
	a3 = x1 + x5;
 800f3da:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800f3dc:	4437      	add	r7, r6
 800f3de:	fb84 6707 	smull	r6, r7, r4, r7
 800f3e2:	fb83 6101 	smull	r6, r1, r3, r1
	a12 = x[0] +  (x[6] >> 1);
 800f3e6:	9b08      	ldr	r3, [sp, #32]
 800f3e8:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
	a16 = ( m5 << 1) + (m6 << 1);
 800f3ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	a12 = x[0] +  (x[6] >> 1);
 800f3ec:	eb03 0666 	add.w	r6, r3, r6, asr #1
	a17 = ( m7 << 1) - (m8 << 1);
 800f3f0:	0040      	lsls	r0, r0, #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f3f2:	0063      	lsls	r3, r4, #1
	a15 = a1   +  ( a11 >> 1);
 800f3f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	a17 = ( m7 << 1) - (m8 << 1);
 800f3f6:	ebc0 004c 	rsb	r0, r0, ip, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f3fa:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	a13 = a12  +  (  m1 << 1);
 800f3fe:	eb06 0c48 	add.w	ip, r6, r8, lsl #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f402:	0052      	lsls	r2, r2, #1
	a14 = a12  -  (  m1 << 1);
 800f404:	eba6 0648 	sub.w	r6, r6, r8, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800f408:	0049      	lsls	r1, r1, #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f40a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800f40e:	ebc1 0147 	rsb	r1, r1, r7, lsl #1
	a18 = a16 + a17;
 800f412:	eb03 0800 	add.w	r8, r3, r0
	x4 = a1 - a11;			x[4] = x4;
 800f416:	eba9 0704 	sub.w	r7, r9, r4
	a22 = a13 + a16;
 800f41a:	eb0c 0b03 	add.w	fp, ip, r3
	a23 = a14 + a16;
 800f41e:	4433      	add	r3, r6
	x4 = a1 - a11;			x[4] = x4;
 800f420:	972d      	str	r7, [sp, #180]	; 0xb4
	x8 = a23 - a19;			x[8] = x8;
 800f422:	1a9f      	subs	r7, r3, r2
	a24 = a14 + a17;
 800f424:	1833      	adds	r3, r6, r0
	a15 = a1   +  ( a11 >> 1);
 800f426:	eb09 0a64 	add.w	sl, r9, r4, asr #1
	x2 = a24 + a20;			x[2] = x2;
 800f42a:	440b      	add	r3, r1
	a21 = a20 - a19;
 800f42c:	eba1 0902 	sub.w	r9, r1, r2
	a26 = a14 - a18;
 800f430:	eba6 0608 	sub.w	r6, r6, r8
	a27 = a13 - a18;
 800f434:	ebac 0808 	sub.w	r8, ip, r8
	x2 = a24 + a20;			x[2] = x2;
 800f438:	932b      	str	r3, [sp, #172]	; 0xac
	a25 = a13 + a17;
 800f43a:	4484      	add	ip, r0
	x5 = a27 + a21;			x[5] = x5;
 800f43c:	eb08 0309 	add.w	r3, r8, r9
	x0 = a22 + a19;			x[0] = x0;
 800f440:	4493      	add	fp, r2
	x6 = a25 - a20;			x[6] = x6;
 800f442:	ebac 0101 	sub.w	r1, ip, r1
	x3 = a26 - a21;			x[3] = x3;
 800f446:	eba6 0609 	sub.w	r6, r6, r9
	x5 = a27 + a21;			x[5] = x5;
 800f44a:	932e      	str	r3, [sp, #184]	; 0xb8
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f44c:	ebaa 024e 	sub.w	r2, sl, lr, lsl #1
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f450:	eb0a 034e 	add.w	r3, sl, lr, lsl #1
	x0 = a22 + a19;			x[0] = x0;
 800f454:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
	x8 = a23 - a19;			x[8] = x8;
 800f458:	9731      	str	r7, [sp, #196]	; 0xc4
	x6 = a25 - a20;			x[6] = x6;
 800f45a:	912f      	str	r1, [sp, #188]	; 0xbc
	x3 = a26 - a21;			x[3] = x3;
 800f45c:	962c      	str	r6, [sp, #176]	; 0xb0
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f45e:	932a      	str	r3, [sp, #168]	; 0xa8
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f460:	9230      	str	r2, [sp, #192]	; 0xc0
	if (btPrev == 0 && btCurr == 0) {
 800f462:	2d00      	cmp	r5, #0
 800f464:	f040 8096 	bne.w	800f594 <xmp3_IMDCT+0x6f8>
 800f468:	9a01      	ldr	r2, [sp, #4]
 800f46a:	4847      	ldr	r0, [pc, #284]	; (800f588 <xmp3_IMDCT+0x6ec>)
 800f46c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800f590 <xmp3_IMDCT+0x6f4>
 800f470:	4b46      	ldr	r3, [pc, #280]	; (800f58c <xmp3_IMDCT+0x6f0>)
 800f472:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f476:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f478:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 800f47c:	462e      	mov	r6, r5
 800f47e:	f5a2 6a90 	sub.w	sl, r2, #1152	; 0x480
	__asm__ volatile (
 800f482:	46a8      	mov	r8, r5
 800f484:	4693      	mov	fp, r2
 800f486:	e005      	b.n	800f494 <xmp3_IMDCT+0x5f8>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800f488:	f8de 7020 	ldr.w	r7, [lr, #32]
 800f48c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800f490:	f85e 4d04 	ldr.w	r4, [lr, #-4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f494:	fb83 2707 	smull	r2, r7, r3, r7
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f498:	eb07 03a4 	add.w	r3, r7, r4, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800f49c:	f8dc 1000 	ldr.w	r1, [ip]
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f4a0:	f84c 3b04 	str.w	r3, [ip], #4
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800f4a4:	eba7 07a4 	sub.w	r7, r7, r4, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800f4a8:	424a      	negs	r2, r1
 800f4aa:	f850 3c08 	ldr.w	r3, [r0, #-8]
			t = s - d;
 800f4ae:	1bd2      	subs	r2, r2, r7
 800f4b0:	fb82 4303 	smull	r4, r3, r2, r3
 800f4b4:	f850 4c04 	ldr.w	r4, [r0, #-4]
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800f4b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f4bc:	fb82 7404 	smull	r7, r4, r2, r4
			y[(i)*NBANDS]    = 	yLo;
 800f4c0:	9a01      	ldr	r2, [sp, #4]
 800f4c2:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
 800f4c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
	__asm__ volatile (
 800f4ca:	4642      	mov	r2, r8
			y[(17-i)*NBANDS] =  yHi;
 800f4cc:	f8cb 1880 	str.w	r1, [fp, #2176]	; 0x880
 800f4d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f4d4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f4d8:	4643      	mov	r3, r8
 800f4da:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800f4de:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
		for (i = 0; i < 9; i++) {
 800f4e2:	f1ab 0b80 	sub.w	fp, fp, #128	; 0x80
			mOut |= FASTABS(yHi);
 800f4e6:	431a      	orrs	r2, r3
		for (i = 0; i < 9; i++) {
 800f4e8:	45da      	cmp	sl, fp
			mOut |= FASTABS(yHi);
 800f4ea:	ea45 0502 	orr.w	r5, r5, r2
		for (i = 0; i < 9; i++) {
 800f4ee:	f100 0008 	add.w	r0, r0, #8
 800f4f2:	f106 0620 	add.w	r6, r6, #32
 800f4f6:	d1c7      	bne.n	800f488 <xmp3_IMDCT+0x5ec>
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4f8:	9b04      	ldr	r3, [sp, #16]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f4fa:	9e01      	ldr	r6, [sp, #4]
 800f4fc:	9906      	ldr	r1, [sp, #24]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4fe:	3324      	adds	r3, #36	; 0x24
 800f500:	9304      	str	r3, [sp, #16]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f502:	9b03      	ldr	r3, [sp, #12]
 800f504:	461a      	mov	r2, r3
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f506:	3301      	adds	r3, #1
 800f508:	9303      	str	r3, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f50a:	4630      	mov	r0, r6
 800f50c:	ee17 3a90 	vmov	r3, s15
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f510:	3604      	adds	r6, #4
 800f512:	9601      	str	r6, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f514:	f7ff fb64 	bl	800ebe0 <FreqInvertRescale>
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800f518:	9b02      	ldr	r3, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f51a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f51c:	4328      	orrs	r0, r5
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800f51e:	4303      	orrs	r3, r0
 800f520:	9302      	str	r3, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f524:	42b3      	cmp	r3, r6
 800f526:	f000 80a3 	beq.w	800f670 <xmp3_IMDCT+0x7d4>
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800f52a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	e64e      	b.n	800f1ce <xmp3_IMDCT+0x332>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f530:	3307      	adds	r3, #7
 800f532:	fb80 2003 	smull	r2, r0, r0, r3
 800f536:	17db      	asrs	r3, r3, #31
 800f538:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f53c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800f540:	0052      	lsls	r2, r2, #1
 800f542:	3208      	adds	r2, #8
 800f544:	920f      	str	r2, [sp, #60]	; 0x3c
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	9205      	str	r2, [sp, #20]
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f54a:	00da      	lsls	r2, r3, #3
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f54c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800f550:	4401      	add	r1, r0
 800f552:	0208      	lsls	r0, r1, #8
 800f554:	900e      	str	r0, [sp, #56]	; 0x38
 800f556:	980c      	ldr	r0, [sp, #48]	; 0x30
	for (k = nBfly; k > 0; k--) {
 800f558:	2b00      	cmp	r3, #0
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f55a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 800f55e:	9018      	str	r0, [sp, #96]	; 0x60
	for (k = nBfly; k > 0; k--) {
 800f560:	f73f acef 	bgt.w	800ef42 <xmp3_IMDCT+0xa6>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800f564:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800f568:	4413      	add	r3, r2
 800f56a:	011b      	lsls	r3, r3, #4
 800f56c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f56e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f572:	4413      	add	r3, r2
 800f574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f576:	e5cf      	b.n	800f118 <xmp3_IMDCT+0x27c>
 800f578:	6ed9eba1 	.word	0x6ed9eba1
 800f57c:	620dbe8b 	.word	0x620dbe8b
 800f580:	163a1a7e 	.word	0x163a1a7e
 800f584:	7e0e2e32 	.word	0x7e0e2e32
 800f588:	08027cec 	.word	0x08027cec
 800f58c:	0b27eb5c 	.word	0x0b27eb5c
 800f590:	08027ce0 	.word	0x08027ce0
		WinPrevious(xPrev, xPrevWin, btPrev);
 800f594:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800f598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f59a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800f66c <xmp3_IMDCT+0x7d0>
 800f59e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f5a2:	4641      	mov	r1, r8
 800f5a4:	4648      	mov	r0, r9
 800f5a6:	f7ff fbe7 	bl	800ed78 <WinPrevious>
		wp = imdctWin[btCurr];
 800f5aa:	9b00      	ldr	r3, [sp, #0]
 800f5ac:	4a2d      	ldr	r2, [pc, #180]	; (800f664 <xmp3_IMDCT+0x7c8>)
 800f5ae:	492e      	ldr	r1, [pc, #184]	; (800f668 <xmp3_IMDCT+0x7cc>)
 800f5b0:	9801      	ldr	r0, [sp, #4]
 800f5b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
	mOut = 0;
 800f5b4:	2500      	movs	r5, #0
		wp = imdctWin[btCurr];
 800f5b6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800f5ba:	eb02 1c03 	add.w	ip, r2, r3, lsl #4
		for (i = 0; i < 9; i++) {
 800f5be:	ae28      	add	r6, sp, #160	; 0xa0
		wp = imdctWin[btCurr];
 800f5c0:	2244      	movs	r2, #68	; 0x44
		for (i = 0; i < 9; i++) {
 800f5c2:	462b      	mov	r3, r5
 800f5c4:	46ae      	mov	lr, r5
 800f5c6:	9500      	str	r5, [sp, #0]
 800f5c8:	e004      	b.n	800f5d4 <xmp3_IMDCT+0x738>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800f5ca:	6a37      	ldr	r7, [r6, #32]
 800f5cc:	f85a 1d04 	ldr.w	r1, [sl, #-4]!
 800f5d0:	f856 4d04 	ldr.w	r4, [r6, #-4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f5d4:	fb81 b707 	smull	fp, r7, r1, r7
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f5d8:	eb07 01a4 	add.w	r1, r7, r4, asr #2
 800f5dc:	f849 1b04 	str.w	r1, [r9], #4
 800f5e0:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
			d = xe - xo;
 800f5e4:	ebc7 07a4 	rsb	r7, r7, r4, asr #2
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	fb87 1404 	smull	r1, r4, r7, r4
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800f5ee:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800f5f2:	440c      	add	r4, r1
 800f5f4:	00a4      	lsls	r4, r4, #2
 800f5f6:	f85c 1002 	ldr.w	r1, [ip, r2]
 800f5fa:	fb87 b101 	smull	fp, r1, r7, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f5fe:	f858 7002 	ldr.w	r7, [r8, r2]
			y[(i)*NBANDS]    = yLo;
 800f602:	9d01      	ldr	r5, [sp, #4]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f604:	4439      	add	r1, r7
			y[(i)*NBANDS]    = yLo;
 800f606:	01df      	lsls	r7, r3, #7
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f608:	0089      	lsls	r1, r1, #2
			y[(i)*NBANDS]    = yLo;
 800f60a:	51ec      	str	r4, [r5, r7]
	__asm__ volatile (
 800f60c:	4677      	mov	r7, lr
			y[(17-i)*NBANDS] = yHi;
 800f60e:	f8c0 1880 	str.w	r1, [r0, #2176]	; 0x880
 800f612:	ea84 77e4 	eor.w	r7, r4, r4, asr #31
 800f616:	eba7 77e4 	sub.w	r7, r7, r4, asr #31
 800f61a:	4674      	mov	r4, lr
 800f61c:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800f620:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
			mOut |= FASTABS(yHi);
 800f624:	9900      	ldr	r1, [sp, #0]
 800f626:	4327      	orrs	r7, r4
		for (i = 0; i < 9; i++) {
 800f628:	3a04      	subs	r2, #4
			mOut |= FASTABS(yHi);
 800f62a:	4339      	orrs	r1, r7
		for (i = 0; i < 9; i++) {
 800f62c:	2a20      	cmp	r2, #32
			mOut |= FASTABS(yHi);
 800f62e:	9100      	str	r1, [sp, #0]
		for (i = 0; i < 9; i++) {
 800f630:	f103 0301 	add.w	r3, r3, #1
 800f634:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 800f638:	d1c7      	bne.n	800f5ca <xmp3_IMDCT+0x72e>
 800f63a:	9d00      	ldr	r5, [sp, #0]
 800f63c:	e75c      	b.n	800f4f8 <xmp3_IMDCT+0x65c>
 800f63e:	ae29      	add	r6, sp, #164	; 0xa4
	acc1 = acc2 = 0;
 800f640:	4602      	mov	r2, r0
			acc1 = (*xCurr--) - acc1;
 800f642:	688b      	ldr	r3, [r1, #8]
 800f644:	1a9a      	subs	r2, r3, r2
			acc1 = (*xCurr--) - acc1;
 800f646:	684b      	ldr	r3, [r1, #4]
		for (i = 8; i >= 0; i--) {	
 800f648:	3908      	subs	r1, #8
			acc2 = acc1 - acc2;
 800f64a:	1a10      	subs	r0, r2, r0
		for (i = 8; i >= 0; i--) {	
 800f64c:	428c      	cmp	r4, r1
			acc1 = (*xCurr--) - acc1;
 800f64e:	eba3 0202 	sub.w	r2, r3, r2
			xBuf[i+9] = acc2;	/* odd */
 800f652:	6230      	str	r0, [r6, #32]
			xBuf[i+0] = acc1;	/* even */
 800f654:	f846 2d04 	str.w	r2, [r6, #-4]!
		for (i = 8; i >= 0; i--) {	
 800f658:	d1f3      	bne.n	800f642 <xmp3_IMDCT+0x7a6>
 800f65a:	e5f8      	b.n	800f24e <xmp3_IMDCT+0x3b2>
			 prevWinIdx = 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	9d00      	ldr	r5, [sp, #0]
 800f660:	9312      	str	r3, [sp, #72]	; 0x48
 800f662:	e5d1      	b.n	800f208 <xmp3_IMDCT+0x36c>
 800f664:	0802841c 	.word	0x0802841c
 800f668:	0b27eb5c 	.word	0x0b27eb5c
 800f66c:	08027ce0 	.word	0x08027ce0
		xCurr += 18;
 800f670:	9b05      	ldr	r3, [sp, #20]
 800f672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f674:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800f678:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f67c:	9218      	str	r2, [sp, #96]	; 0x60
		xPrev += 9;
 800f67e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f684:	9317      	str	r3, [sp, #92]	; 0x5c
	for (   ; i < bc->nBlocksTotal; i++) {
 800f686:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f688:	9a05      	ldr	r2, [sp, #20]
 800f68a:	4291      	cmp	r1, r2
 800f68c:	f340 829c 	ble.w	800fbc8 <xmp3_IMDCT+0xd2c>
 800f690:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f692:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800f694:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f696:	9211      	str	r2, [sp, #68]	; 0x44
 800f698:	f103 0b04 	add.w	fp, r3, #4
 800f69c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 800f6aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f6ae:	2806      	cmp	r0, #6
 800f6b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f6b2:	930f      	str	r3, [sp, #60]	; 0x3c
		es = 7 - gb;
 800f6b4:	f1c0 0307 	rsb	r3, r0, #7
 800f6b8:	9310      	str	r3, [sp, #64]	; 0x40
 800f6ba:	bfc8      	it	gt
 800f6bc:	2300      	movgt	r3, #0
 800f6be:	ee06 3a10 	vmov	s12, r3
 800f6c2:	3124      	adds	r1, #36	; 0x24
 800f6c4:	ab32      	add	r3, sp, #200	; 0xc8
 800f6c6:	9103      	str	r1, [sp, #12]
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	9b01      	ldr	r3, [sp, #4]
			 prevWinIdx = 0;
 800f6cc:	9a07      	ldr	r2, [sp, #28]
 800f6ce:	9c05      	ldr	r4, [sp, #20]
 800f6d0:	f5a3 7ac0 	sub.w	sl, r3, #384	; 0x180
 800f6d4:	9b03      	ldr	r3, [sp, #12]
 800f6d6:	f1a3 0124 	sub.w	r1, r3, #36	; 0x24
 800f6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6dc:	42a2      	cmp	r2, r4
 800f6de:	bfc8      	it	gt
 800f6e0:	2300      	movgt	r3, #0
 800f6e2:	ee07 3a10 	vmov	s14, r3
	if (gb < 7) {
 800f6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6e8:	2b06      	cmp	r3, #6
 800f6ea:	ee07 1a90 	vmov	s15, r1
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800f6ee:	ee06 aa90 	vmov	s13, sl
	if (gb < 7) {
 800f6f2:	f1ab 0004 	sub.w	r0, fp, #4
 800f6f6:	dc13      	bgt.n	800f720 <xmp3_IMDCT+0x884>
		for (i = 0; i < 18; i+=2) {
 800f6f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f6fa:	2200      	movs	r2, #0
			xCurr[i+0] >>= es;
 800f6fc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800f700:	4123      	asrs	r3, r4
 800f702:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			xCurr[i+1] >>= es;
 800f706:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 800f70a:	4123      	asrs	r3, r4
 800f70c:	f84b 3022 	str.w	r3, [fp, r2, lsl #2]
			*xPrev++ >>= es;
 800f710:	f851 3b04 	ldr.w	r3, [r1], #4
		for (i = 0; i < 18; i+=2) {
 800f714:	3202      	adds	r2, #2
			*xPrev++ >>= es;
 800f716:	4123      	asrs	r3, r4
		for (i = 0; i < 18; i+=2) {
 800f718:	2a12      	cmp	r2, #18
			*xPrev++ >>= es;
 800f71a:	f841 3c04 	str.w	r3, [r1, #-4]
		for (i = 0; i < 18; i+=2) {
 800f71e:	d1ed      	bne.n	800f6fc <xmp3_IMDCT+0x860>
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f720:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800f724:	f8db 502c 	ldr.w	r5, [fp, #44]	; 0x2c
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f728:	f8db 3020 	ldr.w	r3, [fp, #32]
 800f72c:	f8db 0014 	ldr.w	r0, [fp, #20]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f730:	f8db 4008 	ldr.w	r4, [fp, #8]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f734:	4eb5      	ldr	r6, [pc, #724]	; (800fa0c <xmp3_IMDCT+0xb70>)
	x4 -= x5;
 800f736:	1aad      	subs	r5, r5, r2
	x3 -= x4;
 800f738:	1b59      	subs	r1, r3, r5
	x2 -= x3;
 800f73a:	eba0 0c01 	sub.w	ip, r0, r1
	x1 -= x2;
 800f73e:	eba4 030c 	sub.w	r3, r4, ip
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f742:	f85b 4c04 	ldr.w	r4, [fp, #-4]
	x3 -= x5;
 800f746:	1a89      	subs	r1, r1, r2
	x0 -= x1;
 800f748:	1ae0      	subs	r0, r4, r3
	x1 -= x3;
 800f74a:	1a5b      	subs	r3, r3, r1
	x0 >>= 1;
 800f74c:	1040      	asrs	r0, r0, #1
	x1 >>= 1;
 800f74e:	105b      	asrs	r3, r3, #1
 800f750:	4637      	mov	r7, r6
 800f752:	fb86 4c0c 	smull	r4, ip, r6, ip
	a1 = x0 + (x4 >> 1);
 800f756:	eb00 0665 	add.w	r6, r0, r5, asr #1
	x0 = a1 + a0;
 800f75a:	eb06 044c 	add.w	r4, r6, ip, lsl #1
	a2 = x0 - x4;
 800f75e:	1b40      	subs	r0, r0, r5
	x0 = a1 + a0;
 800f760:	9400      	str	r4, [sp, #0]
	x4 = a1 - a0;
 800f762:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 800f766:	fb87 4101 	smull	r4, r1, r7, r1
	a1 = x1 + (x5 >> 1);
 800f76a:	eb03 0462 	add.w	r4, r3, r2, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f76e:	eb04 0541 	add.w	r5, r4, r1, lsl #1
 800f772:	4fa7      	ldr	r7, [pc, #668]	; (800fa10 <xmp3_IMDCT+0xb74>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f774:	0049      	lsls	r1, r1, #1
 800f776:	fb87 c505 	smull	ip, r5, r7, r5
 800f77a:	4fa6      	ldr	r7, [pc, #664]	; (800fa14 <xmp3_IMDCT+0xb78>)
	a2 = x1 - x5;
 800f77c:	1a9b      	subs	r3, r3, r2
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f77e:	00ad      	lsls	r5, r5, #2
 800f780:	fb87 2303 	smull	r2, r3, r7, r3
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f784:	1a64      	subs	r4, r4, r1
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f786:	009a      	lsls	r2, r3, #2
 800f788:	49a3      	ldr	r1, [pc, #652]	; (800fa18 <xmp3_IMDCT+0xb7c>)
 800f78a:	fb81 3404 	smull	r3, r4, r1, r4
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f78e:	f8db 903c 	ldr.w	r9, [fp, #60]	; 0x3c
 800f792:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f796:	f8db 1018 	ldr.w	r1, [fp, #24]
	*out = x0 + x1;	out++;
 800f79a:	9f00      	ldr	r7, [sp, #0]
	x4 -= x5;
 800f79c:	eba3 0c09 	sub.w	ip, r3, r9
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f7a0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
	x3 -= x4;
 800f7a4:	eba3 030c 	sub.w	r3, r3, ip
	x2 -= x3;
 800f7a8:	eba1 0803 	sub.w	r8, r1, r3
	x3 -= x5;
 800f7ac:	eba3 0e09 	sub.w	lr, r3, r9
	*out = x0 + x1;	out++;
 800f7b0:	442f      	add	r7, r5
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f7b2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f7b6:	f8db 1000 	ldr.w	r1, [fp]
	*out = x0 + x1;	out++;
 800f7ba:	9720      	str	r7, [sp, #128]	; 0x80
	*out = x0 - x1;
 800f7bc:	9f00      	ldr	r7, [sp, #0]
	x1 -= x2;
 800f7be:	eba3 0308 	sub.w	r3, r3, r8
	*out = x0 - x1;
 800f7c2:	1b7f      	subs	r7, r7, r5
	x0 -= x1;
 800f7c4:	1ac9      	subs	r1, r1, r3
	*out = x2 + x3;	out++;
 800f7c6:	1885      	adds	r5, r0, r2
	x1 -= x3;
 800f7c8:	eba3 030e 	sub.w	r3, r3, lr
	*out = x2 - x3;	out++;
 800f7cc:	1a80      	subs	r0, r0, r2
	*out = x4 + x5;	out++;
 800f7ce:	eb06 0284 	add.w	r2, r6, r4, lsl #2
	*out = x4 - x5;	out++;
 800f7d2:	eba6 0684 	sub.w	r6, r6, r4, lsl #2
	*out = x2 - x3;	out++;
 800f7d6:	9024      	str	r0, [sp, #144]	; 0x90
	x0 >>= 1;
 800f7d8:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800f7da:	105b      	asrs	r3, r3, #1
	*out = x0 - x1;
 800f7dc:	9725      	str	r7, [sp, #148]	; 0x94
	*out = x2 + x3;	out++;
 800f7de:	9521      	str	r5, [sp, #132]	; 0x84
	*out = x4 - x5;	out++;
 800f7e0:	e9cd 2622 	strd	r2, r6, [sp, #136]	; 0x88
 800f7e4:	4889      	ldr	r0, [pc, #548]	; (800fa0c <xmp3_IMDCT+0xb70>)
 800f7e6:	fb80 2808 	smull	r2, r8, r0, r8
	a1 = x0 + (x4 >> 1);
 800f7ea:	eb01 056c 	add.w	r5, r1, ip, asr #1
	x0 = a1 + a0;
 800f7ee:	eb05 0648 	add.w	r6, r5, r8, lsl #1
	a2 = x0 - x4;
 800f7f2:	eba1 010c 	sub.w	r1, r1, ip
	x4 = a1 - a0;
 800f7f6:	eba5 0548 	sub.w	r5, r5, r8, lsl #1
 800f7fa:	fb80 2e0e 	smull	r2, lr, r0, lr
	a1 = x1 + (x5 >> 1);
 800f7fe:	eb03 0469 	add.w	r4, r3, r9, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f802:	eb04 074e 	add.w	r7, r4, lr, lsl #1
 800f806:	4882      	ldr	r0, [pc, #520]	; (800fa10 <xmp3_IMDCT+0xb74>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f808:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f80c:	fb80 2707 	smull	r2, r7, r0, r7
 800f810:	4880      	ldr	r0, [pc, #512]	; (800fa14 <xmp3_IMDCT+0xb78>)
	a2 = x1 - x5;
 800f812:	eba3 0309 	sub.w	r3, r3, r9
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f816:	00bf      	lsls	r7, r7, #2
 800f818:	fb80 2303 	smull	r2, r3, r0, r3
 800f81c:	487e      	ldr	r0, [pc, #504]	; (800fa18 <xmp3_IMDCT+0xb7c>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f81e:	eba4 040e 	sub.w	r4, r4, lr
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f822:	009a      	lsls	r2, r3, #2
 800f824:	fb80 3404 	smull	r3, r4, r0, r4
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f828:	f8db c040 	ldr.w	ip, [fp, #64]	; 0x40
 800f82c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f830:	f8db 001c 	ldr.w	r0, [fp, #28]
	x4 -= x5;
 800f834:	eba3 0e0c 	sub.w	lr, r3, ip
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f838:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
	x3 -= x4;
 800f83c:	eba3 030e 	sub.w	r3, r3, lr
	x2 -= x3;
 800f840:	eba0 0903 	sub.w	r9, r0, r3
	x3 -= x5;
 800f844:	eba3 080c 	sub.w	r8, r3, ip
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f848:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f84c:	f8db 0004 	ldr.w	r0, [fp, #4]
	x1 -= x2;
 800f850:	eba3 0309 	sub.w	r3, r3, r9
	x0 -= x1;
 800f854:	1ac0      	subs	r0, r0, r3
	x1 -= x3;
 800f856:	eba3 0308 	sub.w	r3, r3, r8
	x1 >>= 1;
 800f85a:	105b      	asrs	r3, r3, #1
 800f85c:	9300      	str	r3, [sp, #0]
	*out = x0 + x1;	out++;
 800f85e:	19f3      	adds	r3, r6, r7
 800f860:	9306      	str	r3, [sp, #24]
 800f862:	9326      	str	r3, [sp, #152]	; 0x98
	*out = x2 + x3;	out++;
 800f864:	188b      	adds	r3, r1, r2
	*out = x0 - x1;
 800f866:	1bf6      	subs	r6, r6, r7
	*out = x2 - x3;	out++;
 800f868:	1a89      	subs	r1, r1, r2
	*out = x2 + x3;	out++;
 800f86a:	9308      	str	r3, [sp, #32]
 800f86c:	9327      	str	r3, [sp, #156]	; 0x9c
	*out = x4 + x5;	out++;
 800f86e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
	*out = x4 - x5;	out++;
 800f872:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
	*out = x2 - x3;	out++;
 800f876:	912a      	str	r1, [sp, #168]	; 0xa8
	x0 >>= 1;
 800f878:	1040      	asrs	r0, r0, #1
	*out = x0 - x1;
 800f87a:	962b      	str	r6, [sp, #172]	; 0xac
	*out = x4 + x5;	out++;
 800f87c:	9309      	str	r3, [sp, #36]	; 0x24
 800f87e:	e9cd 3528 	strd	r3, r5, [sp, #160]	; 0xa0
 800f882:	4962      	ldr	r1, [pc, #392]	; (800fa0c <xmp3_IMDCT+0xb70>)
 800f884:	fb81 2909 	smull	r2, r9, r1, r9
	a1 = x0 + (x4 >> 1);
 800f888:	eb00 056e 	add.w	r5, r0, lr, asr #1
	x0 = a1 + a0;
 800f88c:	eb05 0449 	add.w	r4, r5, r9, lsl #1
	a2 = x0 - x4;
 800f890:	eba0 000e 	sub.w	r0, r0, lr
	x4 = a1 - a0;
 800f894:	eba5 0549 	sub.w	r5, r5, r9, lsl #1
 800f898:	fb81 2808 	smull	r2, r8, r1, r8
	a1 = x1 + (x5 >> 1);
 800f89c:	9b00      	ldr	r3, [sp, #0]
 800f89e:	4f5c      	ldr	r7, [pc, #368]	; (800fa10 <xmp3_IMDCT+0xb74>)
 800f8a0:	eb03 026c 	add.w	r2, r3, ip, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f8a4:	eb02 0148 	add.w	r1, r2, r8, lsl #1
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f8a8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f8ac:	fb87 6101 	smull	r6, r1, r7, r1
 800f8b0:	4f58      	ldr	r7, [pc, #352]	; (800fa14 <xmp3_IMDCT+0xb78>)
	a2 = x1 - x5;
 800f8b2:	eba3 030c 	sub.w	r3, r3, ip
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f8b6:	0089      	lsls	r1, r1, #2
 800f8b8:	fb87 6303 	smull	r6, r3, r7, r3
 800f8bc:	4f56      	ldr	r7, [pc, #344]	; (800fa18 <xmp3_IMDCT+0xb7c>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f8be:	eba2 0608 	sub.w	r6, r2, r8
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	fb87 2606 	smull	r2, r6, r7, r6
	*out = x2 + x3;	out++;
 800f8c8:	18c7      	adds	r7, r0, r3
	*out = x2 - x3;	out++;
 800f8ca:	1ac0      	subs	r0, r0, r3
	*out = x4 + x5;	out++;
 800f8cc:	eb05 0386 	add.w	r3, r5, r6, lsl #2
	*out = x4 - x5;	out++;
 800f8d0:	eba5 0586 	sub.w	r5, r5, r6, lsl #2
 800f8d4:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
	*out = x2 + x3;	out++;
 800f8d8:	972d      	str	r7, [sp, #180]	; 0xb4
	*out = x0 - x1;
 800f8da:	1a63      	subs	r3, r4, r1
	*out = x0 + x1;	out++;
 800f8dc:	1867      	adds	r7, r4, r1
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8de:	9c04      	ldr	r4, [sp, #16]
	*out = x2 - x3;	out++;
 800f8e0:	9030      	str	r0, [sp, #192]	; 0xc0
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8e2:	ee17 2a10 	vmov	r2, s14
 800f8e6:	ee17 0a90 	vmov	r0, s15
 800f8ea:	4621      	mov	r1, r4
	*out = x0 - x1;
 800f8ec:	9331      	str	r3, [sp, #196]	; 0xc4
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8ee:	f7ff fa43 	bl	800ed78 <WinPrevious>
	mOut = 0;
 800f8f2:	e9cd b70d 	strd	fp, r7, [sp, #52]	; 0x34
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4948      	ldr	r1, [pc, #288]	; (800fa1c <xmp3_IMDCT+0xb80>)
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	4622      	mov	r2, r4
 800f8fe:	a820      	add	r0, sp, #128	; 0x80
 800f900:	f10d 0e8c 	add.w	lr, sp, #140	; 0x8c
		yLo = (xPrevWin[ 0+i] << 2);
 800f904:	f852 3b04 	ldr.w	r3, [r2], #4
	__asm__ volatile (
 800f908:	f04f 0c00 	mov.w	ip, #0
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800f912:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800f916:	f8ca 3000 	str.w	r3, [sl]
		yLo = (xPrevWin[ 3+i] << 2);
 800f91a:	6893      	ldr	r3, [r2, #8]
 800f91c:	2600      	movs	r6, #0
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 800f924:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 800f928:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f92c:	68c3      	ldr	r3, [r0, #12]
 800f92e:	461c      	mov	r4, r3
 800f930:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800f934:	fb83 5404 	smull	r5, r4, r3, r4
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800f938:	6953      	ldr	r3, [r2, #20]
 800f93a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 800f93e:	2400      	movs	r4, #0
 800f940:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800f944:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800f948:	f8ca 3300 	str.w	r3, [sl, #768]	; 0x300
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f94c:	f8de 3008 	ldr.w	r3, [lr, #8]
 800f950:	461d      	mov	r5, r3
 800f952:	68cb      	ldr	r3, [r1, #12]
 800f954:	fb83 8505 	smull	r8, r5, r3, r5
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800f958:	6a13      	ldr	r3, [r2, #32]
 800f95a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	__asm__ volatile (
 800f95e:	2300      	movs	r3, #0
 800f960:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 800f964:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800f968:	f8ca 5480 	str.w	r5, [sl, #1152]	; 0x480
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f96c:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
 800f970:	46a8      	mov	r8, r5
 800f972:	698d      	ldr	r5, [r1, #24]
 800f974:	fb85 9808 	smull	r9, r8, r5, r8
 800f978:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f97a:	46a9      	mov	r9, r5
 800f97c:	680d      	ldr	r5, [r1, #0]
 800f97e:	fb85 b909 	smull	fp, r9, r5, r9
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800f982:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800f984:	44c8      	add	r8, r9
 800f986:	eb08 0585 	add.w	r5, r8, r5, lsl #2
	__asm__ volatile (
 800f98a:	f04f 0800 	mov.w	r8, #0
 800f98e:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 800f992:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 800f996:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f99a:	6807      	ldr	r7, [r0, #0]
 800f99c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800f99e:	3004      	adds	r0, #4
 800f9a0:	fb85 9707 	smull	r9, r7, r5, r7
 800f9a4:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
 800f9a8:	46a9      	mov	r9, r5
 800f9aa:	68cd      	ldr	r5, [r1, #12]
 800f9ac:	fb85 b909 	smull	fp, r9, r5, r9
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800f9b0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800f9b2:	444f      	add	r7, r9
 800f9b4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	__asm__ volatile (
 800f9b8:	2500      	movs	r5, #0
 800f9ba:	ea87 75e7 	eor.w	r5, r7, r7, asr #31
 800f9be:	eba5 75e7 	sub.w	r5, r5, r7, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800f9c2:	ea4c 0606 	orr.w	r6, ip, r6
 800f9c6:	4326      	orrs	r6, r4
 800f9c8:	4333      	orrs	r3, r6
 800f9ca:	9c00      	ldr	r4, [sp, #0]
 800f9cc:	f8ca 7780 	str.w	r7, [sl, #1920]	; 0x780
 800f9d0:	ea43 0308 	orr.w	r3, r3, r8
 800f9d4:	432b      	orrs	r3, r5
 800f9d6:	431c      	orrs	r4, r3
	for (i = 0; i < 3; i++) {
 800f9d8:	9b01      	ldr	r3, [sp, #4]
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800f9da:	9400      	str	r4, [sp, #0]
	for (i = 0; i < 3; i++) {
 800f9dc:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 800f9e0:	4553      	cmp	r3, sl
 800f9e2:	d18f      	bne.n	800f904 <xmp3_IMDCT+0xa68>
		*xPrev++ = xBuf[i] >> 2;
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	9a03      	ldr	r2, [sp, #12]
 800f9e8:	109b      	asrs	r3, r3, #2
 800f9ea:	f842 3c24 	str.w	r3, [r2, #-36]
 800f9ee:	9b08      	ldr	r3, [sp, #32]
 800f9f0:	109b      	asrs	r3, r3, #2
 800f9f2:	f842 3c20 	str.w	r3, [r2, #-32]
 800f9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f8:	109b      	asrs	r3, r3, #2
 800f9fa:	f842 3c1c 	str.w	r3, [r2, #-28]
 800f9fe:	e9dd b70d 	ldrd	fp, r7, [sp, #52]	; 0x34
	for (i = 6; i < 9; i++)
 800fa02:	f1a2 0318 	sub.w	r3, r2, #24
 800fa06:	a92c      	add	r1, sp, #176	; 0xb0
 800fa08:	e00c      	b.n	800fa24 <xmp3_IMDCT+0xb88>
 800fa0a:	bf00      	nop
 800fa0c:	6ed9eba1 	.word	0x6ed9eba1
 800fa10:	7ba3751d 	.word	0x7ba3751d
 800fa14:	5a82799a 	.word	0x5a82799a
 800fa18:	2120fb83 	.word	0x2120fb83
 800fa1c:	08028538 	.word	0x08028538
		*xPrev++ = xBuf[i] >> 2;
 800fa20:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800fa24:	10bf      	asrs	r7, r7, #2
 800fa26:	f843 7b04 	str.w	r7, [r3], #4
	for (i = 12; i < 18; i++)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d1f8      	bne.n	800fa20 <xmp3_IMDCT+0xb84>
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa2e:	3324      	adds	r3, #36	; 0x24
 800fa30:	9303      	str	r3, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa32:	9b05      	ldr	r3, [sp, #20]
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa34:	9c01      	ldr	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa36:	461a      	mov	r2, r3
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa38:	3301      	adds	r3, #1
 800fa3a:	3404      	adds	r4, #4
 800fa3c:	9305      	str	r3, [sp, #20]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa3e:	ee17 1a90 	vmov	r1, s15
 800fa42:	ee16 3a10 	vmov	r3, s12
 800fa46:	ee16 0a90 	vmov	r0, s13
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa4a:	9401      	str	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa4c:	f7ff f8c8 	bl	800ebe0 <FreqInvertRescale>
 800fa50:	9b00      	ldr	r3, [sp, #0]
 800fa52:	4303      	orrs	r3, r0
 800fa54:	4618      	mov	r0, r3
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800fa56:	9b02      	ldr	r3, [sp, #8]
 800fa58:	4303      	orrs	r3, r0
 800fa5a:	9302      	str	r3, [sp, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa5e:	42a3      	cmp	r3, r4
 800fa60:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
 800fa64:	f47f ae31 	bne.w	800f6ca <xmp3_IMDCT+0x82e>
		xPrev += 9;
 800fa68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fa6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		xPrev += 9;
 800fa6e:	1a9b      	subs	r3, r3, r2
 800fa70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa72:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fa76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa7a:	9317      	str	r3, [sp, #92]	; 0x5c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fa7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa7e:	42b3      	cmp	r3, r6
 800fa80:	f340 80a9 	ble.w	800fbd6 <xmp3_IMDCT+0xd3a>
 800fa84:	ab32      	add	r3, sp, #200	; 0xc8
 800fa86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fa8a:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800fa8e:	9304      	str	r3, [sp, #16]
 800fa90:	ad44      	add	r5, sp, #272	; 0x110
 800fa92:	2400      	movs	r4, #0
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 800fa94:	9f04      	ldr	r7, [sp, #16]
 800fa96:	9b07      	ldr	r3, [sp, #28]
 800fa98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	42b3      	cmp	r3, r6
 800fa9e:	bfc8      	it	gt
 800faa0:	2200      	movgt	r2, #0
 800faa2:	4648      	mov	r0, r9
 800faa4:	f7ff f968 	bl	800ed78 <WinPrevious>
		for (j = 0; j < 9; j++) {
 800faa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faaa:	4639      	mov	r1, r7
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800faac:	f346 0a00 	sbfx	sl, r6, #0, #1
 800fab0:	f006 0e01 	and.w	lr, r6, #1
 800fab4:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 800fab8:	f1a9 0c04 	sub.w	ip, r9, #4
		nonZero = 0;
 800fabc:	2000      	movs	r0, #0
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800fabe:	680b      	ldr	r3, [r1, #0]
 800fac0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
			y[2*j+0][i] = xp;
 800fac4:	f8c7 b000 	str.w	fp, [r7]
 800fac8:	4622      	mov	r2, r4
 800faca:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
 800face:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
			xp = xPrevWin[2*j+1] << 2;
 800fad2:	684b      	ldr	r3, [r1, #4]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800fad4:	ea8a 0383 	eor.w	r3, sl, r3, lsl #2
 800fad8:	4473      	add	r3, lr
			nonZero |= xp;
 800fada:	ea4b 0b03 	orr.w	fp, fp, r3
 800fade:	ea40 000b 	orr.w	r0, r0, fp
			y[2*j+1][i] = xp;
 800fae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fae6:	46a3      	mov	fp, r4
 800fae8:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800faec:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
		for (j = 0; j < 9; j++) {
 800faf0:	3108      	adds	r1, #8
			mOut |= FASTABS(xp);
 800faf2:	ea42 020b 	orr.w	r2, r2, fp
		for (j = 0; j < 9; j++) {
 800faf6:	428d      	cmp	r5, r1
			xPrev[j] = 0;
 800faf8:	f84c 4f04 	str.w	r4, [ip, #4]!
			mOut |= FASTABS(xp);
 800fafc:	ea48 0802 	orr.w	r8, r8, r2
		for (j = 0; j < 9; j++) {
 800fb00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800fb04:	d1db      	bne.n	800fabe <xmp3_IMDCT+0xc22>
		if (nonZero)
 800fb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	bf18      	it	ne
 800fb0c:	4633      	movne	r3, r6
 800fb0e:	930b      	str	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb12:	3601      	adds	r6, #1
 800fb14:	42b3      	cmp	r3, r6
		xPrev += 9;
 800fb16:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb1a:	d1bb      	bne.n	800fa94 <xmp3_IMDCT+0xbf8>
 800fb1c:	f8cd 8008 	str.w	r8, [sp, #8]
	for (   ; i < 32; i++) {
 800fb20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb22:	2b1f      	cmp	r3, #31
 800fb24:	dc10      	bgt.n	800fb48 <xmp3_IMDCT+0xcac>
 800fb26:	e9dd 0313 	ldrd	r0, r3, [sp, #76]	; 0x4c
			y[j][i] = 0;
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb30:	2300      	movs	r3, #0
			y[j][i] = 0;
 800fb32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < 18; j++) 
 800fb36:	3320      	adds	r3, #32
 800fb38:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800fb3c:	d1f9      	bne.n	800fb32 <xmp3_IMDCT+0xc96>
	for (   ; i < 32; i++) {
 800fb3e:	3001      	adds	r0, #1
 800fb40:	2820      	cmp	r0, #32
 800fb42:	f102 0204 	add.w	r2, r2, #4
 800fb46:	d1f3      	bne.n	800fb30 <xmp3_IMDCT+0xc94>
	if (!x)
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d02f      	beq.n	800fbae <xmp3_IMDCT+0xd12>
	while (!(x & 0x80000000)) {
 800fb4e:	db49      	blt.n	800fbe4 <xmp3_IMDCT+0xd48>
	numZeros = 0;
 800fb50:	9902      	ldr	r1, [sp, #8]
 800fb52:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800fb54:	0049      	lsls	r1, r1, #1
 800fb56:	461a      	mov	r2, r3
		numZeros++;
 800fb58:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800fb5c:	d5fa      	bpl.n	800fb54 <xmp3_IMDCT+0xcb8>
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb5e:	e9dd 131d 	ldrd	r1, r3, [sp, #116]	; 0x74
 800fb62:	440b      	add	r3, r1
 800fb64:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800fb68:	011b      	lsls	r3, r3, #4
 800fb6a:	4401      	add	r1, r0
 800fb6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800fb70:	991c      	ldr	r1, [sp, #112]	; 0x70
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800fb72:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800fb74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb76:	f8c4 0b00 	str.w	r0, [r4, #2816]	; 0xb00
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb7a:	4419      	add	r1, r3
	mi->gb[ch] = bc.gbOut;

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 800fb7c:	2000      	movs	r0, #0
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb7e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800fb80:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 800fb84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb86:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
	mi->gb[ch] = bc.gbOut;
 800fb8a:	f8c4 2b18 	str.w	r2, [r4, #2840]	; 0xb18
}
 800fb8e:	b045      	add	sp, #276	; 0x114
 800fb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800fb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb96:	9305      	str	r3, [sp, #20]
 800fb98:	b15b      	cbz	r3, 800fbb2 <xmp3_IMDCT+0xd16>
		nBfly = bc.nBlocksLong - 1;
 800fb9a:	9916      	ldr	r1, [sp, #88]	; 0x58
		bc.nBlocksLong = blockCutoff;	
 800fb9c:	9105      	str	r1, [sp, #20]
		nBfly = bc.nBlocksLong - 1;
 800fb9e:	1e4b      	subs	r3, r1, #1
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800fba0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800fba4:	0052      	lsls	r2, r2, #1
 800fba6:	3208      	adds	r2, #8
 800fba8:	920f      	str	r2, [sp, #60]	; 0x3c
 800fbaa:	00da      	lsls	r2, r3, #3
		nBfly = bc.nBlocksLong - 1;
 800fbac:	e4ce      	b.n	800f54c <xmp3_IMDCT+0x6b0>
 800fbae:	221f      	movs	r2, #31
 800fbb0:	e7d5      	b.n	800fb5e <xmp3_IMDCT+0xcc2>
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800fbb2:	0213      	lsls	r3, r2, #8
 800fbb4:	930e      	str	r3, [sp, #56]	; 0x38
 800fbb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fbbc:	2208      	movs	r2, #8
 800fbbe:	9318      	str	r3, [sp, #96]	; 0x60
 800fbc0:	920f      	str	r2, [sp, #60]	; 0x3c
 800fbc2:	9b05      	ldr	r3, [sp, #20]
 800fbc4:	f7ff baa8 	b.w	800f118 <xmp3_IMDCT+0x27c>
	for (   ; i < bc->nBlocksTotal; i++) {
 800fbc8:	9b05      	ldr	r3, [sp, #20]
 800fbca:	930b      	str	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fbcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fbce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbd0:	42b3      	cmp	r3, r6
 800fbd2:	f73f af57 	bgt.w	800fa84 <xmp3_IMDCT+0xbe8>
 800fbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbd8:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbda:	e7a1      	b.n	800fb20 <xmp3_IMDCT+0xc84>
	mOut = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	9305      	str	r3, [sp, #20]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fbe0:	9302      	str	r3, [sp, #8]
 800fbe2:	e550      	b.n	800f686 <xmp3_IMDCT+0x7ea>
 800fbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe8:	e7b9      	b.n	800fb5e <xmp3_IMDCT+0xcc2>
		return -1;
 800fbea:	f04f 30ff 	mov.w	r0, #4294967295
 800fbee:	e7ce      	b.n	800fb8e <xmp3_IMDCT+0xcf2>

0800fbf0 <MP3InitDecoder>:
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 800fbf0:	f7fd bd48 	b.w	800d684 <xmp3_AllocateBuffers>

0800fbf4 <MP3FindSyncWord>:
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 800fbf4:	2901      	cmp	r1, #1
 800fbf6:	dd13      	ble.n	800fc20 <MP3FindSyncWord+0x2c>
 800fbf8:	f1a0 0c02 	sub.w	ip, r0, #2
 800fbfc:	448c      	add	ip, r1
 800fbfe:	1e43      	subs	r3, r0, #1
 800fc00:	f1c0 0101 	rsb	r1, r0, #1
 800fc04:	e001      	b.n	800fc0a <MP3FindSyncWord+0x16>
 800fc06:	4563      	cmp	r3, ip
 800fc08:	d00a      	beq.n	800fc20 <MP3FindSyncWord+0x2c>
 800fc0a:	18c8      	adds	r0, r1, r3
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800fc0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800fc10:	2aff      	cmp	r2, #255	; 0xff
 800fc12:	d1f8      	bne.n	800fc06 <MP3FindSyncWord+0x12>
 800fc14:	785a      	ldrb	r2, [r3, #1]
 800fc16:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800fc1a:	2ae0      	cmp	r2, #224	; 0xe0
 800fc1c:	d1f3      	bne.n	800fc06 <MP3FindSyncWord+0x12>
			return i;
	}
	
	return -1;
}
 800fc1e:	4770      	bx	lr
	return -1;
 800fc20:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <MP3GetNextFrameInfo>:
 **************************************************************************************/
int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo)
 800fc28:	b348      	cbz	r0, 800fc7e <MP3GetNextFrameInfo+0x56>
{
 800fc2a:	b538      	push	{r3, r4, r5, lr}
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	4611      	mov	r1, r2
 800fc30:	4605      	mov	r5, r0
		return ERR_MP3_NULL_POINTER;

	if (UnpackFrameHeader(mp3DecInfo, buf) == -1 || mp3DecInfo->layer != 3)
 800fc32:	f7fd fb0d 	bl	800d250 <xmp3_UnpackFrameHeader>
 800fc36:	3001      	adds	r0, #1
 800fc38:	d01e      	beq.n	800fc78 <MP3GetNextFrameInfo+0x50>
 800fc3a:	f8d5 37d0 	ldr.w	r3, [r5, #2000]	; 0x7d0
 800fc3e:	2b03      	cmp	r3, #3
 800fc40:	d11a      	bne.n	800fc78 <MP3GetNextFrameInfo+0x50>
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 800fc42:	f8d5 27b8 	ldr.w	r2, [r5, #1976]	; 0x7b8
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 800fc46:	f8d5 17bc 	ldr.w	r1, [r5, #1980]	; 0x7bc
 800fc4a:	e9c4 2100 	strd	r2, r1, [r4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 800fc4e:	f8d5 27c0 	ldr.w	r2, [r5, #1984]	; 0x7c0
 800fc52:	60a2      	str	r2, [r4, #8]
		mp3FrameInfo->bitsPerSample = 16;
 800fc54:	2210      	movs	r2, #16
 800fc56:	60e2      	str	r2, [r4, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc58:	f895 27d4 	ldrb.w	r2, [r5, #2004]	; 0x7d4
		mp3FrameInfo->layer = mp3DecInfo->layer;
 800fc5c:	6163      	str	r3, [r4, #20]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc5e:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <MP3GetNextFrameInfo+0x5c>)
		mp3FrameInfo->version = mp3DecInfo->version;
 800fc60:	61a2      	str	r2, [r4, #24]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc62:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800fc66:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		return ERR_MP3_INVALID_FRAMEHEADER;

	MP3GetLastFrameInfo(mp3DecInfo, mp3FrameInfo);

	return ERR_MP3_NONE;
 800fc6a:	2000      	movs	r0, #0
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc70:	fb01 f303 	mul.w	r3, r1, r3
 800fc74:	6123      	str	r3, [r4, #16]
}
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_MP3_INVALID_FRAMEHEADER;
 800fc78:	f06f 0005 	mvn.w	r0, #5
}
 800fc7c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_MP3_NULL_POINTER;
 800fc7e:	f06f 0004 	mvn.w	r0, #4
}
 800fc82:	4770      	bx	lr
 800fc84:	08027e60 	.word	0x08027e60

0800fc88 <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//	ULONG32 ulTime;
//	StartYield(&ulTime);
	if (!mp3DecInfo)
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f000 81d8 	beq.w	801003e <MP3Decode+0x3b6>
{
 800fc8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc92:	ed2d 8b02 	vpush	{d8}
 800fc96:	460f      	mov	r7, r1
 800fc98:	b087      	sub	sp, #28
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800fc9a:	6809      	ldr	r1, [r1, #0]
 800fc9c:	ee08 3a10 	vmov	s16, r3
 800fca0:	4692      	mov	sl, r2
 800fca2:	4681      	mov	r9, r0
 800fca4:	f7fd fad4 	bl	800d250 <xmp3_UnpackFrameHeader>
	if (fhBytes < 0)	
 800fca8:	f1b0 0800 	subs.w	r8, r0, #0
 800fcac:	f2c0 81c4 	blt.w	8010038 <MP3Decode+0x3b0>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800fcb0:	6839      	ldr	r1, [r7, #0]
 800fcb2:	4441      	add	r1, r8
 800fcb4:	6039      	str	r1, [r7, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800fcb6:	4648      	mov	r0, r9
 800fcb8:	f7fd fbae 	bl	800d418 <xmp3_UnpackSideInfo>
	if (siBytes < 0) {
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	f2c0 8201 	blt.w	80100c4 <MP3Decode+0x43c>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
	*bytesLeft -= (fhBytes + siBytes);
 800fcc2:	f8da 3000 	ldr.w	r3, [sl]
	*inbuf += siBytes;
 800fcc6:	683a      	ldr	r2, [r7, #0]
	*bytesLeft -= (fhBytes + siBytes);
 800fcc8:	eb08 0100 	add.w	r1, r8, r0
 800fccc:	1a59      	subs	r1, r3, r1
	*inbuf += siBytes;
 800fcce:	eb02 0e00 	add.w	lr, r2, r0
 800fcd2:	f8c7 e000 	str.w	lr, [r7]
	*bytesLeft -= (fhBytes + siBytes);
 800fcd6:	f8ca 1000 	str.w	r1, [sl]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 800fcda:	f8d9 37b8 	ldr.w	r3, [r9, #1976]	; 0x7b8
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f000 808e 	beq.w	800fe00 <MP3Decode+0x178>
 800fce4:	f8d9 37b0 	ldr.w	r3, [r9, #1968]	; 0x7b0
 800fce8:	b14b      	cbz	r3, 800fcfe <MP3Decode+0x76>
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 800fcea:	f8d9 47b4 	ldr.w	r4, [r9, #1972]	; 0x7b4
 800fcee:	4648      	mov	r0, r9
 800fcf0:	f7fd faa2 	bl	800d238 <xmp3_CheckPadBit>
 800fcf4:	4420      	add	r0, r4
 800fcf6:	f8c9 07cc 	str.w	r0, [r9, #1996]	; 0x7cc
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
		mp3DecInfo->nSlots = *bytesLeft;
 800fcfa:	f8da 1000 	ldr.w	r1, [sl]
	if (useSize) {
 800fcfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f000 80ee 	beq.w	800fee2 <MP3Decode+0x25a>
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800fd06:	f8d9 37d8 	ldr.w	r3, [r9, #2008]	; 0x7d8
		mp3DecInfo->nSlots = *bytesLeft;
 800fd0a:	f8c9 17cc 	str.w	r1, [r9, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f040 8180 	bne.w	8010014 <MP3Decode+0x38c>
 800fd14:	2900      	cmp	r1, #0
 800fd16:	f340 817d 	ble.w	8010014 <MP3Decode+0x38c>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 800fd1a:	f8c9 17dc 	str.w	r1, [r9, #2012]	; 0x7dc
		mainPtr = *inbuf;
 800fd1e:	f8d7 8000 	ldr.w	r8, [r7]
		*inbuf += mp3DecInfo->nSlots;
		*bytesLeft -= (mp3DecInfo->nSlots);
 800fd22:	f8da 3000 	ldr.w	r3, [sl]
 800fd26:	1a5b      	subs	r3, r3, r1
		*inbuf += mp3DecInfo->nSlots;
 800fd28:	4441      	add	r1, r8
 800fd2a:	6039      	str	r1, [r7, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 800fd2c:	f8ca 3000 	str.w	r3, [sl]
	}
	bitOffset = 0;
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd30:	f8d9 37c4 	ldr.w	r3, [r9, #1988]	; 0x7c4
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800fd34:	f8d9 47dc 	ldr.w	r4, [r9, #2012]	; 0x7dc
	bitOffset = 0;
 800fd38:	2000      	movs	r0, #0
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd3a:	4283      	cmp	r3, r0
	bitOffset = 0;
 800fd3c:	9005      	str	r0, [sp, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800fd3e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd42:	dd58      	ble.n	800fdf6 <MP3Decode+0x16e>
 800fd44:	f509 63fc 	add.w	r3, r9, #2016	; 0x7e0
 800fd48:	4683      	mov	fp, r0
 800fd4a:	9303      	str	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd4c:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f340 80f3 	ble.w	800ff3c <MP3Decode+0x2b4>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 800fd56:	9b03      	ldr	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd58:	f8cd b008 	str.w	fp, [sp, #8]
 800fd5c:	f04f 0a00 	mov.w	sl, #0
 800fd60:	4657      	mov	r7, sl
			prevBitOffset = bitOffset;
 800fd62:	9e05      	ldr	r6, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd64:	46c3      	mov	fp, r8
 800fd66:	469a      	mov	sl, r3
 800fd68:	e018      	b.n	800fd9c <MP3Decode+0x114>
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
			mainPtr += offset;
			mainBits -= sfBlockBits;

			if (offset < 0 || mainBits < huffBlockBits) {
 800fd6a:	45a4      	cmp	ip, r4
 800fd6c:	dc2f      	bgt.n	800fdce <MP3Decode+0x146>
				return ERR_MP3_INVALID_SCALEFACT;
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800fd6e:	9802      	ldr	r0, [sp, #8]
 800fd70:	9701      	str	r7, [sp, #4]
 800fd72:	9000      	str	r0, [sp, #0]
 800fd74:	4648      	mov	r0, r9
 800fd76:	f7fe fb9d 	bl	800e4b4 <xmp3_DecodeHuffman>
			if (offset < 0) {
 800fd7a:	2800      	cmp	r0, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd7c:	f107 0701 	add.w	r7, r7, #1
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd80:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
			mainPtr += offset;
 800fd84:	4483      	add	fp, r0
			if (offset < 0) {
 800fd86:	f2c0 810c 	blt.w	800ffa2 <MP3Decode+0x31a>
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd8a:	9e05      	ldr	r6, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd8c:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd90:	4435      	add	r5, r6
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd92:	42bb      	cmp	r3, r7
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd94:	eba8 0405 	sub.w	r4, r8, r5
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd98:	f340 80cd 	ble.w	800ff36 <MP3Decode+0x2ae>
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 800fd9c:	9802      	ldr	r0, [sp, #8]
 800fd9e:	9000      	str	r0, [sp, #0]
 800fda0:	4659      	mov	r1, fp
 800fda2:	4623      	mov	r3, r4
 800fda4:	aa05      	add	r2, sp, #20
 800fda6:	9701      	str	r7, [sp, #4]
 800fda8:	4648      	mov	r0, r9
 800fdaa:	f000 fdfb 	bl	80109a4 <xmp3_UnpackScaleFactors>
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800fdae:	9d05      	ldr	r5, [sp, #20]
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800fdb0:	f85a cb04 	ldr.w	ip, [sl], #4
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800fdb4:	ebc6 06c0 	rsb	r6, r6, r0, lsl #3
 800fdb8:	eb06 0e05 	add.w	lr, r6, r5
			mainPtr += offset;
 800fdbc:	4483      	add	fp, r0
			if (offset < 0 || mainBits < huffBlockBits) {
 800fdbe:	2800      	cmp	r0, #0
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800fdc0:	aa05      	add	r2, sp, #20
 800fdc2:	4659      	mov	r1, fp
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800fdc4:	ebac 030e 	sub.w	r3, ip, lr
			mainBits -= sfBlockBits;
 800fdc8:	eba4 080e 	sub.w	r8, r4, lr
			if (offset < 0 || mainBits < huffBlockBits) {
 800fdcc:	dacd      	bge.n	800fd6a <MP3Decode+0xe2>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800fdce:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800fdd2:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 800fdd6:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fdda:	fb01 f202 	mul.w	r2, r1, r2
 800fdde:	fb03 f202 	mul.w	r2, r3, r2
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	dd05      	ble.n	800fdf2 <MP3Decode+0x16a>
		outbuf[i] = 0;
 800fde6:	ee18 0a10 	vmov	r0, s16
 800fdea:	0052      	lsls	r2, r2, #1
 800fdec:	2100      	movs	r1, #0
 800fdee:	f00e fc61 	bl	801e6b4 <memset>
				return ERR_MP3_INVALID_SCALEFACT;
 800fdf2:	f06f 0007 	mvn.w	r0, #7
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 800fdf6:	b007      	add	sp, #28
 800fdf8:	ecbd 8b02 	vpop	{d8}
 800fdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!mp3DecInfo->freeBitrateFlag) {
 800fe00:	f8d9 37b0 	ldr.w	r3, [r9, #1968]	; 0x7b0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f47f af70 	bne.w	800fcea <MP3Decode+0x62>
			mp3DecInfo->freeBitrateFlag = 1;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	f8c9 37b0 	str.w	r3, [r9, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe10:	f8da 1000 	ldr.w	r1, [sl]
	for (i = 0; i < nBytes - 1; i++) {
 800fe14:	1e4e      	subs	r6, r1, #1
 800fe16:	2e00      	cmp	r6, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe18:	eba2 0c08 	sub.w	ip, r2, r8
	unsigned char *bufPtr = buf;
 800fe1c:	4673      	mov	r3, lr
	for (i = 0; i < nBytes - 1; i++) {
 800fe1e:	dd19      	ble.n	800fe54 <MP3Decode+0x1cc>
 800fe20:	2500      	movs	r5, #0
 800fe22:	e002      	b.n	800fe2a <MP3Decode+0x1a2>
 800fe24:	3501      	adds	r5, #1
 800fe26:	42b5      	cmp	r5, r6
 800fe28:	d014      	beq.n	800fe54 <MP3Decode+0x1cc>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800fe2a:	461c      	mov	r4, r3
 800fe2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe30:	2aff      	cmp	r2, #255	; 0xff
 800fe32:	d1f7      	bne.n	800fe24 <MP3Decode+0x19c>
 800fe34:	7862      	ldrb	r2, [r4, #1]
 800fe36:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800fe3a:	2ae0      	cmp	r2, #224	; 0xe0
 800fe3c:	d1f2      	bne.n	800fe24 <MP3Decode+0x19c>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800fe3e:	f89c 3000 	ldrb.w	r3, [ip]
 800fe42:	2bff      	cmp	r3, #255	; 0xff
 800fe44:	d024      	beq.n	800fe90 <MP3Decode+0x208>
		nBytes -= (offset + 3);
 800fe46:	3503      	adds	r5, #3
 800fe48:	1b49      	subs	r1, r1, r5
	for (i = 0; i < nBytes - 1; i++) {
 800fe4a:	1e4e      	subs	r6, r1, #1
 800fe4c:	2e00      	cmp	r6, #0
		bufPtr += 3;
 800fe4e:	f104 0303 	add.w	r3, r4, #3
	for (i = 0; i < nBytes - 1; i++) {
 800fe52:	dce5      	bgt.n	800fe20 <MP3Decode+0x198>
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe54:	f04f 33ff 	mov.w	r3, #4294967295
 800fe58:	f8c9 37b4 	str.w	r3, [r9, #1972]	; 0x7b4
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800fe5c:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800fe60:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 800fe64:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fe68:	fb01 f202 	mul.w	r2, r1, r2
 800fe6c:	fb03 f202 	mul.w	r2, r3, r2
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	f340 80cc 	ble.w	801000e <MP3Decode+0x386>
		outbuf[i] = 0;
 800fe76:	ee18 0a10 	vmov	r0, s16
 800fe7a:	0052      	lsls	r2, r2, #1
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	f00e fc19 	bl	801e6b4 <memset>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800fe82:	f06f 0002 	mvn.w	r0, #2
}
 800fe86:	b007      	add	sp, #28
 800fe88:	ecbd 8b02 	vpop	{d8}
 800fe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800fe90:	7862      	ldrb	r2, [r4, #1]
 800fe92:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d1d5      	bne.n	800fe46 <MP3Decode+0x1be>
 800fe9a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800fe9e:	78a3      	ldrb	r3, [r4, #2]
 800fea0:	4053      	eors	r3, r2
 800fea2:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800fea6:	d1ce      	bne.n	800fe46 <MP3Decode+0x1be>
			if ((firstFH[2] >> 1) & 0x01)
 800fea8:	0793      	lsls	r3, r2, #30
				bufPtr--;
 800feaa:	bf48      	it	mi
 800feac:	f104 34ff 	addmi.w	r4, r4, #4294967295
			return bufPtr - buf;
 800feb0:	eba4 040e 	sub.w	r4, r4, lr
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800feb4:	2c00      	cmp	r4, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800feb6:	f8c9 47b4 	str.w	r4, [r9, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800feba:	dbcf      	blt.n	800fe5c <MP3Decode+0x1d4>
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800febc:	f8d9 27c0 	ldr.w	r2, [r9, #1984]	; 0x7c0
 800fec0:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800fec4:	eb08 0304 	add.w	r3, r8, r4
 800fec8:	4403      	add	r3, r0
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800feca:	fb02 f303 	mul.w	r3, r2, r3
 800fece:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800fed2:	00db      	lsls	r3, r3, #3
 800fed4:	fb01 f202 	mul.w	r2, r1, r2
 800fed8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fedc:	f8c9 37b8 	str.w	r3, [r9, #1976]	; 0x7b8
 800fee0:	e705      	b.n	800fcee <MP3Decode+0x66>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800fee2:	f8d9 07cc 	ldr.w	r0, [r9, #1996]	; 0x7cc
 800fee6:	4288      	cmp	r0, r1
 800fee8:	f300 8101 	bgt.w	80100ee <MP3Decode+0x466>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 800feec:	f8d9 37dc 	ldr.w	r3, [r9, #2012]	; 0x7dc
 800fef0:	f8d9 27d8 	ldr.w	r2, [r9, #2008]	; 0x7d8
 800fef4:	4293      	cmp	r3, r2
 800fef6:	f2c0 80ba 	blt.w	801006e <MP3Decode+0x3e6>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 800fefa:	1a9b      	subs	r3, r3, r2
 800fefc:	f109 081c 	add.w	r8, r9, #28
 800ff00:	eb08 0103 	add.w	r1, r8, r3
 800ff04:	4640      	mov	r0, r8
 800ff06:	f00e fbbb 	bl	801e680 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 800ff0a:	f8d9 07d8 	ldr.w	r0, [r9, #2008]	; 0x7d8
 800ff0e:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	4440      	add	r0, r8
 800ff16:	f00e fcb5 	bl	801e884 <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800ff1a:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 800ff1e:	f8d9 37d8 	ldr.w	r3, [r9, #2008]	; 0x7d8
 800ff22:	4413      	add	r3, r2
 800ff24:	f8c9 37dc 	str.w	r3, [r9, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	603b      	str	r3, [r7, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800ff2e:	f8da 3000 	ldr.w	r3, [sl]
 800ff32:	1a9b      	subs	r3, r3, r2
			mainPtr = mp3DecInfo->mainBuf;
 800ff34:	e6fa      	b.n	800fd2c <MP3Decode+0xa4>
 800ff36:	46d8      	mov	r8, fp
 800ff38:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (Dequantize(mp3DecInfo, gr) < 0) {
 800ff3c:	4659      	mov	r1, fp
 800ff3e:	4648      	mov	r0, r9
 800ff40:	f7fd ff3e 	bl	800ddc0 <xmp3_Dequantize>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	db7d      	blt.n	8010044 <MP3Decode+0x3bc>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ff48:	f8d9 17bc 	ldr.w	r1, [r9, #1980]	; 0x7bc
 800ff4c:	2900      	cmp	r1, #0
 800ff4e:	bfc8      	it	gt
 800ff50:	2500      	movgt	r5, #0
 800ff52:	dc04      	bgt.n	800ff5e <MP3Decode+0x2d6>
 800ff54:	e03f      	b.n	800ffd6 <MP3Decode+0x34e>
 800ff56:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ff5a:	42ab      	cmp	r3, r5
 800ff5c:	dd3a      	ble.n	800ffd4 <MP3Decode+0x34c>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800ff5e:	462a      	mov	r2, r5
 800ff60:	4659      	mov	r1, fp
 800ff62:	4648      	mov	r0, r9
 800ff64:	f7fe ff9a 	bl	800ee9c <xmp3_IMDCT>
 800ff68:	2800      	cmp	r0, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ff6a:	f105 0501 	add.w	r5, r5, #1
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800ff6e:	daf2      	bge.n	800ff56 <MP3Decode+0x2ce>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800ff70:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800ff74:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 800ff78:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ff7c:	fb01 f202 	mul.w	r2, r1, r2
 800ff80:	fb03 f202 	mul.w	r2, r3, r2
 800ff84:	2a00      	cmp	r2, #0
 800ff86:	dd05      	ble.n	800ff94 <MP3Decode+0x30c>
		outbuf[i] = 0;
 800ff88:	ee18 0a10 	vmov	r0, s16
 800ff8c:	0052      	lsls	r2, r2, #1
 800ff8e:	2100      	movs	r1, #0
 800ff90:	f00e fb90 	bl	801e6b4 <memset>
				return ERR_MP3_INVALID_IMDCT;			
 800ff94:	f06f 000a 	mvn.w	r0, #10
}
 800ff98:	b007      	add	sp, #28
 800ff9a:	ecbd 8b02 	vpop	{d8}
 800ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800ffa2:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800ffa6:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 800ffaa:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ffae:	fb01 f202 	mul.w	r2, r1, r2
 800ffb2:	fb03 f202 	mul.w	r2, r3, r2
 800ffb6:	2a00      	cmp	r2, #0
 800ffb8:	dd05      	ble.n	800ffc6 <MP3Decode+0x33e>
		outbuf[i] = 0;
 800ffba:	ee18 0a10 	vmov	r0, s16
 800ffbe:	0052      	lsls	r2, r2, #1
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	f00e fb77 	bl	801e6b4 <memset>
				return ERR_MP3_INVALID_HUFFCODES;
 800ffc6:	f06f 0008 	mvn.w	r0, #8
}
 800ffca:	b007      	add	sp, #28
 800ffcc:	ecbd 8b02 	vpop	{d8}
 800ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd4:	4619      	mov	r1, r3
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800ffd6:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800ffda:	ee18 3a10 	vmov	r3, s16
 800ffde:	fb02 f20b 	mul.w	r2, r2, fp
 800ffe2:	fb02 f101 	mul.w	r1, r2, r1
 800ffe6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ffea:	4648      	mov	r0, r9
 800ffec:	f001 fba8 	bl	8011740 <xmp3_Subband>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	f2c0 8091 	blt.w	8010118 <MP3Decode+0x490>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fff6:	9b03      	ldr	r3, [sp, #12]
 800fff8:	3308      	adds	r3, #8
 800fffa:	9303      	str	r3, [sp, #12]
 800fffc:	f8d9 37c4 	ldr.w	r3, [r9, #1988]	; 0x7c4
 8010000:	f10b 0b01 	add.w	fp, fp, #1
 8010004:	455b      	cmp	r3, fp
 8010006:	f73f aea1 	bgt.w	800fd4c <MP3Decode+0xc4>
	return ERR_MP3_NONE;
 801000a:	2000      	movs	r0, #0
 801000c:	e6f3      	b.n	800fdf6 <MP3Decode+0x16e>
				return ERR_MP3_FREE_BITRATE_SYNC;
 801000e:	f06f 0002 	mvn.w	r0, #2
 8010012:	e6f0      	b.n	800fdf6 <MP3Decode+0x16e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010014:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 8010018:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 801001c:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 8010020:	fb01 f202 	mul.w	r2, r1, r2
 8010024:	fb03 f202 	mul.w	r2, r3, r2
 8010028:	2a00      	cmp	r2, #0
 801002a:	dd05      	ble.n	8010038 <MP3Decode+0x3b0>
		outbuf[i] = 0;
 801002c:	ee18 0a10 	vmov	r0, s16
 8010030:	0052      	lsls	r2, r2, #1
 8010032:	2100      	movs	r1, #0
 8010034:	f00e fb3e 	bl	801e6b4 <memset>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 8010038:	f06f 0005 	mvn.w	r0, #5
 801003c:	e6db      	b.n	800fdf6 <MP3Decode+0x16e>
		return ERR_MP3_NULL_POINTER;
 801003e:	f06f 0004 	mvn.w	r0, #4
}
 8010042:	4770      	bx	lr
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010044:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 8010048:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 801004c:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 8010050:	fb01 f202 	mul.w	r2, r1, r2
 8010054:	fb03 f202 	mul.w	r2, r3, r2
 8010058:	2a00      	cmp	r2, #0
 801005a:	dd05      	ble.n	8010068 <MP3Decode+0x3e0>
		outbuf[i] = 0;
 801005c:	ee18 0a10 	vmov	r0, s16
 8010060:	0052      	lsls	r2, r2, #1
 8010062:	2100      	movs	r1, #0
 8010064:	f00e fb26 	bl	801e6b4 <memset>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 8010068:	f06f 0009 	mvn.w	r0, #9
 801006c:	e6c3      	b.n	800fdf6 <MP3Decode+0x16e>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 801006e:	4602      	mov	r2, r0
 8010070:	f109 001c 	add.w	r0, r9, #28
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	4418      	add	r0, r3
 8010078:	f00e fc04 	bl	801e884 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 801007c:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 8010080:	f8d9 37dc 	ldr.w	r3, [r9, #2012]	; 0x7dc
 8010084:	4413      	add	r3, r2
 8010086:	f8c9 37dc 	str.w	r3, [r9, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	4413      	add	r3, r2
 801008e:	603b      	str	r3, [r7, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8010090:	f8da 3000 	ldr.w	r3, [sl]
 8010094:	1a9b      	subs	r3, r3, r2
 8010096:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 801009a:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 801009e:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 80100a2:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 80100a6:	fb01 f202 	mul.w	r2, r1, r2
 80100aa:	fb03 f202 	mul.w	r2, r3, r2
 80100ae:	2a00      	cmp	r2, #0
 80100b0:	dd05      	ble.n	80100be <MP3Decode+0x436>
		outbuf[i] = 0;
 80100b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80100b4:	ee18 0a10 	vmov	r0, s16
 80100b8:	0052      	lsls	r2, r2, #1
 80100ba:	f00e fafb 	bl	801e6b4 <memset>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 80100be:	f06f 0001 	mvn.w	r0, #1
 80100c2:	e698      	b.n	800fdf6 <MP3Decode+0x16e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80100c4:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 80100c8:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 80100cc:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 80100d0:	fb01 f202 	mul.w	r2, r1, r2
 80100d4:	fb03 f202 	mul.w	r2, r3, r2
 80100d8:	2a00      	cmp	r2, #0
 80100da:	dd05      	ble.n	80100e8 <MP3Decode+0x460>
		outbuf[i] = 0;
 80100dc:	ee18 0a10 	vmov	r0, s16
 80100e0:	0052      	lsls	r2, r2, #1
 80100e2:	2100      	movs	r1, #0
 80100e4:	f00e fae6 	bl	801e6b4 <memset>
		return ERR_MP3_INVALID_SIDEINFO;
 80100e8:	f06f 0006 	mvn.w	r0, #6
 80100ec:	e683      	b.n	800fdf6 <MP3Decode+0x16e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80100ee:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 80100f2:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 80100f6:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 80100fa:	fb01 f202 	mul.w	r2, r1, r2
 80100fe:	fb03 f202 	mul.w	r2, r3, r2
 8010102:	2a00      	cmp	r2, #0
 8010104:	dd05      	ble.n	8010112 <MP3Decode+0x48a>
		outbuf[i] = 0;
 8010106:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010108:	ee18 0a10 	vmov	r0, s16
 801010c:	0052      	lsls	r2, r2, #1
 801010e:	f00e fad1 	bl	801e6b4 <memset>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8010112:	f04f 30ff 	mov.w	r0, #4294967295
 8010116:	e66e      	b.n	800fdf6 <MP3Decode+0x16e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010118:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 801011c:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 8010120:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 8010124:	fb01 f202 	mul.w	r2, r1, r2
 8010128:	fb03 f202 	mul.w	r2, r3, r2
 801012c:	2a00      	cmp	r2, #0
 801012e:	dd05      	ble.n	801013c <MP3Decode+0x4b4>
		outbuf[i] = 0;
 8010130:	ee18 0a10 	vmov	r0, s16
 8010134:	0052      	lsls	r2, r2, #1
 8010136:	2100      	movs	r1, #0
 8010138:	f00e fabc 	bl	801e6b4 <memset>
			return ERR_MP3_INVALID_SUBBAND;			
 801013c:	f06f 000b 	mvn.w	r0, #11
 8010140:	e659      	b.n	800fdf6 <MP3Decode+0x16e>
 8010142:	bf00      	nop

08010144 <xmp3_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 8010144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	4684      	mov	ip, r0
 801014a:	b083      	sub	sp, #12
	vb1 = vbuf;
	sum1L = rndVal;
	
	c1 = *coef;
	coef++;
	c2 = *coef;
 801014c:	e9d2 7500 	ldrd	r7, r5, [r2]
static __inline Word64 MADD64(Word64 sum64, int x, int y)
{
        U64 u;
        u.w64 = sum64;

        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8010150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010154:	2400      	movs	r4, #0
	coef++;
	vLo = *(vb1+(0));
	vHi = *(vb1+(23-(0)));
 8010156:	6dce      	ldr	r6, [r1, #92]	; 0x5c
 8010158:	6808      	ldr	r0, [r1, #0]
 801015a:	fbc0 3407 	smlal	r3, r4, r0, r7
	sum1L = MADD64(sum1L, vLo,  c1);
	sum1L = MADD64(sum1L, vHi, -c2);
 801015e:	426d      	negs	r5, r5
 8010160:	fbc6 3405 	smlal	r3, r4, r6, r5
	
	//MC0M(0) // a
	MC0M(1)
 8010164:	68d5      	ldr	r5, [r2, #12]
 8010166:	684f      	ldr	r7, [r1, #4]
 8010168:	6d8e      	ldr	r6, [r1, #88]	; 0x58
 801016a:	6890      	ldr	r0, [r2, #8]
 801016c:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010170:	426d      	negs	r5, r5
 8010172:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(2)
 8010176:	6955      	ldr	r5, [r2, #20]
 8010178:	688f      	ldr	r7, [r1, #8]
 801017a:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 801017c:	6910      	ldr	r0, [r2, #16]
 801017e:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010182:	426d      	negs	r5, r5
 8010184:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(3)
 8010188:	69d5      	ldr	r5, [r2, #28]
 801018a:	68cf      	ldr	r7, [r1, #12]
 801018c:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 801018e:	6990      	ldr	r0, [r2, #24]
 8010190:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010194:	426d      	negs	r5, r5
 8010196:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(4)
 801019a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 801019c:	690f      	ldr	r7, [r1, #16]
 801019e:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 80101a0:	6a10      	ldr	r0, [r2, #32]
 80101a2:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101a6:	426d      	negs	r5, r5
 80101a8:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(5)
 80101ac:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80101ae:	694f      	ldr	r7, [r1, #20]
 80101b0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80101b2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80101b4:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101b8:	426d      	negs	r5, r5
 80101ba:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(6)
 80101be:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80101c0:	698f      	ldr	r7, [r1, #24]
 80101c2:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 80101c4:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80101c6:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101ca:	426d      	negs	r5, r5
 80101cc:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(7)
 80101d0:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80101d2:	69cf      	ldr	r7, [r1, #28]
 80101d4:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80101d6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80101d8:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101dc:	426d      	negs	r5, r5
 80101de:	fbc6 3405 	smlal	r3, r4, r6, r5
  unsigned int xLo = (unsigned int) x;
  int xHi = (int) (x >> 32);
  int nComp = 32-n;
  int tmp;
  // Shortcut: n is always < 32.
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80101e2:	250c      	movs	r5, #12
 80101e4:	2614      	movs	r6, #20
 80101e6:	fa04 f705 	lsl.w	r7, r4, r5
 80101ea:	fa44 f406 	asr.w	r4, r4, r6
 80101ee:	fa23 f306 	lsr.w	r3, r3, r6
 80101f2:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 80101f6:	155d      	asrs	r5, r3, #21
 80101f8:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 80101fc:	bf1c      	itt	ne
 80101fe:	17dc      	asrne	r4, r3, #31
		x = sign ^ ((1 << 15) - 1);
 8010200:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 8010204:	f501 5580 	add.w	r5, r1, #4096	; 0x1000
	x >>= fracBits;
 8010208:	bf0c      	ite	eq
 801020a:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 801020c:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	MC1M(0)
 8010210:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
 8010214:	682e      	ldr	r6, [r5, #0]
	return (short)x;
 8010216:	f8ac 3000 	strh.w	r3, [ip]
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801021a:	2400      	movs	r4, #0
 801021c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010220:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(1)
 8010224:	f8d2 7404 	ldr.w	r7, [r2, #1028]	; 0x404
 8010228:	686e      	ldr	r6, [r5, #4]
 801022a:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(2)
 801022e:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 8010232:	68ae      	ldr	r6, [r5, #8]
 8010234:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(3)
 8010238:	f8d2 740c 	ldr.w	r7, [r2, #1036]	; 0x40c
 801023c:	68ee      	ldr	r6, [r5, #12]
 801023e:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(4)
 8010242:	f8d2 7410 	ldr.w	r7, [r2, #1040]	; 0x410
 8010246:	692e      	ldr	r6, [r5, #16]
 8010248:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(5)
 801024c:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 8010250:	696e      	ldr	r6, [r5, #20]
 8010252:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(6)
 8010256:	f8d2 7418 	ldr.w	r7, [r2, #1048]	; 0x418
 801025a:	69ae      	ldr	r6, [r5, #24]
 801025c:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(7)
 8010260:	69ed      	ldr	r5, [r5, #28]
 8010262:	f8d2 641c 	ldr.w	r6, [r2, #1052]	; 0x41c
 8010266:	fbc5 3406 	smlal	r3, r4, r5, r6
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 801026a:	250c      	movs	r5, #12
 801026c:	2614      	movs	r6, #20
 801026e:	fa04 f705 	lsl.w	r7, r4, r5
 8010272:	fa44 f406 	asr.w	r4, r4, r6
 8010276:	fa23 f306 	lsr.w	r3, r3, r6
 801027a:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 801027e:	155d      	asrs	r5, r3, #21
	sign = x >> 31;
 8010280:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8010282:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010286:	bf16      	itet	ne
 8010288:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	x >>= fracBits;
 801028c:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 801028e:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 8010292:	f8ac 3020 	strh.w	r3, [ip, #32]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm++;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8010296:	f502 6388 	add.w	r3, r2, #1088	; 0x440
 801029a:	f102 0480 	add.w	r4, r2, #128	; 0x80
 801029e:	f10c 0a40 	add.w	sl, ip, #64	; 0x40
 80102a2:	9301      	str	r3, [sp, #4]
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 80102a4:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80102a8:	f04f 0800 	mov.w	r8, #0
		x = sign ^ ((1 << 15) - 1);
 80102ac:	46e6      	mov	lr, ip
		sum1L = sum2L = rndVal;

		MC2M(0)
 80102ae:	e954 cb10 	ldrd	ip, fp, [r4, #-64]	; 0x40
 80102b2:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
 80102b6:	f8d1 715c 	ldr.w	r7, [r1, #348]	; 0x15c
 80102ba:	464a      	mov	r2, r9
 80102bc:	4646      	mov	r6, r8
 80102be:	fbc0 260c 	smlal	r2, r6, r0, ip
 80102c2:	464b      	mov	r3, r9
 80102c4:	4645      	mov	r5, r8
 80102c6:	fbc0 350b 	smlal	r3, r5, r0, fp
 80102ca:	f1cb 0000 	rsb	r0, fp, #0
 80102ce:	fbc7 2600 	smlal	r2, r6, r7, r0
 80102d2:	fbc7 350c 	smlal	r3, r5, r7, ip
		MC2M(1)
 80102d6:	e954 7c0e 	ldrd	r7, ip, [r4, #-56]	; 0x38
 80102da:	f8d1 b104 	ldr.w	fp, [r1, #260]	; 0x104
 80102de:	f8d1 0158 	ldr.w	r0, [r1, #344]	; 0x158
 80102e2:	fbcb 2607 	smlal	r2, r6, fp, r7
 80102e6:	fbcb 350c 	smlal	r3, r5, fp, ip
 80102ea:	f1cc 0c00 	rsb	ip, ip, #0
 80102ee:	fbc0 260c 	smlal	r2, r6, r0, ip
 80102f2:	fbc0 3507 	smlal	r3, r5, r0, r7
		MC2M(2)
 80102f6:	e954 7c0c 	ldrd	r7, ip, [r4, #-48]	; 0x30
 80102fa:	f8d1 b108 	ldr.w	fp, [r1, #264]	; 0x108
 80102fe:	f8d1 0154 	ldr.w	r0, [r1, #340]	; 0x154
 8010302:	fbcb 2607 	smlal	r2, r6, fp, r7
 8010306:	fbcb 350c 	smlal	r3, r5, fp, ip
 801030a:	f1cc 0c00 	rsb	ip, ip, #0
 801030e:	fbc0 260c 	smlal	r2, r6, r0, ip
 8010312:	fbc0 3507 	smlal	r3, r5, r0, r7
		MC2M(3)
 8010316:	e954 7c0a 	ldrd	r7, ip, [r4, #-40]	; 0x28
 801031a:	f8d1 b10c 	ldr.w	fp, [r1, #268]	; 0x10c
 801031e:	f8d1 0150 	ldr.w	r0, [r1, #336]	; 0x150
 8010322:	fbcb 2607 	smlal	r2, r6, fp, r7
 8010326:	fbcb 350c 	smlal	r3, r5, fp, ip
 801032a:	f1cc 0c00 	rsb	ip, ip, #0
 801032e:	fbc0 260c 	smlal	r2, r6, r0, ip
 8010332:	fbc0 3507 	smlal	r3, r5, r0, r7
		MC2M(4)
 8010336:	e954 cb08 	ldrd	ip, fp, [r4, #-32]
 801033a:	f8d1 7110 	ldr.w	r7, [r1, #272]	; 0x110
 801033e:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
 8010342:	fbc7 260c 	smlal	r2, r6, r7, ip
 8010346:	fbc7 350b 	smlal	r3, r5, r7, fp
 801034a:	f1cb 0700 	rsb	r7, fp, #0
 801034e:	fbc0 2607 	smlal	r2, r6, r0, r7
 8010352:	fbc0 350c 	smlal	r3, r5, r0, ip
		MC2M(5)
 8010356:	e954 c006 	ldrd	ip, r0, [r4, #-24]
 801035a:	f8d1 b114 	ldr.w	fp, [r1, #276]	; 0x114
 801035e:	f8d1 7148 	ldr.w	r7, [r1, #328]	; 0x148
 8010362:	fbcb 260c 	smlal	r2, r6, fp, ip
 8010366:	fbcb 3500 	smlal	r3, r5, fp, r0
 801036a:	4240      	negs	r0, r0
 801036c:	fbc7 2600 	smlal	r2, r6, r7, r0
 8010370:	fbc7 350c 	smlal	r3, r5, r7, ip
		MC2M(6)
 8010374:	e954 c004 	ldrd	ip, r0, [r4, #-16]
 8010378:	f8d1 b118 	ldr.w	fp, [r1, #280]	; 0x118
 801037c:	f8d1 7144 	ldr.w	r7, [r1, #324]	; 0x144
 8010380:	fbcb 260c 	smlal	r2, r6, fp, ip
 8010384:	fbcb 3500 	smlal	r3, r5, fp, r0
 8010388:	4240      	negs	r0, r0
 801038a:	fbc7 2600 	smlal	r2, r6, r7, r0
 801038e:	fbc7 350c 	smlal	r3, r5, r7, ip
		MC2M(7)
 8010392:	e954 c002 	ldrd	ip, r0, [r4, #-8]
 8010396:	f8d1 b11c 	ldr.w	fp, [r1, #284]	; 0x11c
 801039a:	f8d1 7140 	ldr.w	r7, [r1, #320]	; 0x140
 801039e:	fbcb 260c 	smlal	r2, r6, fp, ip
 80103a2:	fbcb 3500 	smlal	r3, r5, fp, r0
 80103a6:	4240      	negs	r0, r0
 80103a8:	fbc7 2600 	smlal	r2, r6, r7, r0
 80103ac:	fbc7 350c 	smlal	r3, r5, r7, ip
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80103b0:	270c      	movs	r7, #12
 80103b2:	f04f 0c14 	mov.w	ip, #20
 80103b6:	fa06 f007 	lsl.w	r0, r6, r7
 80103ba:	fa46 f60c 	asr.w	r6, r6, ip
 80103be:	fa22 f20c 	lsr.w	r2, r2, ip
 80103c2:	ea42 0200 	orr.w	r2, r2, r0
	if (sign != (x >> 15))
 80103c6:	1556      	asrs	r6, r2, #21
	sign = x >> 31;
 80103c8:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 80103ca:	ebb6 7fe2 	cmp.w	r6, r2, asr #31
		x = sign ^ ((1 << 15) - 1);
 80103ce:	bf16      	itet	ne
 80103d0:	f480 42ff 	eorne.w	r2, r0, #32640	; 0x7f80
	x >>= fracBits;
 80103d4:	1192      	asreq	r2, r2, #6
		x = sign ^ ((1 << 15) - 1);
 80103d6:	f082 027f 	eorne.w	r2, r2, #127	; 0x7f
	return (short)x;
 80103da:	f82e 2f02 	strh.w	r2, [lr, #2]!
 80103de:	200c      	movs	r0, #12
 80103e0:	2614      	movs	r6, #20
 80103e2:	fa05 f200 	lsl.w	r2, r5, r0
 80103e6:	fa45 f506 	asr.w	r5, r5, r6
 80103ea:	fa23 f306 	lsr.w	r3, r3, r6
 80103ee:	ea43 0302 	orr.w	r3, r3, r2
	if (sign != (x >> 15))
 80103f2:	1558      	asrs	r0, r3, #21
 80103f4:	ebb0 7fe3 	cmp.w	r0, r3, asr #31
	sign = x >> 31;
 80103f8:	ea4f 72e3 	mov.w	r2, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 80103fc:	bf16      	itet	ne
 80103fe:	f482 43ff 	eorne.w	r3, r2, #32640	; 0x7f80
	x >>= fracBits;
 8010402:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 8010404:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 8010408:	f82a 3d02 	strh.w	r3, [sl, #-2]!
	for (i = 15; i > 0; i--) {
 801040c:	9b01      	ldr	r3, [sp, #4]
 801040e:	3440      	adds	r4, #64	; 0x40
 8010410:	429c      	cmp	r4, r3
 8010412:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8010416:	f47f af4a 	bne.w	80102ae <xmp3_PolyphaseMono+0x16a>
		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		pcm++;
	}
}
 801041a:	b003      	add	sp, #12
 801041c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010420 <xmp3_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8010420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 8010424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010428:	2500      	movs	r5, #0
 801042a:	4680      	mov	r8, r0
 801042c:	b085      	sub	sp, #20
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 801042e:	6817      	ldr	r7, [r2, #0]
 8010430:	6808      	ldr	r0, [r1, #0]
 8010432:	461c      	mov	r4, r3
 8010434:	462e      	mov	r6, r5
 8010436:	fbc0 4607 	smlal	r4, r6, r0, r7
 801043a:	6850      	ldr	r0, [r2, #4]
 801043c:	f1c0 0c00 	rsb	ip, r0, #0
 8010440:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8010442:	fbc0 460c 	smlal	r4, r6, r0, ip
 8010446:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 801044a:	fbc0 3507 	smlal	r3, r5, r0, r7
 801044e:	f8d1 00dc 	ldr.w	r0, [r1, #220]	; 0xdc
 8010452:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(1)
 8010456:	6897      	ldr	r7, [r2, #8]
 8010458:	6848      	ldr	r0, [r1, #4]
 801045a:	fbc0 4607 	smlal	r4, r6, r0, r7
 801045e:	68d0      	ldr	r0, [r2, #12]
 8010460:	f1c0 0c00 	rsb	ip, r0, #0
 8010464:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8010466:	fbc0 460c 	smlal	r4, r6, r0, ip
 801046a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 801046e:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010472:	f8d1 00d8 	ldr.w	r0, [r1, #216]	; 0xd8
 8010476:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(2)
 801047a:	6917      	ldr	r7, [r2, #16]
 801047c:	6888      	ldr	r0, [r1, #8]
 801047e:	fbc0 4607 	smlal	r4, r6, r0, r7
 8010482:	6950      	ldr	r0, [r2, #20]
 8010484:	f1c0 0c00 	rsb	ip, r0, #0
 8010488:	6d48      	ldr	r0, [r1, #84]	; 0x54
 801048a:	fbc0 460c 	smlal	r4, r6, r0, ip
 801048e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 8010492:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010496:	f8d1 00d4 	ldr.w	r0, [r1, #212]	; 0xd4
 801049a:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(3)
 801049e:	6997      	ldr	r7, [r2, #24]
 80104a0:	68c8      	ldr	r0, [r1, #12]
 80104a2:	fbc0 4607 	smlal	r4, r6, r0, r7
 80104a6:	69d0      	ldr	r0, [r2, #28]
 80104a8:	f1c0 0c00 	rsb	ip, r0, #0
 80104ac:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80104ae:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104b2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80104b6:	fbc0 3507 	smlal	r3, r5, r0, r7
 80104ba:	f8d1 00d0 	ldr.w	r0, [r1, #208]	; 0xd0
 80104be:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(4)
 80104c2:	6a17      	ldr	r7, [r2, #32]
 80104c4:	6908      	ldr	r0, [r1, #16]
 80104c6:	fbc0 4607 	smlal	r4, r6, r0, r7
 80104ca:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80104cc:	f1c0 0c00 	rsb	ip, r0, #0
 80104d0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80104d2:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104d6:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 80104da:	fbc0 3507 	smlal	r3, r5, r0, r7
 80104de:	f8d1 00cc 	ldr.w	r0, [r1, #204]	; 0xcc
 80104e2:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(5)
 80104e6:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80104e8:	6948      	ldr	r0, [r1, #20]
 80104ea:	fbc0 4607 	smlal	r4, r6, r0, r7
 80104ee:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80104f0:	f1c0 0c00 	rsb	ip, r0, #0
 80104f4:	6c88      	ldr	r0, [r1, #72]	; 0x48
 80104f6:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104fa:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
 80104fe:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010502:	f8d1 00c8 	ldr.w	r0, [r1, #200]	; 0xc8
 8010506:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(6)
 801050a:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801050c:	6988      	ldr	r0, [r1, #24]
 801050e:	fbc0 4607 	smlal	r4, r6, r0, r7
 8010512:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8010514:	f1c0 0c00 	rsb	ip, r0, #0
 8010518:	6c48      	ldr	r0, [r1, #68]	; 0x44
 801051a:	fbc0 460c 	smlal	r4, r6, r0, ip
 801051e:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
 8010522:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010526:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
 801052a:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(7)
 801052e:	6b97      	ldr	r7, [r2, #56]	; 0x38
 8010530:	69c8      	ldr	r0, [r1, #28]
 8010532:	fbc0 4607 	smlal	r4, r6, r0, r7
 8010536:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8010538:	f1c0 0c00 	rsb	ip, r0, #0
 801053c:	6c08      	ldr	r0, [r1, #64]	; 0x40
 801053e:	fbc0 460c 	smlal	r4, r6, r0, ip
 8010542:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
 8010546:	fbc0 3507 	smlal	r3, r5, r0, r7
 801054a:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 801054e:	fbc0 350c 	smlal	r3, r5, r0, ip
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 8010552:	270c      	movs	r7, #12
 8010554:	f04f 0c14 	mov.w	ip, #20
 8010558:	fa06 fe07 	lsl.w	lr, r6, r7
 801055c:	fa46 f60c 	asr.w	r6, r6, ip
 8010560:	fa24 f40c 	lsr.w	r4, r4, ip
 8010564:	ea44 040e 	orr.w	r4, r4, lr
	if (sign != (x >> 15))
 8010568:	1567      	asrs	r7, r4, #21
 801056a:	ebb7 7fe4 	cmp.w	r7, r4, asr #31
 801056e:	bf1b      	ittet	ne
 8010570:	17e6      	asrne	r6, r4, #31
		x = sign ^ ((1 << 15) - 1);
 8010572:	f486 44ff 	eorne.w	r4, r6, #32640	; 0x7f80
	x >>= fracBits;
 8010576:	11a4      	asreq	r4, r4, #6
		x = sign ^ ((1 << 15) - 1);
 8010578:	f084 047f 	eorne.w	r4, r4, #127	; 0x7f
	return (short)x;
 801057c:	f8a8 4000 	strh.w	r4, [r8]
 8010580:	2614      	movs	r6, #20
 8010582:	462c      	mov	r4, r5
 8010584:	250c      	movs	r5, #12
 8010586:	fa04 f705 	lsl.w	r7, r4, r5
 801058a:	fa44 f406 	asr.w	r4, r4, r6
 801058e:	fa23 f306 	lsr.w	r3, r3, r6
 8010592:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 8010596:	155d      	asrs	r5, r3, #21
 8010598:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
	sign = x >> 31;
 801059c:	ea4f 74e3 	mov.w	r4, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 80105a0:	bf18      	it	ne
 80105a2:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 80105a6:	f501 5580 	add.w	r5, r1, #4096	; 0x1000
	x >>= fracBits;
 80105aa:	bf0c      	ite	eq
 80105ac:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 80105ae:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 80105b2:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 80105b6:	2600      	movs	r6, #0
	MC1S(0)
 80105b8:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
 80105bc:	6828      	ldr	r0, [r5, #0]
	return (short)x;
 80105be:	f8a8 3002 	strh.w	r3, [r8, #2]
 80105c2:	4664      	mov	r4, ip
 80105c4:	4633      	mov	r3, r6
 80105c6:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105ca:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80105ce:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(1)
 80105d2:	f8d2 7404 	ldr.w	r7, [r2, #1028]	; 0x404
 80105d6:	6868      	ldr	r0, [r5, #4]
 80105d8:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105dc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 80105e0:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(2)
 80105e4:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 80105e8:	68a8      	ldr	r0, [r5, #8]
 80105ea:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105ee:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 80105f2:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(3)
 80105f6:	f8d2 740c 	ldr.w	r7, [r2, #1036]	; 0x40c
 80105fa:	68e8      	ldr	r0, [r5, #12]
 80105fc:	fbc0 4307 	smlal	r4, r3, r0, r7
 8010600:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8010604:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(4)
 8010608:	f8d2 7410 	ldr.w	r7, [r2, #1040]	; 0x410
 801060c:	6928      	ldr	r0, [r5, #16]
 801060e:	fbc0 4307 	smlal	r4, r3, r0, r7
 8010612:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8010616:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(5)
 801061a:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 801061e:	6968      	ldr	r0, [r5, #20]
 8010620:	fbc0 4307 	smlal	r4, r3, r0, r7
 8010624:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8010628:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(6)
 801062c:	f8d2 7418 	ldr.w	r7, [r2, #1048]	; 0x418
 8010630:	69a8      	ldr	r0, [r5, #24]
 8010632:	fbc0 4307 	smlal	r4, r3, r0, r7
 8010636:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
 801063a:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(7)
 801063e:	f8d2 e41c 	ldr.w	lr, [r2, #1052]	; 0x41c
 8010642:	69ef      	ldr	r7, [r5, #28]
 8010644:	fbc7 430e 	smlal	r4, r3, r7, lr
 8010648:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 801064c:	4665      	mov	r5, ip
 801064e:	fbc7 560e 	smlal	r5, r6, r7, lr
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 8010652:	270c      	movs	r7, #12
 8010654:	f04f 0c14 	mov.w	ip, #20
 8010658:	fa03 fe07 	lsl.w	lr, r3, r7
 801065c:	fa43 f30c 	asr.w	r3, r3, ip
 8010660:	fa24 f40c 	lsr.w	r4, r4, ip
 8010664:	ea44 040e 	orr.w	r4, r4, lr
	if (sign != (x >> 15))
 8010668:	1567      	asrs	r7, r4, #21
	sign = x >> 31;
 801066a:	17e3      	asrs	r3, r4, #31
	if (sign != (x >> 15))
 801066c:	ebb7 7fe4 	cmp.w	r7, r4, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010670:	bf16      	itet	ne
 8010672:	f483 43ff 	eorne.w	r3, r3, #32640	; 0x7f80
	x >>= fracBits;
 8010676:	11a3      	asreq	r3, r4, #6
		x = sign ^ ((1 << 15) - 1);
 8010678:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 801067c:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
 8010680:	240c      	movs	r4, #12
 8010682:	462b      	mov	r3, r5
 8010684:	2514      	movs	r5, #20
 8010686:	fa06 f704 	lsl.w	r7, r6, r4
 801068a:	fa46 f605 	asr.w	r6, r6, r5
 801068e:	fa23 f305 	lsr.w	r3, r3, r5
 8010692:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 8010696:	155d      	asrs	r5, r3, #21
	sign = x >> 31;
 8010698:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 801069a:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 801069e:	bf16      	itet	ne
 80106a0:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	x >>= fracBits;
 80106a4:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 80106a6:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 80106aa:	f8a8 3042 	strh.w	r3, [r8, #66]	; 0x42
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm += 2;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 80106ae:	f108 0308 	add.w	r3, r8, #8
 80106b2:	e9cd 3800 	strd	r3, r8, [sp]
 80106b6:	f502 6388 	add.w	r3, r2, #1088	; 0x440
 80106ba:	f102 0b80 	add.w	fp, r2, #128	; 0x80
 80106be:	9303      	str	r3, [sp, #12]
		sum1L = sum2L = rndVal;
		sum1R = sum2R = rndVal;

		MC2S(0)
 80106c0:	e95b e810 	ldrd	lr, r8, [fp, #-64]	; 0x40
 80106c4:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
 80106c8:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 80106cc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80106d0:	f04f 0c00 	mov.w	ip, #0
 80106d4:	fbc0 4c0e 	smlal	r4, ip, r0, lr
 80106d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80106dc:	2600      	movs	r6, #0
 80106de:	fbc0 2608 	smlal	r2, r6, r0, r8
 80106e2:	f1c8 0900 	rsb	r9, r8, #0
 80106e6:	fbc3 4c09 	smlal	r4, ip, r3, r9
 80106ea:	fbc3 260e 	smlal	r2, r6, r3, lr
 80106ee:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80106f2:	f8d1 a180 	ldr.w	sl, [r1, #384]	; 0x180
 80106f6:	9202      	str	r2, [sp, #8]
 80106f8:	2700      	movs	r7, #0
 80106fa:	fbca 070e 	smlal	r0, r7, sl, lr
 80106fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010702:	2500      	movs	r5, #0
 8010704:	fbca 3508 	smlal	r3, r5, sl, r8
 8010708:	f8d1 21dc 	ldr.w	r2, [r1, #476]	; 0x1dc
 801070c:	fbc2 0709 	smlal	r0, r7, r2, r9
 8010710:	fbc2 350e 	smlal	r3, r5, r2, lr
		MC2S(1)
 8010714:	e95b ae0e 	ldrd	sl, lr, [fp, #-56]	; 0x38
 8010718:	f8d1 9104 	ldr.w	r9, [r1, #260]	; 0x104
 801071c:	f8d1 8158 	ldr.w	r8, [r1, #344]	; 0x158
 8010720:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 8010724:	9a02      	ldr	r2, [sp, #8]
 8010726:	fbc9 260e 	smlal	r2, r6, r9, lr
 801072a:	f1ce 0900 	rsb	r9, lr, #0
 801072e:	fbc8 4c09 	smlal	r4, ip, r8, r9
 8010732:	fbc8 260a 	smlal	r2, r6, r8, sl
 8010736:	9202      	str	r2, [sp, #8]
 8010738:	f8d1 81d8 	ldr.w	r8, [r1, #472]	; 0x1d8
 801073c:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
 8010740:	fbc2 070a 	smlal	r0, r7, r2, sl
 8010744:	fbc2 350e 	smlal	r3, r5, r2, lr
 8010748:	fbc8 0709 	smlal	r0, r7, r8, r9
 801074c:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(2)
 8010750:	e95b ae0c 	ldrd	sl, lr, [fp, #-48]	; 0x30
 8010754:	f8d1 9108 	ldr.w	r9, [r1, #264]	; 0x108
 8010758:	f8d1 8154 	ldr.w	r8, [r1, #340]	; 0x154
 801075c:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 8010760:	9a02      	ldr	r2, [sp, #8]
 8010762:	fbc9 260e 	smlal	r2, r6, r9, lr
 8010766:	f1ce 0900 	rsb	r9, lr, #0
 801076a:	fbc8 4c09 	smlal	r4, ip, r8, r9
 801076e:	fbc8 260a 	smlal	r2, r6, r8, sl
 8010772:	9202      	str	r2, [sp, #8]
 8010774:	f8d1 81d4 	ldr.w	r8, [r1, #468]	; 0x1d4
 8010778:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
 801077c:	fbc2 070a 	smlal	r0, r7, r2, sl
 8010780:	fbc2 350e 	smlal	r3, r5, r2, lr
 8010784:	fbc8 0709 	smlal	r0, r7, r8, r9
 8010788:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(3)
 801078c:	e95b ae0a 	ldrd	sl, lr, [fp, #-40]	; 0x28
 8010790:	f8d1 910c 	ldr.w	r9, [r1, #268]	; 0x10c
 8010794:	f8d1 8150 	ldr.w	r8, [r1, #336]	; 0x150
 8010798:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 801079c:	9a02      	ldr	r2, [sp, #8]
 801079e:	fbc9 260e 	smlal	r2, r6, r9, lr
 80107a2:	f1ce 0900 	rsb	r9, lr, #0
 80107a6:	fbc8 4c09 	smlal	r4, ip, r8, r9
 80107aa:	fbc8 260a 	smlal	r2, r6, r8, sl
 80107ae:	9202      	str	r2, [sp, #8]
 80107b0:	f8d1 81d0 	ldr.w	r8, [r1, #464]	; 0x1d0
 80107b4:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
 80107b8:	fbc2 070a 	smlal	r0, r7, r2, sl
 80107bc:	fbc2 350e 	smlal	r3, r5, r2, lr
 80107c0:	fbc8 0709 	smlal	r0, r7, r8, r9
 80107c4:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(4)
 80107c8:	e95b ae08 	ldrd	sl, lr, [fp, #-32]
 80107cc:	f8d1 9110 	ldr.w	r9, [r1, #272]	; 0x110
 80107d0:	f8d1 814c 	ldr.w	r8, [r1, #332]	; 0x14c
 80107d4:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 80107d8:	9a02      	ldr	r2, [sp, #8]
 80107da:	fbc9 260e 	smlal	r2, r6, r9, lr
 80107de:	f1ce 0900 	rsb	r9, lr, #0
 80107e2:	fbc8 4c09 	smlal	r4, ip, r8, r9
 80107e6:	fbc8 260a 	smlal	r2, r6, r8, sl
 80107ea:	9202      	str	r2, [sp, #8]
 80107ec:	f8d1 81cc 	ldr.w	r8, [r1, #460]	; 0x1cc
 80107f0:	f8d1 2190 	ldr.w	r2, [r1, #400]	; 0x190
 80107f4:	fbc2 070a 	smlal	r0, r7, r2, sl
 80107f8:	fbc2 350e 	smlal	r3, r5, r2, lr
 80107fc:	fbc8 0709 	smlal	r0, r7, r8, r9
 8010800:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(5)
 8010804:	e95b ae06 	ldrd	sl, lr, [fp, #-24]
 8010808:	f8d1 9114 	ldr.w	r9, [r1, #276]	; 0x114
 801080c:	f8d1 8148 	ldr.w	r8, [r1, #328]	; 0x148
 8010810:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 8010814:	9a02      	ldr	r2, [sp, #8]
 8010816:	fbc9 260e 	smlal	r2, r6, r9, lr
 801081a:	f1ce 0900 	rsb	r9, lr, #0
 801081e:	fbc8 4c09 	smlal	r4, ip, r8, r9
 8010822:	fbc8 260a 	smlal	r2, r6, r8, sl
 8010826:	9202      	str	r2, [sp, #8]
 8010828:	f8d1 81c8 	ldr.w	r8, [r1, #456]	; 0x1c8
 801082c:	f8d1 2194 	ldr.w	r2, [r1, #404]	; 0x194
 8010830:	fbc2 070a 	smlal	r0, r7, r2, sl
 8010834:	fbc2 350e 	smlal	r3, r5, r2, lr
 8010838:	fbc8 0709 	smlal	r0, r7, r8, r9
 801083c:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(6)
 8010840:	e95b ae04 	ldrd	sl, lr, [fp, #-16]
 8010844:	f8d1 9118 	ldr.w	r9, [r1, #280]	; 0x118
 8010848:	f8d1 8144 	ldr.w	r8, [r1, #324]	; 0x144
 801084c:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 8010850:	9a02      	ldr	r2, [sp, #8]
 8010852:	fbc9 260e 	smlal	r2, r6, r9, lr
 8010856:	f1ce 0900 	rsb	r9, lr, #0
 801085a:	fbc8 4c09 	smlal	r4, ip, r8, r9
 801085e:	fbc8 260a 	smlal	r2, r6, r8, sl
 8010862:	9202      	str	r2, [sp, #8]
 8010864:	f8d1 81c4 	ldr.w	r8, [r1, #452]	; 0x1c4
 8010868:	f8d1 2198 	ldr.w	r2, [r1, #408]	; 0x198
 801086c:	fbc2 070a 	smlal	r0, r7, r2, sl
 8010870:	fbc2 350e 	smlal	r3, r5, r2, lr
 8010874:	fbc8 0709 	smlal	r0, r7, r8, r9
 8010878:	fbc8 350a 	smlal	r3, r5, r8, sl
		MC2S(7)
 801087c:	e95b ae02 	ldrd	sl, lr, [fp, #-8]
 8010880:	f8d1 911c 	ldr.w	r9, [r1, #284]	; 0x11c
 8010884:	f8d1 8140 	ldr.w	r8, [r1, #320]	; 0x140
 8010888:	fbc9 4c0a 	smlal	r4, ip, r9, sl
 801088c:	9a02      	ldr	r2, [sp, #8]
 801088e:	fbc9 260e 	smlal	r2, r6, r9, lr
 8010892:	f1ce 0900 	rsb	r9, lr, #0
 8010896:	fbc8 4c09 	smlal	r4, ip, r8, r9
 801089a:	fbc8 260a 	smlal	r2, r6, r8, sl
 801089e:	9202      	str	r2, [sp, #8]
 80108a0:	f8d1 81c0 	ldr.w	r8, [r1, #448]	; 0x1c0
 80108a4:	f8d1 219c 	ldr.w	r2, [r1, #412]	; 0x19c
 80108a8:	fbc2 070a 	smlal	r0, r7, r2, sl
 80108ac:	fbc2 350e 	smlal	r3, r5, r2, lr
 80108b0:	fbc8 0709 	smlal	r0, r7, r8, r9
 80108b4:	fbc8 350a 	smlal	r3, r5, r8, sl
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80108b8:	220c      	movs	r2, #12
 80108ba:	f04f 0814 	mov.w	r8, #20
 80108be:	fa0c fe02 	lsl.w	lr, ip, r2
 80108c2:	fa4c fc08 	asr.w	ip, ip, r8
 80108c6:	fa24 f408 	lsr.w	r4, r4, r8
 80108ca:	ea44 040e 	orr.w	r4, r4, lr
	if (sign != (x >> 15))
 80108ce:	ea4f 5e64 	mov.w	lr, r4, asr #21
	sign = x >> 31;
 80108d2:	ea4f 7ce4 	mov.w	ip, r4, asr #31
	if (sign != (x >> 15))
 80108d6:	ebbe 7fe4 	cmp.w	lr, r4, asr #31
		x = sign ^ ((1 << 15) - 1);
 80108da:	bf18      	it	ne
 80108dc:	f48c 44ff 	eorne.w	r4, ip, #32640	; 0x7f80
	return (short)x;
 80108e0:	9a00      	ldr	r2, [sp, #0]
	x >>= fracBits;
 80108e2:	bf0c      	ite	eq
 80108e4:	11a4      	asreq	r4, r4, #6
		x = sign ^ ((1 << 15) - 1);
 80108e6:	f084 047f 	eorne.w	r4, r4, #127	; 0x7f
	return (short)x;
 80108ea:	f822 4c04 	strh.w	r4, [r2, #-4]
 80108ee:	f04f 0c14 	mov.w	ip, #20
 80108f2:	220c      	movs	r2, #12
 80108f4:	fa07 f402 	lsl.w	r4, r7, r2
 80108f8:	fa47 f70c 	asr.w	r7, r7, ip
 80108fc:	fa20 f00c 	lsr.w	r0, r0, ip
 8010900:	ea40 0004 	orr.w	r0, r0, r4
	if (sign != (x >> 15))
 8010904:	1547      	asrs	r7, r0, #21
	sign = x >> 31;
 8010906:	17c4      	asrs	r4, r0, #31
	if (sign != (x >> 15))
 8010908:	ebb7 7fe0 	cmp.w	r7, r0, asr #31
		x = sign ^ ((1 << 15) - 1);
 801090c:	bf18      	it	ne
 801090e:	f484 40ff 	eorne.w	r0, r4, #32640	; 0x7f80
	return (short)x;
 8010912:	9a00      	ldr	r2, [sp, #0]
	x >>= fracBits;
 8010914:	bf0c      	ite	eq
 8010916:	1180      	asreq	r0, r0, #6
		x = sign ^ ((1 << 15) - 1);
 8010918:	f080 007f 	eorne.w	r0, r0, #127	; 0x7f
	return (short)x;
 801091c:	f822 0c02 	strh.w	r0, [r2, #-2]
 8010920:	240c      	movs	r4, #12
 8010922:	9a02      	ldr	r2, [sp, #8]
 8010924:	2714      	movs	r7, #20
 8010926:	fa06 f004 	lsl.w	r0, r6, r4
 801092a:	fa46 f607 	asr.w	r6, r6, r7
 801092e:	fa22 f207 	lsr.w	r2, r2, r7
 8010932:	ea42 0200 	orr.w	r2, r2, r0
	if (sign != (x >> 15))
 8010936:	1554      	asrs	r4, r2, #21
	sign = x >> 31;
 8010938:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 801093a:	ebb4 7fe2 	cmp.w	r4, r2, asr #31
		x = sign ^ ((1 << 15) - 1);
 801093e:	bf18      	it	ne
 8010940:	f480 42ff 	eorne.w	r2, r0, #32640	; 0x7f80
	return (short)x;
 8010944:	9801      	ldr	r0, [sp, #4]
	x >>= fracBits;
 8010946:	bf0c      	ite	eq
 8010948:	1192      	asreq	r2, r2, #6
		x = sign ^ ((1 << 15) - 1);
 801094a:	f082 027f 	eorne.w	r2, r2, #127	; 0x7f
	return (short)x;
 801094e:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 8010952:	2414      	movs	r4, #20
 8010954:	200c      	movs	r0, #12
 8010956:	fa05 f200 	lsl.w	r2, r5, r0
 801095a:	fa45 f504 	asr.w	r5, r5, r4
 801095e:	fa23 f304 	lsr.w	r3, r3, r4
 8010962:	ea43 0302 	orr.w	r3, r3, r2
	if (sign != (x >> 15))
 8010966:	1558      	asrs	r0, r3, #21
	sign = x >> 31;
 8010968:	17da      	asrs	r2, r3, #31
	if (sign != (x >> 15))
 801096a:	ebb0 7fe3 	cmp.w	r0, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 801096e:	bf18      	it	ne
 8010970:	f482 43ff 	eorne.w	r3, r2, #32640	; 0x7f80
	return (short)x;
 8010974:	9a01      	ldr	r2, [sp, #4]
	x >>= fracBits;
 8010976:	bf0c      	ite	eq
 8010978:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 801097a:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 801097e:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	for (i = 15; i > 0; i--) {
 8010982:	9b00      	ldr	r3, [sp, #0]
 8010984:	3304      	adds	r3, #4
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	1f13      	subs	r3, r2, #4
 801098a:	9301      	str	r3, [sp, #4]
 801098c:	9b03      	ldr	r3, [sp, #12]
 801098e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8010992:	459b      	cmp	fp, r3
 8010994:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8010998:	f47f ae92 	bne.w	80106c0 <xmp3_PolyphaseStereo+0x2a0>
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
		pcm += 2;
	}
}
 801099c:	b005      	add	sp, #20
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	bf00      	nop

080109a4 <xmp3_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	ed2d 8b02 	vpush	{d8}
 80109ac:	b095      	sub	sp, #84	; 0x54
 80109ae:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80109b2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80109b4:	9202      	str	r2, [sp, #8]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 80109b6:	9006      	str	r0, [sp, #24]
 80109b8:	2800      	cmp	r0, #0
 80109ba:	f000 83ae 	beq.w	801111a <xmp3_UnpackScaleFactors+0x776>
 80109be:	6805      	ldr	r5, [r0, #0]
 80109c0:	ee08 1a10 	vmov	s16, r1
 80109c4:	4601      	mov	r1, r0
 80109c6:	2d00      	cmp	r5, #0
 80109c8:	f000 83a7 	beq.w	801111a <xmp3_UnpackScaleFactors+0x776>
 80109cc:	6840      	ldr	r0, [r0, #4]
 80109ce:	9001      	str	r0, [sp, #4]
 80109d0:	2800      	cmp	r0, #0
 80109d2:	f000 83a2 	beq.w	801111a <xmp3_UnpackScaleFactors+0x776>
 80109d6:	6889      	ldr	r1, [r1, #8]
 80109d8:	9100      	str	r1, [sp, #0]
 80109da:	2900      	cmp	r1, #0
 80109dc:	f000 839d 	beq.w	801111a <xmp3_UnpackScaleFactors+0x776>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 80109e0:	6812      	ldr	r2, [r2, #0]
 80109e2:	4413      	add	r3, r2
 80109e4:	1dd9      	adds	r1, r3, #7
 80109e6:	bf48      	it	mi
 80109e8:	f103 010e 	addmi.w	r1, r3, #14
 80109ec:	10c9      	asrs	r1, r1, #3
 80109ee:	ee18 2a10 	vmov	r2, s16
 80109f2:	a808      	add	r0, sp, #32
 80109f4:	f7fc fbb4 	bl	800d160 <xmp3_SetBitstreamPointer>
	if (*bitOffset)
 80109f8:	9b02      	ldr	r3, [sp, #8]
 80109fa:	6819      	ldr	r1, [r3, #0]
 80109fc:	2900      	cmp	r1, #0
 80109fe:	f040 812f 	bne.w	8010c60 <xmp3_UnpackScaleFactors+0x2bc>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 8010a02:	782b      	ldrb	r3, [r5, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f040 809a 	bne.w	8010b3e <xmp3_UnpackScaleFactors+0x19a>
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a0a:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 8010a0e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8010a12:	011b      	lsls	r3, r3, #4
 8010a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a18:	9a01      	ldr	r2, [sp, #4]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	4ac1      	ldr	r2, [pc, #772]	; (8010d24 <xmp3_UnpackScaleFactors+0x380>)
 8010a1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	if (sis->blockType == 2) {
 8010a20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a22:	f812 9010 	ldrb.w	r9, [r2, r0, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8010a26:	eb02 0540 	add.w	r5, r2, r0, lsl #1
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a2a:	00e2      	lsls	r2, r4, #3
 8010a2c:	9207      	str	r2, [sp, #28]
	if (sis->blockType == 2) {
 8010a2e:	2902      	cmp	r1, #2
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8010a34:	786d      	ldrb	r5, [r5, #1]
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a36:	9203      	str	r2, [sp, #12]
	if (sis->blockType == 2) {
 8010a38:	f000 82c6 	beq.w	8010fc8 <xmp3_UnpackScaleFactors+0x624>
		if(gr == 0) {
 8010a3c:	f1ba 0f00 	cmp.w	sl, #0
 8010a40:	f000 8308 	beq.w	8011054 <xmp3_UnpackScaleFactors+0x6b0>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8010a44:	0123      	lsls	r3, r4, #4
 8010a46:	9a01      	ldr	r2, [sp, #4]
 8010a48:	3308      	adds	r3, #8
 8010a4a:	18d7      	adds	r7, r2, r3
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010a4c:	58d3      	ldr	r3, [r2, r3]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f000 8170 	beq.w	8010d34 <xmp3_UnpackScaleFactors+0x390>
 8010a54:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
 8010a58:	9800      	ldr	r0, [sp, #0]
 8010a5a:	0052      	lsls	r2, r2, #1
 8010a5c:	1e53      	subs	r3, r2, #1
 8010a5e:	3205      	adds	r2, #5
 8010a60:	1881      	adds	r1, r0, r2
 8010a62:	ebca 124a 	rsb	r2, sl, sl, lsl #5
 8010a66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010a6a:	4402      	add	r2, r0
 8010a6c:	4403      	add	r3, r0
 8010a6e:	0160      	lsls	r0, r4, #5
 8010a70:	9005      	str	r0, [sp, #20]
 8010a72:	ea4f 104a 	mov.w	r0, sl, lsl #5
 8010a76:	9004      	str	r0, [sp, #16]
 8010a78:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010a7c:	f802 0f01 	strb.w	r0, [r2, #1]!
 8010a80:	428b      	cmp	r3, r1
 8010a82:	d1f9      	bne.n	8010a78 <xmp3_UnpackScaleFactors+0xd4>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f000 8174 	beq.w	8010d74 <xmp3_UnpackScaleFactors+0x3d0>
 8010a8c:	9b04      	ldr	r3, [sp, #16]
 8010a8e:	9a05      	ldr	r2, [sp, #20]
 8010a90:	9900      	ldr	r1, [sp, #0]
 8010a92:	eba3 030a 	sub.w	r3, r3, sl
 8010a96:	1b12      	subs	r2, r2, r4
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010a9e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010aa2:	440b      	add	r3, r1
 8010aa4:	7991      	ldrb	r1, [r2, #6]
 8010aa6:	7199      	strb	r1, [r3, #6]
 8010aa8:	79d1      	ldrb	r1, [r2, #7]
 8010aaa:	71d9      	strb	r1, [r3, #7]
 8010aac:	7a11      	ldrb	r1, [r2, #8]
 8010aae:	7219      	strb	r1, [r3, #8]
 8010ab0:	7a51      	ldrb	r1, [r2, #9]
 8010ab2:	7259      	strb	r1, [r3, #9]
 8010ab4:	7a92      	ldrb	r2, [r2, #10]
 8010ab6:	729a      	strb	r2, [r3, #10]
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 8177 	beq.w	8010dae <xmp3_UnpackScaleFactors+0x40a>
 8010ac0:	9b04      	ldr	r3, [sp, #16]
 8010ac2:	9a05      	ldr	r2, [sp, #20]
 8010ac4:	9900      	ldr	r1, [sp, #0]
 8010ac6:	eba3 030a 	sub.w	r3, r3, sl
 8010aca:	1b12      	subs	r2, r2, r4
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010ad2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010ad6:	440b      	add	r3, r1
 8010ad8:	7ad1      	ldrb	r1, [r2, #11]
 8010ada:	72d9      	strb	r1, [r3, #11]
 8010adc:	7b11      	ldrb	r1, [r2, #12]
 8010ade:	7319      	strb	r1, [r3, #12]
 8010ae0:	7b51      	ldrb	r1, [r2, #13]
 8010ae2:	7359      	strb	r1, [r3, #13]
 8010ae4:	7b91      	ldrb	r1, [r2, #14]
 8010ae6:	7399      	strb	r1, [r3, #14]
 8010ae8:	7bd2      	ldrb	r2, [r2, #15]
 8010aea:	73da      	strb	r2, [r3, #15]
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 817a 	beq.w	8010de8 <xmp3_UnpackScaleFactors+0x444>
 8010af4:	9b04      	ldr	r3, [sp, #16]
 8010af6:	9a05      	ldr	r2, [sp, #20]
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	eba3 030a 	sub.w	r3, r3, sl
 8010afe:	1b12      	subs	r2, r2, r4
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010b06:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010b0a:	440b      	add	r3, r1
 8010b0c:	7c11      	ldrb	r1, [r2, #16]
 8010b0e:	7419      	strb	r1, [r3, #16]
 8010b10:	7c51      	ldrb	r1, [r2, #17]
 8010b12:	7459      	strb	r1, [r3, #17]
 8010b14:	7c91      	ldrb	r1, [r2, #18]
 8010b16:	7499      	strb	r1, [r3, #18]
 8010b18:	7cd1      	ldrb	r1, [r2, #19]
 8010b1a:	74d9      	strb	r1, [r3, #19]
 8010b1c:	7d12      	ldrb	r2, [r2, #20]
 8010b1e:	751a      	strb	r2, [r3, #20]
		sfis->l[21] = 0;
 8010b20:	9b04      	ldr	r3, [sp, #16]
 8010b22:	9a05      	ldr	r2, [sp, #20]
 8010b24:	eba3 030a 	sub.w	r3, r3, sl
 8010b28:	1b12      	subs	r2, r2, r4
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010b30:	9a00      	ldr	r2, [sp, #0]
 8010b32:	441a      	add	r2, r3
 8010b34:	4613      	mov	r3, r2
 8010b36:	2200      	movs	r2, #0
 8010b38:	755a      	strb	r2, [r3, #21]
		sfis->l[22] = 0;
 8010b3a:	759a      	strb	r2, [r3, #22]
 8010b3c:	e0a4      	b.n	8010c88 <xmp3_UnpackScaleFactors+0x2e4>
	sfCompress = sis->sfCompress;
 8010b3e:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 8010b42:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8010b46:	011b      	lsls	r3, r3, #4
 8010b48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010b4c:	9901      	ldr	r1, [sp, #4]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b4e:	6a2a      	ldr	r2, [r5, #32]
	sfCompress = sis->sfCompress;
 8010b50:	440b      	add	r3, r1
 8010b52:	00e1      	lsls	r1, r4, #3
 8010b54:	9107      	str	r1, [sp, #28]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b56:	f012 0201 	ands.w	r2, r2, #1
	sfCompress = sis->sfCompress;
 8010b5a:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b60:	9103      	str	r1, [sp, #12]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b62:	d002      	beq.n	8010b6a <xmp3_UnpackScaleFactors+0x1c6>
 8010b64:	2c01      	cmp	r4, #1
 8010b66:	f000 8204 	beq.w	8010f72 <xmp3_UnpackScaleFactors+0x5ce>
		if (sfCompress < 400) {
 8010b6a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010b6e:	f280 80ae 	bge.w	8010cce <xmp3_UnpackScaleFactors+0x32a>
			slen[0] = (sfCompress >> 4) / 5;
 8010b72:	4d6d      	ldr	r5, [pc, #436]	; (8010d28 <xmp3_UnpackScaleFactors+0x384>)
 8010b74:	1118      	asrs	r0, r3, #4
 8010b76:	fb85 1500 	smull	r1, r5, r5, r0
 8010b7a:	17d9      	asrs	r1, r3, #31
 8010b7c:	ebc1 0165 	rsb	r1, r1, r5, asr #1
 8010b80:	910c      	str	r1, [sp, #48]	; 0x30
			slen[1]= (sfCompress >> 4) % 5;
 8010b82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010b86:	1a40      	subs	r0, r0, r1
 8010b88:	900d      	str	r0, [sp, #52]	; 0x34
			slen[2]= (sfCompress & 0x0f) >> 2;
 8010b8a:	f3c3 0181 	ubfx	r1, r3, #2, #2
	intensityScale = 0;
 8010b8e:	2000      	movs	r0, #0
			slen[3]= (sfCompress & 0x03);
 8010b90:	f003 0303 	and.w	r3, r3, #3
			slen[2]= (sfCompress & 0x0f) >> 2;
 8010b94:	910e      	str	r1, [sp, #56]	; 0x38
			slen[3]= (sfCompress & 0x03);
 8010b96:	930f      	str	r3, [sp, #60]	; 0x3c
	preFlag = 0;
 8010b98:	4686      	mov	lr, r0
			sfcIdx = 0;
 8010b9a:	4605      	mov	r5, r0
	if (sis->blockType == 2) 
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	00e1      	lsls	r1, r4, #3
 8010ba0:	4453      	add	r3, sl
 8010ba2:	4421      	add	r1, r4
 8010ba4:	011b      	lsls	r3, r3, #4
 8010ba6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010baa:	9901      	ldr	r1, [sp, #4]
 8010bac:	440b      	add	r3, r1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	if (sis->blockType == 2) 
 8010bb2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8010bb4:	2f02      	cmp	r7, #2
 8010bb6:	f000 8145 	beq.w	8010e44 <xmp3_UnpackScaleFactors+0x4a0>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010bba:	4e5c      	ldr	r6, [pc, #368]	; (8010d2c <xmp3_UnpackScaleFactors+0x388>)
 8010bbc:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8010bc0:	f816 b025 	ldrb.w	fp, [r6, r5, lsl #2]
 8010bc4:	f891 c002 	ldrb.w	ip, [r1, #2]
 8010bc8:	784d      	ldrb	r5, [r1, #1]
 8010bca:	78c9      	ldrb	r1, [r1, #3]
 8010bcc:	9511      	str	r5, [sp, #68]	; 0x44
 8010bce:	e9cd c112 	strd	ip, r1, [sp, #72]	; 0x48
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010bd2:	2a00      	cmp	r2, #0
 8010bd4:	f000 80a2 	beq.w	8010d1c <xmp3_UnpackScaleFactors+0x378>
 8010bd8:	2c01      	cmp	r4, #1
 8010bda:	f000 81b3 	beq.w	8010f44 <xmp3_UnpackScaleFactors+0x5a0>
	sis->preFlag = preFlag;
 8010bde:	9b03      	ldr	r3, [sp, #12]
 8010be0:	00e2      	lsls	r2, r4, #3
 8010be2:	4453      	add	r3, sl
 8010be4:	4422      	add	r2, r4
 8010be6:	011b      	lsls	r3, r3, #4
 8010be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bec:	9a01      	ldr	r2, [sp, #4]
 8010bee:	4413      	add	r3, r2
	if(sis->blockType == 2) {
 8010bf0:	2f02      	cmp	r7, #2
	sis->preFlag = preFlag;
 8010bf2:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 8010bf6:	f000 813c 	beq.w	8010e72 <xmp3_UnpackScaleFactors+0x4ce>
 8010bfa:	ebca 194a 	rsb	r9, sl, sl, lsl #5
 8010bfe:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8010c02:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 8010c06:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 8010c0a:	0163      	lsls	r3, r4, #5
 8010c0c:	9305      	str	r3, [sp, #20]
 8010c0e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	9b00      	ldr	r3, [sp, #0]
 8010c16:	e9cd a420 	strd	sl, r4, [sp, #128]	; 0x80
 8010c1a:	1899      	adds	r1, r3, r2
 8010c1c:	465e      	mov	r6, fp
 8010c1e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010c22:	af0c      	add	r7, sp, #48	; 0x30
		sfb = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	4691      	mov	r9, r2
 8010c28:	468b      	mov	fp, r1
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c2a:	2e00      	cmp	r6, #0
 8010c2c:	dd10      	ble.n	8010c50 <xmp3_UnpackScaleFactors+0x2ac>
 8010c2e:	9a00      	ldr	r2, [sp, #0]
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8010c30:	683c      	ldr	r4, [r7, #0]
 8010c32:	441e      	add	r6, r3
 8010c34:	444b      	add	r3, r9
 8010c36:	eb02 0a03 	add.w	sl, r2, r3
 8010c3a:	eb06 050b 	add.w	r5, r6, fp
 8010c3e:	4621      	mov	r1, r4
 8010c40:	a808      	add	r0, sp, #32
 8010c42:	f7fc fa93 	bl	800d16c <xmp3_GetBits>
 8010c46:	f80a 0b01 	strb.w	r0, [sl], #1
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c4a:	45aa      	cmp	sl, r5
 8010c4c:	d1f7      	bne.n	8010c3e <xmp3_UnpackScaleFactors+0x29a>
 8010c4e:	4633      	mov	r3, r6
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8010c50:	aa13      	add	r2, sp, #76	; 0x4c
 8010c52:	4590      	cmp	r8, r2
 8010c54:	f107 0704 	add.w	r7, r7, #4
 8010c58:	d006      	beq.n	8010c68 <xmp3_UnpackScaleFactors+0x2c4>
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c5a:	f858 6f04 	ldr.w	r6, [r8, #4]!
 8010c5e:	e7e4      	b.n	8010c2a <xmp3_UnpackScaleFactors+0x286>
		GetBits(bsi, *bitOffset);
 8010c60:	a808      	add	r0, sp, #32
 8010c62:	f7fc fa83 	bl	800d16c <xmp3_GetBits>
 8010c66:	e6cc      	b.n	8010a02 <xmp3_UnpackScaleFactors+0x5e>
		sfis->l[21] = sfis->l[22] = 0;
 8010c68:	e9dd a420 	ldrd	sl, r4, [sp, #128]	; 0x80
 8010c6c:	9b04      	ldr	r3, [sp, #16]
 8010c6e:	9a05      	ldr	r2, [sp, #20]
 8010c70:	eba3 030a 	sub.w	r3, r3, sl
 8010c74:	1b12      	subs	r2, r2, r4
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010c7c:	9a00      	ldr	r2, [sp, #0]
 8010c7e:	441a      	add	r2, r3
 8010c80:	4613      	mov	r3, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	759a      	strb	r2, [r3, #22]
 8010c86:	755a      	strb	r2, [r3, #21]
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8010c88:	9b03      	ldr	r3, [sp, #12]
 8010c8a:	9a07      	ldr	r2, [sp, #28]
 8010c8c:	4453      	add	r3, sl
 8010c8e:	4422      	add	r2, r4
 8010c90:	011b      	lsls	r3, r3, #4
 8010c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c96:	9a01      	ldr	r2, [sp, #4]
 8010c98:	441a      	add	r2, r3
 8010c9a:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 8010c9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010ca0:	9a06      	ldr	r2, [sp, #24]
 8010ca2:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8010ca6:	ee18 1a10 	vmov	r1, s16
	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8010caa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8010cae:	9c02      	ldr	r4, [sp, #8]
 8010cb0:	a808      	add	r0, sp, #32
 8010cb2:	6822      	ldr	r2, [r4, #0]
 8010cb4:	f7fc fab6 	bl	800d224 <xmp3_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	4418      	add	r0, r3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8010cbc:	f000 0307 	and.w	r3, r0, #7
 8010cc0:	6023      	str	r3, [r4, #0]
	buf += (bitsUsed + *bitOffset) >> 3;
 8010cc2:	10c0      	asrs	r0, r0, #3

	return (buf - startBuf);
}
 8010cc4:	b015      	add	sp, #84	; 0x54
 8010cc6:	ecbd 8b02 	vpop	{d8}
 8010cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (sfCompress < 500) {
 8010cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010cd2:	f2c0 80a3 	blt.w	8010e1c <xmp3_UnpackScaleFactors+0x478>
			if (sis->mixedBlock) {
 8010cd6:	9903      	ldr	r1, [sp, #12]
 8010cd8:	eb01 000a 	add.w	r0, r1, sl
			slen[0] = sfCompress / 3;
 8010cdc:	4914      	ldr	r1, [pc, #80]	; (8010d30 <xmp3_UnpackScaleFactors+0x38c>)
			sfCompress -= 500;
 8010cde:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 8010ce2:	fba1 5103 	umull	r5, r1, r1, r3
			if (sis->mixedBlock) {
 8010ce6:	00e5      	lsls	r5, r4, #3
 8010ce8:	4425      	add	r5, r4
 8010cea:	0100      	lsls	r0, r0, #4
 8010cec:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8010cf0:	9d01      	ldr	r5, [sp, #4]
 8010cf2:	4428      	add	r0, r5
			slen[0] = sfCompress / 3;
 8010cf4:	0849      	lsrs	r1, r1, #1
			slen[1] = sfCompress % 3;
 8010cf6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
			if (sis->mixedBlock) {
 8010cfa:	6c00      	ldr	r0, [r0, #64]	; 0x40
			slen[0] = sfCompress / 3;
 8010cfc:	910c      	str	r1, [sp, #48]	; 0x30
			slen[1] = sfCompress % 3;
 8010cfe:	1b5b      	subs	r3, r3, r5
			slen[2] = slen[3] = 0;
 8010d00:	2500      	movs	r5, #0
 8010d02:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
			slen[1] = sfCompress % 3;
 8010d06:	930d      	str	r3, [sp, #52]	; 0x34
			if (sis->mixedBlock) {
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	f000 81e7 	beq.w	80110dc <xmp3_UnpackScaleFactors+0x738>
	intensityScale = 0;
 8010d0e:	4628      	mov	r0, r5
				slen[1] = slen[0];
 8010d10:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
			preFlag = 1;
 8010d14:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 8010d18:	2502      	movs	r5, #2
 8010d1a:	e73f      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
	sis->preFlag = preFlag;
 8010d1c:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 8010d20:	e76b      	b.n	8010bfa <xmp3_UnpackScaleFactors+0x256>
 8010d22:	bf00      	nop
 8010d24:	08028274 	.word	0x08028274
 8010d28:	66666667 	.word	0x66666667
 8010d2c:	0802822c 	.word	0x0802822c
 8010d30:	aaaaaaab 	.word	0xaaaaaaab
 8010d34:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	ebca 124a 	rsb	r2, sl, sl, lsl #5
 8010d3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8010d42:	1d5e      	adds	r6, r3, #5
 8010d44:	9b00      	ldr	r3, [sp, #0]
 8010d46:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8010d4a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8010d4e:	4498      	add	r8, r3
 8010d50:	441e      	add	r6, r3
 8010d52:	0163      	lsls	r3, r4, #5
 8010d54:	9305      	str	r3, [sp, #20]
 8010d56:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010d5a:	9304      	str	r3, [sp, #16]
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010d5c:	4649      	mov	r1, r9
 8010d5e:	a808      	add	r0, sp, #32
 8010d60:	f7fc fa04 	bl	800d16c <xmp3_GetBits>
 8010d64:	f808 0f01 	strb.w	r0, [r8, #1]!
 8010d68:	45b0      	cmp	r8, r6
 8010d6a:	d1f7      	bne.n	8010d5c <xmp3_UnpackScaleFactors+0x3b8>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f47f ae8c 	bne.w	8010a8c <xmp3_UnpackScaleFactors+0xe8>
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	9a04      	ldr	r2, [sp, #16]
 8010d78:	1b1b      	subs	r3, r3, r4
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	eba2 020a 	sub.w	r2, r2, sl
 8010d80:	f103 0805 	add.w	r8, r3, #5
 8010d84:	f103 060a 	add.w	r6, r3, #10
 8010d88:	9b00      	ldr	r3, [sp, #0]
 8010d8a:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8010d8e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8010d92:	4498      	add	r8, r3
 8010d94:	441e      	add	r6, r3
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010d96:	4649      	mov	r1, r9
 8010d98:	a808      	add	r0, sp, #32
 8010d9a:	f7fc f9e7 	bl	800d16c <xmp3_GetBits>
 8010d9e:	f808 0f01 	strb.w	r0, [r8, #1]!
 8010da2:	45b0      	cmp	r8, r6
 8010da4:	d1f7      	bne.n	8010d96 <xmp3_UnpackScaleFactors+0x3f2>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f47f ae89 	bne.w	8010ac0 <xmp3_UnpackScaleFactors+0x11c>
 8010dae:	9b05      	ldr	r3, [sp, #20]
 8010db0:	9a04      	ldr	r2, [sp, #16]
 8010db2:	1b1b      	subs	r3, r3, r4
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	eba2 020a 	sub.w	r2, r2, sl
 8010dba:	f103 080a 	add.w	r8, r3, #10
 8010dbe:	f103 060f 	add.w	r6, r3, #15
 8010dc2:	9b00      	ldr	r3, [sp, #0]
 8010dc4:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8010dc8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8010dcc:	4498      	add	r8, r3
 8010dce:	441e      	add	r6, r3
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	a808      	add	r0, sp, #32
 8010dd4:	f7fc f9ca 	bl	800d16c <xmp3_GetBits>
 8010dd8:	f808 0f01 	strb.w	r0, [r8, #1]!
 8010ddc:	45b0      	cmp	r8, r6
 8010dde:	d1f7      	bne.n	8010dd0 <xmp3_UnpackScaleFactors+0x42c>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f47f ae86 	bne.w	8010af4 <xmp3_UnpackScaleFactors+0x150>
 8010de8:	9b05      	ldr	r3, [sp, #20]
 8010dea:	9a04      	ldr	r2, [sp, #16]
 8010dec:	1b1b      	subs	r3, r3, r4
 8010dee:	005b      	lsls	r3, r3, #1
 8010df0:	eba2 020a 	sub.w	r2, r2, sl
 8010df4:	f103 070f 	add.w	r7, r3, #15
 8010df8:	f103 0614 	add.w	r6, r3, #20
 8010dfc:	9b00      	ldr	r3, [sp, #0]
 8010dfe:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8010e02:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8010e06:	441f      	add	r7, r3
 8010e08:	441e      	add	r6, r3
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	a808      	add	r0, sp, #32
 8010e0e:	f7fc f9ad 	bl	800d16c <xmp3_GetBits>
 8010e12:	f807 0f01 	strb.w	r0, [r7, #1]!
 8010e16:	42b7      	cmp	r7, r6
 8010e18:	d1f7      	bne.n	8010e0a <xmp3_UnpackScaleFactors+0x466>
 8010e1a:	e681      	b.n	8010b20 <xmp3_UnpackScaleFactors+0x17c>
			sfCompress -= 400;
 8010e1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 8010e20:	49bf      	ldr	r1, [pc, #764]	; (8011120 <xmp3_UnpackScaleFactors+0x77c>)
 8010e22:	1098      	asrs	r0, r3, #2
 8010e24:	fba1 5100 	umull	r5, r1, r1, r0
 8010e28:	0889      	lsrs	r1, r1, #2
 8010e2a:	910c      	str	r1, [sp, #48]	; 0x30
			slen[1]= (sfCompress >> 2) % 5;
 8010e2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010e30:	1a40      	subs	r0, r0, r1
			slen[2]= (sfCompress & 0x03);
 8010e32:	f003 0303 	and.w	r3, r3, #3
			slen[1]= (sfCompress >> 2) % 5;
 8010e36:	900d      	str	r0, [sp, #52]	; 0x34
			slen[3]= 0;
 8010e38:	2000      	movs	r0, #0
			slen[2]= (sfCompress & 0x03);
 8010e3a:	930e      	str	r3, [sp, #56]	; 0x38
			slen[3]= 0;
 8010e3c:	900f      	str	r0, [sp, #60]	; 0x3c
	preFlag = 0;
 8010e3e:	4686      	mov	lr, r0
			sfcIdx = 1;
 8010e40:	2501      	movs	r5, #1
 8010e42:	e6ab      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
		btIdx = (sis->mixedBlock ? 2 : 1);
 8010e44:	6c19      	ldr	r1, [r3, #64]	; 0x40
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010e46:	4eb7      	ldr	r6, [pc, #732]	; (8011124 <xmp3_UnpackScaleFactors+0x780>)
		btIdx = (sis->mixedBlock ? 2 : 1);
 8010e48:	2900      	cmp	r1, #0
 8010e4a:	bf14      	ite	ne
 8010e4c:	2102      	movne	r1, #2
 8010e4e:	2101      	moveq	r1, #1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010e50:	440d      	add	r5, r1
 8010e52:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8010e56:	f816 b025 	ldrb.w	fp, [r6, r5, lsl #2]
 8010e5a:	f891 c002 	ldrb.w	ip, [r1, #2]
 8010e5e:	784d      	ldrb	r5, [r1, #1]
 8010e60:	78c9      	ldrb	r1, [r1, #3]
 8010e62:	9511      	str	r5, [sp, #68]	; 0x44
 8010e64:	e9cd c112 	strd	ip, r1, [sp, #72]	; 0x48
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010e68:	2a00      	cmp	r2, #0
 8010e6a:	f47f aeb5 	bne.w	8010bd8 <xmp3_UnpackScaleFactors+0x234>
	sis->preFlag = preFlag;
 8010e6e:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
		if(sis->mixedBlock) {
 8010e72:	9b03      	ldr	r3, [sp, #12]
 8010e74:	00e2      	lsls	r2, r4, #3
 8010e76:	4453      	add	r3, sl
 8010e78:	4422      	add	r2, r4
 8010e7a:	011b      	lsls	r3, r3, #4
 8010e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e80:	9a01      	ldr	r2, [sp, #4]
 8010e82:	4413      	add	r3, r2
 8010e84:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8010e86:	2f00      	cmp	r7, #0
 8010e88:	f000 8103 	beq.w	8011092 <xmp3_UnpackScaleFactors+0x6ee>
 8010e8c:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	ebca 124a 	rsb	r2, sl, sl, lsl #5
 8010e96:	1e5f      	subs	r7, r3, #1
 8010e98:	1d5e      	adds	r6, r3, #5
 8010e9a:	9b00      	ldr	r3, [sp, #0]
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8010e9c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010ea0:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8010ea4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8010ea8:	441f      	add	r7, r3
 8010eaa:	441e      	add	r6, r3
 8010eac:	0163      	lsls	r3, r4, #5
 8010eae:	9305      	str	r3, [sp, #20]
 8010eb0:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010eb4:	9304      	str	r3, [sp, #16]
 8010eb6:	4641      	mov	r1, r8
 8010eb8:	a808      	add	r0, sp, #32
 8010eba:	f7fc f957 	bl	800d16c <xmp3_GetBits>
 8010ebe:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb=0; sfb < 6; sfb++) {
 8010ec2:	42b7      	cmp	r7, r6
 8010ec4:	d1f7      	bne.n	8010eb6 <xmp3_UnpackScaleFactors+0x512>
			sfb = 3;  /* start sfb for short */
 8010ec6:	f04f 0b03 	mov.w	fp, #3
			nrIdx = 1;
 8010eca:	2701      	movs	r7, #1
 8010ecc:	9b04      	ldr	r3, [sp, #16]
 8010ece:	9a05      	ldr	r2, [sp, #20]
 8010ed0:	9421      	str	r4, [sp, #132]	; 0x84
 8010ed2:	eba3 030a 	sub.w	r3, r3, sl
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	1b12      	subs	r2, r2, r4
 8010eda:	eb03 0842 	add.w	r8, r3, r2, lsl #1
 8010ede:	9b00      	ldr	r3, [sp, #0]
 8010ee0:	eb03 0208 	add.w	r2, r3, r8
 8010ee4:	462e      	mov	r6, r5
 8010ee6:	465b      	mov	r3, fp
 8010ee8:	4693      	mov	fp, r2
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010eea:	2e00      	cmp	r6, #0
 8010eec:	dd23      	ble.n	8010f36 <xmp3_UnpackScaleFactors+0x592>
 8010eee:	441e      	add	r6, r3
 8010ef0:	9a00      	ldr	r2, [sp, #0]
 8010ef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ef6:	4443      	add	r3, r8
 8010ef8:	eb02 0903 	add.w	r9, r2, r3
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8010efc:	ab0c      	add	r3, sp, #48	; 0x30
 8010efe:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010f02:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010f06:	445d      	add	r5, fp
 8010f08:	4621      	mov	r1, r4
 8010f0a:	a808      	add	r0, sp, #32
 8010f0c:	f7fc f92e 	bl	800d16c <xmp3_GetBits>
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010f10:	4621      	mov	r1, r4
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8010f12:	f889 0017 	strb.w	r0, [r9, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010f16:	a808      	add	r0, sp, #32
 8010f18:	f7fc f928 	bl	800d16c <xmp3_GetBits>
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010f1c:	4621      	mov	r1, r4
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010f1e:	f889 0018 	strb.w	r0, [r9, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010f22:	a808      	add	r0, sp, #32
 8010f24:	f7fc f922 	bl	800d16c <xmp3_GetBits>
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010f28:	f109 0903 	add.w	r9, r9, #3
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010f2c:	f889 0016 	strb.w	r0, [r9, #22]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010f30:	45a9      	cmp	r9, r5
 8010f32:	d1e9      	bne.n	8010f08 <xmp3_UnpackScaleFactors+0x564>
 8010f34:	4633      	mov	r3, r6
		for (    ; nrIdx <= 3; nrIdx++) {
 8010f36:	3701      	adds	r7, #1
 8010f38:	2f04      	cmp	r7, #4
 8010f3a:	d034      	beq.n	8010fa6 <xmp3_UnpackScaleFactors+0x602>
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010f3c:	aa10      	add	r2, sp, #64	; 0x40
 8010f3e:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8010f42:	e7d2      	b.n	8010eea <xmp3_UnpackScaleFactors+0x546>
			sfjs->nr[i] = nr[i];
 8010f44:	9b00      	ldr	r3, [sp, #0]
 8010f46:	e9c3 c145 	strd	ip, r1, [r3, #276]	; 0x114
			sfjs->slen[i] = slen[i];
 8010f4a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
		sfjs->intensityScale = intensityScale;
 8010f4e:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
			sfjs->nr[i] = nr[i];
 8010f52:	f8c3 b10c 	str.w	fp, [r3, #268]	; 0x10c
 8010f56:	461e      	mov	r6, r3
 8010f58:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
			sfjs->slen[i] = slen[i];
 8010f5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f60:	f8c6 00fc 	str.w	r0, [r6, #252]	; 0xfc
 8010f64:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
 8010f68:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8010f6c:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		sfjs->intensityScale = intensityScale;
 8010f70:	e635      	b.n	8010bde <xmp3_UnpackScaleFactors+0x23a>
		if (sfCompress < 180) {
 8010f72:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
		intensityScale = sfCompress & 0x01;
 8010f76:	f003 0001 	and.w	r0, r3, #1
		sfCompress >>= 1;
 8010f7a:	ea4f 0163 	mov.w	r1, r3, asr #1
		if (sfCompress < 180) {
 8010f7e:	f2c0 80b1 	blt.w	80110e4 <xmp3_UnpackScaleFactors+0x740>
		} else if (sfCompress < 244) {
 8010f82:	29f3      	cmp	r1, #243	; 0xf3
 8010f84:	f300 80d4 	bgt.w	8011130 <xmp3_UnpackScaleFactors+0x78c>
			sfCompress -= 180;
 8010f88:	f1a1 03b4 	sub.w	r3, r1, #180	; 0xb4
			slen[3] = 0;
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	910f      	str	r1, [sp, #60]	; 0x3c
	preFlag = 0;
 8010f90:	468e      	mov	lr, r1
			slen[0] = (sfCompress & 0x3f) >> 4;
 8010f92:	1119      	asrs	r1, r3, #4
 8010f94:	910c      	str	r1, [sp, #48]	; 0x30
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010f96:	f3c3 0181 	ubfx	r1, r3, #2, #2
			slen[2] = (sfCompress & 0x03);
 8010f9a:	f003 0303 	and.w	r3, r3, #3
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010f9e:	910d      	str	r1, [sp, #52]	; 0x34
			slen[2] = (sfCompress & 0x03);
 8010fa0:	930e      	str	r3, [sp, #56]	; 0x38
			sfcIdx = 4;
 8010fa2:	2504      	movs	r5, #4
 8010fa4:	e5fa      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8010fa6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8010fa8:	9b04      	ldr	r3, [sp, #16]
 8010faa:	9a05      	ldr	r2, [sp, #20]
 8010fac:	eba3 030a 	sub.w	r3, r3, sl
 8010fb0:	1b12      	subs	r2, r2, r4
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010fb8:	9a00      	ldr	r2, [sp, #0]
 8010fba:	441a      	add	r2, r3
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8010fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
 8010fc6:	e65f      	b.n	8010c88 <xmp3_UnpackScaleFactors+0x2e4>
		if (sis->mixedBlock) {          
 8010fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d169      	bne.n	80110a2 <xmp3_UnpackScaleFactors+0x6fe>
 8010fce:	0162      	lsls	r2, r4, #5
 8010fd0:	9205      	str	r2, [sp, #20]
 8010fd2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8010fd6:	9204      	str	r2, [sp, #16]
 8010fd8:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	9a05      	ldr	r2, [sp, #20]
 8010fe0:	eba3 030a 	sub.w	r3, r3, sl
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	1b12      	subs	r2, r2, r4
 8010fe8:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8010fec:	463e      	mov	r6, r7
 8010fee:	9b00      	ldr	r3, [sp, #0]
 8010ff0:	44b8      	add	r8, r7
 8010ff2:	3612      	adds	r6, #18
 8010ff4:	4498      	add	r8, r3
 8010ff6:	441e      	add	r6, r3
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	a808      	add	r0, sp, #32
 8010ffc:	f7fc f8b6 	bl	800d16c <xmp3_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8011000:	4649      	mov	r1, r9
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8011002:	f888 0017 	strb.w	r0, [r8, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8011006:	a808      	add	r0, sp, #32
 8011008:	f7fc f8b0 	bl	800d16c <xmp3_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 801100c:	4649      	mov	r1, r9
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 801100e:	f888 0018 	strb.w	r0, [r8, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8011012:	a808      	add	r0, sp, #32
 8011014:	f7fc f8aa 	bl	800d16c <xmp3_GetBits>
		for (      ; sfb < 6; sfb++) {
 8011018:	f108 0803 	add.w	r8, r8, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 801101c:	f888 0016 	strb.w	r0, [r8, #22]
		for (      ; sfb < 6; sfb++) {
 8011020:	45b0      	cmp	r8, r6
 8011022:	d1e9      	bne.n	8010ff8 <xmp3_UnpackScaleFactors+0x654>
 8011024:	9b00      	ldr	r3, [sp, #0]
 8011026:	441f      	add	r7, r3
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8011028:	4629      	mov	r1, r5
 801102a:	a808      	add	r0, sp, #32
 801102c:	f7fc f89e 	bl	800d16c <xmp3_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8011030:	4629      	mov	r1, r5
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8011032:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8011036:	a808      	add	r0, sp, #32
 8011038:	f7fc f898 	bl	800d16c <xmp3_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 801103c:	4629      	mov	r1, r5
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 801103e:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8011042:	a808      	add	r0, sp, #32
 8011044:	f7fc f892 	bl	800d16c <xmp3_GetBits>
		for (      ; sfb < 12; sfb++) {
 8011048:	3703      	adds	r7, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 801104a:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
		for (      ; sfb < 12; sfb++) {
 801104e:	42b7      	cmp	r7, r6
 8011050:	d1ea      	bne.n	8011028 <xmp3_UnpackScaleFactors+0x684>
 8011052:	e7a9      	b.n	8010fa8 <xmp3_UnpackScaleFactors+0x604>
 8011054:	ebc4 1644 	rsb	r6, r4, r4, lsl #5
 8011058:	9b00      	ldr	r3, [sp, #0]
 801105a:	0076      	lsls	r6, r6, #1
 801105c:	f106 38ff 	add.w	r8, r6, #4294967295
 8011060:	f106 070a 	add.w	r7, r6, #10
 8011064:	4498      	add	r8, r3
 8011066:	441f      	add	r7, r3
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8011068:	4649      	mov	r1, r9
 801106a:	a808      	add	r0, sp, #32
 801106c:	f7fc f87e 	bl	800d16c <xmp3_GetBits>
 8011070:	f808 0f01 	strb.w	r0, [r8, #1]!
			for (sfb = 0;  sfb < 11; sfb++) 
 8011074:	45b8      	cmp	r8, r7
 8011076:	d1f7      	bne.n	8011068 <xmp3_UnpackScaleFactors+0x6c4>
 8011078:	9b00      	ldr	r3, [sp, #0]
 801107a:	3614      	adds	r6, #20
 801107c:	4433      	add	r3, r6
 801107e:	461e      	mov	r6, r3
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8011080:	4629      	mov	r1, r5
 8011082:	a808      	add	r0, sp, #32
 8011084:	f7fc f872 	bl	800d16c <xmp3_GetBits>
 8011088:	f808 0f01 	strb.w	r0, [r8, #1]!
			for (sfb = 11; sfb < 21; sfb++) 
 801108c:	45b0      	cmp	r8, r6
 801108e:	d1f7      	bne.n	8011080 <xmp3_UnpackScaleFactors+0x6dc>
 8011090:	e5fa      	b.n	8010c88 <xmp3_UnpackScaleFactors+0x2e4>
 8011092:	0163      	lsls	r3, r4, #5
 8011094:	9305      	str	r3, [sp, #20]
 8011096:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801109a:	465d      	mov	r5, fp
 801109c:	9304      	str	r3, [sp, #16]
			sfb = 0;
 801109e:	46bb      	mov	fp, r7
 80110a0:	e714      	b.n	8010ecc <xmp3_UnpackScaleFactors+0x528>
 80110a2:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	ebca 124a 	rsb	r2, sl, sl, lsl #5
 80110ac:	1e5f      	subs	r7, r3, #1
 80110ae:	1dde      	adds	r6, r3, #7
 80110b0:	9b00      	ldr	r3, [sp, #0]
 80110b2:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 80110b6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80110ba:	441f      	add	r7, r3
 80110bc:	441e      	add	r6, r3
 80110be:	0163      	lsls	r3, r4, #5
 80110c0:	9305      	str	r3, [sp, #20]
 80110c2:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80110c6:	9304      	str	r3, [sp, #16]
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 80110c8:	4649      	mov	r1, r9
 80110ca:	a808      	add	r0, sp, #32
 80110cc:	f7fc f84e 	bl	800d16c <xmp3_GetBits>
 80110d0:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb = 0; sfb < 8; sfb++)
 80110d4:	42b7      	cmp	r7, r6
 80110d6:	d1f7      	bne.n	80110c8 <xmp3_UnpackScaleFactors+0x724>
			sfb = 3;
 80110d8:	2303      	movs	r3, #3
 80110da:	e77d      	b.n	8010fd8 <xmp3_UnpackScaleFactors+0x634>
			preFlag = 1;
 80110dc:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 80110e0:	2502      	movs	r5, #2
 80110e2:	e55b      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
			slen[0] = (sfCompress / 36);
 80110e4:	4d10      	ldr	r5, [pc, #64]	; (8011128 <xmp3_UnpackScaleFactors+0x784>)
 80110e6:	17db      	asrs	r3, r3, #31
 80110e8:	fb85 6501 	smull	r6, r5, r5, r1
 80110ec:	ebc3 03e5 	rsb	r3, r3, r5, asr #3
 80110f0:	930c      	str	r3, [sp, #48]	; 0x30
			slen[1] = (sfCompress % 36) / 6;
 80110f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80110f6:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 80110fa:	490c      	ldr	r1, [pc, #48]	; (801112c <xmp3_UnpackScaleFactors+0x788>)
 80110fc:	fb81 5103 	smull	r5, r1, r1, r3
 8011100:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8011104:	910d      	str	r1, [sp, #52]	; 0x34
			slen[2] = (sfCompress % 36) % 6;
 8011106:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801110a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 801110e:	930e      	str	r3, [sp, #56]	; 0x38
			slen[3] = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	930f      	str	r3, [sp, #60]	; 0x3c
	preFlag = 0;
 8011114:	469e      	mov	lr, r3
			sfcIdx = 3;
 8011116:	2503      	movs	r5, #3
 8011118:	e540      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
		return -1;
 801111a:	f04f 30ff 	mov.w	r0, #4294967295
 801111e:	e5d1      	b.n	8010cc4 <xmp3_UnpackScaleFactors+0x320>
 8011120:	cccccccd 	.word	0xcccccccd
 8011124:	0802822c 	.word	0x0802822c
 8011128:	38e38e39 	.word	0x38e38e39
 801112c:	2aaaaaab 	.word	0x2aaaaaab
			slen[0] = (sfCompress / 3);
 8011130:	4d08      	ldr	r5, [pc, #32]	; (8011154 <xmp3_UnpackScaleFactors+0x7b0>)
			sfCompress -= 244;
 8011132:	f1a1 03f4 	sub.w	r3, r1, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 8011136:	fba5 1503 	umull	r1, r5, r5, r3
 801113a:	086d      	lsrs	r5, r5, #1
 801113c:	950c      	str	r5, [sp, #48]	; 0x30
			slen[1] = (sfCompress % 3);
 801113e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011142:	1b5b      	subs	r3, r3, r5
 8011144:	930d      	str	r3, [sp, #52]	; 0x34
			slen[2] = slen[3] = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	preFlag = 0;
 801114c:	469e      	mov	lr, r3
			sfcIdx = 5;
 801114e:	2505      	movs	r5, #5
 8011150:	e524      	b.n	8010b9c <xmp3_UnpackScaleFactors+0x1f8>
 8011152:	bf00      	nop
 8011154:	aaaaaaab 	.word	0xaaaaaaab

08011158 <xmp3_MidSideProc>:
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
	for(i = 0; i < nSamps; i++) {
 8011158:	2900      	cmp	r1, #0
{
 801115a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for(i = 0; i < nSamps; i++) {
 801115e:	dd2c      	ble.n	80111ba <xmp3_MidSideProc+0x62>
	mOutL = mOutR = 0;
 8011160:	2600      	movs	r6, #0
 8011162:	f1a0 0c04 	sub.w	ip, r0, #4
 8011166:	f600 0efc 	addw	lr, r0, #2300	; 0x8fc
 801116a:	4637      	mov	r7, r6
	for(i = 0; i < nSamps; i++) {
 801116c:	4634      	mov	r4, r6
	__asm__ volatile (
 801116e:	46b0      	mov	r8, r6
		xl = x[0][i];
 8011170:	f85c 3f04 	ldr.w	r3, [ip, #4]!
		xr = x[1][i];
 8011174:	f85e 5f04 	ldr.w	r5, [lr, #4]!
		x[0][i] = xl + xr;
 8011178:	eb03 0905 	add.w	r9, r3, r5
		x[1][i] = xl - xr;
 801117c:	1b5b      	subs	r3, r3, r5
		x[0][i] = xl + xr;
 801117e:	f8cc 9000 	str.w	r9, [ip]
		x[1][i] = xl - xr;
 8011182:	f8ce 3000 	str.w	r3, [lr]
 8011186:	f8dc 5000 	ldr.w	r5, [ip]
 801118a:	4640      	mov	r0, r8
 801118c:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8011190:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
		mOutL |= FASTABS(x[0][i]);
 8011194:	4307      	orrs	r7, r0
 8011196:	4640      	mov	r0, r8
 8011198:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 801119c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
	for(i = 0; i < nSamps; i++) {
 80111a0:	3401      	adds	r4, #1
 80111a2:	42a1      	cmp	r1, r4
		mOutR |= FASTABS(x[1][i]);
 80111a4:	ea46 0600 	orr.w	r6, r6, r0
	for(i = 0; i < nSamps; i++) {
 80111a8:	d1e2      	bne.n	8011170 <xmp3_MidSideProc+0x18>
	}
	mOut[0] |= mOutL;
	mOut[1] |= mOutR;
 80111aa:	e9d2 1300 	ldrd	r1, r3, [r2]
	mOut[0] |= mOutL;
 80111ae:	4339      	orrs	r1, r7
	mOut[1] |= mOutR;
 80111b0:	4333      	orrs	r3, r6
 80111b2:	e9c2 1300 	strd	r1, r3, [r2]
}
 80111b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mOutL = mOutR = 0;
 80111ba:	2600      	movs	r6, #0
 80111bc:	4637      	mov	r7, r6
 80111be:	e7f4      	b.n	80111aa <xmp3_MidSideProc+0x52>

080111c0 <xmp3_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	b095      	sub	sp, #84	; 0x54
 80111c6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80111c8:	900a      	str	r0, [sp, #40]	; 0x28
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 80111ca:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80111ce:	f1ba 0f00 	cmp.w	sl, #0
 80111d2:	d175      	bne.n	80112c0 <xmp3_IntensityProcMPEG1+0x100>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 80111d4:	6af5      	ldr	r5, [r6, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
 80111d6:	6b54      	ldr	r4, [r2, #52]	; 0x34
		cbEndL =   cbi[0].cbEndL + 1;
 80111d8:	6977      	ldr	r7, [r6, #20]
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111da:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
		i = fh->sfBand->l[cbStartL];
 80111dc:	1c6a      	adds	r2, r5, #1
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111de:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
		i = fh->sfBand->l[cbStartL];
 80111e2:	f934 0012 	ldrsh.w	r0, [r4, r2, lsl #1]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111e6:	4ab3      	ldr	r2, [pc, #716]	; (80114b4 <xmp3_IntensityProcMPEG1+0x2f4>)
 80111e8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80111ec:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80111ee:	9201      	str	r2, [sp, #4]
	mOutL = mOutR = 0;

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 80111f0:	42bd      	cmp	r5, r7
	sampsLeft = nSamps - i;		/* process to length of left */
 80111f2:	eba1 0100 	sub.w	r1, r1, r0
		i = fh->sfBand->l[cbStartL];
 80111f6:	4602      	mov	r2, r0
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111f8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 80111fc:	f280 8158 	bge.w	80114b0 <xmp3_IntensityProcMPEG1+0x2f0>
 8011200:	2900      	cmp	r1, #0
 8011202:	f340 8155 	ble.w	80114b0 <xmp3_IntensityProcMPEG1+0x2f0>
 8011206:	19df      	adds	r7, r3, r7
 8011208:	eb03 0e05 	add.w	lr, r3, r5
 801120c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011210:	3301      	adds	r3, #1
 8011212:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011216:	9300      	str	r3, [sp, #0]
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
			fr = ISFIIP[midSideFlag][1];
 8011218:	4ba7      	ldr	r3, [pc, #668]	; (80114b8 <xmp3_IntensityProcMPEG1+0x2f8>)
 801121a:	9702      	str	r7, [sp, #8]
 801121c:	4433      	add	r3, r6
 801121e:	9303      	str	r3, [sp, #12]
		isf = sfis->l[cb];
 8011220:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (isf == 7) {
 8011224:	2b07      	cmp	r3, #7
	mOutL = mOutR = 0;
 8011226:	46d0      	mov	r8, sl
 8011228:	4657      	mov	r7, sl
		if (isf == 7) {
 801122a:	d042      	beq.n	80112b2 <xmp3_IntensityProcMPEG1+0xf2>
		} else {
			fl = isfTab[isf];	
 801122c:	9c01      	ldr	r4, [sp, #4]
 801122e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 8011232:	69a4      	ldr	r4, [r4, #24]
 8011234:	1b64      	subs	r4, r4, r5
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	f933 9f02 	ldrsh.w	r9, [r3, #2]!
 801123c:	9300      	str	r3, [sp, #0]
 801123e:	eba9 0600 	sub.w	r6, r9, r0
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8011242:	2e00      	cmp	r6, #0
 8011244:	f340 8124 	ble.w	8011490 <xmp3_IntensityProcMPEG1+0x2d0>
 8011248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801124a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 801124e:	3801      	subs	r0, #1
 8011250:	1b8e      	subs	r6, r1, r6
 8011252:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011256:	eb02 0c01 	add.w	ip, r2, r1
 801125a:	e001      	b.n	8011260 <xmp3_IntensityProcMPEG1+0xa0>
 801125c:	2900      	cmp	r1, #0
 801125e:	d036      	beq.n	80112ce <xmp3_IntensityProcMPEG1+0x10e>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 8011260:	f850 3f04 	ldr.w	r3, [r0, #4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011264:	461a      	mov	r2, r3
 8011266:	fb84 b202 	smull	fp, r2, r4, r2
 801126a:	0092      	lsls	r2, r2, #2
 801126c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
	__asm__ volatile (
 8011270:	46bb      	mov	fp, r7
 8011272:	ea82 7be2 	eor.w	fp, r2, r2, asr #31
 8011276:	ebab 7be2 	sub.w	fp, fp, r2, asr #31
 801127a:	ea48 080b 	orr.w	r8, r8, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801127e:	fb85 2303 	smull	r2, r3, r5, r3
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	6003      	str	r3, [r0, #0]
	__asm__ volatile (
 8011286:	463a      	mov	r2, r7
 8011288:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801128c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
			sampsLeft--;
 8011290:	3901      	subs	r1, #1
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8011292:	42b1      	cmp	r1, r6
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8011294:	ea4a 0a02 	orr.w	sl, sl, r2
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8011298:	ebac 0201 	sub.w	r2, ip, r1
 801129c:	d1de      	bne.n	801125c <xmp3_IntensityProcMPEG1+0x9c>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 801129e:	9b02      	ldr	r3, [sp, #8]
 80112a0:	459e      	cmp	lr, r3
 80112a2:	d014      	beq.n	80112ce <xmp3_IntensityProcMPEG1+0x10e>
 80112a4:	b19e      	cbz	r6, 80112ce <xmp3_IntensityProcMPEG1+0x10e>
		isf = sfis->l[cb];
 80112a6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (isf == 7) {
 80112aa:	2b07      	cmp	r3, #7
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 80112ac:	4648      	mov	r0, r9
 80112ae:	4631      	mov	r1, r6
		if (isf == 7) {
 80112b0:	d1bc      	bne.n	801122c <xmp3_IntensityProcMPEG1+0x6c>
			fl = ISFIIP[midSideFlag][0];
 80112b2:	4b81      	ldr	r3, [pc, #516]	; (80114b8 <xmp3_IntensityProcMPEG1+0x2f8>)
 80112b4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80112b6:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 80112ba:	9b03      	ldr	r3, [sp, #12]
 80112bc:	685c      	ldr	r4, [r3, #4]
 80112be:	e7ba      	b.n	8011236 <xmp3_IntensityProcMPEG1+0x76>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 80112c0:	f10a 30ff 	add.w	r0, sl, #4294967295
 80112c4:	2801      	cmp	r0, #1
 80112c6:	d908      	bls.n	80112da <xmp3_IntensityProcMPEG1+0x11a>
	mOutL = mOutR = 0;
 80112c8:	f04f 0800 	mov.w	r8, #0
 80112cc:	46c2      	mov	sl, r8
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
			sampsLeft -= 3;
		}
	}
	mOut[0] = mOutL;
 80112ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
	mOut[1] = mOutR;
 80112d0:	e9c3 a800 	strd	sl, r8, [r3]
	
	return;
}
 80112d4:	b015      	add	sp, #84	; 0x54
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cbStartS = cbi[1].cbEndSMax + 1;
 80112da:	6ab0      	ldr	r0, [r6, #40]	; 0x28
		i = 3 * fh->sfBand->s[cbStartS];
 80112dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
		cbEndS =   cbi[0].cbEndSMax + 1;
 80112de:	f8d6 e010 	ldr.w	lr, [r6, #16]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80112e2:	4e74      	ldr	r6, [pc, #464]	; (80114b4 <xmp3_IntensityProcMPEG1+0x2f4>)
		i = 3 * fh->sfBand->s[cbStartS];
 80112e4:	eb04 0240 	add.w	r2, r4, r0, lsl #1
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80112e8:	4570      	cmp	r0, lr
		i = 3 * fh->sfBand->s[cbStartS];
 80112ea:	f9b2 5030 	ldrsh.w	r5, [r2, #48]	; 0x30
 80112ee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	sampsLeft = nSamps - i;		/* process to length of left */
 80112f2:	eba1 0702 	sub.w	r7, r1, r2
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80112f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80112f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80112fc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8011300:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8011302:	910c      	str	r1, [sp, #48]	; 0x30
		cbStartS = cbi[1].cbEndSMax + 1;
 8011304:	f100 0c01 	add.w	ip, r0, #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 8011308:	f10e 0101 	add.w	r1, lr, #1
	isfTab = (int *)ISFMpeg1[midSideFlag];
 801130c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8011310:	dada      	bge.n	80112c8 <xmp3_IntensityProcMPEG1+0x108>
 8011312:	2f02      	cmp	r7, #2
 8011314:	ddd8      	ble.n	80112c8 <xmp3_IntensityProcMPEG1+0x108>
 8011316:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801131a:	3018      	adds	r0, #24
 801131c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8011320:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011324:	9008      	str	r0, [sp, #32]
 8011326:	f10c 0016 	add.w	r0, ip, #22
 801132a:	1818      	adds	r0, r3, r0
 801132c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011330:	3313      	adds	r3, #19
 8011332:	440b      	add	r3, r1
 8011334:	930d      	str	r3, [sp, #52]	; 0x34
				frs[w] = ISFIIP[midSideFlag][1];
 8011336:	4b60      	ldr	r3, [pc, #384]	; (80114b8 <xmp3_IntensityProcMPEG1+0x2f8>)
 8011338:	9007      	str	r0, [sp, #28]
	mOutL = mOutR = 0;
 801133a:	f04f 0800 	mov.w	r8, #0
				frs[w] = ISFIIP[midSideFlag][1];
 801133e:	4433      	add	r3, r6
 8011340:	930b      	str	r3, [sp, #44]	; 0x2c
	mOutL = mOutR = 0;
 8011342:	46c2      	mov	sl, r8
 8011344:	46c1      	mov	r9, r8
 8011346:	9c07      	ldr	r4, [sp, #28]
 8011348:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801134a:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 801134e:	a811      	add	r0, sp, #68	; 0x44
 8011350:	a90e      	add	r1, sp, #56	; 0x38
 8011352:	4696      	mov	lr, r2
			isf = sfis->s[cb][w];
 8011354:	f814 3f01 	ldrb.w	r3, [r4, #1]!
			if (isf == 7) {
 8011358:	2b07      	cmp	r3, #7
 801135a:	f000 8092 	beq.w	8011482 <xmp3_IntensityProcMPEG1+0x2c2>
				fls[w] = isfTab[isf];
 801135e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 8011362:	69b2      	ldr	r2, [r6, #24]
				fls[w] = isfTab[isf];
 8011364:	600b      	str	r3, [r1, #0]
				frs[w] = isfTab[6] - isfTab[isf];
 8011366:	1ad3      	subs	r3, r2, r3
				frs[w] = ISFIIP[midSideFlag][1];
 8011368:	f840 3b04 	str.w	r3, [r0], #4
		for (w = 0; w < 3; w++) {
 801136c:	ab14      	add	r3, sp, #80	; 0x50
 801136e:	4298      	cmp	r0, r3
 8011370:	f101 0104 	add.w	r1, r1, #4
 8011374:	d1ee      	bne.n	8011354 <xmp3_IntensityProcMPEG1+0x194>
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8011376:	9b08      	ldr	r3, [sp, #32]
 8011378:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
 801137c:	1b4d      	subs	r5, r1, r5
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 801137e:	2d00      	cmp	r5, #0
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8011380:	e9cd 3108 	strd	r3, r1, [sp, #32]
 8011384:	4672      	mov	r2, lr
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011386:	f340 8089 	ble.w	801149c <xmp3_IntensityProcMPEG1+0x2dc>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 801138a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801138c:	9301      	str	r3, [sp, #4]
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 801138e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011390:	9302      	str	r3, [sp, #8]
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8011392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011394:	9303      	str	r3, [sp, #12]
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8011396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011398:	9304      	str	r3, [sp, #16]
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 801139a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801139c:	9305      	str	r3, [sp, #20]
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801139e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113a0:	9306      	str	r3, [sp, #24]
 80113a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113a8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80113ac:	eba7 0c05 	sub.w	ip, r7, r5
 80113b0:	44be      	add	lr, r7
 80113b2:	e001      	b.n	80113b8 <xmp3_IntensityProcMPEG1+0x1f8>
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 80113b4:	2f02      	cmp	r7, #2
 80113b6:	dd8a      	ble.n	80112ce <xmp3_IntensityProcMPEG1+0x10e>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 80113b8:	681a      	ldr	r2, [r3, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113ba:	9c01      	ldr	r4, [sp, #4]
 80113bc:	4611      	mov	r1, r2
 80113be:	fb84 0101 	smull	r0, r1, r4, r1
 80113c2:	0089      	lsls	r1, r1, #2
 80113c4:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
	__asm__ volatile (
 80113c8:	464e      	mov	r6, r9
 80113ca:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 80113ce:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113d2:	9802      	ldr	r0, [sp, #8]
 80113d4:	fb80 1202 	smull	r1, r2, r0, r2
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 80113d8:	0092      	lsls	r2, r2, #2
 80113da:	601a      	str	r2, [r3, #0]
	__asm__ volatile (
 80113dc:	464d      	mov	r5, r9
 80113de:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80113e2:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 80113e6:	685a      	ldr	r2, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113e8:	9c03      	ldr	r4, [sp, #12]
 80113ea:	4611      	mov	r1, r2
 80113ec:	fb84 0101 	smull	r0, r1, r4, r1
 80113f0:	0089      	lsls	r1, r1, #2
 80113f2:	f8c3 1904 	str.w	r1, [r3, #2308]	; 0x904
	__asm__ volatile (
 80113f6:	4648      	mov	r0, r9
 80113f8:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80113fc:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011400:	9c04      	ldr	r4, [sp, #16]
 8011402:	fb84 1202 	smull	r1, r2, r4, r2
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8011406:	0092      	lsls	r2, r2, #2
 8011408:	605a      	str	r2, [r3, #4]
	__asm__ volatile (
 801140a:	4649      	mov	r1, r9
 801140c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8011410:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8011414:	689a      	ldr	r2, [r3, #8]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011416:	9200      	str	r2, [sp, #0]
 8011418:	4614      	mov	r4, r2
 801141a:	9a05      	ldr	r2, [sp, #20]
 801141c:	fb82 b404 	smull	fp, r4, r2, r4
 8011420:	00a4      	lsls	r4, r4, #2
 8011422:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
	__asm__ volatile (
 8011426:	46cb      	mov	fp, r9
 8011428:	ea84 7be4 	eor.w	fp, r4, r4, asr #31
 801142c:	ebab 7be4 	sub.w	fp, fp, r4, asr #31
 8011430:	4330      	orrs	r0, r6
 8011432:	ea40 000b 	orr.w	r0, r0, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011436:	9a00      	ldr	r2, [sp, #0]
 8011438:	9c06      	ldr	r4, [sp, #24]
 801143a:	ea48 0800 	orr.w	r8, r8, r0
 801143e:	fb84 0202 	smull	r0, r2, r4, r2
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8011442:	0092      	lsls	r2, r2, #2
 8011444:	609a      	str	r2, [r3, #8]
	__asm__ volatile (
 8011446:	4648      	mov	r0, r9
 8011448:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 801144c:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
			sampsLeft -= 3;
 8011450:	3f03      	subs	r7, #3
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8011452:	4329      	orrs	r1, r5
 8011454:	4301      	orrs	r1, r0
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011456:	4567      	cmp	r7, ip
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8011458:	ea4a 0a01 	orr.w	sl, sl, r1
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 801145c:	ebae 0207 	sub.w	r2, lr, r7
 8011460:	f103 030c 	add.w	r3, r3, #12
 8011464:	d1a6      	bne.n	80113b4 <xmp3_IntensityProcMPEG1+0x1f4>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8011466:	9b07      	ldr	r3, [sp, #28]
 8011468:	990d      	ldr	r1, [sp, #52]	; 0x34
 801146a:	428b      	cmp	r3, r1
 801146c:	f43f af2f 	beq.w	80112ce <xmp3_IntensityProcMPEG1+0x10e>
 8011470:	3303      	adds	r3, #3
 8011472:	f1bc 0f02 	cmp.w	ip, #2
 8011476:	9307      	str	r3, [sp, #28]
 8011478:	f77f af29 	ble.w	80112ce <xmp3_IntensityProcMPEG1+0x10e>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 801147c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801147e:	4667      	mov	r7, ip
 8011480:	e761      	b.n	8011346 <xmp3_IntensityProcMPEG1+0x186>
				fls[w] = ISFIIP[midSideFlag][0];
 8011482:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <xmp3_IntensityProcMPEG1+0x2f8>)
 8011484:	f853 203c 	ldr.w	r2, [r3, ip, lsl #3]
				frs[w] = ISFIIP[midSideFlag][1];
 8011488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				fls[w] = ISFIIP[midSideFlag][0];
 801148a:	600a      	str	r2, [r1, #0]
				frs[w] = ISFIIP[midSideFlag][1];
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	e76b      	b.n	8011368 <xmp3_IntensityProcMPEG1+0x1a8>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8011490:	9b02      	ldr	r3, [sp, #8]
 8011492:	459e      	cmp	lr, r3
 8011494:	f43f af1b 	beq.w	80112ce <xmp3_IntensityProcMPEG1+0x10e>
 8011498:	460e      	mov	r6, r1
 801149a:	e704      	b.n	80112a6 <xmp3_IntensityProcMPEG1+0xe6>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 801149c:	9b07      	ldr	r3, [sp, #28]
 801149e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80114a0:	428b      	cmp	r3, r1
 80114a2:	f43f af14 	beq.w	80112ce <xmp3_IntensityProcMPEG1+0x10e>
 80114a6:	9b07      	ldr	r3, [sp, #28]
 80114a8:	3303      	adds	r3, #3
 80114aa:	9307      	str	r3, [sp, #28]
 80114ac:	46bc      	mov	ip, r7
 80114ae:	e7e5      	b.n	801147c <xmp3_IntensityProcMPEG1+0x2bc>
	mOutL = mOutR = 0;
 80114b0:	46d0      	mov	r8, sl
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80114b2:	e70c      	b.n	80112ce <xmp3_IntensityProcMPEG1+0x10e>
 80114b4:	080282a4 	.word	0x080282a4
 80114b8:	08028294 	.word	0x08028294

080114bc <xmp3_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	b0a1      	sub	sp, #132	; 0x84
 80114c2:	e9dd 952a 	ldrd	r9, r5, [sp, #168]	; 0xa8
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 80114c6:	682c      	ldr	r4, [r5, #0]
 80114c8:	46ac      	mov	ip, r5
 80114ca:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80114cc:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80114d0:	4d99      	ldr	r5, [pc, #612]	; (8011738 <xmp3_IntensityProcMPEG2+0x27c>)
 80114d2:	eb05 1484 	add.w	r4, r5, r4, lsl #6
 80114d6:	9403      	str	r4, [sp, #12]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 80114d8:	f10c 0810 	add.w	r8, ip, #16
 80114dc:	2400      	movs	r4, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 80114de:	f04f 0e01 	mov.w	lr, #1
 80114e2:	f85c 5f04 	ldr.w	r5, [ip, #4]!
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114e6:	f8dc 7010 	ldr.w	r7, [ip, #16]
		tmp = (1 << sfjs->slen[r]) - 1;
 80114ea:	fa0e f505 	lsl.w	r5, lr, r5
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114ee:	2f00      	cmp	r7, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 80114f0:	f105 35ff 	add.w	r5, r5, #4294967295
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114f4:	dd0a      	ble.n	801150c <xmp3_IntensityProcMPEG2+0x50>
 80114f6:	4427      	add	r7, r4
 80114f8:	ae09      	add	r6, sp, #36	; 0x24
 80114fa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80114fe:	eb06 0687 	add.w	r6, r6, r7, lsl #2
			il[k] = tmp;
 8011502:	f844 5b04 	str.w	r5, [r4], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8011506:	42b4      	cmp	r4, r6
 8011508:	d1fb      	bne.n	8011502 <xmp3_IntensityProcMPEG2+0x46>
 801150a:	463c      	mov	r4, r7
	for (k = r = 0; r < 4; r++) {
 801150c:	45c4      	cmp	ip, r8
 801150e:	d1e8      	bne.n	80114e2 <xmp3_IntensityProcMPEG2+0x26>
	}

	if (cbi[1].cbType == 0) {
 8011510:	f8d9 4018 	ldr.w	r4, [r9, #24]
 8011514:	2c00      	cmp	r4, #0
 8011516:	f040 8081 	bne.w	801161c <xmp3_IntensityProcMPEG2+0x160>
		/* long blocks */
		il[21] = il[22] = 1;
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 801151a:	f8d9 502c 	ldr.w	r5, [r9, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
		i = fh->sfBand->l[cbStartL];
 801151e:	6b56      	ldr	r6, [r2, #52]	; 0x34
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8011520:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8011524:	9201      	str	r2, [sp, #4]
		i = fh->sfBand->l[cbStartL];
 8011526:	1c6f      	adds	r7, r5, #1
 8011528:	eb06 0b47 	add.w	fp, r6, r7, lsl #1
 801152c:	f936 2017 	ldrsh.w	r2, [r6, r7, lsl #1]
 8011530:	9004      	str	r0, [sp, #16]
		il[21] = il[22] = 1;
 8011532:	2601      	movs	r6, #1
 8011534:	eb03 0905 	add.w	r9, r3, r5
 8011538:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
		sampsLeft = nSamps - i;
 801153c:	f1c3 0301 	rsb	r3, r3, #1
 8011540:	ae09      	add	r6, sp, #36	; 0x24
 8011542:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8011546:	9302      	str	r3, [sp, #8]

		for(cb = cbStartL; cb < cbEndL; cb++) {
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
				fr = ISFIIP[midSideFlag][1];
 8011548:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 801154a:	4b7c      	ldr	r3, [pc, #496]	; (801173c <xmp3_IntensityProcMPEG2+0x280>)
 801154c:	9600      	str	r6, [sp, #0]
 801154e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
		sampsLeft = nSamps - i;
 8011552:	1a89      	subs	r1, r1, r2
	mOutL = mOutR = 0;
 8011554:	46a0      	mov	r8, r4
				fr = ISFIIP[midSideFlag][1];
 8011556:	9305      	str	r3, [sp, #20]
 8011558:	4627      	mov	r7, r4
		for(cb = cbStartL; cb < cbEndL; cb++) {
 801155a:	9b02      	ldr	r3, [sp, #8]
 801155c:	9801      	ldr	r0, [sp, #4]
 801155e:	444b      	add	r3, r9
 8011560:	4298      	cmp	r0, r3
 8011562:	db49      	blt.n	80115f8 <xmp3_IntensityProcMPEG2+0x13c>
			if (sfIdx == il[cb]) {
 8011564:	9d00      	ldr	r5, [sp, #0]
			sfIdx = sfis->l[cb];
 8011566:	f819 0f01 	ldrb.w	r0, [r9, #1]!
			if (sfIdx == il[cb]) {
 801156a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 801156e:	9500      	str	r5, [sp, #0]
 8011570:	4283      	cmp	r3, r0
 8011572:	d047      	beq.n	8011604 <xmp3_IntensityProcMPEG2+0x148>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 8011574:	1c43      	adds	r3, r0, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011576:	07c0      	lsls	r0, r0, #31
				isf = (sfis->l[cb] + 1) >> 1;
 8011578:	ea4f 0363 	mov.w	r3, r3, asr #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801157c:	d549      	bpl.n	8011612 <xmp3_IntensityProcMPEG2+0x156>
 801157e:	9d03      	ldr	r5, [sp, #12]
 8011580:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8011584:	462b      	mov	r3, r5
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011586:	681d      	ldr	r5, [r3, #0]
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8011588:	f9bb c002 	ldrsh.w	ip, [fp, #2]
 801158c:	465b      	mov	r3, fp
 801158e:	f10b 0b02 	add.w	fp, fp, #2
 8011592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011596:	ebac 0c03 	sub.w	ip, ip, r3
 801159a:	458c      	cmp	ip, r1
 801159c:	bfa8      	it	ge
 801159e:	468c      	movge	ip, r1

			for(j = 0; j < n; j++, i++) {
 80115a0:	f1bc 0f00 	cmp.w	ip, #0
 80115a4:	dd25      	ble.n	80115f2 <xmp3_IntensityProcMPEG2+0x136>
 80115a6:	9b04      	ldr	r3, [sp, #16]
 80115a8:	eb0c 0e02 	add.w	lr, ip, r2
 80115ac:	eb03 068e 	add.w	r6, r3, lr, lsl #2
 80115b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80115b4:	f852 3b04 	ldr.w	r3, [r2], #4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80115b8:	fb85 a303 	smull	sl, r3, r5, r3
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
	__asm__ volatile (
 80115c2:	46ba      	mov	sl, r7
 80115c4:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 80115c8:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80115cc:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80115d0:	ea48 080a 	orr.w	r8, r8, sl
 80115d4:	fb80 a303 	smull	sl, r3, r0, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	f842 3c04 	str.w	r3, [r2, #-4]
	__asm__ volatile (
 80115de:	46ba      	mov	sl, r7
 80115e0:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 80115e4:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
			for(j = 0; j < n; j++, i++) {
 80115e8:	42b2      	cmp	r2, r6
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80115ea:	ea44 040a 	orr.w	r4, r4, sl
			for(j = 0; j < n; j++, i++) {
 80115ee:	d1e1      	bne.n	80115b4 <xmp3_IntensityProcMPEG2+0xf8>
 80115f0:	4672      	mov	r2, lr
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 80115f2:	ebb1 010c 	subs.w	r1, r1, ip
 80115f6:	d1b0      	bne.n	801155a <xmp3_IntensityProcMPEG2+0x9e>
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
				}
			}
		}
	}
	mOut[0] = mOutL;
 80115f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 80115fa:	e9c3 4800 	strd	r4, r8, [r3]

	return;
}
 80115fe:	b021      	add	sp, #132	; 0x84
 8011600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fl = ISFIIP[midSideFlag][0];
 8011604:	4b4d      	ldr	r3, [pc, #308]	; (801173c <xmp3_IntensityProcMPEG2+0x280>)
 8011606:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011608:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 801160c:	9b05      	ldr	r3, [sp, #20]
 801160e:	685d      	ldr	r5, [r3, #4]
 8011610:	e7ba      	b.n	8011588 <xmp3_IntensityProcMPEG2+0xcc>
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011612:	9803      	ldr	r0, [sp, #12]
 8011614:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011618:	6800      	ldr	r0, [r0, #0]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801161a:	e7b4      	b.n	8011586 <xmp3_IntensityProcMPEG2+0xca>
			i = 3 * fh->sfBand->s[cbStartS] + w;
 801161c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801161e:	3317      	adds	r3, #23
 8011620:	9301      	str	r3, [sp, #4]
		il[12] = 1;
 8011622:	2301      	movs	r3, #1
 8011624:	e9cd 9206 	strd	r9, r2, [sp, #24]
 8011628:	9315      	str	r3, [sp, #84]	; 0x54
					fr = ISFIIP[midSideFlag][1];
 801162a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801162c:	4b43      	ldr	r3, [pc, #268]	; (801173c <xmp3_IntensityProcMPEG2+0x280>)
	mOutL = mOutR = 0;
 801162e:	f04f 0800 	mov.w	r8, #0
					fr = ISFIIP[midSideFlag][1];
 8011632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	mOutL = mOutR = 0;
 8011636:	4644      	mov	r4, r8
		for(w = 0; w < 3; w++) {
 8011638:	f8cd 8010 	str.w	r8, [sp, #16]
					fr = ISFIIP[midSideFlag][1];
 801163c:	9305      	str	r3, [sp, #20]
 801163e:	f500 6710 	add.w	r7, r0, #2304	; 0x900
 8011642:	46c6      	mov	lr, r8
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8011644:	9a06      	ldr	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011646:	9d07      	ldr	r5, [sp, #28]
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8011648:	69d3      	ldr	r3, [r2, #28]
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 801164a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801164e:	9206      	str	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011650:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8011654:	f103 0c01 	add.w	ip, r3, #1
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011658:	f9b2 6030 	ldrsh.w	r6, [r2, #48]	; 0x30
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 801165c:	9102      	str	r1, [sp, #8]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 801165e:	2203      	movs	r2, #3
 8011660:	4691      	mov	r9, r2
 8011662:	9a04      	ldr	r2, [sp, #16]
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8011664:	4561      	cmp	r1, ip
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011666:	fb16 2209 	smlabb	r2, r6, r9, r2
			for(cb = cbStartS; cb < cbEndS; cb++) {
 801166a:	db56      	blt.n	801171a <xmp3_IntensityProcMPEG2+0x25e>
 801166c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011670:	3318      	adds	r3, #24
 8011672:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011676:	9300      	str	r3, [sp, #0]
 8011678:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
				sfIdx = sfis->s[cb][w];
 801167c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8011680:	9901      	ldr	r1, [sp, #4]
 8011682:	5cc9      	ldrb	r1, [r1, r3]
				if (sfIdx == il[cb]) {
 8011684:	f85a 302c 	ldr.w	r3, [sl, ip, lsl #2]
 8011688:	428b      	cmp	r3, r1
 801168a:	d03a      	beq.n	8011702 <xmp3_IntensityProcMPEG2+0x246>
					isf = (sfis->s[cb][w] + 1) >> 1;
 801168c:	1c4b      	adds	r3, r1, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801168e:	07c9      	lsls	r1, r1, #31
					isf = (sfis->s[cb][w] + 1) >> 1;
 8011690:	ea4f 0363 	mov.w	r3, r3, asr #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011694:	d53c      	bpl.n	8011710 <xmp3_IntensityProcMPEG2+0x254>
 8011696:	9d03      	ldr	r5, [sp, #12]
 8011698:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 801169c:	462b      	mov	r3, r5
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801169e:	681d      	ldr	r5, [r3, #0]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 80116a0:	9b00      	ldr	r3, [sp, #0]
 80116a2:	f933 9f02 	ldrsh.w	r9, [r3, #2]!
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	eba9 0606 	sub.w	r6, r9, r6
				for(j = 0; j < n; j++, i+=3) {
 80116ac:	2e00      	cmp	r6, #0
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 80116ae:	f10c 0c01 	add.w	ip, ip, #1
				for(j = 0; j < n; j++, i+=3) {
 80116b2:	dd21      	ble.n	80116f8 <xmp3_IntensityProcMPEG2+0x23c>
 80116b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80116b8:	4416      	add	r6, r2
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80116ba:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80116be:	fb85 b303 	smull	fp, r3, r5, r3
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	__asm__ volatile (
 80116c8:	46f3      	mov	fp, lr
 80116ca:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 80116ce:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80116d2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80116d6:	ea48 080b 	orr.w	r8, r8, fp
 80116da:	fb81 b303 	smull	fp, r3, r1, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	__asm__ volatile (
 80116e4:	46f3      	mov	fp, lr
 80116e6:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 80116ea:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
				for(j = 0; j < n; j++, i+=3) {
 80116ee:	3203      	adds	r2, #3
 80116f0:	42b2      	cmp	r2, r6
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80116f2:	ea44 040b 	orr.w	r4, r4, fp
				for(j = 0; j < n; j++, i+=3) {
 80116f6:	d1e0      	bne.n	80116ba <xmp3_IntensityProcMPEG2+0x1fe>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 80116f8:	9b02      	ldr	r3, [sp, #8]
 80116fa:	4563      	cmp	r3, ip
 80116fc:	db0d      	blt.n	801171a <xmp3_IntensityProcMPEG2+0x25e>
 80116fe:	464e      	mov	r6, r9
 8011700:	e7bc      	b.n	801167c <xmp3_IntensityProcMPEG2+0x1c0>
					fl = ISFIIP[midSideFlag][0];
 8011702:	4b0e      	ldr	r3, [pc, #56]	; (801173c <xmp3_IntensityProcMPEG2+0x280>)
 8011704:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011706:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 801170a:	9b05      	ldr	r3, [sp, #20]
 801170c:	685d      	ldr	r5, [r3, #4]
 801170e:	e7c7      	b.n	80116a0 <xmp3_IntensityProcMPEG2+0x1e4>
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011710:	9903      	ldr	r1, [sp, #12]
 8011712:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011716:	6809      	ldr	r1, [r1, #0]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011718:	e7c1      	b.n	801169e <xmp3_IntensityProcMPEG2+0x1e2>
		for(w = 0; w < 3; w++) {
 801171a:	9b04      	ldr	r3, [sp, #16]
 801171c:	9a01      	ldr	r2, [sp, #4]
 801171e:	3301      	adds	r3, #1
 8011720:	3201      	adds	r2, #1
 8011722:	2b03      	cmp	r3, #3
 8011724:	9304      	str	r3, [sp, #16]
 8011726:	9201      	str	r2, [sp, #4]
 8011728:	d18c      	bne.n	8011644 <xmp3_IntensityProcMPEG2+0x188>
	mOut[0] = mOutL;
 801172a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 801172c:	e9c3 4800 	strd	r4, r8, [r3]
}
 8011730:	b021      	add	sp, #132	; 0x84
 8011732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011736:	bf00      	nop
 8011738:	080282dc 	.word	0x080282dc
 801173c:	08028294 	.word	0x08028294

08011740 <xmp3_Subband>:
	int b;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8011740:	2800      	cmp	r0, #0
 8011742:	f000 8086 	beq.w	8011852 <xmp3_Subband+0x112>
 8011746:	68c3      	ldr	r3, [r0, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 8082 	beq.w	8011852 <xmp3_Subband+0x112>
{
 801174e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8011752:	6946      	ldr	r6, [r0, #20]
{
 8011754:	b085      	sub	sp, #20
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8011756:	2e00      	cmp	r6, #0
 8011758:	d078      	beq.n	801184c <xmp3_Subband+0x10c>
 801175a:	6987      	ldr	r7, [r0, #24]
 801175c:	2f00      	cmp	r7, #0
 801175e:	d075      	beq.n	801184c <xmp3_Subband+0x10c>
	return -1;

	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 8011760:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8011764:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
	if (mp3DecInfo->nChans == 2) {
 8011768:	2b02      	cmp	r3, #2
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801176a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 801176e:	460d      	mov	r5, r1
	if (mp3DecInfo->nChans == 2) {
 8011770:	d031      	beq.n	80117d6 <xmp3_Subband+0x96>
		}
		} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8011772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011858 <xmp3_Subband+0x118>
 8011776:	9603      	str	r6, [sp, #12]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011778:	f04f 0900 	mov.w	r9, #0
 801177c:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8011780:	9b03      	ldr	r3, [sp, #12]
 8011782:	f8d8 6b18 	ldr.w	r6, [r8, #2840]	; 0xb18
 8011786:	9600      	str	r6, [sp, #0]
 8011788:	f009 0b01 	and.w	fp, r9, #1
 801178c:	eb03 10c9 	add.w	r0, r3, r9, lsl #7
 8011790:	4639      	mov	r1, r7
 8011792:	465b      	mov	r3, fp
 8011794:	f7fb ffce 	bl	800d734 <xmp3_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8011798:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 801179c:	eb0b 130b 	add.w	r3, fp, fp, lsl #4
 80117a0:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 80117a4:	4628      	mov	r0, r5
 80117a6:	4652      	mov	r2, sl
 80117a8:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80117ac:	f7fe fcca 	bl	8010144 <xmp3_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80117b0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117b4:	f109 0901 	add.w	r9, r9, #1
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80117b8:	eba2 020b 	sub.w	r2, r2, fp
 80117bc:	f002 0207 	and.w	r2, r2, #7
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117c0:	f1b9 0f12 	cmp.w	r9, #18
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80117c4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			pcmBuf += NBANDS;
 80117c8:	f105 0540 	add.w	r5, r5, #64	; 0x40
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117cc:	d1d8      	bne.n	8011780 <xmp3_Subband+0x40>
		}
	}

	return 0;
 80117ce:	2000      	movs	r0, #0
}
 80117d0:	b005      	add	sp, #20
 80117d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d6:	f506 6310 	add.w	r3, r6, #2304	; 0x900
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80117da:	f107 0a80 	add.w	sl, r7, #128	; 0x80
 80117de:	9303      	str	r3, [sp, #12]
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117e0:	f04f 0900 	mov.w	r9, #0
 80117e4:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80117e8:	f009 0b01 	and.w	fp, r9, #1
 80117ec:	f8d8 1b18 	ldr.w	r1, [r8, #2840]	; 0xb18
 80117f0:	9100      	str	r1, [sp, #0]
 80117f2:	4630      	mov	r0, r6
 80117f4:	465b      	mov	r3, fp
 80117f6:	4639      	mov	r1, r7
 80117f8:	f7fb ff9c 	bl	800d734 <xmp3_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80117fc:	f8d8 1b1c 	ldr.w	r1, [r8, #2844]	; 0xb1c
 8011800:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8011804:	9100      	str	r1, [sp, #0]
 8011806:	465b      	mov	r3, fp
 8011808:	f506 6010 	add.w	r0, r6, #2304	; 0x900
 801180c:	4651      	mov	r1, sl
 801180e:	f7fb ff91 	bl	800d734 <xmp3_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8011812:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8011816:	eb0b 120b 	add.w	r2, fp, fp, lsl #4
 801181a:	eb01 1182 	add.w	r1, r1, r2, lsl #6
 801181e:	4628      	mov	r0, r5
 8011820:	4a0d      	ldr	r2, [pc, #52]	; (8011858 <xmp3_Subband+0x118>)
 8011822:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8011826:	f7fe fdfb 	bl	8010420 <xmp3_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801182a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 801182e:	9b03      	ldr	r3, [sp, #12]
 8011830:	3680      	adds	r6, #128	; 0x80
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8011832:	eba2 020b 	sub.w	r2, r2, fp
 8011836:	f002 0207 	and.w	r2, r2, #7
		for (b = 0; b < BLOCK_SIZE; b++) {
 801183a:	42b3      	cmp	r3, r6
 801183c:	f109 0901 	add.w	r9, r9, #1
			pcmBuf += (2 * NBANDS);
 8011840:	f105 0580 	add.w	r5, r5, #128	; 0x80
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8011844:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011848:	d1ce      	bne.n	80117e8 <xmp3_Subband+0xa8>
 801184a:	e7c0      	b.n	80117ce <xmp3_Subband+0x8e>
	return -1;
 801184c:	f04f 30ff 	mov.w	r0, #4294967295
 8011850:	e7be      	b.n	80117d0 <xmp3_Subband+0x90>
 8011852:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011856:	4770      	bx	lr
 8011858:	0802865c 	.word	0x0802865c

0801185c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	4603      	mov	r3, r0
 8011864:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011866:	79fb      	ldrb	r3, [r7, #7]
 8011868:	4a08      	ldr	r2, [pc, #32]	; (801188c <disk_status+0x30>)
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4413      	add	r3, r2
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	79fa      	ldrb	r2, [r7, #7]
 8011874:	4905      	ldr	r1, [pc, #20]	; (801188c <disk_status+0x30>)
 8011876:	440a      	add	r2, r1
 8011878:	7a12      	ldrb	r2, [r2, #8]
 801187a:	4610      	mov	r0, r2
 801187c:	4798      	blx	r3
 801187e:	4603      	mov	r3, r0
 8011880:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011882:	7bfb      	ldrb	r3, [r7, #15]
}
 8011884:	4618      	mov	r0, r3
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20019180 	.word	0x20019180

08011890 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	4603      	mov	r3, r0
 8011898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801189a:	2300      	movs	r3, #0
 801189c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801189e:	79fb      	ldrb	r3, [r7, #7]
 80118a0:	4a0d      	ldr	r2, [pc, #52]	; (80118d8 <disk_initialize+0x48>)
 80118a2:	5cd3      	ldrb	r3, [r2, r3]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d111      	bne.n	80118cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80118a8:	79fb      	ldrb	r3, [r7, #7]
 80118aa:	4a0b      	ldr	r2, [pc, #44]	; (80118d8 <disk_initialize+0x48>)
 80118ac:	2101      	movs	r1, #1
 80118ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	4a09      	ldr	r2, [pc, #36]	; (80118d8 <disk_initialize+0x48>)
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	79fa      	ldrb	r2, [r7, #7]
 80118be:	4906      	ldr	r1, [pc, #24]	; (80118d8 <disk_initialize+0x48>)
 80118c0:	440a      	add	r2, r1
 80118c2:	7a12      	ldrb	r2, [r2, #8]
 80118c4:	4610      	mov	r0, r2
 80118c6:	4798      	blx	r3
 80118c8:	4603      	mov	r3, r0
 80118ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3710      	adds	r7, #16
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	20019180 	.word	0x20019180

080118dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118dc:	b590      	push	{r4, r7, lr}
 80118de:	b087      	sub	sp, #28
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	607a      	str	r2, [r7, #4]
 80118e6:	603b      	str	r3, [r7, #0]
 80118e8:	4603      	mov	r3, r0
 80118ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118ec:	7bfb      	ldrb	r3, [r7, #15]
 80118ee:	4a0a      	ldr	r2, [pc, #40]	; (8011918 <disk_read+0x3c>)
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	4413      	add	r3, r2
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	689c      	ldr	r4, [r3, #8]
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
 80118fa:	4a07      	ldr	r2, [pc, #28]	; (8011918 <disk_read+0x3c>)
 80118fc:	4413      	add	r3, r2
 80118fe:	7a18      	ldrb	r0, [r3, #8]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	68b9      	ldr	r1, [r7, #8]
 8011906:	47a0      	blx	r4
 8011908:	4603      	mov	r3, r0
 801190a:	75fb      	strb	r3, [r7, #23]
  return res;
 801190c:	7dfb      	ldrb	r3, [r7, #23]
}
 801190e:	4618      	mov	r0, r3
 8011910:	371c      	adds	r7, #28
 8011912:	46bd      	mov	sp, r7
 8011914:	bd90      	pop	{r4, r7, pc}
 8011916:	bf00      	nop
 8011918:	20019180 	.word	0x20019180

0801191c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801191c:	b590      	push	{r4, r7, lr}
 801191e:	b087      	sub	sp, #28
 8011920:	af00      	add	r7, sp, #0
 8011922:	60b9      	str	r1, [r7, #8]
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	603b      	str	r3, [r7, #0]
 8011928:	4603      	mov	r3, r0
 801192a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801192c:	7bfb      	ldrb	r3, [r7, #15]
 801192e:	4a0a      	ldr	r2, [pc, #40]	; (8011958 <disk_write+0x3c>)
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	68dc      	ldr	r4, [r3, #12]
 8011938:	7bfb      	ldrb	r3, [r7, #15]
 801193a:	4a07      	ldr	r2, [pc, #28]	; (8011958 <disk_write+0x3c>)
 801193c:	4413      	add	r3, r2
 801193e:	7a18      	ldrb	r0, [r3, #8]
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	68b9      	ldr	r1, [r7, #8]
 8011946:	47a0      	blx	r4
 8011948:	4603      	mov	r3, r0
 801194a:	75fb      	strb	r3, [r7, #23]
  return res;
 801194c:	7dfb      	ldrb	r3, [r7, #23]
}
 801194e:	4618      	mov	r0, r3
 8011950:	371c      	adds	r7, #28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
 8011956:	bf00      	nop
 8011958:	20019180 	.word	0x20019180

0801195c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	4603      	mov	r3, r0
 8011964:	603a      	str	r2, [r7, #0]
 8011966:	71fb      	strb	r3, [r7, #7]
 8011968:	460b      	mov	r3, r1
 801196a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801196c:	79fb      	ldrb	r3, [r7, #7]
 801196e:	4a09      	ldr	r2, [pc, #36]	; (8011994 <disk_ioctl+0x38>)
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4413      	add	r3, r2
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	79fa      	ldrb	r2, [r7, #7]
 801197a:	4906      	ldr	r1, [pc, #24]	; (8011994 <disk_ioctl+0x38>)
 801197c:	440a      	add	r2, r1
 801197e:	7a10      	ldrb	r0, [r2, #8]
 8011980:	79b9      	ldrb	r1, [r7, #6]
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	4798      	blx	r3
 8011986:	4603      	mov	r3, r0
 8011988:	73fb      	strb	r3, [r7, #15]
  return res;
 801198a:	7bfb      	ldrb	r3, [r7, #15]
}
 801198c:	4618      	mov	r0, r3
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20019180 	.word	0x20019180

08011998 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011998:	b480      	push	{r7}
 801199a:	b085      	sub	sp, #20
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3301      	adds	r3, #1
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80119a8:	89fb      	ldrh	r3, [r7, #14]
 80119aa:	021b      	lsls	r3, r3, #8
 80119ac:	b21a      	sxth	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	b21b      	sxth	r3, r3
 80119b4:	4313      	orrs	r3, r2
 80119b6:	b21b      	sxth	r3, r3
 80119b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80119ba:	89fb      	ldrh	r3, [r7, #14]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3714      	adds	r7, #20
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80119c8:	b480      	push	{r7}
 80119ca:	b085      	sub	sp, #20
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	3303      	adds	r3, #3
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	021b      	lsls	r3, r3, #8
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	3202      	adds	r2, #2
 80119e0:	7812      	ldrb	r2, [r2, #0]
 80119e2:	4313      	orrs	r3, r2
 80119e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	021b      	lsls	r3, r3, #8
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	3201      	adds	r2, #1
 80119ee:	7812      	ldrb	r2, [r2, #0]
 80119f0:	4313      	orrs	r3, r2
 80119f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	021b      	lsls	r3, r3, #8
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	7812      	ldrb	r2, [r2, #0]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8011a00:	68fb      	ldr	r3, [r7, #12]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3714      	adds	r7, #20
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011a0e:	b480      	push	{r7}
 8011a10:	b083      	sub	sp, #12
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	460b      	mov	r3, r1
 8011a18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	1c5a      	adds	r2, r3, #1
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	887a      	ldrh	r2, [r7, #2]
 8011a22:	b2d2      	uxtb	r2, r2
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	887b      	ldrh	r3, [r7, #2]
 8011a28:	0a1b      	lsrs	r3, r3, #8
 8011a2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	1c5a      	adds	r2, r3, #1
 8011a30:	607a      	str	r2, [r7, #4]
 8011a32:	887a      	ldrh	r2, [r7, #2]
 8011a34:	b2d2      	uxtb	r2, r2
 8011a36:	701a      	strb	r2, [r3, #0]
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	607a      	str	r2, [r7, #4]
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	b2d2      	uxtb	r2, r2
 8011a58:	701a      	strb	r2, [r3, #0]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	0a1b      	lsrs	r3, r3, #8
 8011a5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	1c5a      	adds	r2, r3, #1
 8011a64:	607a      	str	r2, [r7, #4]
 8011a66:	683a      	ldr	r2, [r7, #0]
 8011a68:	b2d2      	uxtb	r2, r2
 8011a6a:	701a      	strb	r2, [r3, #0]
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	0a1b      	lsrs	r3, r3, #8
 8011a70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	1c5a      	adds	r2, r3, #1
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	683a      	ldr	r2, [r7, #0]
 8011a7a:	b2d2      	uxtb	r2, r2
 8011a7c:	701a      	strb	r2, [r3, #0]
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	0a1b      	lsrs	r3, r3, #8
 8011a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	1c5a      	adds	r2, r3, #1
 8011a88:	607a      	str	r2, [r7, #4]
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	b2d2      	uxtb	r2, r2
 8011a8e:	701a      	strb	r2, [r3, #0]
}
 8011a90:	bf00      	nop
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a9c:	b480      	push	{r7}
 8011a9e:	b087      	sub	sp, #28
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00d      	beq.n	8011ad2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011ab6:	693a      	ldr	r2, [r7, #16]
 8011ab8:	1c53      	adds	r3, r2, #1
 8011aba:	613b      	str	r3, [r7, #16]
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	1c59      	adds	r1, r3, #1
 8011ac0:	6179      	str	r1, [r7, #20]
 8011ac2:	7812      	ldrb	r2, [r2, #0]
 8011ac4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	3b01      	subs	r3, #1
 8011aca:	607b      	str	r3, [r7, #4]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1f1      	bne.n	8011ab6 <mem_cpy+0x1a>
	}
}
 8011ad2:	bf00      	nop
 8011ad4:	371c      	adds	r7, #28
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr

08011ade <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011ade:	b480      	push	{r7}
 8011ae0:	b087      	sub	sp, #28
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	60f8      	str	r0, [r7, #12]
 8011ae6:	60b9      	str	r1, [r7, #8]
 8011ae8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	1c5a      	adds	r2, r3, #1
 8011af2:	617a      	str	r2, [r7, #20]
 8011af4:	68ba      	ldr	r2, [r7, #8]
 8011af6:	b2d2      	uxtb	r2, r2
 8011af8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	607b      	str	r3, [r7, #4]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1f3      	bne.n	8011aee <mem_set+0x10>
}
 8011b06:	bf00      	nop
 8011b08:	bf00      	nop
 8011b0a:	371c      	adds	r7, #28
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011b14:	b480      	push	{r7}
 8011b16:	b089      	sub	sp, #36	; 0x24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	61fb      	str	r3, [r7, #28]
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	1c5a      	adds	r2, r3, #1
 8011b30:	61fa      	str	r2, [r7, #28]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	4619      	mov	r1, r3
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	1c5a      	adds	r2, r3, #1
 8011b3a:	61ba      	str	r2, [r7, #24]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	1acb      	subs	r3, r1, r3
 8011b40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	3b01      	subs	r3, #1
 8011b46:	607b      	str	r3, [r7, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d002      	beq.n	8011b54 <mem_cmp+0x40>
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d0eb      	beq.n	8011b2c <mem_cmp+0x18>

	return r;
 8011b54:	697b      	ldr	r3, [r7, #20]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3724      	adds	r7, #36	; 0x24
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr

08011b62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b62:	b480      	push	{r7}
 8011b64:	b083      	sub	sp, #12
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
 8011b6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b6c:	e002      	b.n	8011b74 <chk_chr+0x12>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	3301      	adds	r3, #1
 8011b72:	607b      	str	r3, [r7, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d005      	beq.n	8011b88 <chk_chr+0x26>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d1f2      	bne.n	8011b6e <chk_chr+0xc>
	return *str;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d009      	beq.n	8011bba <lock_fs+0x22>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	695b      	ldr	r3, [r3, #20]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f003 fcfd 	bl	80155aa <ff_req_grant>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <lock_fs+0x22>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e000      	b.n	8011bbc <lock_fs+0x24>
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00d      	beq.n	8011bf2 <unlock_fs+0x2e>
 8011bd6:	78fb      	ldrb	r3, [r7, #3]
 8011bd8:	2b0c      	cmp	r3, #12
 8011bda:	d00a      	beq.n	8011bf2 <unlock_fs+0x2e>
 8011bdc:	78fb      	ldrb	r3, [r7, #3]
 8011bde:	2b0b      	cmp	r3, #11
 8011be0:	d007      	beq.n	8011bf2 <unlock_fs+0x2e>
 8011be2:	78fb      	ldrb	r3, [r7, #3]
 8011be4:	2b0f      	cmp	r3, #15
 8011be6:	d004      	beq.n	8011bf2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f003 fcf1 	bl	80155d4 <ff_rel_grant>
	}
}
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
	...

08011bfc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b085      	sub	sp, #20
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c06:	2300      	movs	r3, #0
 8011c08:	60bb      	str	r3, [r7, #8]
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	e029      	b.n	8011c64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011c10:	4a27      	ldr	r2, [pc, #156]	; (8011cb0 <chk_lock+0xb4>)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	011b      	lsls	r3, r3, #4
 8011c16:	4413      	add	r3, r2
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d01d      	beq.n	8011c5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011c1e:	4a24      	ldr	r2, [pc, #144]	; (8011cb0 <chk_lock+0xb4>)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	011b      	lsls	r3, r3, #4
 8011c24:	4413      	add	r3, r2
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d116      	bne.n	8011c5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011c30:	4a1f      	ldr	r2, [pc, #124]	; (8011cb0 <chk_lock+0xb4>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	4413      	add	r3, r2
 8011c38:	3304      	adds	r3, #4
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d10c      	bne.n	8011c5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c44:	4a1a      	ldr	r2, [pc, #104]	; (8011cb0 <chk_lock+0xb4>)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	011b      	lsls	r3, r3, #4
 8011c4a:	4413      	add	r3, r2
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d102      	bne.n	8011c5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c58:	e007      	b.n	8011c6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	3301      	adds	r3, #1
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d9d2      	bls.n	8011c10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d109      	bne.n	8011c84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d102      	bne.n	8011c7c <chk_lock+0x80>
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	2b02      	cmp	r3, #2
 8011c7a:	d101      	bne.n	8011c80 <chk_lock+0x84>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	e010      	b.n	8011ca2 <chk_lock+0xa6>
 8011c80:	2312      	movs	r3, #18
 8011c82:	e00e      	b.n	8011ca2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d108      	bne.n	8011c9c <chk_lock+0xa0>
 8011c8a:	4a09      	ldr	r2, [pc, #36]	; (8011cb0 <chk_lock+0xb4>)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	011b      	lsls	r3, r3, #4
 8011c90:	4413      	add	r3, r2
 8011c92:	330c      	adds	r3, #12
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c9a:	d101      	bne.n	8011ca0 <chk_lock+0xa4>
 8011c9c:	2310      	movs	r3, #16
 8011c9e:	e000      	b.n	8011ca2 <chk_lock+0xa6>
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3714      	adds	r7, #20
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	20019160 	.word	0x20019160

08011cb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	607b      	str	r3, [r7, #4]
 8011cbe:	e002      	b.n	8011cc6 <enq_lock+0x12>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	607b      	str	r3, [r7, #4]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d806      	bhi.n	8011cda <enq_lock+0x26>
 8011ccc:	4a09      	ldr	r2, [pc, #36]	; (8011cf4 <enq_lock+0x40>)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	011b      	lsls	r3, r3, #4
 8011cd2:	4413      	add	r3, r2
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d1f2      	bne.n	8011cc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b02      	cmp	r3, #2
 8011cde:	bf14      	ite	ne
 8011ce0:	2301      	movne	r3, #1
 8011ce2:	2300      	moveq	r3, #0
 8011ce4:	b2db      	uxtb	r3, r3
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	370c      	adds	r7, #12
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20019160 	.word	0x20019160

08011cf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011d02:	2300      	movs	r3, #0
 8011d04:	60fb      	str	r3, [r7, #12]
 8011d06:	e01f      	b.n	8011d48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011d08:	4a41      	ldr	r2, [pc, #260]	; (8011e10 <inc_lock+0x118>)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	4413      	add	r3, r2
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d113      	bne.n	8011d42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011d1a:	4a3d      	ldr	r2, [pc, #244]	; (8011e10 <inc_lock+0x118>)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	011b      	lsls	r3, r3, #4
 8011d20:	4413      	add	r3, r2
 8011d22:	3304      	adds	r3, #4
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d109      	bne.n	8011d42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011d2e:	4a38      	ldr	r2, [pc, #224]	; (8011e10 <inc_lock+0x118>)
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	011b      	lsls	r3, r3, #4
 8011d34:	4413      	add	r3, r2
 8011d36:	3308      	adds	r3, #8
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d006      	beq.n	8011d50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	3301      	adds	r3, #1
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d9dc      	bls.n	8011d08 <inc_lock+0x10>
 8011d4e:	e000      	b.n	8011d52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011d50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d132      	bne.n	8011dbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	e002      	b.n	8011d64 <inc_lock+0x6c>
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3301      	adds	r3, #1
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d806      	bhi.n	8011d78 <inc_lock+0x80>
 8011d6a:	4a29      	ldr	r2, [pc, #164]	; (8011e10 <inc_lock+0x118>)
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	011b      	lsls	r3, r3, #4
 8011d70:	4413      	add	r3, r2
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1f2      	bne.n	8011d5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	d101      	bne.n	8011d82 <inc_lock+0x8a>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	e040      	b.n	8011e04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	4922      	ldr	r1, [pc, #136]	; (8011e10 <inc_lock+0x118>)
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	011b      	lsls	r3, r3, #4
 8011d8c:	440b      	add	r3, r1
 8011d8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	689a      	ldr	r2, [r3, #8]
 8011d94:	491e      	ldr	r1, [pc, #120]	; (8011e10 <inc_lock+0x118>)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	011b      	lsls	r3, r3, #4
 8011d9a:	440b      	add	r3, r1
 8011d9c:	3304      	adds	r3, #4
 8011d9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	695a      	ldr	r2, [r3, #20]
 8011da4:	491a      	ldr	r1, [pc, #104]	; (8011e10 <inc_lock+0x118>)
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	440b      	add	r3, r1
 8011dac:	3308      	adds	r3, #8
 8011dae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011db0:	4a17      	ldr	r2, [pc, #92]	; (8011e10 <inc_lock+0x118>)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	4413      	add	r3, r2
 8011db8:	330c      	adds	r3, #12
 8011dba:	2200      	movs	r2, #0
 8011dbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d009      	beq.n	8011dd8 <inc_lock+0xe0>
 8011dc4:	4a12      	ldr	r2, [pc, #72]	; (8011e10 <inc_lock+0x118>)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	4413      	add	r3, r2
 8011dcc:	330c      	adds	r3, #12
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <inc_lock+0xe0>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	e015      	b.n	8011e04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d108      	bne.n	8011df0 <inc_lock+0xf8>
 8011dde:	4a0c      	ldr	r2, [pc, #48]	; (8011e10 <inc_lock+0x118>)
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	4413      	add	r3, r2
 8011de6:	330c      	adds	r3, #12
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	3301      	adds	r3, #1
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	e001      	b.n	8011df4 <inc_lock+0xfc>
 8011df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011df4:	4906      	ldr	r1, [pc, #24]	; (8011e10 <inc_lock+0x118>)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	011b      	lsls	r3, r3, #4
 8011dfa:	440b      	add	r3, r1
 8011dfc:	330c      	adds	r3, #12
 8011dfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	3301      	adds	r3, #1
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr
 8011e10:	20019160 	.word	0x20019160

08011e14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b085      	sub	sp, #20
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	3b01      	subs	r3, #1
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d825      	bhi.n	8011e74 <dec_lock+0x60>
		n = Files[i].ctr;
 8011e28:	4a17      	ldr	r2, [pc, #92]	; (8011e88 <dec_lock+0x74>)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	011b      	lsls	r3, r3, #4
 8011e2e:	4413      	add	r3, r2
 8011e30:	330c      	adds	r3, #12
 8011e32:	881b      	ldrh	r3, [r3, #0]
 8011e34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011e36:	89fb      	ldrh	r3, [r7, #14]
 8011e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e3c:	d101      	bne.n	8011e42 <dec_lock+0x2e>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011e42:	89fb      	ldrh	r3, [r7, #14]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d002      	beq.n	8011e4e <dec_lock+0x3a>
 8011e48:	89fb      	ldrh	r3, [r7, #14]
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011e4e:	4a0e      	ldr	r2, [pc, #56]	; (8011e88 <dec_lock+0x74>)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	011b      	lsls	r3, r3, #4
 8011e54:	4413      	add	r3, r2
 8011e56:	330c      	adds	r3, #12
 8011e58:	89fa      	ldrh	r2, [r7, #14]
 8011e5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011e5c:	89fb      	ldrh	r3, [r7, #14]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d105      	bne.n	8011e6e <dec_lock+0x5a>
 8011e62:	4a09      	ldr	r2, [pc, #36]	; (8011e88 <dec_lock+0x74>)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	011b      	lsls	r3, r3, #4
 8011e68:	4413      	add	r3, r2
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	737b      	strb	r3, [r7, #13]
 8011e72:	e001      	b.n	8011e78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e74:	2302      	movs	r3, #2
 8011e76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e78:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3714      	adds	r7, #20
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	20019160 	.word	0x20019160

08011e8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e94:	2300      	movs	r3, #0
 8011e96:	60fb      	str	r3, [r7, #12]
 8011e98:	e010      	b.n	8011ebc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e9a:	4a0d      	ldr	r2, [pc, #52]	; (8011ed0 <clear_lock+0x44>)
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	011b      	lsls	r3, r3, #4
 8011ea0:	4413      	add	r3, r2
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d105      	bne.n	8011eb6 <clear_lock+0x2a>
 8011eaa:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <clear_lock+0x44>)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	011b      	lsls	r3, r3, #4
 8011eb0:	4413      	add	r3, r2
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	60fb      	str	r3, [r7, #12]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d9eb      	bls.n	8011e9a <clear_lock+0xe>
	}
}
 8011ec2:	bf00      	nop
 8011ec4:	bf00      	nop
 8011ec6:	3714      	adds	r7, #20
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr
 8011ed0:	20019160 	.word	0x20019160

08011ed4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011edc:	2300      	movs	r3, #0
 8011ede:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	78db      	ldrb	r3, [r3, #3]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d034      	beq.n	8011f52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	7858      	ldrb	r0, [r3, #1]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011ef8:	2301      	movs	r3, #1
 8011efa:	697a      	ldr	r2, [r7, #20]
 8011efc:	f7ff fd0e 	bl	801191c <disk_write>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d002      	beq.n	8011f0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011f06:	2301      	movs	r3, #1
 8011f08:	73fb      	strb	r3, [r7, #15]
 8011f0a:	e022      	b.n	8011f52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f16:	697a      	ldr	r2, [r7, #20]
 8011f18:	1ad2      	subs	r2, r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d217      	bcs.n	8011f52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	789b      	ldrb	r3, [r3, #2]
 8011f26:	613b      	str	r3, [r7, #16]
 8011f28:	e010      	b.n	8011f4c <sync_window+0x78>
					wsect += fs->fsize;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f2e:	697a      	ldr	r2, [r7, #20]
 8011f30:	4413      	add	r3, r2
 8011f32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	7858      	ldrb	r0, [r3, #1]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011f3e:	2301      	movs	r3, #1
 8011f40:	697a      	ldr	r2, [r7, #20]
 8011f42:	f7ff fceb 	bl	801191c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	613b      	str	r3, [r7, #16]
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d8eb      	bhi.n	8011f2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3718      	adds	r7, #24
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f6e:	683a      	ldr	r2, [r7, #0]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d01b      	beq.n	8011fac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff ffad 	bl	8011ed4 <sync_window>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f7e:	7bfb      	ldrb	r3, [r7, #15]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d113      	bne.n	8011fac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	7858      	ldrb	r0, [r3, #1]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011f8e:	2301      	movs	r3, #1
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	f7ff fca3 	bl	80118dc <disk_read>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d004      	beq.n	8011fa6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3710      	adds	r7, #16
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
	...

08011fb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7ff ff87 	bl	8011ed4 <sync_window>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011fca:	7bfb      	ldrb	r3, [r7, #15]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d159      	bne.n	8012084 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d149      	bne.n	801206c <sync_fs+0xb4>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	791b      	ldrb	r3, [r3, #4]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d145      	bne.n	801206c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	899b      	ldrh	r3, [r3, #12]
 8011fea:	461a      	mov	r2, r3
 8011fec:	2100      	movs	r1, #0
 8011fee:	f7ff fd76 	bl	8011ade <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	333c      	adds	r3, #60	; 0x3c
 8011ff6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ffa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7ff fd05 	bl	8011a0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	333c      	adds	r3, #60	; 0x3c
 8012008:	4921      	ldr	r1, [pc, #132]	; (8012090 <sync_fs+0xd8>)
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fd1a 	bl	8011a44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	333c      	adds	r3, #60	; 0x3c
 8012014:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012018:	491e      	ldr	r1, [pc, #120]	; (8012094 <sync_fs+0xdc>)
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fd12 	bl	8011a44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	333c      	adds	r3, #60	; 0x3c
 8012024:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	4619      	mov	r1, r3
 801202e:	4610      	mov	r0, r2
 8012030:	f7ff fd08 	bl	8011a44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	333c      	adds	r3, #60	; 0x3c
 8012038:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	699b      	ldr	r3, [r3, #24]
 8012040:	4619      	mov	r1, r3
 8012042:	4610      	mov	r0, r2
 8012044:	f7ff fcfe 	bl	8011a44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204c:	1c5a      	adds	r2, r3, #1
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	7858      	ldrb	r0, [r3, #1]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012060:	2301      	movs	r3, #1
 8012062:	f7ff fc5b 	bl	801191c <disk_write>
			fs->fsi_flag = 0;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	785b      	ldrb	r3, [r3, #1]
 8012070:	2200      	movs	r2, #0
 8012072:	2100      	movs	r1, #0
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff fc71 	bl	801195c <disk_ioctl>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d001      	beq.n	8012084 <sync_fs+0xcc>
 8012080:	2301      	movs	r3, #1
 8012082:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012084:	7bfb      	ldrb	r3, [r7, #15]
}
 8012086:	4618      	mov	r0, r3
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	41615252 	.word	0x41615252
 8012094:	61417272 	.word	0x61417272

08012098 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	3b02      	subs	r3, #2
 80120a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6a1b      	ldr	r3, [r3, #32]
 80120ac:	3b02      	subs	r3, #2
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d301      	bcc.n	80120b8 <clust2sect+0x20>
 80120b4:	2300      	movs	r3, #0
 80120b6:	e008      	b.n	80120ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	895b      	ldrh	r3, [r3, #10]
 80120bc:	461a      	mov	r2, r3
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	fb03 f202 	mul.w	r2, r3, r2
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c8:	4413      	add	r3, r2
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	370c      	adds	r7, #12
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr

080120d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b086      	sub	sp, #24
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d904      	bls.n	80120f6 <get_fat+0x20>
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	6a1b      	ldr	r3, [r3, #32]
 80120f0:	683a      	ldr	r2, [r7, #0]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d302      	bcc.n	80120fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80120f6:	2301      	movs	r3, #1
 80120f8:	617b      	str	r3, [r7, #20]
 80120fa:	e0bb      	b.n	8012274 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80120fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012100:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b03      	cmp	r3, #3
 8012108:	f000 8083 	beq.w	8012212 <get_fat+0x13c>
 801210c:	2b03      	cmp	r3, #3
 801210e:	f300 80a7 	bgt.w	8012260 <get_fat+0x18a>
 8012112:	2b01      	cmp	r3, #1
 8012114:	d002      	beq.n	801211c <get_fat+0x46>
 8012116:	2b02      	cmp	r3, #2
 8012118:	d056      	beq.n	80121c8 <get_fat+0xf2>
 801211a:	e0a1      	b.n	8012260 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	60fb      	str	r3, [r7, #12]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	085b      	lsrs	r3, r3, #1
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	4413      	add	r3, r2
 8012128:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	899b      	ldrh	r3, [r3, #12]
 8012132:	4619      	mov	r1, r3
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	fbb3 f3f1 	udiv	r3, r3, r1
 801213a:	4413      	add	r3, r2
 801213c:	4619      	mov	r1, r3
 801213e:	6938      	ldr	r0, [r7, #16]
 8012140:	f7ff ff0c 	bl	8011f5c <move_window>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	f040 808d 	bne.w	8012266 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	60fa      	str	r2, [r7, #12]
 8012152:	693a      	ldr	r2, [r7, #16]
 8012154:	8992      	ldrh	r2, [r2, #12]
 8012156:	fbb3 f1f2 	udiv	r1, r3, r2
 801215a:	fb01 f202 	mul.w	r2, r1, r2
 801215e:	1a9b      	subs	r3, r3, r2
 8012160:	693a      	ldr	r2, [r7, #16]
 8012162:	4413      	add	r3, r2
 8012164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012168:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	899b      	ldrh	r3, [r3, #12]
 8012172:	4619      	mov	r1, r3
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	fbb3 f3f1 	udiv	r3, r3, r1
 801217a:	4413      	add	r3, r2
 801217c:	4619      	mov	r1, r3
 801217e:	6938      	ldr	r0, [r7, #16]
 8012180:	f7ff feec 	bl	8011f5c <move_window>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d16f      	bne.n	801226a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	899b      	ldrh	r3, [r3, #12]
 801218e:	461a      	mov	r2, r3
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	fbb3 f1f2 	udiv	r1, r3, r2
 8012196:	fb01 f202 	mul.w	r2, r1, r2
 801219a:	1a9b      	subs	r3, r3, r2
 801219c:	693a      	ldr	r2, [r7, #16]
 801219e:	4413      	add	r3, r2
 80121a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80121a4:	021b      	lsls	r3, r3, #8
 80121a6:	461a      	mov	r2, r3
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	4313      	orrs	r3, r2
 80121ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <get_fat+0xe8>
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	091b      	lsrs	r3, r3, #4
 80121bc:	e002      	b.n	80121c4 <get_fat+0xee>
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80121c4:	617b      	str	r3, [r7, #20]
			break;
 80121c6:	e055      	b.n	8012274 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	085b      	lsrs	r3, r3, #1
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	4619      	mov	r1, r3
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80121dc:	4413      	add	r3, r2
 80121de:	4619      	mov	r1, r3
 80121e0:	6938      	ldr	r0, [r7, #16]
 80121e2:	f7ff febb 	bl	8011f5c <move_window>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d140      	bne.n	801226e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	693a      	ldr	r2, [r7, #16]
 80121f8:	8992      	ldrh	r2, [r2, #12]
 80121fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80121fe:	fb00 f202 	mul.w	r2, r0, r2
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	440b      	add	r3, r1
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff fbc6 	bl	8011998 <ld_word>
 801220c:	4603      	mov	r3, r0
 801220e:	617b      	str	r3, [r7, #20]
			break;
 8012210:	e030      	b.n	8012274 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	899b      	ldrh	r3, [r3, #12]
 801221a:	089b      	lsrs	r3, r3, #2
 801221c:	b29b      	uxth	r3, r3
 801221e:	4619      	mov	r1, r3
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	fbb3 f3f1 	udiv	r3, r3, r1
 8012226:	4413      	add	r3, r2
 8012228:	4619      	mov	r1, r3
 801222a:	6938      	ldr	r0, [r7, #16]
 801222c:	f7ff fe96 	bl	8011f5c <move_window>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d11d      	bne.n	8012272 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	693a      	ldr	r2, [r7, #16]
 8012242:	8992      	ldrh	r2, [r2, #12]
 8012244:	fbb3 f0f2 	udiv	r0, r3, r2
 8012248:	fb00 f202 	mul.w	r2, r0, r2
 801224c:	1a9b      	subs	r3, r3, r2
 801224e:	440b      	add	r3, r1
 8012250:	4618      	mov	r0, r3
 8012252:	f7ff fbb9 	bl	80119c8 <ld_dword>
 8012256:	4603      	mov	r3, r0
 8012258:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801225c:	617b      	str	r3, [r7, #20]
			break;
 801225e:	e009      	b.n	8012274 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012260:	2301      	movs	r3, #1
 8012262:	617b      	str	r3, [r7, #20]
 8012264:	e006      	b.n	8012274 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012266:	bf00      	nop
 8012268:	e004      	b.n	8012274 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801226a:	bf00      	nop
 801226c:	e002      	b.n	8012274 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801226e:	bf00      	nop
 8012270:	e000      	b.n	8012274 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012272:	bf00      	nop
		}
	}

	return val;
 8012274:	697b      	ldr	r3, [r7, #20]
}
 8012276:	4618      	mov	r0, r3
 8012278:	3718      	adds	r7, #24
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801227e:	b590      	push	{r4, r7, lr}
 8012280:	b089      	sub	sp, #36	; 0x24
 8012282:	af00      	add	r7, sp, #0
 8012284:	60f8      	str	r0, [r7, #12]
 8012286:	60b9      	str	r1, [r7, #8]
 8012288:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801228a:	2302      	movs	r3, #2
 801228c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	2b01      	cmp	r3, #1
 8012292:	f240 8109 	bls.w	80124a8 <put_fat+0x22a>
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	6a1b      	ldr	r3, [r3, #32]
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	429a      	cmp	r2, r3
 801229e:	f080 8103 	bcs.w	80124a8 <put_fat+0x22a>
		switch (fs->fs_type) {
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	2b03      	cmp	r3, #3
 80122a8:	f000 80b6 	beq.w	8012418 <put_fat+0x19a>
 80122ac:	2b03      	cmp	r3, #3
 80122ae:	f300 80fb 	bgt.w	80124a8 <put_fat+0x22a>
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d003      	beq.n	80122be <put_fat+0x40>
 80122b6:	2b02      	cmp	r3, #2
 80122b8:	f000 8083 	beq.w	80123c2 <put_fat+0x144>
 80122bc:	e0f4      	b.n	80124a8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	61bb      	str	r3, [r7, #24]
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	085b      	lsrs	r3, r3, #1
 80122c6:	69ba      	ldr	r2, [r7, #24]
 80122c8:	4413      	add	r3, r2
 80122ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	899b      	ldrh	r3, [r3, #12]
 80122d4:	4619      	mov	r1, r3
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80122dc:	4413      	add	r3, r2
 80122de:	4619      	mov	r1, r3
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7ff fe3b 	bl	8011f5c <move_window>
 80122e6:	4603      	mov	r3, r0
 80122e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122ea:	7ffb      	ldrb	r3, [r7, #31]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f040 80d4 	bne.w	801249a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	1c5a      	adds	r2, r3, #1
 80122fc:	61ba      	str	r2, [r7, #24]
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	8992      	ldrh	r2, [r2, #12]
 8012302:	fbb3 f0f2 	udiv	r0, r3, r2
 8012306:	fb00 f202 	mul.w	r2, r0, r2
 801230a:	1a9b      	subs	r3, r3, r2
 801230c:	440b      	add	r3, r1
 801230e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	f003 0301 	and.w	r3, r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00d      	beq.n	8012336 <put_fat+0xb8>
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	b25b      	sxtb	r3, r3
 8012320:	f003 030f 	and.w	r3, r3, #15
 8012324:	b25a      	sxtb	r2, r3
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	b2db      	uxtb	r3, r3
 801232a:	011b      	lsls	r3, r3, #4
 801232c:	b25b      	sxtb	r3, r3
 801232e:	4313      	orrs	r3, r2
 8012330:	b25b      	sxtb	r3, r3
 8012332:	b2db      	uxtb	r3, r3
 8012334:	e001      	b.n	801233a <put_fat+0xbc>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	b2db      	uxtb	r3, r3
 801233a:	697a      	ldr	r2, [r7, #20]
 801233c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2201      	movs	r2, #1
 8012342:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	899b      	ldrh	r3, [r3, #12]
 801234c:	4619      	mov	r1, r3
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	fbb3 f3f1 	udiv	r3, r3, r1
 8012354:	4413      	add	r3, r2
 8012356:	4619      	mov	r1, r3
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	f7ff fdff 	bl	8011f5c <move_window>
 801235e:	4603      	mov	r3, r0
 8012360:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012362:	7ffb      	ldrb	r3, [r7, #31]
 8012364:	2b00      	cmp	r3, #0
 8012366:	f040 809a 	bne.w	801249e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	899b      	ldrh	r3, [r3, #12]
 8012374:	461a      	mov	r2, r3
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	fbb3 f0f2 	udiv	r0, r3, r2
 801237c:	fb00 f202 	mul.w	r2, r0, r2
 8012380:	1a9b      	subs	r3, r3, r2
 8012382:	440b      	add	r3, r1
 8012384:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	f003 0301 	and.w	r3, r3, #1
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <put_fat+0x11a>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	091b      	lsrs	r3, r3, #4
 8012394:	b2db      	uxtb	r3, r3
 8012396:	e00e      	b.n	80123b6 <put_fat+0x138>
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	b25b      	sxtb	r3, r3
 801239e:	f023 030f 	bic.w	r3, r3, #15
 80123a2:	b25a      	sxtb	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	0a1b      	lsrs	r3, r3, #8
 80123a8:	b25b      	sxtb	r3, r3
 80123aa:	f003 030f 	and.w	r3, r3, #15
 80123ae:	b25b      	sxtb	r3, r3
 80123b0:	4313      	orrs	r3, r2
 80123b2:	b25b      	sxtb	r3, r3
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2201      	movs	r2, #1
 80123be:	70da      	strb	r2, [r3, #3]
			break;
 80123c0:	e072      	b.n	80124a8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	899b      	ldrh	r3, [r3, #12]
 80123ca:	085b      	lsrs	r3, r3, #1
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	4619      	mov	r1, r3
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80123d6:	4413      	add	r3, r2
 80123d8:	4619      	mov	r1, r3
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f7ff fdbe 	bl	8011f5c <move_window>
 80123e0:	4603      	mov	r3, r0
 80123e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80123e4:	7ffb      	ldrb	r3, [r7, #31]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d15b      	bne.n	80124a2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	005b      	lsls	r3, r3, #1
 80123f4:	68fa      	ldr	r2, [r7, #12]
 80123f6:	8992      	ldrh	r2, [r2, #12]
 80123f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80123fc:	fb00 f202 	mul.w	r2, r0, r2
 8012400:	1a9b      	subs	r3, r3, r2
 8012402:	440b      	add	r3, r1
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	b292      	uxth	r2, r2
 8012408:	4611      	mov	r1, r2
 801240a:	4618      	mov	r0, r3
 801240c:	f7ff faff 	bl	8011a0e <st_word>
			fs->wflag = 1;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2201      	movs	r2, #1
 8012414:	70da      	strb	r2, [r3, #3]
			break;
 8012416:	e047      	b.n	80124a8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	899b      	ldrh	r3, [r3, #12]
 8012420:	089b      	lsrs	r3, r3, #2
 8012422:	b29b      	uxth	r3, r3
 8012424:	4619      	mov	r1, r3
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	fbb3 f3f1 	udiv	r3, r3, r1
 801242c:	4413      	add	r3, r2
 801242e:	4619      	mov	r1, r3
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f7ff fd93 	bl	8011f5c <move_window>
 8012436:	4603      	mov	r3, r0
 8012438:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801243a:	7ffb      	ldrb	r3, [r7, #31]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d132      	bne.n	80124a6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	8992      	ldrh	r2, [r2, #12]
 8012454:	fbb3 f0f2 	udiv	r0, r3, r2
 8012458:	fb00 f202 	mul.w	r2, r0, r2
 801245c:	1a9b      	subs	r3, r3, r2
 801245e:	440b      	add	r3, r1
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff fab1 	bl	80119c8 <ld_dword>
 8012466:	4603      	mov	r3, r0
 8012468:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801246c:	4323      	orrs	r3, r4
 801246e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	68fa      	ldr	r2, [r7, #12]
 801247c:	8992      	ldrh	r2, [r2, #12]
 801247e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012482:	fb00 f202 	mul.w	r2, r0, r2
 8012486:	1a9b      	subs	r3, r3, r2
 8012488:	440b      	add	r3, r1
 801248a:	6879      	ldr	r1, [r7, #4]
 801248c:	4618      	mov	r0, r3
 801248e:	f7ff fad9 	bl	8011a44 <st_dword>
			fs->wflag = 1;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2201      	movs	r2, #1
 8012496:	70da      	strb	r2, [r3, #3]
			break;
 8012498:	e006      	b.n	80124a8 <put_fat+0x22a>
			if (res != FR_OK) break;
 801249a:	bf00      	nop
 801249c:	e004      	b.n	80124a8 <put_fat+0x22a>
			if (res != FR_OK) break;
 801249e:	bf00      	nop
 80124a0:	e002      	b.n	80124a8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80124a2:	bf00      	nop
 80124a4:	e000      	b.n	80124a8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80124a6:	bf00      	nop
		}
	}
	return res;
 80124a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3724      	adds	r7, #36	; 0x24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd90      	pop	{r4, r7, pc}

080124b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b088      	sub	sp, #32
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	60f8      	str	r0, [r7, #12]
 80124ba:	60b9      	str	r1, [r7, #8]
 80124bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80124be:	2300      	movs	r3, #0
 80124c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d904      	bls.n	80124d8 <remove_chain+0x26>
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	6a1b      	ldr	r3, [r3, #32]
 80124d2:	68ba      	ldr	r2, [r7, #8]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d301      	bcc.n	80124dc <remove_chain+0x2a>
 80124d8:	2302      	movs	r3, #2
 80124da:	e04b      	b.n	8012574 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00c      	beq.n	80124fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80124e2:	f04f 32ff 	mov.w	r2, #4294967295
 80124e6:	6879      	ldr	r1, [r7, #4]
 80124e8:	69b8      	ldr	r0, [r7, #24]
 80124ea:	f7ff fec8 	bl	801227e <put_fat>
 80124ee:	4603      	mov	r3, r0
 80124f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80124f2:	7ffb      	ldrb	r3, [r7, #31]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d001      	beq.n	80124fc <remove_chain+0x4a>
 80124f8:	7ffb      	ldrb	r3, [r7, #31]
 80124fa:	e03b      	b.n	8012574 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ff fde9 	bl	80120d6 <get_fat>
 8012504:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d031      	beq.n	8012570 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d101      	bne.n	8012516 <remove_chain+0x64>
 8012512:	2302      	movs	r3, #2
 8012514:	e02e      	b.n	8012574 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251c:	d101      	bne.n	8012522 <remove_chain+0x70>
 801251e:	2301      	movs	r3, #1
 8012520:	e028      	b.n	8012574 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012522:	2200      	movs	r2, #0
 8012524:	68b9      	ldr	r1, [r7, #8]
 8012526:	69b8      	ldr	r0, [r7, #24]
 8012528:	f7ff fea9 	bl	801227e <put_fat>
 801252c:	4603      	mov	r3, r0
 801252e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012530:	7ffb      	ldrb	r3, [r7, #31]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d001      	beq.n	801253a <remove_chain+0x88>
 8012536:	7ffb      	ldrb	r3, [r7, #31]
 8012538:	e01c      	b.n	8012574 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	69da      	ldr	r2, [r3, #28]
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	6a1b      	ldr	r3, [r3, #32]
 8012542:	3b02      	subs	r3, #2
 8012544:	429a      	cmp	r2, r3
 8012546:	d20b      	bcs.n	8012560 <remove_chain+0xae>
			fs->free_clst++;
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	69db      	ldr	r3, [r3, #28]
 801254c:	1c5a      	adds	r2, r3, #1
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	791b      	ldrb	r3, [r3, #4]
 8012556:	f043 0301 	orr.w	r3, r3, #1
 801255a:	b2da      	uxtb	r2, r3
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	6a1b      	ldr	r3, [r3, #32]
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	429a      	cmp	r2, r3
 801256c:	d3c6      	bcc.n	80124fc <remove_chain+0x4a>
 801256e:	e000      	b.n	8012572 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012570:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d10d      	bne.n	80125ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	699b      	ldr	r3, [r3, #24]
 8012596:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d004      	beq.n	80125a8 <create_chain+0x2c>
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	6a1b      	ldr	r3, [r3, #32]
 80125a2:	69ba      	ldr	r2, [r7, #24]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d31b      	bcc.n	80125e0 <create_chain+0x64>
 80125a8:	2301      	movs	r3, #1
 80125aa:	61bb      	str	r3, [r7, #24]
 80125ac:	e018      	b.n	80125e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7ff fd90 	bl	80120d6 <get_fat>
 80125b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d801      	bhi.n	80125c2 <create_chain+0x46>
 80125be:	2301      	movs	r3, #1
 80125c0:	e070      	b.n	80126a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c8:	d101      	bne.n	80125ce <create_chain+0x52>
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	e06a      	b.n	80126a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d201      	bcs.n	80125dc <create_chain+0x60>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	e063      	b.n	80126a4 <create_chain+0x128>
		scl = clst;
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	3301      	adds	r3, #1
 80125e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	6a1b      	ldr	r3, [r3, #32]
 80125ee:	69fa      	ldr	r2, [r7, #28]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d307      	bcc.n	8012604 <create_chain+0x88>
				ncl = 2;
 80125f4:	2302      	movs	r3, #2
 80125f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80125f8:	69fa      	ldr	r2, [r7, #28]
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d901      	bls.n	8012604 <create_chain+0x88>
 8012600:	2300      	movs	r3, #0
 8012602:	e04f      	b.n	80126a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012604:	69f9      	ldr	r1, [r7, #28]
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7ff fd65 	bl	80120d6 <get_fat>
 801260c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00e      	beq.n	8012632 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b01      	cmp	r3, #1
 8012618:	d003      	beq.n	8012622 <create_chain+0xa6>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012620:	d101      	bne.n	8012626 <create_chain+0xaa>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	e03e      	b.n	80126a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012626:	69fa      	ldr	r2, [r7, #28]
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	429a      	cmp	r2, r3
 801262c:	d1da      	bne.n	80125e4 <create_chain+0x68>
 801262e:	2300      	movs	r3, #0
 8012630:	e038      	b.n	80126a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012632:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012634:	f04f 32ff 	mov.w	r2, #4294967295
 8012638:	69f9      	ldr	r1, [r7, #28]
 801263a:	6938      	ldr	r0, [r7, #16]
 801263c:	f7ff fe1f 	bl	801227e <put_fat>
 8012640:	4603      	mov	r3, r0
 8012642:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012644:	7dfb      	ldrb	r3, [r7, #23]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d109      	bne.n	801265e <create_chain+0xe2>
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d006      	beq.n	801265e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012650:	69fa      	ldr	r2, [r7, #28]
 8012652:	6839      	ldr	r1, [r7, #0]
 8012654:	6938      	ldr	r0, [r7, #16]
 8012656:	f7ff fe12 	bl	801227e <put_fat>
 801265a:	4603      	mov	r3, r0
 801265c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801265e:	7dfb      	ldrb	r3, [r7, #23]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d116      	bne.n	8012692 <create_chain+0x116>
		fs->last_clst = ncl;
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	69fa      	ldr	r2, [r7, #28]
 8012668:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	69da      	ldr	r2, [r3, #28]
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	6a1b      	ldr	r3, [r3, #32]
 8012672:	3b02      	subs	r3, #2
 8012674:	429a      	cmp	r2, r3
 8012676:	d804      	bhi.n	8012682 <create_chain+0x106>
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	69db      	ldr	r3, [r3, #28]
 801267c:	1e5a      	subs	r2, r3, #1
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	791b      	ldrb	r3, [r3, #4]
 8012686:	f043 0301 	orr.w	r3, r3, #1
 801268a:	b2da      	uxtb	r2, r3
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	711a      	strb	r2, [r3, #4]
 8012690:	e007      	b.n	80126a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012692:	7dfb      	ldrb	r3, [r7, #23]
 8012694:	2b01      	cmp	r3, #1
 8012696:	d102      	bne.n	801269e <create_chain+0x122>
 8012698:	f04f 33ff 	mov.w	r3, #4294967295
 801269c:	e000      	b.n	80126a0 <create_chain+0x124>
 801269e:	2301      	movs	r3, #1
 80126a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80126a2:	69fb      	ldr	r3, [r7, #28]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3720      	adds	r7, #32
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b087      	sub	sp, #28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c0:	3304      	adds	r3, #4
 80126c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	899b      	ldrh	r3, [r3, #12]
 80126c8:	461a      	mov	r2, r3
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	8952      	ldrh	r2, [r2, #10]
 80126d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80126d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	1d1a      	adds	r2, r3, #4
 80126de:	613a      	str	r2, [r7, #16]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <clmt_clust+0x42>
 80126ea:	2300      	movs	r3, #0
 80126ec:	e010      	b.n	8012710 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80126ee:	697a      	ldr	r2, [r7, #20]
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d307      	bcc.n	8012706 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80126f6:	697a      	ldr	r2, [r7, #20]
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	3304      	adds	r3, #4
 8012702:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012704:	e7e9      	b.n	80126da <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012706:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	4413      	add	r3, r2
}
 8012710:	4618      	mov	r0, r3
 8012712:	371c      	adds	r7, #28
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012732:	d204      	bcs.n	801273e <dir_sdi+0x22>
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	f003 031f 	and.w	r3, r3, #31
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <dir_sdi+0x26>
		return FR_INT_ERR;
 801273e:	2302      	movs	r3, #2
 8012740:	e071      	b.n	8012826 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	683a      	ldr	r2, [r7, #0]
 8012746:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d106      	bne.n	8012762 <dir_sdi+0x46>
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	2b02      	cmp	r3, #2
 801275a:	d902      	bls.n	8012762 <dir_sdi+0x46>
		clst = fs->dirbase;
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012760:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10c      	bne.n	8012782 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	095b      	lsrs	r3, r3, #5
 801276c:	693a      	ldr	r2, [r7, #16]
 801276e:	8912      	ldrh	r2, [r2, #8]
 8012770:	4293      	cmp	r3, r2
 8012772:	d301      	bcc.n	8012778 <dir_sdi+0x5c>
 8012774:	2302      	movs	r3, #2
 8012776:	e056      	b.n	8012826 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	61da      	str	r2, [r3, #28]
 8012780:	e02d      	b.n	80127de <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	895b      	ldrh	r3, [r3, #10]
 8012786:	461a      	mov	r2, r3
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	899b      	ldrh	r3, [r3, #12]
 801278c:	fb02 f303 	mul.w	r3, r2, r3
 8012790:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012792:	e019      	b.n	80127c8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6979      	ldr	r1, [r7, #20]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff fc9c 	bl	80120d6 <get_fat>
 801279e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a6:	d101      	bne.n	80127ac <dir_sdi+0x90>
 80127a8:	2301      	movs	r3, #1
 80127aa:	e03c      	b.n	8012826 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d904      	bls.n	80127bc <dir_sdi+0xa0>
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	6a1b      	ldr	r3, [r3, #32]
 80127b6:	697a      	ldr	r2, [r7, #20]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d301      	bcc.n	80127c0 <dir_sdi+0xa4>
 80127bc:	2302      	movs	r3, #2
 80127be:	e032      	b.n	8012826 <dir_sdi+0x10a>
			ofs -= csz;
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80127c8:	683a      	ldr	r2, [r7, #0]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d2e1      	bcs.n	8012794 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80127d0:	6979      	ldr	r1, [r7, #20]
 80127d2:	6938      	ldr	r0, [r7, #16]
 80127d4:	f7ff fc60 	bl	8012098 <clust2sect>
 80127d8:	4602      	mov	r2, r0
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	697a      	ldr	r2, [r7, #20]
 80127e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	69db      	ldr	r3, [r3, #28]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <dir_sdi+0xd4>
 80127ec:	2302      	movs	r3, #2
 80127ee:	e01a      	b.n	8012826 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	69da      	ldr	r2, [r3, #28]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	899b      	ldrh	r3, [r3, #12]
 80127f8:	4619      	mov	r1, r3
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012800:	441a      	add	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	899b      	ldrh	r3, [r3, #12]
 8012810:	461a      	mov	r2, r3
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	fbb3 f0f2 	udiv	r0, r3, r2
 8012818:	fb00 f202 	mul.w	r2, r0, r2
 801281c:	1a9b      	subs	r3, r3, r2
 801281e:	18ca      	adds	r2, r1, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801282e:	b580      	push	{r7, lr}
 8012830:	b086      	sub	sp, #24
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	3320      	adds	r3, #32
 8012844:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	69db      	ldr	r3, [r3, #28]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d003      	beq.n	8012856 <dir_next+0x28>
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012854:	d301      	bcc.n	801285a <dir_next+0x2c>
 8012856:	2304      	movs	r3, #4
 8012858:	e0bb      	b.n	80129d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	899b      	ldrh	r3, [r3, #12]
 801285e:	461a      	mov	r2, r3
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	fbb3 f1f2 	udiv	r1, r3, r2
 8012866:	fb01 f202 	mul.w	r2, r1, r2
 801286a:	1a9b      	subs	r3, r3, r2
 801286c:	2b00      	cmp	r3, #0
 801286e:	f040 809d 	bne.w	80129ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	69db      	ldr	r3, [r3, #28]
 8012876:	1c5a      	adds	r2, r3, #1
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d10b      	bne.n	801289c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	095b      	lsrs	r3, r3, #5
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	8912      	ldrh	r2, [r2, #8]
 801288c:	4293      	cmp	r3, r2
 801288e:	f0c0 808d 	bcc.w	80129ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	61da      	str	r2, [r3, #28]
 8012898:	2304      	movs	r3, #4
 801289a:	e09a      	b.n	80129d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	899b      	ldrh	r3, [r3, #12]
 80128a0:	461a      	mov	r2, r3
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	8952      	ldrh	r2, [r2, #10]
 80128ac:	3a01      	subs	r2, #1
 80128ae:	4013      	ands	r3, r2
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d17b      	bne.n	80129ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	699b      	ldr	r3, [r3, #24]
 80128ba:	4619      	mov	r1, r3
 80128bc:	4610      	mov	r0, r2
 80128be:	f7ff fc0a 	bl	80120d6 <get_fat>
 80128c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d801      	bhi.n	80128ce <dir_next+0xa0>
 80128ca:	2302      	movs	r3, #2
 80128cc:	e081      	b.n	80129d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d4:	d101      	bne.n	80128da <dir_next+0xac>
 80128d6:	2301      	movs	r3, #1
 80128d8:	e07b      	b.n	80129d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d359      	bcc.n	8012998 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d104      	bne.n	80128f4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	61da      	str	r2, [r3, #28]
 80128f0:	2304      	movs	r3, #4
 80128f2:	e06e      	b.n	80129d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	4619      	mov	r1, r3
 80128fc:	4610      	mov	r0, r2
 80128fe:	f7ff fe3d 	bl	801257c <create_chain>
 8012902:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <dir_next+0xe0>
 801290a:	2307      	movs	r3, #7
 801290c:	e061      	b.n	80129d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	2b01      	cmp	r3, #1
 8012912:	d101      	bne.n	8012918 <dir_next+0xea>
 8012914:	2302      	movs	r3, #2
 8012916:	e05c      	b.n	80129d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801291e:	d101      	bne.n	8012924 <dir_next+0xf6>
 8012920:	2301      	movs	r3, #1
 8012922:	e056      	b.n	80129d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f7ff fad5 	bl	8011ed4 <sync_window>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d001      	beq.n	8012934 <dir_next+0x106>
 8012930:	2301      	movs	r3, #1
 8012932:	e04e      	b.n	80129d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	461a      	mov	r2, r3
 8012940:	2100      	movs	r1, #0
 8012942:	f7ff f8cc 	bl	8011ade <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012946:	2300      	movs	r3, #0
 8012948:	613b      	str	r3, [r7, #16]
 801294a:	6979      	ldr	r1, [r7, #20]
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f7ff fba3 	bl	8012098 <clust2sect>
 8012952:	4602      	mov	r2, r0
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	639a      	str	r2, [r3, #56]	; 0x38
 8012958:	e012      	b.n	8012980 <dir_next+0x152>
						fs->wflag = 1;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2201      	movs	r2, #1
 801295e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7ff fab7 	bl	8011ed4 <sync_window>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <dir_next+0x142>
 801296c:	2301      	movs	r3, #1
 801296e:	e030      	b.n	80129d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	3301      	adds	r3, #1
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801297a:	1c5a      	adds	r2, r3, #1
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	639a      	str	r2, [r3, #56]	; 0x38
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	895b      	ldrh	r3, [r3, #10]
 8012984:	461a      	mov	r2, r3
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	4293      	cmp	r3, r2
 801298a:	d3e6      	bcc.n	801295a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	1ad2      	subs	r2, r2, r3
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	697a      	ldr	r2, [r7, #20]
 801299c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801299e:	6979      	ldr	r1, [r7, #20]
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f7ff fb79 	bl	8012098 <clust2sect>
 80129a6:	4602      	mov	r2, r0
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	899b      	ldrh	r3, [r3, #12]
 80129bc:	461a      	mov	r2, r3
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80129c4:	fb00 f202 	mul.w	r2, r0, r2
 80129c8:	1a9b      	subs	r3, r3, r2
 80129ca:	18ca      	adds	r2, r1, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80129d0:	2300      	movs	r3, #0
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3718      	adds	r7, #24
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80129da:	b580      	push	{r7, lr}
 80129dc:	b086      	sub	sp, #24
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80129ea:	2100      	movs	r1, #0
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f7ff fe95 	bl	801271c <dir_sdi>
 80129f2:	4603      	mov	r3, r0
 80129f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80129f6:	7dfb      	ldrb	r3, [r7, #23]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d12b      	bne.n	8012a54 <dir_alloc+0x7a>
		n = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	69db      	ldr	r3, [r3, #28]
 8012a04:	4619      	mov	r1, r3
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	f7ff faa8 	bl	8011f5c <move_window>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a10:	7dfb      	ldrb	r3, [r7, #23]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d11d      	bne.n	8012a52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6a1b      	ldr	r3, [r3, #32]
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2be5      	cmp	r3, #229	; 0xe5
 8012a1e:	d004      	beq.n	8012a2a <dir_alloc+0x50>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6a1b      	ldr	r3, [r3, #32]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d107      	bne.n	8012a3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	613b      	str	r3, [r7, #16]
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d102      	bne.n	8012a3e <dir_alloc+0x64>
 8012a38:	e00c      	b.n	8012a54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012a3e:	2101      	movs	r1, #1
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff fef4 	bl	801282e <dir_next>
 8012a46:	4603      	mov	r3, r0
 8012a48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d0d7      	beq.n	8012a00 <dir_alloc+0x26>
 8012a50:	e000      	b.n	8012a54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012a52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012a54:	7dfb      	ldrb	r3, [r7, #23]
 8012a56:	2b04      	cmp	r3, #4
 8012a58:	d101      	bne.n	8012a5e <dir_alloc+0x84>
 8012a5a:	2307      	movs	r3, #7
 8012a5c:	75fb      	strb	r3, [r7, #23]
	return res;
 8012a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3718      	adds	r7, #24
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	331a      	adds	r3, #26
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fe ff8e 	bl	8011998 <ld_word>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	2b03      	cmp	r3, #3
 8012a86:	d109      	bne.n	8012a9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	3314      	adds	r3, #20
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7fe ff83 	bl	8011998 <ld_word>
 8012a92:	4603      	mov	r3, r0
 8012a94:	041b      	lsls	r3, r3, #16
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	60f8      	str	r0, [r7, #12]
 8012aae:	60b9      	str	r1, [r7, #8]
 8012ab0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	331a      	adds	r3, #26
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	b292      	uxth	r2, r2
 8012aba:	4611      	mov	r1, r2
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fe ffa6 	bl	8011a0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	d109      	bne.n	8012ade <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	f103 0214 	add.w	r2, r3, #20
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	0c1b      	lsrs	r3, r3, #16
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	4610      	mov	r0, r2
 8012ada:	f7fe ff98 	bl	8011a0e <st_word>
	}
}
 8012ade:	bf00      	nop
 8012ae0:	3710      	adds	r7, #16
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
	...

08012ae8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012ae8:	b590      	push	{r4, r7, lr}
 8012aea:	b087      	sub	sp, #28
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	331a      	adds	r3, #26
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fe ff4e 	bl	8011998 <ld_word>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d001      	beq.n	8012b06 <cmp_lfn+0x1e>
 8012b02:	2300      	movs	r3, #0
 8012b04:	e059      	b.n	8012bba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b0e:	1e5a      	subs	r2, r3, #1
 8012b10:	4613      	mov	r3, r2
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	4413      	add	r3, r2
 8012b1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	81fb      	strh	r3, [r7, #14]
 8012b20:	2300      	movs	r3, #0
 8012b22:	613b      	str	r3, [r7, #16]
 8012b24:	e033      	b.n	8012b8e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012b26:	4a27      	ldr	r2, [pc, #156]	; (8012bc4 <cmp_lfn+0xdc>)
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	4413      	add	r3, r2
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe ff2f 	bl	8011998 <ld_word>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012b3e:	89fb      	ldrh	r3, [r7, #14]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d01a      	beq.n	8012b7a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2bfe      	cmp	r3, #254	; 0xfe
 8012b48:	d812      	bhi.n	8012b70 <cmp_lfn+0x88>
 8012b4a:	89bb      	ldrh	r3, [r7, #12]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f002 fc7b 	bl	8015448 <ff_wtoupper>
 8012b52:	4603      	mov	r3, r0
 8012b54:	461c      	mov	r4, r3
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	1c5a      	adds	r2, r3, #1
 8012b5a:	617a      	str	r2, [r7, #20]
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	4413      	add	r3, r2
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f002 fc6f 	bl	8015448 <ff_wtoupper>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	429c      	cmp	r4, r3
 8012b6e:	d001      	beq.n	8012b74 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012b70:	2300      	movs	r3, #0
 8012b72:	e022      	b.n	8012bba <cmp_lfn+0xd2>
			}
			wc = uc;
 8012b74:	89bb      	ldrh	r3, [r7, #12]
 8012b76:	81fb      	strh	r3, [r7, #14]
 8012b78:	e006      	b.n	8012b88 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012b7a:	89bb      	ldrh	r3, [r7, #12]
 8012b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d001      	beq.n	8012b88 <cmp_lfn+0xa0>
 8012b84:	2300      	movs	r3, #0
 8012b86:	e018      	b.n	8012bba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	613b      	str	r3, [r7, #16]
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	2b0c      	cmp	r3, #12
 8012b92:	d9c8      	bls.n	8012b26 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <cmp_lfn+0xd0>
 8012ba0:	89fb      	ldrh	r3, [r7, #14]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d008      	beq.n	8012bb8 <cmp_lfn+0xd0>
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	005b      	lsls	r3, r3, #1
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	4413      	add	r3, r2
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d001      	beq.n	8012bb8 <cmp_lfn+0xd0>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	e000      	b.n	8012bba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012bb8:	2301      	movs	r3, #1
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	371c      	adds	r7, #28
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd90      	pop	{r4, r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	08028afc 	.word	0x08028afc

08012bc8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b088      	sub	sp, #32
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	71fb      	strb	r3, [r7, #7]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	330d      	adds	r3, #13
 8012be2:	79ba      	ldrb	r2, [r7, #6]
 8012be4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	330b      	adds	r3, #11
 8012bea:	220f      	movs	r2, #15
 8012bec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	330c      	adds	r3, #12
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	331a      	adds	r3, #26
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fe ff06 	bl	8011a0e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012c02:	79fb      	ldrb	r3, [r7, #7]
 8012c04:	1e5a      	subs	r2, r3, #1
 8012c06:	4613      	mov	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4413      	add	r3, r2
 8012c10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	82fb      	strh	r3, [r7, #22]
 8012c16:	2300      	movs	r3, #0
 8012c18:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012c1a:	8afb      	ldrh	r3, [r7, #22]
 8012c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d007      	beq.n	8012c34 <put_lfn+0x6c>
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	1c5a      	adds	r2, r3, #1
 8012c28:	61fa      	str	r2, [r7, #28]
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	4413      	add	r3, r2
 8012c30:	881b      	ldrh	r3, [r3, #0]
 8012c32:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012c34:	4a17      	ldr	r2, [pc, #92]	; (8012c94 <put_lfn+0xcc>)
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	4413      	add	r3, r2
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	4413      	add	r3, r2
 8012c42:	8afa      	ldrh	r2, [r7, #22]
 8012c44:	4611      	mov	r1, r2
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7fe fee1 	bl	8011a0e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012c4c:	8afb      	ldrh	r3, [r7, #22]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d102      	bne.n	8012c58 <put_lfn+0x90>
 8012c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c56:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	61bb      	str	r3, [r7, #24]
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	2b0c      	cmp	r3, #12
 8012c62:	d9da      	bls.n	8012c1a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012c64:	8afb      	ldrh	r3, [r7, #22]
 8012c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d006      	beq.n	8012c7c <put_lfn+0xb4>
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	005b      	lsls	r3, r3, #1
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	4413      	add	r3, r2
 8012c76:	881b      	ldrh	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d103      	bne.n	8012c84 <put_lfn+0xbc>
 8012c7c:	79fb      	ldrb	r3, [r7, #7]
 8012c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c82:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	79fa      	ldrb	r2, [r7, #7]
 8012c88:	701a      	strb	r2, [r3, #0]
}
 8012c8a:	bf00      	nop
 8012c8c:	3720      	adds	r7, #32
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	08028afc 	.word	0x08028afc

08012c98 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b08c      	sub	sp, #48	; 0x30
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
 8012ca4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012ca6:	220b      	movs	r2, #11
 8012ca8:	68b9      	ldr	r1, [r7, #8]
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f7fe fef6 	bl	8011a9c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	2b05      	cmp	r3, #5
 8012cb4:	d92b      	bls.n	8012d0e <gen_numname+0x76>
		sr = seq;
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012cba:	e022      	b.n	8012d02 <gen_numname+0x6a>
			wc = *lfn++;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	1c9a      	adds	r2, r3, #2
 8012cc0:	607a      	str	r2, [r7, #4]
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cca:	e017      	b.n	8012cfc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	005a      	lsls	r2, r3, #1
 8012cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cd2:	f003 0301 	and.w	r3, r3, #1
 8012cd6:	4413      	add	r3, r2
 8012cd8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cdc:	085b      	lsrs	r3, r3, #1
 8012cde:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d005      	beq.n	8012cf6 <gen_numname+0x5e>
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8012cf0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8012cf4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfe:	2b0f      	cmp	r3, #15
 8012d00:	d9e4      	bls.n	8012ccc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d1d8      	bne.n	8012cbc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012d0e:	2307      	movs	r3, #7
 8012d10:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f003 030f 	and.w	r3, r3, #15
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	3330      	adds	r3, #48	; 0x30
 8012d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d26:	2b39      	cmp	r3, #57	; 0x39
 8012d28:	d904      	bls.n	8012d34 <gen_numname+0x9c>
 8012d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d2e:	3307      	adds	r3, #7
 8012d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d36:	1e5a      	subs	r2, r3, #1
 8012d38:	62ba      	str	r2, [r7, #40]	; 0x28
 8012d3a:	3330      	adds	r3, #48	; 0x30
 8012d3c:	443b      	add	r3, r7
 8012d3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012d42:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	091b      	lsrs	r3, r3, #4
 8012d4a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1df      	bne.n	8012d12 <gen_numname+0x7a>
	ns[i] = '~';
 8012d52:	f107 0214 	add.w	r2, r7, #20
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	4413      	add	r3, r2
 8012d5a:	227e      	movs	r2, #126	; 0x7e
 8012d5c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012d5e:	2300      	movs	r3, #0
 8012d60:	627b      	str	r3, [r7, #36]	; 0x24
 8012d62:	e002      	b.n	8012d6a <gen_numname+0xd2>
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	3301      	adds	r3, #1
 8012d68:	627b      	str	r3, [r7, #36]	; 0x24
 8012d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d205      	bcs.n	8012d7e <gen_numname+0xe6>
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	4413      	add	r3, r2
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	2b20      	cmp	r3, #32
 8012d7c:	d1f2      	bne.n	8012d64 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d80:	2b07      	cmp	r3, #7
 8012d82:	d807      	bhi.n	8012d94 <gen_numname+0xfc>
 8012d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	62ba      	str	r2, [r7, #40]	; 0x28
 8012d8a:	3330      	adds	r3, #48	; 0x30
 8012d8c:	443b      	add	r3, r7
 8012d8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012d92:	e000      	b.n	8012d96 <gen_numname+0xfe>
 8012d94:	2120      	movs	r1, #32
 8012d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d98:	1c5a      	adds	r2, r3, #1
 8012d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	4413      	add	r3, r2
 8012da0:	460a      	mov	r2, r1
 8012da2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	2b07      	cmp	r3, #7
 8012da8:	d9e9      	bls.n	8012d7e <gen_numname+0xe6>
}
 8012daa:	bf00      	nop
 8012dac:	bf00      	nop
 8012dae:	3730      	adds	r7, #48	; 0x30
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012dc0:	230b      	movs	r3, #11
 8012dc2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012dc4:	7bfb      	ldrb	r3, [r7, #15]
 8012dc6:	b2da      	uxtb	r2, r3
 8012dc8:	0852      	lsrs	r2, r2, #1
 8012dca:	01db      	lsls	r3, r3, #7
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	1c59      	adds	r1, r3, #1
 8012dd4:	6079      	str	r1, [r7, #4]
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	4413      	add	r3, r2
 8012dda:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	3b01      	subs	r3, #1
 8012de0:	60bb      	str	r3, [r7, #8]
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1ed      	bne.n	8012dc4 <sum_sfn+0x10>
	return sum;
 8012de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3714      	adds	r7, #20
 8012dee:	46bd      	mov	sp, r7
 8012df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df4:	4770      	bx	lr

08012df6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b086      	sub	sp, #24
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012e04:	2100      	movs	r1, #0
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7ff fc88 	bl	801271c <dir_sdi>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012e10:	7dfb      	ldrb	r3, [r7, #23]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d001      	beq.n	8012e1a <dir_find+0x24>
 8012e16:	7dfb      	ldrb	r3, [r7, #23]
 8012e18:	e0a9      	b.n	8012f6e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e1a:	23ff      	movs	r3, #255	; 0xff
 8012e1c:	753b      	strb	r3, [r7, #20]
 8012e1e:	7d3b      	ldrb	r3, [r7, #20]
 8012e20:	757b      	strb	r3, [r7, #21]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f04f 32ff 	mov.w	r2, #4294967295
 8012e28:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	69db      	ldr	r3, [r3, #28]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	6938      	ldr	r0, [r7, #16]
 8012e32:	f7ff f893 	bl	8011f5c <move_window>
 8012e36:	4603      	mov	r3, r0
 8012e38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f040 8090 	bne.w	8012f62 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6a1b      	ldr	r3, [r3, #32]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012e4a:	7dbb      	ldrb	r3, [r7, #22]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d102      	bne.n	8012e56 <dir_find+0x60>
 8012e50:	2304      	movs	r3, #4
 8012e52:	75fb      	strb	r3, [r7, #23]
 8012e54:	e08a      	b.n	8012f6c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6a1b      	ldr	r3, [r3, #32]
 8012e5a:	330b      	adds	r3, #11
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e62:	73fb      	strb	r3, [r7, #15]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	7bfa      	ldrb	r2, [r7, #15]
 8012e68:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012e6a:	7dbb      	ldrb	r3, [r7, #22]
 8012e6c:	2be5      	cmp	r3, #229	; 0xe5
 8012e6e:	d007      	beq.n	8012e80 <dir_find+0x8a>
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
 8012e72:	f003 0308 	and.w	r3, r3, #8
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d009      	beq.n	8012e8e <dir_find+0x98>
 8012e7a:	7bfb      	ldrb	r3, [r7, #15]
 8012e7c:	2b0f      	cmp	r3, #15
 8012e7e:	d006      	beq.n	8012e8e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e80:	23ff      	movs	r3, #255	; 0xff
 8012e82:	757b      	strb	r3, [r7, #21]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8012e8c:	e05e      	b.n	8012f4c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012e8e:	7bfb      	ldrb	r3, [r7, #15]
 8012e90:	2b0f      	cmp	r3, #15
 8012e92:	d136      	bne.n	8012f02 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d154      	bne.n	8012f4c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012ea2:	7dbb      	ldrb	r3, [r7, #22]
 8012ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d00d      	beq.n	8012ec8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a1b      	ldr	r3, [r3, #32]
 8012eb0:	7b5b      	ldrb	r3, [r3, #13]
 8012eb2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012eb4:	7dbb      	ldrb	r3, [r7, #22]
 8012eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012eba:	75bb      	strb	r3, [r7, #22]
 8012ebc:	7dbb      	ldrb	r3, [r7, #22]
 8012ebe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	695a      	ldr	r2, [r3, #20]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012ec8:	7dba      	ldrb	r2, [r7, #22]
 8012eca:	7d7b      	ldrb	r3, [r7, #21]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d115      	bne.n	8012efc <dir_find+0x106>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6a1b      	ldr	r3, [r3, #32]
 8012ed4:	330d      	adds	r3, #13
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	7d3a      	ldrb	r2, [r7, #20]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d10e      	bne.n	8012efc <dir_find+0x106>
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	691a      	ldr	r2, [r3, #16]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6a1b      	ldr	r3, [r3, #32]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7ff fdfd 	bl	8012ae8 <cmp_lfn>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d003      	beq.n	8012efc <dir_find+0x106>
 8012ef4:	7d7b      	ldrb	r3, [r7, #21]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	e000      	b.n	8012efe <dir_find+0x108>
 8012efc:	23ff      	movs	r3, #255	; 0xff
 8012efe:	757b      	strb	r3, [r7, #21]
 8012f00:	e024      	b.n	8012f4c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012f02:	7d7b      	ldrb	r3, [r7, #21]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d109      	bne.n	8012f1c <dir_find+0x126>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6a1b      	ldr	r3, [r3, #32]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff ff51 	bl	8012db4 <sum_sfn>
 8012f12:	4603      	mov	r3, r0
 8012f14:	461a      	mov	r2, r3
 8012f16:	7d3b      	ldrb	r3, [r7, #20]
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d024      	beq.n	8012f66 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f22:	f003 0301 	and.w	r3, r3, #1
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10a      	bne.n	8012f40 <dir_find+0x14a>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a18      	ldr	r0, [r3, #32]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	3324      	adds	r3, #36	; 0x24
 8012f32:	220b      	movs	r2, #11
 8012f34:	4619      	mov	r1, r3
 8012f36:	f7fe fded 	bl	8011b14 <mem_cmp>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d014      	beq.n	8012f6a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012f40:	23ff      	movs	r3, #255	; 0xff
 8012f42:	757b      	strb	r3, [r7, #21]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f04f 32ff 	mov.w	r2, #4294967295
 8012f4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7ff fc6d 	bl	801282e <dir_next>
 8012f54:	4603      	mov	r3, r0
 8012f56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012f58:	7dfb      	ldrb	r3, [r7, #23]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f43f af65 	beq.w	8012e2a <dir_find+0x34>
 8012f60:	e004      	b.n	8012f6c <dir_find+0x176>
		if (res != FR_OK) break;
 8012f62:	bf00      	nop
 8012f64:	e002      	b.n	8012f6c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012f66:	bf00      	nop
 8012f68:	e000      	b.n	8012f6c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012f6a:	bf00      	nop

	return res;
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3718      	adds	r7, #24
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
	...

08012f78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b08c      	sub	sp, #48	; 0x30
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f8c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d001      	beq.n	8012f98 <dir_register+0x20>
 8012f94:	2306      	movs	r3, #6
 8012f96:	e0e0      	b.n	801315a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012f98:	2300      	movs	r3, #0
 8012f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f9c:	e002      	b.n	8012fa4 <dir_register+0x2c>
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	691a      	ldr	r2, [r3, #16]
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	005b      	lsls	r3, r3, #1
 8012fac:	4413      	add	r3, r2
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1f4      	bne.n	8012f9e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012fba:	f107 030c 	add.w	r3, r7, #12
 8012fbe:	220c      	movs	r2, #12
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fe fd6b 	bl	8011a9c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012fc6:	7dfb      	ldrb	r3, [r7, #23]
 8012fc8:	f003 0301 	and.w	r3, r3, #1
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d032      	beq.n	8013036 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2240      	movs	r2, #64	; 0x40
 8012fd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012fd8:	2301      	movs	r3, #1
 8012fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fdc:	e016      	b.n	801300c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	691a      	ldr	r2, [r3, #16]
 8012fe8:	f107 010c 	add.w	r1, r7, #12
 8012fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fee:	f7ff fe53 	bl	8012c98 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff feff 	bl	8012df6 <dir_find>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013002:	2b00      	cmp	r3, #0
 8013004:	d106      	bne.n	8013014 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013008:	3301      	adds	r3, #1
 801300a:	62bb      	str	r3, [r7, #40]	; 0x28
 801300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300e:	2b63      	cmp	r3, #99	; 0x63
 8013010:	d9e5      	bls.n	8012fde <dir_register+0x66>
 8013012:	e000      	b.n	8013016 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013014:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013018:	2b64      	cmp	r3, #100	; 0x64
 801301a:	d101      	bne.n	8013020 <dir_register+0xa8>
 801301c:	2307      	movs	r3, #7
 801301e:	e09c      	b.n	801315a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013024:	2b04      	cmp	r3, #4
 8013026:	d002      	beq.n	801302e <dir_register+0xb6>
 8013028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801302c:	e095      	b.n	801315a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801302e:	7dfa      	ldrb	r2, [r7, #23]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013036:	7dfb      	ldrb	r3, [r7, #23]
 8013038:	f003 0302 	and.w	r3, r3, #2
 801303c:	2b00      	cmp	r3, #0
 801303e:	d007      	beq.n	8013050 <dir_register+0xd8>
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	330c      	adds	r3, #12
 8013044:	4a47      	ldr	r2, [pc, #284]	; (8013164 <dir_register+0x1ec>)
 8013046:	fba2 2303 	umull	r2, r3, r2, r3
 801304a:	089b      	lsrs	r3, r3, #2
 801304c:	3301      	adds	r3, #1
 801304e:	e000      	b.n	8013052 <dir_register+0xda>
 8013050:	2301      	movs	r3, #1
 8013052:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013054:	6a39      	ldr	r1, [r7, #32]
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ff fcbf 	bl	80129da <dir_alloc>
 801305c:	4603      	mov	r3, r0
 801305e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013066:	2b00      	cmp	r3, #0
 8013068:	d148      	bne.n	80130fc <dir_register+0x184>
 801306a:	6a3b      	ldr	r3, [r7, #32]
 801306c:	3b01      	subs	r3, #1
 801306e:	623b      	str	r3, [r7, #32]
 8013070:	6a3b      	ldr	r3, [r7, #32]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d042      	beq.n	80130fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	695a      	ldr	r2, [r3, #20]
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	015b      	lsls	r3, r3, #5
 801307e:	1ad3      	subs	r3, r2, r3
 8013080:	4619      	mov	r1, r3
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7ff fb4a 	bl	801271c <dir_sdi>
 8013088:	4603      	mov	r3, r0
 801308a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801308e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013092:	2b00      	cmp	r3, #0
 8013094:	d132      	bne.n	80130fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	3324      	adds	r3, #36	; 0x24
 801309a:	4618      	mov	r0, r3
 801309c:	f7ff fe8a 	bl	8012db4 <sum_sfn>
 80130a0:	4603      	mov	r3, r0
 80130a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	69db      	ldr	r3, [r3, #28]
 80130a8:	4619      	mov	r1, r3
 80130aa:	69f8      	ldr	r0, [r7, #28]
 80130ac:	f7fe ff56 	bl	8011f5c <move_window>
 80130b0:	4603      	mov	r3, r0
 80130b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80130b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d11d      	bne.n	80130fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	6918      	ldr	r0, [r3, #16]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a19      	ldr	r1, [r3, #32]
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	b2da      	uxtb	r2, r3
 80130ca:	7efb      	ldrb	r3, [r7, #27]
 80130cc:	f7ff fd7c 	bl	8012bc8 <put_lfn>
				fs->wflag = 1;
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	2201      	movs	r2, #1
 80130d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80130d6:	2100      	movs	r1, #0
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff fba8 	bl	801282e <dir_next>
 80130de:	4603      	mov	r3, r0
 80130e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80130e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d107      	bne.n	80130fc <dir_register+0x184>
 80130ec:	6a3b      	ldr	r3, [r7, #32]
 80130ee:	3b01      	subs	r3, #1
 80130f0:	623b      	str	r3, [r7, #32]
 80130f2:	6a3b      	ldr	r3, [r7, #32]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1d5      	bne.n	80130a4 <dir_register+0x12c>
 80130f8:	e000      	b.n	80130fc <dir_register+0x184>
				if (res != FR_OK) break;
 80130fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80130fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013100:	2b00      	cmp	r3, #0
 8013102:	d128      	bne.n	8013156 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	69db      	ldr	r3, [r3, #28]
 8013108:	4619      	mov	r1, r3
 801310a:	69f8      	ldr	r0, [r7, #28]
 801310c:	f7fe ff26 	bl	8011f5c <move_window>
 8013110:	4603      	mov	r3, r0
 8013112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801311a:	2b00      	cmp	r3, #0
 801311c:	d11b      	bne.n	8013156 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6a1b      	ldr	r3, [r3, #32]
 8013122:	2220      	movs	r2, #32
 8013124:	2100      	movs	r1, #0
 8013126:	4618      	mov	r0, r3
 8013128:	f7fe fcd9 	bl	8011ade <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6a18      	ldr	r0, [r3, #32]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	3324      	adds	r3, #36	; 0x24
 8013134:	220b      	movs	r2, #11
 8013136:	4619      	mov	r1, r3
 8013138:	f7fe fcb0 	bl	8011a9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6a1b      	ldr	r3, [r3, #32]
 8013146:	330c      	adds	r3, #12
 8013148:	f002 0218 	and.w	r2, r2, #24
 801314c:	b2d2      	uxtb	r2, r2
 801314e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	2201      	movs	r2, #1
 8013154:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801315a:	4618      	mov	r0, r3
 801315c:	3730      	adds	r7, #48	; 0x30
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	4ec4ec4f 	.word	0x4ec4ec4f

08013168 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b08a      	sub	sp, #40	; 0x28
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	613b      	str	r3, [r7, #16]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	2300      	movs	r3, #0
 8013182:	617b      	str	r3, [r7, #20]
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	1c5a      	adds	r2, r3, #1
 801318c:	61ba      	str	r2, [r7, #24]
 801318e:	693a      	ldr	r2, [r7, #16]
 8013190:	4413      	add	r3, r2
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013198:	2b1f      	cmp	r3, #31
 801319a:	d940      	bls.n	801321e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801319c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801319e:	2b2f      	cmp	r3, #47	; 0x2f
 80131a0:	d006      	beq.n	80131b0 <create_name+0x48>
 80131a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131a4:	2b5c      	cmp	r3, #92	; 0x5c
 80131a6:	d110      	bne.n	80131ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80131a8:	e002      	b.n	80131b0 <create_name+0x48>
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	3301      	adds	r3, #1
 80131ae:	61bb      	str	r3, [r7, #24]
 80131b0:	693a      	ldr	r2, [r7, #16]
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	4413      	add	r3, r2
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	2b2f      	cmp	r3, #47	; 0x2f
 80131ba:	d0f6      	beq.n	80131aa <create_name+0x42>
 80131bc:	693a      	ldr	r2, [r7, #16]
 80131be:	69bb      	ldr	r3, [r7, #24]
 80131c0:	4413      	add	r3, r2
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	2b5c      	cmp	r3, #92	; 0x5c
 80131c6:	d0f0      	beq.n	80131aa <create_name+0x42>
			break;
 80131c8:	e02a      	b.n	8013220 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	2bfe      	cmp	r3, #254	; 0xfe
 80131ce:	d901      	bls.n	80131d4 <create_name+0x6c>
 80131d0:	2306      	movs	r3, #6
 80131d2:	e17d      	b.n	80134d0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80131d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80131da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131dc:	2101      	movs	r1, #1
 80131de:	4618      	mov	r0, r3
 80131e0:	f002 f8f6 	bl	80153d0 <ff_convert>
 80131e4:	4603      	mov	r3, r0
 80131e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80131e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <create_name+0x8a>
 80131ee:	2306      	movs	r3, #6
 80131f0:	e16e      	b.n	80134d0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80131f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131f4:	2b7f      	cmp	r3, #127	; 0x7f
 80131f6:	d809      	bhi.n	801320c <create_name+0xa4>
 80131f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131fa:	4619      	mov	r1, r3
 80131fc:	488d      	ldr	r0, [pc, #564]	; (8013434 <create_name+0x2cc>)
 80131fe:	f7fe fcb0 	bl	8011b62 <chk_chr>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d001      	beq.n	801320c <create_name+0xa4>
 8013208:	2306      	movs	r3, #6
 801320a:	e161      	b.n	80134d0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	617a      	str	r2, [r7, #20]
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801321a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801321c:	e7b4      	b.n	8013188 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801321e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013220:	693a      	ldr	r2, [r7, #16]
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	441a      	add	r2, r3
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801322a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801322c:	2b1f      	cmp	r3, #31
 801322e:	d801      	bhi.n	8013234 <create_name+0xcc>
 8013230:	2304      	movs	r3, #4
 8013232:	e000      	b.n	8013236 <create_name+0xce>
 8013234:	2300      	movs	r3, #0
 8013236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801323a:	e011      	b.n	8013260 <create_name+0xf8>
		w = lfn[di - 1];
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013242:	3b01      	subs	r3, #1
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	4413      	add	r3, r2
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801324e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013250:	2b20      	cmp	r3, #32
 8013252:	d002      	beq.n	801325a <create_name+0xf2>
 8013254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013256:	2b2e      	cmp	r3, #46	; 0x2e
 8013258:	d106      	bne.n	8013268 <create_name+0x100>
		di--;
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	3b01      	subs	r3, #1
 801325e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1ea      	bne.n	801323c <create_name+0xd4>
 8013266:	e000      	b.n	801326a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013268:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	4413      	add	r3, r2
 8013272:	2200      	movs	r2, #0
 8013274:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d101      	bne.n	8013280 <create_name+0x118>
 801327c:	2306      	movs	r3, #6
 801327e:	e127      	b.n	80134d0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	3324      	adds	r3, #36	; 0x24
 8013284:	220b      	movs	r2, #11
 8013286:	2120      	movs	r1, #32
 8013288:	4618      	mov	r0, r3
 801328a:	f7fe fc28 	bl	8011ade <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801328e:	2300      	movs	r3, #0
 8013290:	61bb      	str	r3, [r7, #24]
 8013292:	e002      	b.n	801329a <create_name+0x132>
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	3301      	adds	r3, #1
 8013298:	61bb      	str	r3, [r7, #24]
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	4413      	add	r3, r2
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	2b20      	cmp	r3, #32
 80132a6:	d0f5      	beq.n	8013294 <create_name+0x12c>
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	005b      	lsls	r3, r3, #1
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	4413      	add	r3, r2
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	2b2e      	cmp	r3, #46	; 0x2e
 80132b4:	d0ee      	beq.n	8013294 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80132b6:	69bb      	ldr	r3, [r7, #24]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d009      	beq.n	80132d0 <create_name+0x168>
 80132bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c0:	f043 0303 	orr.w	r3, r3, #3
 80132c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80132c8:	e002      	b.n	80132d0 <create_name+0x168>
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	617b      	str	r3, [r7, #20]
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d009      	beq.n	80132ea <create_name+0x182>
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132dc:	3b01      	subs	r3, #1
 80132de:	005b      	lsls	r3, r3, #1
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	881b      	ldrh	r3, [r3, #0]
 80132e6:	2b2e      	cmp	r3, #46	; 0x2e
 80132e8:	d1ef      	bne.n	80132ca <create_name+0x162>

	i = b = 0; ni = 8;
 80132ea:	2300      	movs	r3, #0
 80132ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80132f0:	2300      	movs	r3, #0
 80132f2:	623b      	str	r3, [r7, #32]
 80132f4:	2308      	movs	r3, #8
 80132f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	1c5a      	adds	r2, r3, #1
 80132fc:	61ba      	str	r2, [r7, #24]
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	4413      	add	r3, r2
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 8090 	beq.w	8013430 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013312:	2b20      	cmp	r3, #32
 8013314:	d006      	beq.n	8013324 <create_name+0x1bc>
 8013316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013318:	2b2e      	cmp	r3, #46	; 0x2e
 801331a:	d10a      	bne.n	8013332 <create_name+0x1ca>
 801331c:	69ba      	ldr	r2, [r7, #24]
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	429a      	cmp	r2, r3
 8013322:	d006      	beq.n	8013332 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013328:	f043 0303 	orr.w	r3, r3, #3
 801332c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013330:	e07d      	b.n	801342e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013332:	6a3a      	ldr	r2, [r7, #32]
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	429a      	cmp	r2, r3
 8013338:	d203      	bcs.n	8013342 <create_name+0x1da>
 801333a:	69ba      	ldr	r2, [r7, #24]
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	429a      	cmp	r2, r3
 8013340:	d123      	bne.n	801338a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	2b0b      	cmp	r3, #11
 8013346:	d106      	bne.n	8013356 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801334c:	f043 0303 	orr.w	r3, r3, #3
 8013350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013354:	e075      	b.n	8013442 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013356:	69ba      	ldr	r2, [r7, #24]
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	429a      	cmp	r2, r3
 801335c:	d005      	beq.n	801336a <create_name+0x202>
 801335e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013362:	f043 0303 	orr.w	r3, r3, #3
 8013366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801336a:	69ba      	ldr	r2, [r7, #24]
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	429a      	cmp	r2, r3
 8013370:	d866      	bhi.n	8013440 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	61bb      	str	r3, [r7, #24]
 8013376:	2308      	movs	r3, #8
 8013378:	623b      	str	r3, [r7, #32]
 801337a:	230b      	movs	r3, #11
 801337c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801337e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013382:	009b      	lsls	r3, r3, #2
 8013384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013388:	e051      	b.n	801342e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801338a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801338c:	2b7f      	cmp	r3, #127	; 0x7f
 801338e:	d914      	bls.n	80133ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013392:	2100      	movs	r1, #0
 8013394:	4618      	mov	r0, r3
 8013396:	f002 f81b 	bl	80153d0 <ff_convert>
 801339a:	4603      	mov	r3, r0
 801339c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801339e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <create_name+0x246>
 80133a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133a6:	3b80      	subs	r3, #128	; 0x80
 80133a8:	4a23      	ldr	r2, [pc, #140]	; (8013438 <create_name+0x2d0>)
 80133aa:	5cd3      	ldrb	r3, [r2, r3]
 80133ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80133ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133b2:	f043 0302 	orr.w	r3, r3, #2
 80133b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80133ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d007      	beq.n	80133d0 <create_name+0x268>
 80133c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133c2:	4619      	mov	r1, r3
 80133c4:	481d      	ldr	r0, [pc, #116]	; (801343c <create_name+0x2d4>)
 80133c6:	f7fe fbcc 	bl	8011b62 <chk_chr>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d008      	beq.n	80133e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80133d0:	235f      	movs	r3, #95	; 0x5f
 80133d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80133d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133d8:	f043 0303 	orr.w	r3, r3, #3
 80133dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133e0:	e01b      	b.n	801341a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80133e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133e4:	2b40      	cmp	r3, #64	; 0x40
 80133e6:	d909      	bls.n	80133fc <create_name+0x294>
 80133e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133ea:	2b5a      	cmp	r3, #90	; 0x5a
 80133ec:	d806      	bhi.n	80133fc <create_name+0x294>
					b |= 2;
 80133ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133f2:	f043 0302 	orr.w	r3, r3, #2
 80133f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80133fa:	e00e      	b.n	801341a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80133fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133fe:	2b60      	cmp	r3, #96	; 0x60
 8013400:	d90b      	bls.n	801341a <create_name+0x2b2>
 8013402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013404:	2b7a      	cmp	r3, #122	; 0x7a
 8013406:	d808      	bhi.n	801341a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801340c:	f043 0301 	orr.w	r3, r3, #1
 8013410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013416:	3b20      	subs	r3, #32
 8013418:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	1c5a      	adds	r2, r3, #1
 801341e:	623a      	str	r2, [r7, #32]
 8013420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013422:	b2d1      	uxtb	r1, r2
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	4413      	add	r3, r2
 8013428:	460a      	mov	r2, r1
 801342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801342e:	e763      	b.n	80132f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013430:	bf00      	nop
 8013432:	e006      	b.n	8013442 <create_name+0x2da>
 8013434:	08020500 	.word	0x08020500
 8013438:	08028a7c 	.word	0x08028a7c
 801343c:	0802050c 	.word	0x0802050c
			if (si > di) break;			/* No extension */
 8013440:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013448:	2be5      	cmp	r3, #229	; 0xe5
 801344a:	d103      	bne.n	8013454 <create_name+0x2ec>
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2205      	movs	r2, #5
 8013450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	2b08      	cmp	r3, #8
 8013458:	d104      	bne.n	8013464 <create_name+0x2fc>
 801345a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013468:	f003 030c 	and.w	r3, r3, #12
 801346c:	2b0c      	cmp	r3, #12
 801346e:	d005      	beq.n	801347c <create_name+0x314>
 8013470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013474:	f003 0303 	and.w	r3, r3, #3
 8013478:	2b03      	cmp	r3, #3
 801347a:	d105      	bne.n	8013488 <create_name+0x320>
 801347c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013480:	f043 0302 	orr.w	r3, r3, #2
 8013484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801348c:	f003 0302 	and.w	r3, r3, #2
 8013490:	2b00      	cmp	r3, #0
 8013492:	d117      	bne.n	80134c4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013498:	f003 0303 	and.w	r3, r3, #3
 801349c:	2b01      	cmp	r3, #1
 801349e:	d105      	bne.n	80134ac <create_name+0x344>
 80134a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134a4:	f043 0310 	orr.w	r3, r3, #16
 80134a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80134ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134b0:	f003 030c 	and.w	r3, r3, #12
 80134b4:	2b04      	cmp	r3, #4
 80134b6:	d105      	bne.n	80134c4 <create_name+0x35c>
 80134b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134bc:	f043 0308 	orr.w	r3, r3, #8
 80134c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80134ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80134ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3728      	adds	r7, #40	; 0x28
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80134ec:	e002      	b.n	80134f4 <follow_path+0x1c>
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	3301      	adds	r3, #1
 80134f2:	603b      	str	r3, [r7, #0]
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b2f      	cmp	r3, #47	; 0x2f
 80134fa:	d0f8      	beq.n	80134ee <follow_path+0x16>
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	2b5c      	cmp	r3, #92	; 0x5c
 8013502:	d0f4      	beq.n	80134ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	2200      	movs	r2, #0
 8013508:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	2b1f      	cmp	r3, #31
 8013510:	d80a      	bhi.n	8013528 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2280      	movs	r2, #128	; 0x80
 8013516:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801351a:	2100      	movs	r1, #0
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff f8fd 	bl	801271c <dir_sdi>
 8013522:	4603      	mov	r3, r0
 8013524:	75fb      	strb	r3, [r7, #23]
 8013526:	e048      	b.n	80135ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013528:	463b      	mov	r3, r7
 801352a:	4619      	mov	r1, r3
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff fe1b 	bl	8013168 <create_name>
 8013532:	4603      	mov	r3, r0
 8013534:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013536:	7dfb      	ldrb	r3, [r7, #23]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d139      	bne.n	80135b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ff fc5a 	bl	8012df6 <dir_find>
 8013542:	4603      	mov	r3, r0
 8013544:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801354c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801354e:	7dfb      	ldrb	r3, [r7, #23]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00a      	beq.n	801356a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013554:	7dfb      	ldrb	r3, [r7, #23]
 8013556:	2b04      	cmp	r3, #4
 8013558:	d12c      	bne.n	80135b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801355a:	7afb      	ldrb	r3, [r7, #11]
 801355c:	f003 0304 	and.w	r3, r3, #4
 8013560:	2b00      	cmp	r3, #0
 8013562:	d127      	bne.n	80135b4 <follow_path+0xdc>
 8013564:	2305      	movs	r3, #5
 8013566:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013568:	e024      	b.n	80135b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801356a:	7afb      	ldrb	r3, [r7, #11]
 801356c:	f003 0304 	and.w	r3, r3, #4
 8013570:	2b00      	cmp	r3, #0
 8013572:	d121      	bne.n	80135b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	799b      	ldrb	r3, [r3, #6]
 8013578:	f003 0310 	and.w	r3, r3, #16
 801357c:	2b00      	cmp	r3, #0
 801357e:	d102      	bne.n	8013586 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013580:	2305      	movs	r3, #5
 8013582:	75fb      	strb	r3, [r7, #23]
 8013584:	e019      	b.n	80135ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	695b      	ldr	r3, [r3, #20]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	8992      	ldrh	r2, [r2, #12]
 8013594:	fbb3 f0f2 	udiv	r0, r3, r2
 8013598:	fb00 f202 	mul.w	r2, r0, r2
 801359c:	1a9b      	subs	r3, r3, r2
 801359e:	440b      	add	r3, r1
 80135a0:	4619      	mov	r1, r3
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	f7ff fa60 	bl	8012a68 <ld_clust>
 80135a8:	4602      	mov	r2, r0
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135ae:	e7bb      	b.n	8013528 <follow_path+0x50>
			if (res != FR_OK) break;
 80135b0:	bf00      	nop
 80135b2:	e002      	b.n	80135ba <follow_path+0xe2>
				break;
 80135b4:	bf00      	nop
 80135b6:	e000      	b.n	80135ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135b8:	bf00      	nop
			}
		}
	}

	return res;
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80135c4:	b480      	push	{r7}
 80135c6:	b087      	sub	sp, #28
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80135cc:	f04f 33ff 	mov.w	r3, #4294967295
 80135d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d031      	beq.n	801363e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	617b      	str	r3, [r7, #20]
 80135e0:	e002      	b.n	80135e8 <get_ldnumber+0x24>
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	3301      	adds	r3, #1
 80135e6:	617b      	str	r3, [r7, #20]
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b1f      	cmp	r3, #31
 80135ee:	d903      	bls.n	80135f8 <get_ldnumber+0x34>
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b3a      	cmp	r3, #58	; 0x3a
 80135f6:	d1f4      	bne.n	80135e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2b3a      	cmp	r3, #58	; 0x3a
 80135fe:	d11c      	bne.n	801363a <get_ldnumber+0x76>
			tp = *path;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	1c5a      	adds	r2, r3, #1
 801360a:	60fa      	str	r2, [r7, #12]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	3b30      	subs	r3, #48	; 0x30
 8013610:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2b09      	cmp	r3, #9
 8013616:	d80e      	bhi.n	8013636 <get_ldnumber+0x72>
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	429a      	cmp	r2, r3
 801361e:	d10a      	bne.n	8013636 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d107      	bne.n	8013636 <get_ldnumber+0x72>
					vol = (int)i;
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	3301      	adds	r3, #1
 801362e:	617b      	str	r3, [r7, #20]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	697a      	ldr	r2, [r7, #20]
 8013634:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	e002      	b.n	8013640 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801363a:	2300      	movs	r3, #0
 801363c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801363e:	693b      	ldr	r3, [r7, #16]
}
 8013640:	4618      	mov	r0, r3
 8013642:	371c      	adds	r7, #28
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr

0801364c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	70da      	strb	r2, [r3, #3]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f04f 32ff 	mov.w	r2, #4294967295
 8013662:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013664:	6839      	ldr	r1, [r7, #0]
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f7fe fc78 	bl	8011f5c <move_window>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <check_fs+0x2a>
 8013672:	2304      	movs	r3, #4
 8013674:	e038      	b.n	80136e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	333c      	adds	r3, #60	; 0x3c
 801367a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe f98a 	bl	8011998 <ld_word>
 8013684:	4603      	mov	r3, r0
 8013686:	461a      	mov	r2, r3
 8013688:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801368c:	429a      	cmp	r2, r3
 801368e:	d001      	beq.n	8013694 <check_fs+0x48>
 8013690:	2303      	movs	r3, #3
 8013692:	e029      	b.n	80136e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801369a:	2be9      	cmp	r3, #233	; 0xe9
 801369c:	d009      	beq.n	80136b2 <check_fs+0x66>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80136a4:	2beb      	cmp	r3, #235	; 0xeb
 80136a6:	d11e      	bne.n	80136e6 <check_fs+0x9a>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80136ae:	2b90      	cmp	r3, #144	; 0x90
 80136b0:	d119      	bne.n	80136e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	333c      	adds	r3, #60	; 0x3c
 80136b6:	3336      	adds	r3, #54	; 0x36
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fe f985 	bl	80119c8 <ld_dword>
 80136be:	4603      	mov	r3, r0
 80136c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80136c4:	4a0a      	ldr	r2, [pc, #40]	; (80136f0 <check_fs+0xa4>)
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d101      	bne.n	80136ce <check_fs+0x82>
 80136ca:	2300      	movs	r3, #0
 80136cc:	e00c      	b.n	80136e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	333c      	adds	r3, #60	; 0x3c
 80136d2:	3352      	adds	r3, #82	; 0x52
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fe f977 	bl	80119c8 <ld_dword>
 80136da:	4603      	mov	r3, r0
 80136dc:	4a05      	ldr	r2, [pc, #20]	; (80136f4 <check_fs+0xa8>)
 80136de:	4293      	cmp	r3, r2
 80136e0:	d101      	bne.n	80136e6 <check_fs+0x9a>
 80136e2:	2300      	movs	r3, #0
 80136e4:	e000      	b.n	80136e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80136e6:	2302      	movs	r3, #2
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	00544146 	.word	0x00544146
 80136f4:	33544146 	.word	0x33544146

080136f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b096      	sub	sp, #88	; 0x58
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	4613      	mov	r3, r2
 8013704:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2200      	movs	r2, #0
 801370a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff ff59 	bl	80135c4 <get_ldnumber>
 8013712:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013716:	2b00      	cmp	r3, #0
 8013718:	da01      	bge.n	801371e <find_volume+0x26>
 801371a:	230b      	movs	r3, #11
 801371c:	e26a      	b.n	8013bf4 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801371e:	4aa3      	ldr	r2, [pc, #652]	; (80139ac <find_volume+0x2b4>)
 8013720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013726:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <find_volume+0x3a>
 801372e:	230c      	movs	r3, #12
 8013730:	e260      	b.n	8013bf4 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8013732:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013734:	f7fe fa30 	bl	8011b98 <lock_fs>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d101      	bne.n	8013742 <find_volume+0x4a>
 801373e:	230f      	movs	r3, #15
 8013740:	e258      	b.n	8013bf4 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013746:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013748:	79fb      	ldrb	r3, [r7, #7]
 801374a:	f023 0301 	bic.w	r3, r3, #1
 801374e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d01a      	beq.n	801378e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375a:	785b      	ldrb	r3, [r3, #1]
 801375c:	4618      	mov	r0, r3
 801375e:	f7fe f87d 	bl	801185c <disk_status>
 8013762:	4603      	mov	r3, r0
 8013764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801376c:	f003 0301 	and.w	r3, r3, #1
 8013770:	2b00      	cmp	r3, #0
 8013772:	d10c      	bne.n	801378e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013774:	79fb      	ldrb	r3, [r7, #7]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d007      	beq.n	801378a <find_volume+0x92>
 801377a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801377e:	f003 0304 	and.w	r3, r3, #4
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013786:	230a      	movs	r3, #10
 8013788:	e234      	b.n	8013bf4 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 801378a:	2300      	movs	r3, #0
 801378c:	e232      	b.n	8013bf4 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013790:	2200      	movs	r2, #0
 8013792:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013796:	b2da      	uxtb	r2, r3
 8013798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379e:	785b      	ldrb	r3, [r3, #1]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fe f875 	bl	8011890 <disk_initialize>
 80137a6:	4603      	mov	r3, r0
 80137a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80137ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d001      	beq.n	80137bc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137b8:	2303      	movs	r3, #3
 80137ba:	e21b      	b.n	8013bf4 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d007      	beq.n	80137d2 <find_volume+0xda>
 80137c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137c6:	f003 0304 	and.w	r3, r3, #4
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d001      	beq.n	80137d2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80137ce:	230a      	movs	r3, #10
 80137d0:	e210      	b.n	8013bf4 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80137d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d4:	7858      	ldrb	r0, [r3, #1]
 80137d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d8:	330c      	adds	r3, #12
 80137da:	461a      	mov	r2, r3
 80137dc:	2102      	movs	r1, #2
 80137de:	f7fe f8bd 	bl	801195c <disk_ioctl>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d001      	beq.n	80137ec <find_volume+0xf4>
 80137e8:	2301      	movs	r3, #1
 80137ea:	e203      	b.n	8013bf4 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80137ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ee:	899b      	ldrh	r3, [r3, #12]
 80137f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137f4:	d80d      	bhi.n	8013812 <find_volume+0x11a>
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	899b      	ldrh	r3, [r3, #12]
 80137fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137fe:	d308      	bcc.n	8013812 <find_volume+0x11a>
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	899b      	ldrh	r3, [r3, #12]
 8013804:	461a      	mov	r2, r3
 8013806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013808:	899b      	ldrh	r3, [r3, #12]
 801380a:	3b01      	subs	r3, #1
 801380c:	4013      	ands	r3, r2
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <find_volume+0x11e>
 8013812:	2301      	movs	r3, #1
 8013814:	e1ee      	b.n	8013bf4 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801381a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801381c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801381e:	f7ff ff15 	bl	801364c <check_fs>
 8013822:	4603      	mov	r3, r0
 8013824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801382c:	2b02      	cmp	r3, #2
 801382e:	d149      	bne.n	80138c4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013830:	2300      	movs	r3, #0
 8013832:	643b      	str	r3, [r7, #64]	; 0x40
 8013834:	e01e      	b.n	8013874 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013838:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801383c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801383e:	011b      	lsls	r3, r3, #4
 8013840:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013844:	4413      	add	r3, r2
 8013846:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	3304      	adds	r3, #4
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d006      	beq.n	8013860 <find_volume+0x168>
 8013852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013854:	3308      	adds	r3, #8
 8013856:	4618      	mov	r0, r3
 8013858:	f7fe f8b6 	bl	80119c8 <ld_dword>
 801385c:	4602      	mov	r2, r0
 801385e:	e000      	b.n	8013862 <find_volume+0x16a>
 8013860:	2200      	movs	r2, #0
 8013862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	3358      	adds	r3, #88	; 0x58
 8013868:	443b      	add	r3, r7
 801386a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013870:	3301      	adds	r3, #1
 8013872:	643b      	str	r3, [r7, #64]	; 0x40
 8013874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013876:	2b03      	cmp	r3, #3
 8013878:	d9dd      	bls.n	8013836 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801387a:	2300      	movs	r3, #0
 801387c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013880:	2b00      	cmp	r3, #0
 8013882:	d002      	beq.n	801388a <find_volume+0x192>
 8013884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013886:	3b01      	subs	r3, #1
 8013888:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801388c:	009b      	lsls	r3, r3, #2
 801388e:	3358      	adds	r3, #88	; 0x58
 8013890:	443b      	add	r3, r7
 8013892:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013896:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389a:	2b00      	cmp	r3, #0
 801389c:	d005      	beq.n	80138aa <find_volume+0x1b2>
 801389e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138a2:	f7ff fed3 	bl	801364c <check_fs>
 80138a6:	4603      	mov	r3, r0
 80138a8:	e000      	b.n	80138ac <find_volume+0x1b4>
 80138aa:	2303      	movs	r3, #3
 80138ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d905      	bls.n	80138c4 <find_volume+0x1cc>
 80138b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ba:	3301      	adds	r3, #1
 80138bc:	643b      	str	r3, [r7, #64]	; 0x40
 80138be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138c0:	2b03      	cmp	r3, #3
 80138c2:	d9e2      	bls.n	801388a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138c8:	2b04      	cmp	r3, #4
 80138ca:	d101      	bne.n	80138d0 <find_volume+0x1d8>
 80138cc:	2301      	movs	r3, #1
 80138ce:	e191      	b.n	8013bf4 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d901      	bls.n	80138dc <find_volume+0x1e4>
 80138d8:	230d      	movs	r3, #13
 80138da:	e18b      	b.n	8013bf4 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80138dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138de:	333c      	adds	r3, #60	; 0x3c
 80138e0:	330b      	adds	r3, #11
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fe f858 	bl	8011998 <ld_word>
 80138e8:	4603      	mov	r3, r0
 80138ea:	461a      	mov	r2, r3
 80138ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ee:	899b      	ldrh	r3, [r3, #12]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d001      	beq.n	80138f8 <find_volume+0x200>
 80138f4:	230d      	movs	r3, #13
 80138f6:	e17d      	b.n	8013bf4 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fa:	333c      	adds	r3, #60	; 0x3c
 80138fc:	3316      	adds	r3, #22
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fe f84a 	bl	8011998 <ld_word>
 8013904:	4603      	mov	r3, r0
 8013906:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <find_volume+0x224>
 801390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013910:	333c      	adds	r3, #60	; 0x3c
 8013912:	3324      	adds	r3, #36	; 0x24
 8013914:	4618      	mov	r0, r3
 8013916:	f7fe f857 	bl	80119c8 <ld_dword>
 801391a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013920:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013924:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8013928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392e:	789b      	ldrb	r3, [r3, #2]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d005      	beq.n	8013940 <find_volume+0x248>
 8013934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013936:	789b      	ldrb	r3, [r3, #2]
 8013938:	2b02      	cmp	r3, #2
 801393a:	d001      	beq.n	8013940 <find_volume+0x248>
 801393c:	230d      	movs	r3, #13
 801393e:	e159      	b.n	8013bf4 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	789b      	ldrb	r3, [r3, #2]
 8013944:	461a      	mov	r2, r3
 8013946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013948:	fb02 f303 	mul.w	r3, r2, r3
 801394c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013950:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013954:	b29a      	uxth	r2, r3
 8013956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013958:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395c:	895b      	ldrh	r3, [r3, #10]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d008      	beq.n	8013974 <find_volume+0x27c>
 8013962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013964:	895b      	ldrh	r3, [r3, #10]
 8013966:	461a      	mov	r2, r3
 8013968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396a:	895b      	ldrh	r3, [r3, #10]
 801396c:	3b01      	subs	r3, #1
 801396e:	4013      	ands	r3, r2
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <find_volume+0x280>
 8013974:	230d      	movs	r3, #13
 8013976:	e13d      	b.n	8013bf4 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397a:	333c      	adds	r3, #60	; 0x3c
 801397c:	3311      	adds	r3, #17
 801397e:	4618      	mov	r0, r3
 8013980:	f7fe f80a 	bl	8011998 <ld_word>
 8013984:	4603      	mov	r3, r0
 8013986:	461a      	mov	r2, r3
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398e:	891b      	ldrh	r3, [r3, #8]
 8013990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013992:	8992      	ldrh	r2, [r2, #12]
 8013994:	0952      	lsrs	r2, r2, #5
 8013996:	b292      	uxth	r2, r2
 8013998:	fbb3 f1f2 	udiv	r1, r3, r2
 801399c:	fb01 f202 	mul.w	r2, r1, r2
 80139a0:	1a9b      	subs	r3, r3, r2
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d003      	beq.n	80139b0 <find_volume+0x2b8>
 80139a8:	230d      	movs	r3, #13
 80139aa:	e123      	b.n	8013bf4 <find_volume+0x4fc>
 80139ac:	20019158 	.word	0x20019158

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80139b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b2:	333c      	adds	r3, #60	; 0x3c
 80139b4:	3313      	adds	r3, #19
 80139b6:	4618      	mov	r0, r3
 80139b8:	f7fd ffee 	bl	8011998 <ld_word>
 80139bc:	4603      	mov	r3, r0
 80139be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d106      	bne.n	80139d4 <find_volume+0x2dc>
 80139c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c8:	333c      	adds	r3, #60	; 0x3c
 80139ca:	3320      	adds	r3, #32
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7fd fffb 	bl	80119c8 <ld_dword>
 80139d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d6:	333c      	adds	r3, #60	; 0x3c
 80139d8:	330e      	adds	r3, #14
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fd ffdc 	bl	8011998 <ld_word>
 80139e0:	4603      	mov	r3, r0
 80139e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d101      	bne.n	80139ee <find_volume+0x2f6>
 80139ea:	230d      	movs	r3, #13
 80139ec:	e102      	b.n	8013bf4 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80139ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f2:	4413      	add	r3, r2
 80139f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139f6:	8911      	ldrh	r1, [r2, #8]
 80139f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139fa:	8992      	ldrh	r2, [r2, #12]
 80139fc:	0952      	lsrs	r2, r2, #5
 80139fe:	b292      	uxth	r2, r2
 8013a00:	fbb1 f2f2 	udiv	r2, r1, r2
 8013a04:	b292      	uxth	r2, r2
 8013a06:	4413      	add	r3, r2
 8013a08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d201      	bcs.n	8013a16 <find_volume+0x31e>
 8013a12:	230d      	movs	r3, #13
 8013a14:	e0ee      	b.n	8013bf4 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a1e:	8952      	ldrh	r2, [r2, #10]
 8013a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d101      	bne.n	8013a30 <find_volume+0x338>
 8013a2c:	230d      	movs	r3, #13
 8013a2e:	e0e1      	b.n	8013bf4 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8013a30:	2303      	movs	r3, #3
 8013a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d802      	bhi.n	8013a46 <find_volume+0x34e>
 8013a40:	2302      	movs	r3, #2
 8013a42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d802      	bhi.n	8013a56 <find_volume+0x35e>
 8013a50:	2301      	movs	r3, #1
 8013a52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a58:	1c9a      	adds	r2, r3, #2
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a62:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a68:	441a      	add	r2, r3
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a72:	441a      	add	r2, r3
 8013a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a76:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8013a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a7c:	2b03      	cmp	r3, #3
 8013a7e:	d11e      	bne.n	8013abe <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	333c      	adds	r3, #60	; 0x3c
 8013a84:	332a      	adds	r3, #42	; 0x2a
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7fd ff86 	bl	8011998 <ld_word>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d001      	beq.n	8013a96 <find_volume+0x39e>
 8013a92:	230d      	movs	r3, #13
 8013a94:	e0ae      	b.n	8013bf4 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a98:	891b      	ldrh	r3, [r3, #8]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <find_volume+0x3aa>
 8013a9e:	230d      	movs	r3, #13
 8013aa0:	e0a8      	b.n	8013bf4 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa4:	333c      	adds	r3, #60	; 0x3c
 8013aa6:	332c      	adds	r3, #44	; 0x2c
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fd ff8d 	bl	80119c8 <ld_dword>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab6:	6a1b      	ldr	r3, [r3, #32]
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	647b      	str	r3, [r7, #68]	; 0x44
 8013abc:	e01f      	b.n	8013afe <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac0:	891b      	ldrh	r3, [r3, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <find_volume+0x3d2>
 8013ac6:	230d      	movs	r3, #13
 8013ac8:	e094      	b.n	8013bf4 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ad0:	441a      	add	r2, r3
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ada:	2b02      	cmp	r3, #2
 8013adc:	d103      	bne.n	8013ae6 <find_volume+0x3ee>
 8013ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae0:	6a1b      	ldr	r3, [r3, #32]
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	e00a      	b.n	8013afc <find_volume+0x404>
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae8:	6a1a      	ldr	r2, [r3, #32]
 8013aea:	4613      	mov	r3, r2
 8013aec:	005b      	lsls	r3, r3, #1
 8013aee:	4413      	add	r3, r2
 8013af0:	085a      	lsrs	r2, r3, #1
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	6a1b      	ldr	r3, [r3, #32]
 8013af6:	f003 0301 	and.w	r3, r3, #1
 8013afa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013afc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b04:	899b      	ldrh	r3, [r3, #12]
 8013b06:	4619      	mov	r1, r3
 8013b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b0a:	440b      	add	r3, r1
 8013b0c:	3b01      	subs	r3, #1
 8013b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b10:	8989      	ldrh	r1, [r1, #12]
 8013b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d201      	bcs.n	8013b1e <find_volume+0x426>
 8013b1a:	230d      	movs	r3, #13
 8013b1c:	e06a      	b.n	8013bf4 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	f04f 32ff 	mov.w	r2, #4294967295
 8013b24:	61da      	str	r2, [r3, #28]
 8013b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b28:	69da      	ldr	r2, [r3, #28]
 8013b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	2280      	movs	r2, #128	; 0x80
 8013b32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b38:	2b03      	cmp	r3, #3
 8013b3a:	d149      	bne.n	8013bd0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3e:	333c      	adds	r3, #60	; 0x3c
 8013b40:	3330      	adds	r3, #48	; 0x30
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fd ff28 	bl	8011998 <ld_word>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d140      	bne.n	8013bd0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b50:	3301      	adds	r3, #1
 8013b52:	4619      	mov	r1, r3
 8013b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b56:	f7fe fa01 	bl	8011f5c <move_window>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d137      	bne.n	8013bd0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8013b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b62:	2200      	movs	r2, #0
 8013b64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b68:	333c      	adds	r3, #60	; 0x3c
 8013b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fd ff12 	bl	8011998 <ld_word>
 8013b74:	4603      	mov	r3, r0
 8013b76:	461a      	mov	r2, r3
 8013b78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d127      	bne.n	8013bd0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b82:	333c      	adds	r3, #60	; 0x3c
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fd ff1f 	bl	80119c8 <ld_dword>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	4a1b      	ldr	r2, [pc, #108]	; (8013bfc <find_volume+0x504>)
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d11e      	bne.n	8013bd0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b94:	333c      	adds	r3, #60	; 0x3c
 8013b96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fd ff14 	bl	80119c8 <ld_dword>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	4a17      	ldr	r2, [pc, #92]	; (8013c00 <find_volume+0x508>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d113      	bne.n	8013bd0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013baa:	333c      	adds	r3, #60	; 0x3c
 8013bac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7fd ff09 	bl	80119c8 <ld_dword>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bba:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	333c      	adds	r3, #60	; 0x3c
 8013bc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fd feff 	bl	80119c8 <ld_dword>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bce:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013bd6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013bd8:	4b0a      	ldr	r3, [pc, #40]	; (8013c04 <find_volume+0x50c>)
 8013bda:	881b      	ldrh	r3, [r3, #0]
 8013bdc:	3301      	adds	r3, #1
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	4b08      	ldr	r3, [pc, #32]	; (8013c04 <find_volume+0x50c>)
 8013be2:	801a      	strh	r2, [r3, #0]
 8013be4:	4b07      	ldr	r3, [pc, #28]	; (8013c04 <find_volume+0x50c>)
 8013be6:	881a      	ldrh	r2, [r3, #0]
 8013be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bee:	f7fe f94d 	bl	8011e8c <clear_lock>
#endif
	return FR_OK;
 8013bf2:	2300      	movs	r3, #0
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3758      	adds	r7, #88	; 0x58
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	41615252 	.word	0x41615252
 8013c00:	61417272 	.word	0x61417272
 8013c04:	2001915c 	.word	0x2001915c

08013c08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c12:	2309      	movs	r3, #9
 8013c14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d02e      	beq.n	8013c7a <validate+0x72>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d02a      	beq.n	8013c7a <validate+0x72>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d025      	beq.n	8013c7a <validate+0x72>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	889a      	ldrh	r2, [r3, #4]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	88db      	ldrh	r3, [r3, #6]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d11e      	bne.n	8013c7a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fd ffa9 	bl	8011b98 <lock_fs>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d014      	beq.n	8013c76 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	785b      	ldrb	r3, [r3, #1]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fd fe02 	bl	801185c <disk_status>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	f003 0301 	and.w	r3, r3, #1
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d102      	bne.n	8013c68 <validate+0x60>
				res = FR_OK;
 8013c62:	2300      	movs	r3, #0
 8013c64:	73fb      	strb	r3, [r7, #15]
 8013c66:	e008      	b.n	8013c7a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fd ffa8 	bl	8011bc4 <unlock_fs>
 8013c74:	e001      	b.n	8013c7a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013c76:	230f      	movs	r3, #15
 8013c78:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c7a:	7bfb      	ldrb	r3, [r7, #15]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d102      	bne.n	8013c86 <validate+0x7e>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	e000      	b.n	8013c88 <validate+0x80>
 8013c86:	2300      	movs	r3, #0
 8013c88:	683a      	ldr	r2, [r7, #0]
 8013c8a:	6013      	str	r3, [r2, #0]
	return res;
 8013c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3710      	adds	r7, #16
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
	...

08013c98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b088      	sub	sp, #32
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013caa:	f107 0310 	add.w	r3, r7, #16
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ff fc88 	bl	80135c4 <get_ldnumber>
 8013cb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	da01      	bge.n	8013cc0 <f_mount+0x28>
 8013cbc:	230b      	movs	r3, #11
 8013cbe:	e048      	b.n	8013d52 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013cc0:	4a26      	ldr	r2, [pc, #152]	; (8013d5c <f_mount+0xc4>)
 8013cc2:	69fb      	ldr	r3, [r7, #28]
 8013cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cc8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00f      	beq.n	8013cf0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013cd0:	69b8      	ldr	r0, [r7, #24]
 8013cd2:	f7fe f8db 	bl	8011e8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	695b      	ldr	r3, [r3, #20]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f001 fc59 	bl	8015592 <ff_del_syncobj>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <f_mount+0x52>
 8013ce6:	2302      	movs	r3, #2
 8013ce8:	e033      	b.n	8013d52 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	2200      	movs	r2, #0
 8013cee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d00f      	beq.n	8013d16 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	b2da      	uxtb	r2, r3
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	3314      	adds	r3, #20
 8013d04:	4619      	mov	r1, r3
 8013d06:	4610      	mov	r0, r2
 8013d08:	f001 fc28 	bl	801555c <ff_cre_syncobj>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d101      	bne.n	8013d16 <f_mount+0x7e>
 8013d12:	2302      	movs	r3, #2
 8013d14:	e01d      	b.n	8013d52 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	4910      	ldr	r1, [pc, #64]	; (8013d5c <f_mount+0xc4>)
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d002      	beq.n	8013d2c <f_mount+0x94>
 8013d26:	79fb      	ldrb	r3, [r7, #7]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d001      	beq.n	8013d30 <f_mount+0x98>
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e010      	b.n	8013d52 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d30:	f107 010c 	add.w	r1, r7, #12
 8013d34:	f107 0308 	add.w	r3, r7, #8
 8013d38:	2200      	movs	r2, #0
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7ff fcdc 	bl	80136f8 <find_volume>
 8013d40:	4603      	mov	r3, r0
 8013d42:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	7dfa      	ldrb	r2, [r7, #23]
 8013d48:	4611      	mov	r1, r2
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fd ff3a 	bl	8011bc4 <unlock_fs>
 8013d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3720      	adds	r7, #32
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	20019158 	.word	0x20019158

08013d60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d6c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d70:	6018      	str	r0, [r3, #0]
 8013d72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d76:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013d7a:	6019      	str	r1, [r3, #0]
 8013d7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d80:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013d84:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d101      	bne.n	8013d98 <f_open+0x38>
 8013d94:	2309      	movs	r3, #9
 8013d96:	e2ae      	b.n	80142f6 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d9c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013da0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013da4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013da8:	7812      	ldrb	r2, [r2, #0]
 8013daa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013dae:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8013db0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013db4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013db8:	781a      	ldrb	r2, [r3, #0]
 8013dba:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8013dbe:	f107 0308 	add.w	r3, r7, #8
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7ff fc98 	bl	80136f8 <find_volume>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8013dce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f040 827a 	bne.w	80142cc <f_open+0x56c>
		dj.obj.fs = fs;
 8013dd8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013ddc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8013de0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013de4:	f107 0214 	add.w	r2, r7, #20
 8013de8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013dea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013dee:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013df8:	4611      	mov	r1, r2
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7ff fb6c 	bl	80134d8 <follow_path>
 8013e00:	4603      	mov	r3, r0
 8013e02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013e06:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d11e      	bne.n	8013e4c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013e0e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8013e12:	b25b      	sxtb	r3, r3
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	da03      	bge.n	8013e20 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8013e18:	2306      	movs	r3, #6
 8013e1a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013e1e:	e015      	b.n	8013e4c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e24:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	f023 0301 	bic.w	r3, r3, #1
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	bf14      	ite	ne
 8013e32:	2301      	movne	r3, #1
 8013e34:	2300      	moveq	r3, #0
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	461a      	mov	r2, r3
 8013e3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013e3e:	4611      	mov	r1, r2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fd fedb 	bl	8011bfc <chk_lock>
 8013e46:	4603      	mov	r3, r0
 8013e48:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e50:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f003 031c 	and.w	r3, r3, #28
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 80a7 	beq.w	8013fae <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8013e60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01f      	beq.n	8013ea8 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e68:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013e6c:	2b04      	cmp	r3, #4
 8013e6e:	d10e      	bne.n	8013e8e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e70:	f7fd ff20 	bl	8011cb4 <enq_lock>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d006      	beq.n	8013e88 <f_open+0x128>
 8013e7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7ff f87a 	bl	8012f78 <dir_register>
 8013e84:	4603      	mov	r3, r0
 8013e86:	e000      	b.n	8013e8a <f_open+0x12a>
 8013e88:	2312      	movs	r3, #18
 8013e8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e92:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e96:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013e9a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013e9e:	7812      	ldrb	r2, [r2, #0]
 8013ea0:	f042 0208 	orr.w	r2, r2, #8
 8013ea4:	701a      	strb	r2, [r3, #0]
 8013ea6:	e015      	b.n	8013ed4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013ea8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013eac:	f003 0311 	and.w	r3, r3, #17
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d003      	beq.n	8013ebc <f_open+0x15c>
					res = FR_DENIED;
 8013eb4:	2307      	movs	r3, #7
 8013eb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013eba:	e00b      	b.n	8013ed4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013ebc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ec0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	f003 0304 	and.w	r3, r3, #4
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <f_open+0x174>
 8013ece:	2308      	movs	r3, #8
 8013ed0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013ed4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	f040 8088 	bne.w	8013fee <f_open+0x28e>
 8013ede:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ee2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	f003 0308 	and.w	r3, r3, #8
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d07e      	beq.n	8013fee <f_open+0x28e>
				dw = GET_FATTIME();
 8013ef0:	f7f9 f8d4 	bl	800d09c <get_fattime>
 8013ef4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ef8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013efc:	330e      	adds	r3, #14
 8013efe:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fd fd9e 	bl	8011a44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013f08:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013f0c:	3316      	adds	r3, #22
 8013f0e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fd fd96 	bl	8011a44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013f18:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013f1c:	330b      	adds	r3, #11
 8013f1e:	2220      	movs	r2, #32
 8013f20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013f22:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f26:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe fd9b 	bl	8012a68 <ld_clust>
 8013f32:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013f36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f3a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8013f3e:	2200      	movs	r2, #0
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe fdb0 	bl	8012aa6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013f46:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013f4a:	331c      	adds	r3, #28
 8013f4c:	2100      	movs	r1, #0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fd fd78 	bl	8011a44 <st_dword>
					fs->wflag = 1;
 8013f54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f58:	2201      	movs	r2, #1
 8013f5a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013f5c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d044      	beq.n	8013fee <f_open+0x28e>
						dw = fs->winsect;
 8013f64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f6a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8013f6e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013f72:	2200      	movs	r2, #0
 8013f74:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7fe fa9a 	bl	80124b2 <remove_chain>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8013f84:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d130      	bne.n	8013fee <f_open+0x28e>
							res = move_window(fs, dw);
 8013f8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f90:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7fd ffe1 	bl	8011f5c <move_window>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013fa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013fa4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8013fa8:	3a01      	subs	r2, #1
 8013faa:	619a      	str	r2, [r3, #24]
 8013fac:	e01f      	b.n	8013fee <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013fae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d11b      	bne.n	8013fee <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013fb6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013fba:	f003 0310 	and.w	r3, r3, #16
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d003      	beq.n	8013fca <f_open+0x26a>
					res = FR_NO_FILE;
 8013fc2:	2304      	movs	r3, #4
 8013fc4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013fc8:	e011      	b.n	8013fee <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013fca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fce:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	f003 0302 	and.w	r3, r3, #2
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d008      	beq.n	8013fee <f_open+0x28e>
 8013fdc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013fe0:	f003 0301 	and.w	r3, r3, #1
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <f_open+0x28e>
						res = FR_DENIED;
 8013fe8:	2307      	movs	r3, #7
 8013fea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8013fee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d14a      	bne.n	801408c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013ff6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ffa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	f003 0308 	and.w	r3, r3, #8
 8014004:	2b00      	cmp	r3, #0
 8014006:	d00b      	beq.n	8014020 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8014008:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801400c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8014010:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8014014:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8014018:	7812      	ldrb	r2, [r2, #0]
 801401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801401e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014020:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014026:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801402a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014032:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8014036:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801403a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014042:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014046:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	f023 0301 	bic.w	r3, r3, #1
 8014050:	2b00      	cmp	r3, #0
 8014052:	bf14      	ite	ne
 8014054:	2301      	movne	r3, #1
 8014056:	2300      	moveq	r3, #0
 8014058:	b2db      	uxtb	r3, r3
 801405a:	461a      	mov	r2, r3
 801405c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014060:	4611      	mov	r1, r2
 8014062:	4618      	mov	r0, r3
 8014064:	f7fd fe48 	bl	8011cf8 <inc_lock>
 8014068:	4602      	mov	r2, r0
 801406a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801406e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014076:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801407a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	691b      	ldr	r3, [r3, #16]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d102      	bne.n	801408c <f_open+0x32c>
 8014086:	2302      	movs	r3, #2
 8014088:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801408c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014090:	2b00      	cmp	r3, #0
 8014092:	f040 811b 	bne.w	80142cc <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014096:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801409a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801409e:	4611      	mov	r1, r2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fe fce1 	bl	8012a68 <ld_clust>
 80140a6:	4602      	mov	r2, r0
 80140a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80140b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80140b8:	331c      	adds	r3, #28
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fd fc84 	bl	80119c8 <ld_dword>
 80140c0:	4602      	mov	r2, r0
 80140c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80140ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2200      	movs	r2, #0
 80140da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80140dc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80140e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80140ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80140f0:	88da      	ldrh	r2, [r3, #6]
 80140f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80140fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014102:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801410c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8014110:	7812      	ldrb	r2, [r2, #0]
 8014112:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014118:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2200      	movs	r2, #0
 8014120:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014122:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014126:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2200      	movs	r2, #0
 801412e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014130:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014134:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2200      	movs	r2, #0
 801413c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801413e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014142:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	3330      	adds	r3, #48	; 0x30
 801414a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801414e:	2100      	movs	r1, #0
 8014150:	4618      	mov	r0, r3
 8014152:	f7fd fcc4 	bl	8011ade <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014156:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801415a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	f003 0320 	and.w	r3, r3, #32
 8014164:	2b00      	cmp	r3, #0
 8014166:	f000 80b1 	beq.w	80142cc <f_open+0x56c>
 801416a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801416e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	68db      	ldr	r3, [r3, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 80a8 	beq.w	80142cc <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801417c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014180:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	68da      	ldr	r2, [r3, #12]
 8014188:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801418c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014194:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014198:	895b      	ldrh	r3, [r3, #10]
 801419a:	461a      	mov	r2, r3
 801419c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80141a0:	899b      	ldrh	r3, [r3, #12]
 80141a2:	fb02 f303 	mul.w	r3, r2, r3
 80141a6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80141aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80141ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80141ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80141be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80141ca:	e021      	b.n	8014210 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 80141cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80141d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd ff7b 	bl	80120d6 <get_fat>
 80141e0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80141e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d802      	bhi.n	80141f2 <f_open+0x492>
 80141ec:	2302      	movs	r3, #2
 80141ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80141f2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80141f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141fa:	d102      	bne.n	8014202 <f_open+0x4a2>
 80141fc:	2301      	movs	r3, #1
 80141fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014202:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8014206:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8014210:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014214:	2b00      	cmp	r3, #0
 8014216:	d105      	bne.n	8014224 <f_open+0x4c4>
 8014218:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801421c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8014220:	429a      	cmp	r2, r3
 8014222:	d8d3      	bhi.n	80141cc <f_open+0x46c>
				}
				fp->clust = clst;
 8014224:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014228:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8014232:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014234:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014238:	2b00      	cmp	r3, #0
 801423a:	d147      	bne.n	80142cc <f_open+0x56c>
 801423c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014240:	899b      	ldrh	r3, [r3, #12]
 8014242:	461a      	mov	r2, r3
 8014244:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8014248:	fbb3 f1f2 	udiv	r1, r3, r2
 801424c:	fb01 f202 	mul.w	r2, r1, r2
 8014250:	1a9b      	subs	r3, r3, r2
 8014252:	2b00      	cmp	r3, #0
 8014254:	d03a      	beq.n	80142cc <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014256:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801425a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801425e:	4618      	mov	r0, r3
 8014260:	f7fd ff1a 	bl	8012098 <clust2sect>
 8014264:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8014268:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801426c:	2b00      	cmp	r3, #0
 801426e:	d103      	bne.n	8014278 <f_open+0x518>
						res = FR_INT_ERR;
 8014270:	2302      	movs	r3, #2
 8014272:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8014276:	e029      	b.n	80142cc <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014278:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801427c:	899b      	ldrh	r3, [r3, #12]
 801427e:	461a      	mov	r2, r3
 8014280:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8014284:	fbb3 f2f2 	udiv	r2, r3, r2
 8014288:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801428c:	441a      	add	r2, r3
 801428e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014292:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801429a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801429e:	7858      	ldrb	r0, [r3, #1]
 80142a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	6a1a      	ldr	r2, [r3, #32]
 80142ba:	2301      	movs	r3, #1
 80142bc:	f7fd fb0e 	bl	80118dc <disk_read>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d002      	beq.n	80142cc <f_open+0x56c>
 80142c6:	2301      	movs	r3, #1
 80142c8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80142cc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d006      	beq.n	80142e2 <f_open+0x582>
 80142d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2200      	movs	r2, #0
 80142e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80142e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80142e6:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 80142ea:	4611      	mov	r1, r2
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fd fc69 	bl	8011bc4 <unlock_fs>
 80142f2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b08e      	sub	sp, #56	; 0x38
 8014304:	af00      	add	r7, sp, #0
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	2200      	movs	r2, #0
 8014316:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f107 0214 	add.w	r2, r7, #20
 801431e:	4611      	mov	r1, r2
 8014320:	4618      	mov	r0, r3
 8014322:	f7ff fc71 	bl	8013c08 <validate>
 8014326:	4603      	mov	r3, r0
 8014328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801432c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014330:	2b00      	cmp	r3, #0
 8014332:	d107      	bne.n	8014344 <f_read+0x44>
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	7d5b      	ldrb	r3, [r3, #21]
 8014338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801433c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014340:	2b00      	cmp	r3, #0
 8014342:	d009      	beq.n	8014358 <f_read+0x58>
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801434a:	4611      	mov	r1, r2
 801434c:	4618      	mov	r0, r3
 801434e:	f7fd fc39 	bl	8011bc4 <unlock_fs>
 8014352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014356:	e15d      	b.n	8014614 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	7d1b      	ldrb	r3, [r3, #20]
 801435c:	f003 0301 	and.w	r3, r3, #1
 8014360:	2b00      	cmp	r3, #0
 8014362:	d106      	bne.n	8014372 <f_read+0x72>
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	2107      	movs	r1, #7
 8014368:	4618      	mov	r0, r3
 801436a:	f7fd fc2b 	bl	8011bc4 <unlock_fs>
 801436e:	2307      	movs	r3, #7
 8014370:	e150      	b.n	8014614 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	68da      	ldr	r2, [r3, #12]
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	699b      	ldr	r3, [r3, #24]
 801437a:	1ad3      	subs	r3, r2, r3
 801437c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	429a      	cmp	r2, r3
 8014384:	f240 813c 	bls.w	8014600 <f_read+0x300>
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801438c:	e138      	b.n	8014600 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	697a      	ldr	r2, [r7, #20]
 8014394:	8992      	ldrh	r2, [r2, #12]
 8014396:	fbb3 f1f2 	udiv	r1, r3, r2
 801439a:	fb01 f202 	mul.w	r2, r1, r2
 801439e:	1a9b      	subs	r3, r3, r2
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	f040 80f3 	bne.w	801458c <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	697a      	ldr	r2, [r7, #20]
 80143ac:	8992      	ldrh	r2, [r2, #12]
 80143ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80143b2:	697a      	ldr	r2, [r7, #20]
 80143b4:	8952      	ldrh	r2, [r2, #10]
 80143b6:	3a01      	subs	r2, #1
 80143b8:	4013      	ands	r3, r2
 80143ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d139      	bne.n	8014436 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d103      	bne.n	80143d2 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	633b      	str	r3, [r7, #48]	; 0x30
 80143d0:	e013      	b.n	80143fa <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d007      	beq.n	80143ea <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	699b      	ldr	r3, [r3, #24]
 80143de:	4619      	mov	r1, r3
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7fe f963 	bl	80126ac <clmt_clust>
 80143e6:	6338      	str	r0, [r7, #48]	; 0x30
 80143e8:	e007      	b.n	80143fa <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80143ea:	68fa      	ldr	r2, [r7, #12]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	69db      	ldr	r3, [r3, #28]
 80143f0:	4619      	mov	r1, r3
 80143f2:	4610      	mov	r0, r2
 80143f4:	f7fd fe6f 	bl	80120d6 <get_fat>
 80143f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80143fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d809      	bhi.n	8014414 <f_read+0x114>
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	2202      	movs	r2, #2
 8014404:	755a      	strb	r2, [r3, #21]
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	2102      	movs	r1, #2
 801440a:	4618      	mov	r0, r3
 801440c:	f7fd fbda 	bl	8011bc4 <unlock_fs>
 8014410:	2302      	movs	r3, #2
 8014412:	e0ff      	b.n	8014614 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801441a:	d109      	bne.n	8014430 <f_read+0x130>
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2201      	movs	r2, #1
 8014420:	755a      	strb	r2, [r3, #21]
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	2101      	movs	r1, #1
 8014426:	4618      	mov	r0, r3
 8014428:	f7fd fbcc 	bl	8011bc4 <unlock_fs>
 801442c:	2301      	movs	r3, #1
 801442e:	e0f1      	b.n	8014614 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014434:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014436:	697a      	ldr	r2, [r7, #20]
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	4619      	mov	r1, r3
 801443e:	4610      	mov	r0, r2
 8014440:	f7fd fe2a 	bl	8012098 <clust2sect>
 8014444:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d109      	bne.n	8014460 <f_read+0x160>
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2202      	movs	r2, #2
 8014450:	755a      	strb	r2, [r3, #21]
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	2102      	movs	r1, #2
 8014456:	4618      	mov	r0, r3
 8014458:	f7fd fbb4 	bl	8011bc4 <unlock_fs>
 801445c:	2302      	movs	r3, #2
 801445e:	e0d9      	b.n	8014614 <f_read+0x314>
			sect += csect;
 8014460:	69ba      	ldr	r2, [r7, #24]
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	4413      	add	r3, r2
 8014466:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	899b      	ldrh	r3, [r3, #12]
 801446c:	461a      	mov	r2, r3
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	fbb3 f3f2 	udiv	r3, r3, r2
 8014474:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014478:	2b00      	cmp	r3, #0
 801447a:	d046      	beq.n	801450a <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801447c:	69fa      	ldr	r2, [r7, #28]
 801447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014480:	4413      	add	r3, r2
 8014482:	697a      	ldr	r2, [r7, #20]
 8014484:	8952      	ldrh	r2, [r2, #10]
 8014486:	4293      	cmp	r3, r2
 8014488:	d905      	bls.n	8014496 <f_read+0x196>
					cc = fs->csize - csect;
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	895b      	ldrh	r3, [r3, #10]
 801448e:	461a      	mov	r2, r3
 8014490:	69fb      	ldr	r3, [r7, #28]
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	7858      	ldrb	r0, [r3, #1]
 801449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449c:	69ba      	ldr	r2, [r7, #24]
 801449e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144a0:	f7fd fa1c 	bl	80118dc <disk_read>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d009      	beq.n	80144be <f_read+0x1be>
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2201      	movs	r2, #1
 80144ae:	755a      	strb	r2, [r3, #21]
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	2101      	movs	r1, #1
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fd fb85 	bl	8011bc4 <unlock_fs>
 80144ba:	2301      	movs	r3, #1
 80144bc:	e0aa      	b.n	8014614 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	7d1b      	ldrb	r3, [r3, #20]
 80144c2:	b25b      	sxtb	r3, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	da18      	bge.n	80144fa <f_read+0x1fa>
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	6a1a      	ldr	r2, [r3, #32]
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d911      	bls.n	80144fa <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6a1a      	ldr	r2, [r3, #32]
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	1ad3      	subs	r3, r2, r3
 80144de:	697a      	ldr	r2, [r7, #20]
 80144e0:	8992      	ldrh	r2, [r2, #12]
 80144e2:	fb02 f303 	mul.w	r3, r2, r3
 80144e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144e8:	18d0      	adds	r0, r2, r3
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	899b      	ldrh	r3, [r3, #12]
 80144f4:	461a      	mov	r2, r3
 80144f6:	f7fd fad1 	bl	8011a9c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	899b      	ldrh	r3, [r3, #12]
 80144fe:	461a      	mov	r2, r3
 8014500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014502:	fb02 f303 	mul.w	r3, r2, r3
 8014506:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014508:	e066      	b.n	80145d8 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	6a1b      	ldr	r3, [r3, #32]
 801450e:	69ba      	ldr	r2, [r7, #24]
 8014510:	429a      	cmp	r2, r3
 8014512:	d038      	beq.n	8014586 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	7d1b      	ldrb	r3, [r3, #20]
 8014518:	b25b      	sxtb	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	da1d      	bge.n	801455a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	7858      	ldrb	r0, [r3, #1]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	6a1a      	ldr	r2, [r3, #32]
 801452c:	2301      	movs	r3, #1
 801452e:	f7fd f9f5 	bl	801191c <disk_write>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d009      	beq.n	801454c <f_read+0x24c>
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2201      	movs	r2, #1
 801453c:	755a      	strb	r2, [r3, #21]
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	2101      	movs	r1, #1
 8014542:	4618      	mov	r0, r3
 8014544:	f7fd fb3e 	bl	8011bc4 <unlock_fs>
 8014548:	2301      	movs	r3, #1
 801454a:	e063      	b.n	8014614 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	7d1b      	ldrb	r3, [r3, #20]
 8014550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014554:	b2da      	uxtb	r2, r3
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	7858      	ldrb	r0, [r3, #1]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014564:	2301      	movs	r3, #1
 8014566:	69ba      	ldr	r2, [r7, #24]
 8014568:	f7fd f9b8 	bl	80118dc <disk_read>
 801456c:	4603      	mov	r3, r0
 801456e:	2b00      	cmp	r3, #0
 8014570:	d009      	beq.n	8014586 <f_read+0x286>
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2201      	movs	r2, #1
 8014576:	755a      	strb	r2, [r3, #21]
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	2101      	movs	r1, #1
 801457c:	4618      	mov	r0, r3
 801457e:	f7fd fb21 	bl	8011bc4 <unlock_fs>
 8014582:	2301      	movs	r3, #1
 8014584:	e046      	b.n	8014614 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	69ba      	ldr	r2, [r7, #24]
 801458a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	899b      	ldrh	r3, [r3, #12]
 8014590:	4618      	mov	r0, r3
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	697a      	ldr	r2, [r7, #20]
 8014598:	8992      	ldrh	r2, [r2, #12]
 801459a:	fbb3 f1f2 	udiv	r1, r3, r2
 801459e:	fb01 f202 	mul.w	r2, r1, r2
 80145a2:	1a9b      	subs	r3, r3, r2
 80145a4:	1ac3      	subs	r3, r0, r3
 80145a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80145a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d901      	bls.n	80145b4 <f_read+0x2b4>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	699b      	ldr	r3, [r3, #24]
 80145be:	697a      	ldr	r2, [r7, #20]
 80145c0:	8992      	ldrh	r2, [r2, #12]
 80145c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80145c6:	fb00 f202 	mul.w	r2, r0, r2
 80145ca:	1a9b      	subs	r3, r3, r2
 80145cc:	440b      	add	r3, r1
 80145ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145d0:	4619      	mov	r1, r3
 80145d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145d4:	f7fd fa62 	bl	8011a9c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80145d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145dc:	4413      	add	r3, r2
 80145de:	627b      	str	r3, [r7, #36]	; 0x24
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	699a      	ldr	r2, [r3, #24]
 80145e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e6:	441a      	add	r2, r3
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	619a      	str	r2, [r3, #24]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f2:	441a      	add	r2, r3
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fc:	1ad3      	subs	r3, r2, r3
 80145fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	f47f aec3 	bne.w	801438e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	2100      	movs	r1, #0
 801460c:	4618      	mov	r0, r3
 801460e:	f7fd fad9 	bl	8011bc4 <unlock_fs>
 8014612:	2300      	movs	r3, #0
}
 8014614:	4618      	mov	r0, r3
 8014616:	3738      	adds	r7, #56	; 0x38
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b08c      	sub	sp, #48	; 0x30
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
 8014628:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f107 0210 	add.w	r2, r7, #16
 801463a:	4611      	mov	r1, r2
 801463c:	4618      	mov	r0, r3
 801463e:	f7ff fae3 	bl	8013c08 <validate>
 8014642:	4603      	mov	r3, r0
 8014644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801464c:	2b00      	cmp	r3, #0
 801464e:	d107      	bne.n	8014660 <f_write+0x44>
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	7d5b      	ldrb	r3, [r3, #21]
 8014654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801465c:	2b00      	cmp	r3, #0
 801465e:	d009      	beq.n	8014674 <f_write+0x58>
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014666:	4611      	mov	r1, r2
 8014668:	4618      	mov	r0, r3
 801466a:	f7fd faab 	bl	8011bc4 <unlock_fs>
 801466e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014672:	e192      	b.n	801499a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	7d1b      	ldrb	r3, [r3, #20]
 8014678:	f003 0302 	and.w	r3, r3, #2
 801467c:	2b00      	cmp	r3, #0
 801467e:	d106      	bne.n	801468e <f_write+0x72>
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	2107      	movs	r1, #7
 8014684:	4618      	mov	r0, r3
 8014686:	f7fd fa9d 	bl	8011bc4 <unlock_fs>
 801468a:	2307      	movs	r3, #7
 801468c:	e185      	b.n	801499a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	699a      	ldr	r2, [r3, #24]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	441a      	add	r2, r3
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	699b      	ldr	r3, [r3, #24]
 801469a:	429a      	cmp	r2, r3
 801469c:	f080 816a 	bcs.w	8014974 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	699b      	ldr	r3, [r3, #24]
 80146a4:	43db      	mvns	r3, r3
 80146a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80146a8:	e164      	b.n	8014974 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	699b      	ldr	r3, [r3, #24]
 80146ae:	693a      	ldr	r2, [r7, #16]
 80146b0:	8992      	ldrh	r2, [r2, #12]
 80146b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80146b6:	fb01 f202 	mul.w	r2, r1, r2
 80146ba:	1a9b      	subs	r3, r3, r2
 80146bc:	2b00      	cmp	r3, #0
 80146be:	f040 810f 	bne.w	80148e0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	699b      	ldr	r3, [r3, #24]
 80146c6:	693a      	ldr	r2, [r7, #16]
 80146c8:	8992      	ldrh	r2, [r2, #12]
 80146ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80146ce:	693a      	ldr	r2, [r7, #16]
 80146d0:	8952      	ldrh	r2, [r2, #10]
 80146d2:	3a01      	subs	r2, #1
 80146d4:	4013      	ands	r3, r2
 80146d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d14d      	bne.n	801477a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	699b      	ldr	r3, [r3, #24]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d10c      	bne.n	8014700 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80146ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d11a      	bne.n	8014728 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2100      	movs	r1, #0
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fd ff40 	bl	801257c <create_chain>
 80146fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80146fe:	e013      	b.n	8014728 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014704:	2b00      	cmp	r3, #0
 8014706:	d007      	beq.n	8014718 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	699b      	ldr	r3, [r3, #24]
 801470c:	4619      	mov	r1, r3
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f7fd ffcc 	bl	80126ac <clmt_clust>
 8014714:	62b8      	str	r0, [r7, #40]	; 0x28
 8014716:	e007      	b.n	8014728 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	69db      	ldr	r3, [r3, #28]
 801471e:	4619      	mov	r1, r3
 8014720:	4610      	mov	r0, r2
 8014722:	f7fd ff2b 	bl	801257c <create_chain>
 8014726:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801472a:	2b00      	cmp	r3, #0
 801472c:	f000 8127 	beq.w	801497e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014732:	2b01      	cmp	r3, #1
 8014734:	d109      	bne.n	801474a <f_write+0x12e>
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2202      	movs	r2, #2
 801473a:	755a      	strb	r2, [r3, #21]
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	2102      	movs	r1, #2
 8014740:	4618      	mov	r0, r3
 8014742:	f7fd fa3f 	bl	8011bc4 <unlock_fs>
 8014746:	2302      	movs	r3, #2
 8014748:	e127      	b.n	801499a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014750:	d109      	bne.n	8014766 <f_write+0x14a>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2201      	movs	r2, #1
 8014756:	755a      	strb	r2, [r3, #21]
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	2101      	movs	r1, #1
 801475c:	4618      	mov	r0, r3
 801475e:	f7fd fa31 	bl	8011bc4 <unlock_fs>
 8014762:	2301      	movs	r3, #1
 8014764:	e119      	b.n	801499a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801476a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <f_write+0x15e>
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014778:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	7d1b      	ldrb	r3, [r3, #20]
 801477e:	b25b      	sxtb	r3, r3
 8014780:	2b00      	cmp	r3, #0
 8014782:	da1d      	bge.n	80147c0 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	7858      	ldrb	r0, [r3, #1]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	6a1a      	ldr	r2, [r3, #32]
 8014792:	2301      	movs	r3, #1
 8014794:	f7fd f8c2 	bl	801191c <disk_write>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	d009      	beq.n	80147b2 <f_write+0x196>
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2201      	movs	r2, #1
 80147a2:	755a      	strb	r2, [r3, #21]
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	2101      	movs	r1, #1
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fd fa0b 	bl	8011bc4 <unlock_fs>
 80147ae:	2301      	movs	r3, #1
 80147b0:	e0f3      	b.n	801499a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	7d1b      	ldrb	r3, [r3, #20]
 80147b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80147c0:	693a      	ldr	r2, [r7, #16]
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	69db      	ldr	r3, [r3, #28]
 80147c6:	4619      	mov	r1, r3
 80147c8:	4610      	mov	r0, r2
 80147ca:	f7fd fc65 	bl	8012098 <clust2sect>
 80147ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d109      	bne.n	80147ea <f_write+0x1ce>
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2202      	movs	r2, #2
 80147da:	755a      	strb	r2, [r3, #21]
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	2102      	movs	r1, #2
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fd f9ef 	bl	8011bc4 <unlock_fs>
 80147e6:	2302      	movs	r3, #2
 80147e8:	e0d7      	b.n	801499a <f_write+0x37e>
			sect += csect;
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	4413      	add	r3, r2
 80147f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	899b      	ldrh	r3, [r3, #12]
 80147f6:	461a      	mov	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80147fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014800:	6a3b      	ldr	r3, [r7, #32]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d048      	beq.n	8014898 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014806:	69ba      	ldr	r2, [r7, #24]
 8014808:	6a3b      	ldr	r3, [r7, #32]
 801480a:	4413      	add	r3, r2
 801480c:	693a      	ldr	r2, [r7, #16]
 801480e:	8952      	ldrh	r2, [r2, #10]
 8014810:	4293      	cmp	r3, r2
 8014812:	d905      	bls.n	8014820 <f_write+0x204>
					cc = fs->csize - csect;
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	895b      	ldrh	r3, [r3, #10]
 8014818:	461a      	mov	r2, r3
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	1ad3      	subs	r3, r2, r3
 801481e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	7858      	ldrb	r0, [r3, #1]
 8014824:	6a3b      	ldr	r3, [r7, #32]
 8014826:	697a      	ldr	r2, [r7, #20]
 8014828:	69f9      	ldr	r1, [r7, #28]
 801482a:	f7fd f877 	bl	801191c <disk_write>
 801482e:	4603      	mov	r3, r0
 8014830:	2b00      	cmp	r3, #0
 8014832:	d009      	beq.n	8014848 <f_write+0x22c>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2201      	movs	r2, #1
 8014838:	755a      	strb	r2, [r3, #21]
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	2101      	movs	r1, #1
 801483e:	4618      	mov	r0, r3
 8014840:	f7fd f9c0 	bl	8011bc4 <unlock_fs>
 8014844:	2301      	movs	r3, #1
 8014846:	e0a8      	b.n	801499a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6a1a      	ldr	r2, [r3, #32]
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	6a3a      	ldr	r2, [r7, #32]
 8014852:	429a      	cmp	r2, r3
 8014854:	d918      	bls.n	8014888 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6a1a      	ldr	r2, [r3, #32]
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	1ad3      	subs	r3, r2, r3
 8014864:	693a      	ldr	r2, [r7, #16]
 8014866:	8992      	ldrh	r2, [r2, #12]
 8014868:	fb02 f303 	mul.w	r3, r2, r3
 801486c:	69fa      	ldr	r2, [r7, #28]
 801486e:	18d1      	adds	r1, r2, r3
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	899b      	ldrh	r3, [r3, #12]
 8014874:	461a      	mov	r2, r3
 8014876:	f7fd f911 	bl	8011a9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	7d1b      	ldrb	r3, [r3, #20]
 801487e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014882:	b2da      	uxtb	r2, r3
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	899b      	ldrh	r3, [r3, #12]
 801488c:	461a      	mov	r2, r3
 801488e:	6a3b      	ldr	r3, [r7, #32]
 8014890:	fb02 f303 	mul.w	r3, r2, r3
 8014894:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014896:	e050      	b.n	801493a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	6a1b      	ldr	r3, [r3, #32]
 801489c:	697a      	ldr	r2, [r7, #20]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d01b      	beq.n	80148da <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	699a      	ldr	r2, [r3, #24]
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d215      	bcs.n	80148da <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	7858      	ldrb	r0, [r3, #1]
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148b8:	2301      	movs	r3, #1
 80148ba:	697a      	ldr	r2, [r7, #20]
 80148bc:	f7fd f80e 	bl	80118dc <disk_read>
 80148c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d009      	beq.n	80148da <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2201      	movs	r2, #1
 80148ca:	755a      	strb	r2, [r3, #21]
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	2101      	movs	r1, #1
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7fd f977 	bl	8011bc4 <unlock_fs>
 80148d6:	2301      	movs	r3, #1
 80148d8:	e05f      	b.n	801499a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	899b      	ldrh	r3, [r3, #12]
 80148e4:	4618      	mov	r0, r3
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	699b      	ldr	r3, [r3, #24]
 80148ea:	693a      	ldr	r2, [r7, #16]
 80148ec:	8992      	ldrh	r2, [r2, #12]
 80148ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80148f2:	fb01 f202 	mul.w	r2, r1, r2
 80148f6:	1a9b      	subs	r3, r3, r2
 80148f8:	1ac3      	subs	r3, r0, r3
 80148fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80148fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	429a      	cmp	r2, r3
 8014902:	d901      	bls.n	8014908 <f_write+0x2ec>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	699b      	ldr	r3, [r3, #24]
 8014912:	693a      	ldr	r2, [r7, #16]
 8014914:	8992      	ldrh	r2, [r2, #12]
 8014916:	fbb3 f0f2 	udiv	r0, r3, r2
 801491a:	fb00 f202 	mul.w	r2, r0, r2
 801491e:	1a9b      	subs	r3, r3, r2
 8014920:	440b      	add	r3, r1
 8014922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014924:	69f9      	ldr	r1, [r7, #28]
 8014926:	4618      	mov	r0, r3
 8014928:	f7fd f8b8 	bl	8011a9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	7d1b      	ldrb	r3, [r3, #20]
 8014930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014934:	b2da      	uxtb	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801493a:	69fa      	ldr	r2, [r7, #28]
 801493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493e:	4413      	add	r3, r2
 8014940:	61fb      	str	r3, [r7, #28]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	699a      	ldr	r2, [r3, #24]
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	441a      	add	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	619a      	str	r2, [r3, #24]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	68da      	ldr	r2, [r3, #12]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	699b      	ldr	r3, [r3, #24]
 8014956:	429a      	cmp	r2, r3
 8014958:	bf38      	it	cc
 801495a:	461a      	movcc	r2, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	60da      	str	r2, [r3, #12]
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	681a      	ldr	r2, [r3, #0]
 8014964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014966:	441a      	add	r2, r3
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	601a      	str	r2, [r3, #0]
 801496c:	687a      	ldr	r2, [r7, #4]
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	f47f ae97 	bne.w	80146aa <f_write+0x8e>
 801497c:	e000      	b.n	8014980 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801497e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	7d1b      	ldrb	r3, [r3, #20]
 8014984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014988:	b2da      	uxtb	r2, r3
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	2100      	movs	r1, #0
 8014992:	4618      	mov	r0, r3
 8014994:	f7fd f916 	bl	8011bc4 <unlock_fs>
 8014998:	2300      	movs	r3, #0
}
 801499a:	4618      	mov	r0, r3
 801499c:	3730      	adds	r7, #48	; 0x30
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}

080149a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80149a2:	b580      	push	{r7, lr}
 80149a4:	b086      	sub	sp, #24
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f107 0208 	add.w	r2, r7, #8
 80149b0:	4611      	mov	r1, r2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7ff f928 	bl	8013c08 <validate>
 80149b8:	4603      	mov	r3, r0
 80149ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80149bc:	7dfb      	ldrb	r3, [r7, #23]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d16d      	bne.n	8014a9e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	7d1b      	ldrb	r3, [r3, #20]
 80149c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d067      	beq.n	8014a9e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	7d1b      	ldrb	r3, [r3, #20]
 80149d2:	b25b      	sxtb	r3, r3
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	da1a      	bge.n	8014a0e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	7858      	ldrb	r0, [r3, #1]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6a1a      	ldr	r2, [r3, #32]
 80149e6:	2301      	movs	r3, #1
 80149e8:	f7fc ff98 	bl	801191c <disk_write>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d006      	beq.n	8014a00 <f_sync+0x5e>
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	2101      	movs	r1, #1
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fd f8e4 	bl	8011bc4 <unlock_fs>
 80149fc:	2301      	movs	r3, #1
 80149fe:	e055      	b.n	8014aac <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	7d1b      	ldrb	r3, [r3, #20]
 8014a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a08:	b2da      	uxtb	r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014a0e:	f7f8 fb45 	bl	800d09c <get_fattime>
 8014a12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014a14:	68ba      	ldr	r2, [r7, #8]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	f7fd fa9d 	bl	8011f5c <move_window>
 8014a22:	4603      	mov	r3, r0
 8014a24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d138      	bne.n	8014a9e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	330b      	adds	r3, #11
 8014a36:	781a      	ldrb	r2, [r3, #0]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	330b      	adds	r3, #11
 8014a3c:	f042 0220 	orr.w	r2, r2, #32
 8014a40:	b2d2      	uxtb	r2, r2
 8014a42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6818      	ldr	r0, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	689b      	ldr	r3, [r3, #8]
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	68f9      	ldr	r1, [r7, #12]
 8014a50:	f7fe f829 	bl	8012aa6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f103 021c 	add.w	r2, r3, #28
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	68db      	ldr	r3, [r3, #12]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	4610      	mov	r0, r2
 8014a62:	f7fc ffef 	bl	8011a44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3316      	adds	r3, #22
 8014a6a:	6939      	ldr	r1, [r7, #16]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7fc ffe9 	bl	8011a44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	3312      	adds	r3, #18
 8014a76:	2100      	movs	r1, #0
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fc ffc8 	bl	8011a0e <st_word>
					fs->wflag = 1;
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	2201      	movs	r2, #1
 8014a82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fd fa96 	bl	8011fb8 <sync_fs>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	7d1b      	ldrb	r3, [r3, #20]
 8014a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	7dfa      	ldrb	r2, [r7, #23]
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7fd f88d 	bl	8011bc4 <unlock_fs>
 8014aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff ff70 	bl	80149a2 <f_sync>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014ac6:	7bfb      	ldrb	r3, [r7, #15]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d11d      	bne.n	8014b08 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f107 0208 	add.w	r2, r7, #8
 8014ad2:	4611      	mov	r1, r2
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7ff f897 	bl	8013c08 <validate>
 8014ada:	4603      	mov	r3, r0
 8014adc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ade:	7bfb      	ldrb	r3, [r7, #15]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d111      	bne.n	8014b08 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7fd f993 	bl	8011e14 <dec_lock>
 8014aee:	4603      	mov	r3, r0
 8014af0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014af2:	7bfb      	ldrb	r3, [r7, #15]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d102      	bne.n	8014afe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2200      	movs	r2, #0
 8014afc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2100      	movs	r1, #0
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fd f85e 	bl	8011bc4 <unlock_fs>
#endif
		}
	}
	return res;
 8014b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b090      	sub	sp, #64	; 0x40
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
 8014b1a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f107 0208 	add.w	r2, r7, #8
 8014b22:	4611      	mov	r1, r2
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff f86f 	bl	8013c08 <validate>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014b30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d103      	bne.n	8014b40 <f_lseek+0x2e>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	7d5b      	ldrb	r3, [r3, #21]
 8014b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d009      	beq.n	8014b5c <f_lseek+0x4a>
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014b4e:	4611      	mov	r1, r2
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fd f837 	bl	8011bc4 <unlock_fs>
 8014b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b5a:	e244      	b.n	8014fe6 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	f000 80f2 	beq.w	8014d4a <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b6c:	d164      	bne.n	8014c38 <f_lseek+0x126>
			tbl = fp->cltbl;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b72:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b76:	1d1a      	adds	r2, r3, #4
 8014b78:	627a      	str	r2, [r7, #36]	; 0x24
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	2302      	movs	r3, #2
 8014b80:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	689b      	ldr	r3, [r3, #8]
 8014b86:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d044      	beq.n	8014c18 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	613b      	str	r3, [r7, #16]
 8014b92:	2300      	movs	r3, #0
 8014b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b98:	3302      	adds	r3, #2
 8014b9a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9e:	60fb      	str	r3, [r7, #12]
 8014ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7fd fa93 	bl	80120d6 <get_fat>
 8014bb0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d809      	bhi.n	8014bcc <f_lseek+0xba>
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2202      	movs	r2, #2
 8014bbc:	755a      	strb	r2, [r3, #21]
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2102      	movs	r1, #2
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fc fffe 	bl	8011bc4 <unlock_fs>
 8014bc8:	2302      	movs	r3, #2
 8014bca:	e20c      	b.n	8014fe6 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd2:	d109      	bne.n	8014be8 <f_lseek+0xd6>
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	755a      	strb	r2, [r3, #21]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2101      	movs	r1, #1
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fc fff0 	bl	8011bc4 <unlock_fs>
 8014be4:	2301      	movs	r3, #1
 8014be6:	e1fe      	b.n	8014fe6 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	3301      	adds	r3, #1
 8014bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d0d4      	beq.n	8014b9c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d809      	bhi.n	8014c0e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	1d1a      	adds	r2, r3, #4
 8014bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8014c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c02:	601a      	str	r2, [r3, #0]
 8014c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c06:	1d1a      	adds	r2, r3, #4
 8014c08:	627a      	str	r2, [r7, #36]	; 0x24
 8014c0a:	693a      	ldr	r2, [r7, #16]
 8014c0c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	6a1b      	ldr	r3, [r3, #32]
 8014c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d3ba      	bcc.n	8014b8e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c1e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d803      	bhi.n	8014c30 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	601a      	str	r2, [r3, #0]
 8014c2e:	e1d1      	b.n	8014fd4 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014c30:	2311      	movs	r3, #17
 8014c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014c36:	e1cd      	b.n	8014fd4 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	683a      	ldr	r2, [r7, #0]
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d902      	bls.n	8014c48 <f_lseek+0x136>
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	683a      	ldr	r2, [r7, #0]
 8014c4c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	f000 81bf 	beq.w	8014fd4 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	3b01      	subs	r3, #1
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f7fd fd25 	bl	80126ac <clmt_clust>
 8014c62:	4602      	mov	r2, r0
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	69db      	ldr	r3, [r3, #28]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	4610      	mov	r0, r2
 8014c72:	f7fd fa11 	bl	8012098 <clust2sect>
 8014c76:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d109      	bne.n	8014c92 <f_lseek+0x180>
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2202      	movs	r2, #2
 8014c82:	755a      	strb	r2, [r3, #21]
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2102      	movs	r1, #2
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7fc ff9b 	bl	8011bc4 <unlock_fs>
 8014c8e:	2302      	movs	r3, #2
 8014c90:	e1a9      	b.n	8014fe6 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	3b01      	subs	r3, #1
 8014c96:	68ba      	ldr	r2, [r7, #8]
 8014c98:	8992      	ldrh	r2, [r2, #12]
 8014c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	8952      	ldrh	r2, [r2, #10]
 8014ca2:	3a01      	subs	r2, #1
 8014ca4:	4013      	ands	r3, r2
 8014ca6:	69ba      	ldr	r2, [r7, #24]
 8014ca8:	4413      	add	r3, r2
 8014caa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	699b      	ldr	r3, [r3, #24]
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	8992      	ldrh	r2, [r2, #12]
 8014cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cb8:	fb01 f202 	mul.w	r2, r1, r2
 8014cbc:	1a9b      	subs	r3, r3, r2
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f000 8188 	beq.w	8014fd4 <f_lseek+0x4c2>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6a1b      	ldr	r3, [r3, #32]
 8014cc8:	69ba      	ldr	r2, [r7, #24]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	f000 8182 	beq.w	8014fd4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	7d1b      	ldrb	r3, [r3, #20]
 8014cd4:	b25b      	sxtb	r3, r3
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	da1d      	bge.n	8014d16 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	7858      	ldrb	r0, [r3, #1]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6a1a      	ldr	r2, [r3, #32]
 8014ce8:	2301      	movs	r3, #1
 8014cea:	f7fc fe17 	bl	801191c <disk_write>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d009      	beq.n	8014d08 <f_lseek+0x1f6>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	755a      	strb	r2, [r3, #21]
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	2101      	movs	r1, #1
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fc ff60 	bl	8011bc4 <unlock_fs>
 8014d04:	2301      	movs	r3, #1
 8014d06:	e16e      	b.n	8014fe6 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	7d1b      	ldrb	r3, [r3, #20]
 8014d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d10:	b2da      	uxtb	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	7858      	ldrb	r0, [r3, #1]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d20:	2301      	movs	r3, #1
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	f7fc fdda 	bl	80118dc <disk_read>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d009      	beq.n	8014d42 <f_lseek+0x230>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2201      	movs	r2, #1
 8014d32:	755a      	strb	r2, [r3, #21]
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	2101      	movs	r1, #1
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fc ff43 	bl	8011bc4 <unlock_fs>
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e151      	b.n	8014fe6 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	69ba      	ldr	r2, [r7, #24]
 8014d46:	621a      	str	r2, [r3, #32]
 8014d48:	e144      	b.n	8014fd4 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d908      	bls.n	8014d66 <f_lseek+0x254>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	7d1b      	ldrb	r3, [r3, #20]
 8014d58:	f003 0302 	and.w	r3, r3, #2
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d102      	bne.n	8014d66 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	68db      	ldr	r3, [r3, #12]
 8014d64:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	699b      	ldr	r3, [r3, #24]
 8014d6a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d74:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f000 80ce 	beq.w	8014f1a <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	895b      	ldrh	r3, [r3, #10]
 8014d82:	461a      	mov	r2, r3
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	899b      	ldrh	r3, [r3, #12]
 8014d88:	fb02 f303 	mul.w	r3, r2, r3
 8014d8c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014d8e:	6a3b      	ldr	r3, [r7, #32]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d01b      	beq.n	8014dcc <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	1e5a      	subs	r2, r3, #1
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d9e:	6a3b      	ldr	r3, [r7, #32]
 8014da0:	1e59      	subs	r1, r3, #1
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d30f      	bcc.n	8014dcc <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014dac:	6a3b      	ldr	r3, [r7, #32]
 8014dae:	1e5a      	subs	r2, r3, #1
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	425b      	negs	r3, r3
 8014db4:	401a      	ands	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	699b      	ldr	r3, [r3, #24]
 8014dbe:	683a      	ldr	r2, [r7, #0]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	69db      	ldr	r3, [r3, #28]
 8014dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014dca:	e02c      	b.n	8014e26 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	689b      	ldr	r3, [r3, #8]
 8014dd0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d123      	bne.n	8014e20 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2100      	movs	r1, #0
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fd fbcd 	bl	801257c <create_chain>
 8014de2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d109      	bne.n	8014dfe <f_lseek+0x2ec>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2202      	movs	r2, #2
 8014dee:	755a      	strb	r2, [r3, #21]
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	2102      	movs	r1, #2
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fc fee5 	bl	8011bc4 <unlock_fs>
 8014dfa:	2302      	movs	r3, #2
 8014dfc:	e0f3      	b.n	8014fe6 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e04:	d109      	bne.n	8014e1a <f_lseek+0x308>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2201      	movs	r2, #1
 8014e0a:	755a      	strb	r2, [r3, #21]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2101      	movs	r1, #1
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7fc fed7 	bl	8011bc4 <unlock_fs>
 8014e16:	2301      	movs	r3, #1
 8014e18:	e0e5      	b.n	8014fe6 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e1e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e24:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d076      	beq.n	8014f1a <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8014e2c:	e044      	b.n	8014eb8 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8014e2e:	683a      	ldr	r2, [r7, #0]
 8014e30:	69fb      	ldr	r3, [r7, #28]
 8014e32:	1ad3      	subs	r3, r2, r3
 8014e34:	603b      	str	r3, [r7, #0]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	699a      	ldr	r2, [r3, #24]
 8014e3a:	69fb      	ldr	r3, [r7, #28]
 8014e3c:	441a      	add	r2, r3
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	7d1b      	ldrb	r3, [r3, #20]
 8014e46:	f003 0302 	and.w	r3, r3, #2
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d00b      	beq.n	8014e66 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7fd fb92 	bl	801257c <create_chain>
 8014e58:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d108      	bne.n	8014e72 <f_lseek+0x360>
							ofs = 0; break;
 8014e60:	2300      	movs	r3, #0
 8014e62:	603b      	str	r3, [r7, #0]
 8014e64:	e02c      	b.n	8014ec0 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fd f933 	bl	80120d6 <get_fat>
 8014e70:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e78:	d109      	bne.n	8014e8e <f_lseek+0x37c>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	755a      	strb	r2, [r3, #21]
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	2101      	movs	r1, #1
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7fc fe9d 	bl	8011bc4 <unlock_fs>
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	e0ab      	b.n	8014fe6 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d904      	bls.n	8014e9e <f_lseek+0x38c>
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	6a1b      	ldr	r3, [r3, #32]
 8014e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d309      	bcc.n	8014eb2 <f_lseek+0x3a0>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2202      	movs	r2, #2
 8014ea2:	755a      	strb	r2, [r3, #21]
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2102      	movs	r1, #2
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7fc fe8b 	bl	8011bc4 <unlock_fs>
 8014eae:	2302      	movs	r3, #2
 8014eb0:	e099      	b.n	8014fe6 <f_lseek+0x4d4>
					fp->clust = clst;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014eb6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014eb8:	683a      	ldr	r2, [r7, #0]
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d8b6      	bhi.n	8014e2e <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	699a      	ldr	r2, [r3, #24]
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	441a      	add	r2, r3
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	899b      	ldrh	r3, [r3, #12]
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ed8:	fb01 f202 	mul.w	r2, r1, r2
 8014edc:	1a9b      	subs	r3, r3, r2
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d01b      	beq.n	8014f1a <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7fd f8d6 	bl	8012098 <clust2sect>
 8014eec:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d109      	bne.n	8014f08 <f_lseek+0x3f6>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2202      	movs	r2, #2
 8014ef8:	755a      	strb	r2, [r3, #21]
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	2102      	movs	r1, #2
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7fc fe60 	bl	8011bc4 <unlock_fs>
 8014f04:	2302      	movs	r3, #2
 8014f06:	e06e      	b.n	8014fe6 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	899b      	ldrh	r3, [r3, #12]
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f16:	4413      	add	r3, r2
 8014f18:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	699a      	ldr	r2, [r3, #24]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	68db      	ldr	r3, [r3, #12]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d90a      	bls.n	8014f3c <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	699a      	ldr	r2, [r3, #24]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	7d1b      	ldrb	r3, [r3, #20]
 8014f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	699b      	ldr	r3, [r3, #24]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	8992      	ldrh	r2, [r2, #12]
 8014f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f48:	fb01 f202 	mul.w	r2, r1, r2
 8014f4c:	1a9b      	subs	r3, r3, r2
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d040      	beq.n	8014fd4 <f_lseek+0x4c2>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6a1b      	ldr	r3, [r3, #32]
 8014f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d03b      	beq.n	8014fd4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	7d1b      	ldrb	r3, [r3, #20]
 8014f60:	b25b      	sxtb	r3, r3
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	da1d      	bge.n	8014fa2 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	7858      	ldrb	r0, [r3, #1]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6a1a      	ldr	r2, [r3, #32]
 8014f74:	2301      	movs	r3, #1
 8014f76:	f7fc fcd1 	bl	801191c <disk_write>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d009      	beq.n	8014f94 <f_lseek+0x482>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2201      	movs	r2, #1
 8014f84:	755a      	strb	r2, [r3, #21]
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	2101      	movs	r1, #1
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fc fe1a 	bl	8011bc4 <unlock_fs>
 8014f90:	2301      	movs	r3, #1
 8014f92:	e028      	b.n	8014fe6 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	7d1b      	ldrb	r3, [r3, #20]
 8014f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f9c:	b2da      	uxtb	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	7858      	ldrb	r0, [r3, #1]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fac:	2301      	movs	r3, #1
 8014fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fb0:	f7fc fc94 	bl	80118dc <disk_read>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d009      	beq.n	8014fce <f_lseek+0x4bc>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	755a      	strb	r2, [r3, #21]
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	2101      	movs	r1, #1
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7fc fdfd 	bl	8011bc4 <unlock_fs>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e00b      	b.n	8014fe6 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fd2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014fda:	4611      	mov	r1, r2
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fc fdf1 	bl	8011bc4 <unlock_fs>
 8014fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3740      	adds	r7, #64	; 0x40
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b092      	sub	sp, #72	; 0x48
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	60f8      	str	r0, [r7, #12]
 8014ff6:	60b9      	str	r1, [r7, #8]
 8014ff8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014ffa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014ffe:	f107 030c 	add.w	r3, r7, #12
 8015002:	2200      	movs	r2, #0
 8015004:	4618      	mov	r0, r3
 8015006:	f7fe fb77 	bl	80136f8 <find_volume>
 801500a:	4603      	mov	r3, r0
 801500c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8015010:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015014:	2b00      	cmp	r3, #0
 8015016:	f040 8099 	bne.w	801514c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8015020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015022:	69da      	ldr	r2, [r3, #28]
 8015024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015026:	6a1b      	ldr	r3, [r3, #32]
 8015028:	3b02      	subs	r3, #2
 801502a:	429a      	cmp	r2, r3
 801502c:	d804      	bhi.n	8015038 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015030:	69da      	ldr	r2, [r3, #28]
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	601a      	str	r2, [r3, #0]
 8015036:	e089      	b.n	801514c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	2b01      	cmp	r3, #1
 8015042:	d128      	bne.n	8015096 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8015044:	2302      	movs	r3, #2
 8015046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801504a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801504c:	f107 0314 	add.w	r3, r7, #20
 8015050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015052:	4618      	mov	r0, r3
 8015054:	f7fd f83f 	bl	80120d6 <get_fat>
 8015058:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015060:	d103      	bne.n	801506a <f_getfree+0x7c>
 8015062:	2301      	movs	r3, #1
 8015064:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015068:	e063      	b.n	8015132 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801506c:	2b01      	cmp	r3, #1
 801506e:	d103      	bne.n	8015078 <f_getfree+0x8a>
 8015070:	2302      	movs	r3, #2
 8015072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015076:	e05c      	b.n	8015132 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8015078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507a:	2b00      	cmp	r3, #0
 801507c:	d102      	bne.n	8015084 <f_getfree+0x96>
 801507e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015080:	3301      	adds	r3, #1
 8015082:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8015084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015086:	3301      	adds	r3, #1
 8015088:	63fb      	str	r3, [r7, #60]	; 0x3c
 801508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508c:	6a1b      	ldr	r3, [r3, #32]
 801508e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015090:	429a      	cmp	r2, r3
 8015092:	d3db      	bcc.n	801504c <f_getfree+0x5e>
 8015094:	e04d      	b.n	8015132 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8015096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015098:	6a1b      	ldr	r3, [r3, #32]
 801509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	637b      	str	r3, [r7, #52]	; 0x34
 80150a6:	2300      	movs	r3, #0
 80150a8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80150aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d113      	bne.n	80150d8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80150b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b4:	1c5a      	adds	r2, r3, #1
 80150b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80150b8:	4619      	mov	r1, r3
 80150ba:	f7fc ff4f 	bl	8011f5c <move_window>
 80150be:	4603      	mov	r3, r0
 80150c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80150c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d131      	bne.n	8015130 <f_getfree+0x142>
							p = fs->win;
 80150cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ce:	333c      	adds	r3, #60	; 0x3c
 80150d0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80150d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d4:	899b      	ldrh	r3, [r3, #12]
 80150d6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80150d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	2b02      	cmp	r3, #2
 80150de:	d10f      	bne.n	8015100 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80150e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150e2:	f7fc fc59 	bl	8011998 <ld_word>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d102      	bne.n	80150f2 <f_getfree+0x104>
 80150ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150ee:	3301      	adds	r3, #1
 80150f0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80150f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f4:	3302      	adds	r3, #2
 80150f6:	633b      	str	r3, [r7, #48]	; 0x30
 80150f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150fa:	3b02      	subs	r3, #2
 80150fc:	637b      	str	r3, [r7, #52]	; 0x34
 80150fe:	e010      	b.n	8015122 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8015100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015102:	f7fc fc61 	bl	80119c8 <ld_dword>
 8015106:	4603      	mov	r3, r0
 8015108:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801510c:	2b00      	cmp	r3, #0
 801510e:	d102      	bne.n	8015116 <f_getfree+0x128>
 8015110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015112:	3301      	adds	r3, #1
 8015114:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8015116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015118:	3304      	adds	r3, #4
 801511a:	633b      	str	r3, [r7, #48]	; 0x30
 801511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801511e:	3b04      	subs	r3, #4
 8015120:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8015122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015124:	3b01      	subs	r3, #1
 8015126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801512a:	2b00      	cmp	r3, #0
 801512c:	d1bd      	bne.n	80150aa <f_getfree+0xbc>
 801512e:	e000      	b.n	8015132 <f_getfree+0x144>
							if (res != FR_OK) break;
 8015130:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015136:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8015138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801513c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015140:	791a      	ldrb	r2, [r3, #4]
 8015142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015144:	f042 0201 	orr.w	r2, r2, #1
 8015148:	b2d2      	uxtb	r2, r2
 801514a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8015152:	4611      	mov	r1, r2
 8015154:	4618      	mov	r0, r3
 8015156:	f7fc fd35 	bl	8011bc4 <unlock_fs>
 801515a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801515e:	4618      	mov	r0, r3
 8015160:	3748      	adds	r7, #72	; 0x48
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b088      	sub	sp, #32
 801516a:	af00      	add	r7, sp, #0
 801516c:	60f8      	str	r0, [r7, #12]
 801516e:	60b9      	str	r1, [r7, #8]
 8015170:	607a      	str	r2, [r7, #4]
	int n = 0;
 8015172:	2300      	movs	r3, #0
 8015174:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801517a:	e01b      	b.n	80151b4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801517c:	f107 0310 	add.w	r3, r7, #16
 8015180:	f107 0114 	add.w	r1, r7, #20
 8015184:	2201      	movs	r2, #1
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7ff f8ba 	bl	8014300 <f_read>
		if (rc != 1) break;
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	2b01      	cmp	r3, #1
 8015190:	d116      	bne.n	80151c0 <f_gets+0x5a>
		c = s[0];
 8015192:	7d3b      	ldrb	r3, [r7, #20]
 8015194:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015196:	7dfb      	ldrb	r3, [r7, #23]
 8015198:	2b0d      	cmp	r3, #13
 801519a:	d100      	bne.n	801519e <f_gets+0x38>
 801519c:	e00a      	b.n	80151b4 <f_gets+0x4e>
		*p++ = c;
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	61ba      	str	r2, [r7, #24]
 80151a4:	7dfa      	ldrb	r2, [r7, #23]
 80151a6:	701a      	strb	r2, [r3, #0]
		n++;
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	3301      	adds	r3, #1
 80151ac:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80151ae:	7dfb      	ldrb	r3, [r7, #23]
 80151b0:	2b0a      	cmp	r3, #10
 80151b2:	d007      	beq.n	80151c4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	3b01      	subs	r3, #1
 80151b8:	69fa      	ldr	r2, [r7, #28]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	dbde      	blt.n	801517c <f_gets+0x16>
 80151be:	e002      	b.n	80151c6 <f_gets+0x60>
		if (rc != 1) break;
 80151c0:	bf00      	nop
 80151c2:	e000      	b.n	80151c6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80151c4:	bf00      	nop
	}
	*p = 0;
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <f_gets+0x70>
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	e000      	b.n	80151d8 <f_gets+0x72>
 80151d6:	2300      	movs	r3, #0
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3720      	adds	r7, #32
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b084      	sub	sp, #16
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	460b      	mov	r3, r1
 80151ea:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80151ec:	78fb      	ldrb	r3, [r7, #3]
 80151ee:	2b0a      	cmp	r3, #10
 80151f0:	d103      	bne.n	80151fa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80151f2:	210d      	movs	r1, #13
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff fff3 	bl	80151e0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2b00      	cmp	r3, #0
 8015204:	db25      	blt.n	8015252 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	1c5a      	adds	r2, r3, #1
 801520a:	60fa      	str	r2, [r7, #12]
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	4413      	add	r3, r2
 8015210:	78fa      	ldrb	r2, [r7, #3]
 8015212:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	2b3c      	cmp	r3, #60	; 0x3c
 8015218:	dd12      	ble.n	8015240 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6818      	ldr	r0, [r3, #0]
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f103 010c 	add.w	r1, r3, #12
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	f107 0308 	add.w	r3, r7, #8
 801522a:	f7ff f9f7 	bl	801461c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801522e:	68ba      	ldr	r2, [r7, #8]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	429a      	cmp	r2, r3
 8015234:	d101      	bne.n	801523a <putc_bfd+0x5a>
 8015236:	2300      	movs	r3, #0
 8015238:	e001      	b.n	801523e <putc_bfd+0x5e>
 801523a:	f04f 33ff 	mov.w	r3, #4294967295
 801523e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	68fa      	ldr	r2, [r7, #12]
 8015244:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	689b      	ldr	r3, [r3, #8]
 801524a:	1c5a      	adds	r2, r3, #1
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	609a      	str	r2, [r3, #8]
 8015250:	e000      	b.n	8015254 <putc_bfd+0x74>
	if (i < 0) return;
 8015252:	bf00      	nop
}
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801525a:	b580      	push	{r7, lr}
 801525c:	b084      	sub	sp, #16
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	2b00      	cmp	r3, #0
 8015268:	db16      	blt.n	8015298 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6818      	ldr	r0, [r3, #0]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f103 010c 	add.w	r1, r3, #12
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	461a      	mov	r2, r3
 801527a:	f107 030c 	add.w	r3, r7, #12
 801527e:	f7ff f9cd 	bl	801461c <f_write>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d107      	bne.n	8015298 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	68fa      	ldr	r2, [r7, #12]
 801528e:	4293      	cmp	r3, r2
 8015290:	d102      	bne.n	8015298 <putc_flush+0x3e>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	e001      	b.n	801529c <putc_flush+0x42>
	return EOF;
 8015298:	f04f 33ff 	mov.w	r3, #4294967295
}
 801529c:	4618      	mov	r0, r3
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	683a      	ldr	r2, [r7, #0]
 80152b2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	605a      	str	r2, [r3, #4]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	685a      	ldr	r2, [r3, #4]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	609a      	str	r2, [r3, #8]
}
 80152c2:	bf00      	nop
 80152c4:	370c      	adds	r7, #12
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr

080152ce <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b096      	sub	sp, #88	; 0x58
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
 80152d6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80152d8:	f107 030c 	add.w	r3, r7, #12
 80152dc:	6839      	ldr	r1, [r7, #0]
 80152de:	4618      	mov	r0, r3
 80152e0:	f7ff ffe0 	bl	80152a4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80152e4:	e009      	b.n	80152fa <f_puts+0x2c>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	1c5a      	adds	r2, r3, #1
 80152ea:	607a      	str	r2, [r7, #4]
 80152ec:	781a      	ldrb	r2, [r3, #0]
 80152ee:	f107 030c 	add.w	r3, r7, #12
 80152f2:	4611      	mov	r1, r2
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7ff ff73 	bl	80151e0 <putc_bfd>
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d1f1      	bne.n	80152e6 <f_puts+0x18>
	return putc_flush(&pb);
 8015302:	f107 030c 	add.w	r3, r7, #12
 8015306:	4618      	mov	r0, r3
 8015308:	f7ff ffa7 	bl	801525a <putc_flush>
 801530c:	4603      	mov	r3, r0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3758      	adds	r7, #88	; 0x58
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
	...

08015318 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015318:	b480      	push	{r7}
 801531a:	b087      	sub	sp, #28
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	4613      	mov	r3, r2
 8015324:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015326:	2301      	movs	r3, #1
 8015328:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801532a:	2300      	movs	r3, #0
 801532c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801532e:	4b1f      	ldr	r3, [pc, #124]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015330:	7a5b      	ldrb	r3, [r3, #9]
 8015332:	b2db      	uxtb	r3, r3
 8015334:	2b00      	cmp	r3, #0
 8015336:	d131      	bne.n	801539c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015338:	4b1c      	ldr	r3, [pc, #112]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 801533a:	7a5b      	ldrb	r3, [r3, #9]
 801533c:	b2db      	uxtb	r3, r3
 801533e:	461a      	mov	r2, r3
 8015340:	4b1a      	ldr	r3, [pc, #104]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015342:	2100      	movs	r1, #0
 8015344:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015346:	4b19      	ldr	r3, [pc, #100]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015348:	7a5b      	ldrb	r3, [r3, #9]
 801534a:	b2db      	uxtb	r3, r3
 801534c:	4a17      	ldr	r2, [pc, #92]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 801534e:	009b      	lsls	r3, r3, #2
 8015350:	4413      	add	r3, r2
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015356:	4b15      	ldr	r3, [pc, #84]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015358:	7a5b      	ldrb	r3, [r3, #9]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	461a      	mov	r2, r3
 801535e:	4b13      	ldr	r3, [pc, #76]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015360:	4413      	add	r3, r2
 8015362:	79fa      	ldrb	r2, [r7, #7]
 8015364:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015366:	4b11      	ldr	r3, [pc, #68]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015368:	7a5b      	ldrb	r3, [r3, #9]
 801536a:	b2db      	uxtb	r3, r3
 801536c:	1c5a      	adds	r2, r3, #1
 801536e:	b2d1      	uxtb	r1, r2
 8015370:	4a0e      	ldr	r2, [pc, #56]	; (80153ac <FATFS_LinkDriverEx+0x94>)
 8015372:	7251      	strb	r1, [r2, #9]
 8015374:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015376:	7dbb      	ldrb	r3, [r7, #22]
 8015378:	3330      	adds	r3, #48	; 0x30
 801537a:	b2da      	uxtb	r2, r3
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	3301      	adds	r3, #1
 8015384:	223a      	movs	r2, #58	; 0x3a
 8015386:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	3302      	adds	r3, #2
 801538c:	222f      	movs	r2, #47	; 0x2f
 801538e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	3303      	adds	r3, #3
 8015394:	2200      	movs	r2, #0
 8015396:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015398:	2300      	movs	r3, #0
 801539a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801539c:	7dfb      	ldrb	r3, [r7, #23]
}
 801539e:	4618      	mov	r0, r3
 80153a0:	371c      	adds	r7, #28
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	20019180 	.word	0x20019180

080153b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80153ba:	2200      	movs	r2, #0
 80153bc:	6839      	ldr	r1, [r7, #0]
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f7ff ffaa 	bl	8015318 <FATFS_LinkDriverEx>
 80153c4:	4603      	mov	r3, r0
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
	...

080153d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80153d0:	b480      	push	{r7}
 80153d2:	b085      	sub	sp, #20
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	4603      	mov	r3, r0
 80153d8:	6039      	str	r1, [r7, #0]
 80153da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80153dc:	88fb      	ldrh	r3, [r7, #6]
 80153de:	2b7f      	cmp	r3, #127	; 0x7f
 80153e0:	d802      	bhi.n	80153e8 <ff_convert+0x18>
		c = chr;
 80153e2:	88fb      	ldrh	r3, [r7, #6]
 80153e4:	81fb      	strh	r3, [r7, #14]
 80153e6:	e025      	b.n	8015434 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00b      	beq.n	8015406 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80153ee:	88fb      	ldrh	r3, [r7, #6]
 80153f0:	2bff      	cmp	r3, #255	; 0xff
 80153f2:	d805      	bhi.n	8015400 <ff_convert+0x30>
 80153f4:	88fb      	ldrh	r3, [r7, #6]
 80153f6:	3b80      	subs	r3, #128	; 0x80
 80153f8:	4a12      	ldr	r2, [pc, #72]	; (8015444 <ff_convert+0x74>)
 80153fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80153fe:	e000      	b.n	8015402 <ff_convert+0x32>
 8015400:	2300      	movs	r3, #0
 8015402:	81fb      	strh	r3, [r7, #14]
 8015404:	e016      	b.n	8015434 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015406:	2300      	movs	r3, #0
 8015408:	81fb      	strh	r3, [r7, #14]
 801540a:	e009      	b.n	8015420 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801540c:	89fb      	ldrh	r3, [r7, #14]
 801540e:	4a0d      	ldr	r2, [pc, #52]	; (8015444 <ff_convert+0x74>)
 8015410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015414:	88fa      	ldrh	r2, [r7, #6]
 8015416:	429a      	cmp	r2, r3
 8015418:	d006      	beq.n	8015428 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801541a:	89fb      	ldrh	r3, [r7, #14]
 801541c:	3301      	adds	r3, #1
 801541e:	81fb      	strh	r3, [r7, #14]
 8015420:	89fb      	ldrh	r3, [r7, #14]
 8015422:	2b7f      	cmp	r3, #127	; 0x7f
 8015424:	d9f2      	bls.n	801540c <ff_convert+0x3c>
 8015426:	e000      	b.n	801542a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015428:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801542a:	89fb      	ldrh	r3, [r7, #14]
 801542c:	3380      	adds	r3, #128	; 0x80
 801542e:	b29b      	uxth	r3, r3
 8015430:	b2db      	uxtb	r3, r3
 8015432:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015434:	89fb      	ldrh	r3, [r7, #14]
}
 8015436:	4618      	mov	r0, r3
 8015438:	3714      	adds	r7, #20
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop
 8015444:	08028b0c 	.word	0x08028b0c

08015448 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015448:	b480      	push	{r7}
 801544a:	b087      	sub	sp, #28
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015452:	88fb      	ldrh	r3, [r7, #6]
 8015454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015458:	d201      	bcs.n	801545e <ff_wtoupper+0x16>
 801545a:	4b3e      	ldr	r3, [pc, #248]	; (8015554 <ff_wtoupper+0x10c>)
 801545c:	e000      	b.n	8015460 <ff_wtoupper+0x18>
 801545e:	4b3e      	ldr	r3, [pc, #248]	; (8015558 <ff_wtoupper+0x110>)
 8015460:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	1c9a      	adds	r2, r3, #2
 8015466:	617a      	str	r2, [r7, #20]
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801546c:	8a7b      	ldrh	r3, [r7, #18]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d068      	beq.n	8015544 <ff_wtoupper+0xfc>
 8015472:	88fa      	ldrh	r2, [r7, #6]
 8015474:	8a7b      	ldrh	r3, [r7, #18]
 8015476:	429a      	cmp	r2, r3
 8015478:	d364      	bcc.n	8015544 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	1c9a      	adds	r2, r3, #2
 801547e:	617a      	str	r2, [r7, #20]
 8015480:	881b      	ldrh	r3, [r3, #0]
 8015482:	823b      	strh	r3, [r7, #16]
 8015484:	8a3b      	ldrh	r3, [r7, #16]
 8015486:	0a1b      	lsrs	r3, r3, #8
 8015488:	81fb      	strh	r3, [r7, #14]
 801548a:	8a3b      	ldrh	r3, [r7, #16]
 801548c:	b2db      	uxtb	r3, r3
 801548e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015490:	88fa      	ldrh	r2, [r7, #6]
 8015492:	8a79      	ldrh	r1, [r7, #18]
 8015494:	8a3b      	ldrh	r3, [r7, #16]
 8015496:	440b      	add	r3, r1
 8015498:	429a      	cmp	r2, r3
 801549a:	da49      	bge.n	8015530 <ff_wtoupper+0xe8>
			switch (cmd) {
 801549c:	89fb      	ldrh	r3, [r7, #14]
 801549e:	2b08      	cmp	r3, #8
 80154a0:	d84f      	bhi.n	8015542 <ff_wtoupper+0xfa>
 80154a2:	a201      	add	r2, pc, #4	; (adr r2, 80154a8 <ff_wtoupper+0x60>)
 80154a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154a8:	080154cd 	.word	0x080154cd
 80154ac:	080154df 	.word	0x080154df
 80154b0:	080154f5 	.word	0x080154f5
 80154b4:	080154fd 	.word	0x080154fd
 80154b8:	08015505 	.word	0x08015505
 80154bc:	0801550d 	.word	0x0801550d
 80154c0:	08015515 	.word	0x08015515
 80154c4:	0801551d 	.word	0x0801551d
 80154c8:	08015525 	.word	0x08015525
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80154cc:	88fa      	ldrh	r2, [r7, #6]
 80154ce:	8a7b      	ldrh	r3, [r7, #18]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	697a      	ldr	r2, [r7, #20]
 80154d6:	4413      	add	r3, r2
 80154d8:	881b      	ldrh	r3, [r3, #0]
 80154da:	80fb      	strh	r3, [r7, #6]
 80154dc:	e027      	b.n	801552e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80154de:	88fa      	ldrh	r2, [r7, #6]
 80154e0:	8a7b      	ldrh	r3, [r7, #18]
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	f003 0301 	and.w	r3, r3, #1
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	88fa      	ldrh	r2, [r7, #6]
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	80fb      	strh	r3, [r7, #6]
 80154f2:	e01c      	b.n	801552e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80154f4:	88fb      	ldrh	r3, [r7, #6]
 80154f6:	3b10      	subs	r3, #16
 80154f8:	80fb      	strh	r3, [r7, #6]
 80154fa:	e018      	b.n	801552e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80154fc:	88fb      	ldrh	r3, [r7, #6]
 80154fe:	3b20      	subs	r3, #32
 8015500:	80fb      	strh	r3, [r7, #6]
 8015502:	e014      	b.n	801552e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015504:	88fb      	ldrh	r3, [r7, #6]
 8015506:	3b30      	subs	r3, #48	; 0x30
 8015508:	80fb      	strh	r3, [r7, #6]
 801550a:	e010      	b.n	801552e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801550c:	88fb      	ldrh	r3, [r7, #6]
 801550e:	3b1a      	subs	r3, #26
 8015510:	80fb      	strh	r3, [r7, #6]
 8015512:	e00c      	b.n	801552e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015514:	88fb      	ldrh	r3, [r7, #6]
 8015516:	3308      	adds	r3, #8
 8015518:	80fb      	strh	r3, [r7, #6]
 801551a:	e008      	b.n	801552e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801551c:	88fb      	ldrh	r3, [r7, #6]
 801551e:	3b50      	subs	r3, #80	; 0x50
 8015520:	80fb      	strh	r3, [r7, #6]
 8015522:	e004      	b.n	801552e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015524:	88fb      	ldrh	r3, [r7, #6]
 8015526:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801552a:	80fb      	strh	r3, [r7, #6]
 801552c:	bf00      	nop
			}
			break;
 801552e:	e008      	b.n	8015542 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015530:	89fb      	ldrh	r3, [r7, #14]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d195      	bne.n	8015462 <ff_wtoupper+0x1a>
 8015536:	8a3b      	ldrh	r3, [r7, #16]
 8015538:	005b      	lsls	r3, r3, #1
 801553a:	697a      	ldr	r2, [r7, #20]
 801553c:	4413      	add	r3, r2
 801553e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015540:	e78f      	b.n	8015462 <ff_wtoupper+0x1a>
			break;
 8015542:	bf00      	nop
	}

	return chr;
 8015544:	88fb      	ldrh	r3, [r7, #6]
}
 8015546:	4618      	mov	r0, r3
 8015548:	371c      	adds	r7, #28
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop
 8015554:	08028c0c 	.word	0x08028c0c
 8015558:	08028e00 	.word	0x08028e00

0801555c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b084      	sub	sp, #16
 8015560:	af00      	add	r7, sp, #0
 8015562:	4603      	mov	r3, r0
 8015564:	6039      	str	r1, [r7, #0]
 8015566:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015568:	2200      	movs	r2, #0
 801556a:	2101      	movs	r1, #1
 801556c:	2001      	movs	r0, #1
 801556e:	f000 f978 	bl	8015862 <osSemaphoreNew>
 8015572:	4602      	mov	r2, r0
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	2b00      	cmp	r3, #0
 801557e:	bf14      	ite	ne
 8015580:	2301      	movne	r3, #1
 8015582:	2300      	moveq	r3, #0
 8015584:	b2db      	uxtb	r3, r3
 8015586:	60fb      	str	r3, [r7, #12]

    return ret;
 8015588:	68fb      	ldr	r3, [r7, #12]
}
 801558a:	4618      	mov	r0, r3
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}

08015592 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015592:	b580      	push	{r7, lr}
 8015594:	b082      	sub	sp, #8
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 fa80 	bl	8015aa0 <osSemaphoreDelete>
#endif
    return 1;
 80155a0:	2301      	movs	r3, #1
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3708      	adds	r7, #8
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b084      	sub	sp, #16
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80155b2:	2300      	movs	r3, #0
 80155b4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80155b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f000 f9da 	bl	8015974 <osSemaphoreAcquire>
 80155c0:	4603      	mov	r3, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80155c6:	2301      	movs	r3, #1
 80155c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80155ca:	68fb      	ldr	r3, [r7, #12]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f000 fa1b 	bl	8015a18 <osSemaphoreRelease>
#endif
}
 80155e2:	bf00      	nop
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}
	...

080155ec <__NVIC_SetPriority>:
{
 80155ec:	b480      	push	{r7}
 80155ee:	b083      	sub	sp, #12
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	4603      	mov	r3, r0
 80155f4:	6039      	str	r1, [r7, #0]
 80155f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	db0a      	blt.n	8015616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	b2da      	uxtb	r2, r3
 8015604:	490c      	ldr	r1, [pc, #48]	; (8015638 <__NVIC_SetPriority+0x4c>)
 8015606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801560a:	0112      	lsls	r2, r2, #4
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	440b      	add	r3, r1
 8015610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015614:	e00a      	b.n	801562c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	b2da      	uxtb	r2, r3
 801561a:	4908      	ldr	r1, [pc, #32]	; (801563c <__NVIC_SetPriority+0x50>)
 801561c:	79fb      	ldrb	r3, [r7, #7]
 801561e:	f003 030f 	and.w	r3, r3, #15
 8015622:	3b04      	subs	r3, #4
 8015624:	0112      	lsls	r2, r2, #4
 8015626:	b2d2      	uxtb	r2, r2
 8015628:	440b      	add	r3, r1
 801562a:	761a      	strb	r2, [r3, #24]
}
 801562c:	bf00      	nop
 801562e:	370c      	adds	r7, #12
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr
 8015638:	e000e100 	.word	0xe000e100
 801563c:	e000ed00 	.word	0xe000ed00

08015640 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015640:	b580      	push	{r7, lr}
 8015642:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015644:	4b05      	ldr	r3, [pc, #20]	; (801565c <SysTick_Handler+0x1c>)
 8015646:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015648:	f002 f98c 	bl	8017964 <xTaskGetSchedulerState>
 801564c:	4603      	mov	r3, r0
 801564e:	2b01      	cmp	r3, #1
 8015650:	d001      	beq.n	8015656 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015652:	f003 f871 	bl	8018738 <xPortSysTickHandler>
  }
}
 8015656:	bf00      	nop
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	e000e010 	.word	0xe000e010

08015660 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015664:	2100      	movs	r1, #0
 8015666:	f06f 0004 	mvn.w	r0, #4
 801566a:	f7ff ffbf 	bl	80155ec <__NVIC_SetPriority>
#endif
}
 801566e:	bf00      	nop
 8015670:	bd80      	pop	{r7, pc}
	...

08015674 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015674:	b480      	push	{r7}
 8015676:	b083      	sub	sp, #12
 8015678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801567a:	f3ef 8305 	mrs	r3, IPSR
 801567e:	603b      	str	r3, [r7, #0]
  return(result);
 8015680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015682:	2b00      	cmp	r3, #0
 8015684:	d003      	beq.n	801568e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015686:	f06f 0305 	mvn.w	r3, #5
 801568a:	607b      	str	r3, [r7, #4]
 801568c:	e00c      	b.n	80156a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801568e:	4b0a      	ldr	r3, [pc, #40]	; (80156b8 <osKernelInitialize+0x44>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d105      	bne.n	80156a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015696:	4b08      	ldr	r3, [pc, #32]	; (80156b8 <osKernelInitialize+0x44>)
 8015698:	2201      	movs	r2, #1
 801569a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801569c:	2300      	movs	r3, #0
 801569e:	607b      	str	r3, [r7, #4]
 80156a0:	e002      	b.n	80156a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80156a2:	f04f 33ff 	mov.w	r3, #4294967295
 80156a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80156a8:	687b      	ldr	r3, [r7, #4]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	370c      	adds	r7, #12
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	2001918c 	.word	0x2001918c

080156bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156c2:	f3ef 8305 	mrs	r3, IPSR
 80156c6:	603b      	str	r3, [r7, #0]
  return(result);
 80156c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d003      	beq.n	80156d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80156ce:	f06f 0305 	mvn.w	r3, #5
 80156d2:	607b      	str	r3, [r7, #4]
 80156d4:	e010      	b.n	80156f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80156d6:	4b0b      	ldr	r3, [pc, #44]	; (8015704 <osKernelStart+0x48>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	2b01      	cmp	r3, #1
 80156dc:	d109      	bne.n	80156f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80156de:	f7ff ffbf 	bl	8015660 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80156e2:	4b08      	ldr	r3, [pc, #32]	; (8015704 <osKernelStart+0x48>)
 80156e4:	2202      	movs	r2, #2
 80156e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80156e8:	f001 fce0 	bl	80170ac <vTaskStartScheduler>
      stat = osOK;
 80156ec:	2300      	movs	r3, #0
 80156ee:	607b      	str	r3, [r7, #4]
 80156f0:	e002      	b.n	80156f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80156f2:	f04f 33ff 	mov.w	r3, #4294967295
 80156f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80156f8:	687b      	ldr	r3, [r7, #4]
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3708      	adds	r7, #8
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	2001918c 	.word	0x2001918c

08015708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015708:	b580      	push	{r7, lr}
 801570a:	b08e      	sub	sp, #56	; 0x38
 801570c:	af04      	add	r7, sp, #16
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015714:	2300      	movs	r3, #0
 8015716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015718:	f3ef 8305 	mrs	r3, IPSR
 801571c:	617b      	str	r3, [r7, #20]
  return(result);
 801571e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015720:	2b00      	cmp	r3, #0
 8015722:	d17e      	bne.n	8015822 <osThreadNew+0x11a>
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d07b      	beq.n	8015822 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801572a:	2380      	movs	r3, #128	; 0x80
 801572c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801572e:	2318      	movs	r3, #24
 8015730:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015732:	2300      	movs	r3, #0
 8015734:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015736:	f04f 33ff 	mov.w	r3, #4294967295
 801573a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d045      	beq.n	80157ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d002      	beq.n	8015750 <osThreadNew+0x48>
        name = attr->name;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	699b      	ldr	r3, [r3, #24]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d002      	beq.n	801575e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	699b      	ldr	r3, [r3, #24]
 801575c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d008      	beq.n	8015776 <osThreadNew+0x6e>
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	2b38      	cmp	r3, #56	; 0x38
 8015768:	d805      	bhi.n	8015776 <osThreadNew+0x6e>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	f003 0301 	and.w	r3, r3, #1
 8015772:	2b00      	cmp	r3, #0
 8015774:	d001      	beq.n	801577a <osThreadNew+0x72>
        return (NULL);
 8015776:	2300      	movs	r3, #0
 8015778:	e054      	b.n	8015824 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	695b      	ldr	r3, [r3, #20]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d003      	beq.n	801578a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	695b      	ldr	r3, [r3, #20]
 8015786:	089b      	lsrs	r3, r3, #2
 8015788:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	689b      	ldr	r3, [r3, #8]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00e      	beq.n	80157b0 <osThreadNew+0xa8>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	2ba7      	cmp	r3, #167	; 0xa7
 8015798:	d90a      	bls.n	80157b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d006      	beq.n	80157b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	695b      	ldr	r3, [r3, #20]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d002      	beq.n	80157b0 <osThreadNew+0xa8>
        mem = 1;
 80157aa:	2301      	movs	r3, #1
 80157ac:	61bb      	str	r3, [r7, #24]
 80157ae:	e010      	b.n	80157d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	689b      	ldr	r3, [r3, #8]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d10c      	bne.n	80157d2 <osThreadNew+0xca>
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d108      	bne.n	80157d2 <osThreadNew+0xca>
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	691b      	ldr	r3, [r3, #16]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d104      	bne.n	80157d2 <osThreadNew+0xca>
          mem = 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	61bb      	str	r3, [r7, #24]
 80157cc:	e001      	b.n	80157d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	2b01      	cmp	r3, #1
 80157d6:	d110      	bne.n	80157fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80157e0:	9202      	str	r2, [sp, #8]
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	69fb      	ldr	r3, [r7, #28]
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	6a3a      	ldr	r2, [r7, #32]
 80157ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f001 fa70 	bl	8016cd4 <xTaskCreateStatic>
 80157f4:	4603      	mov	r3, r0
 80157f6:	613b      	str	r3, [r7, #16]
 80157f8:	e013      	b.n	8015822 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d110      	bne.n	8015822 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015800:	6a3b      	ldr	r3, [r7, #32]
 8015802:	b29a      	uxth	r2, r3
 8015804:	f107 0310 	add.w	r3, r7, #16
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	9300      	str	r3, [sp, #0]
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015812:	68f8      	ldr	r0, [r7, #12]
 8015814:	f001 fabb 	bl	8016d8e <xTaskCreate>
 8015818:	4603      	mov	r3, r0
 801581a:	2b01      	cmp	r3, #1
 801581c:	d001      	beq.n	8015822 <osThreadNew+0x11a>
            hTask = NULL;
 801581e:	2300      	movs	r3, #0
 8015820:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015822:	693b      	ldr	r3, [r7, #16]
}
 8015824:	4618      	mov	r0, r3
 8015826:	3728      	adds	r7, #40	; 0x28
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}

0801582c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015834:	f3ef 8305 	mrs	r3, IPSR
 8015838:	60bb      	str	r3, [r7, #8]
  return(result);
 801583a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801583c:	2b00      	cmp	r3, #0
 801583e:	d003      	beq.n	8015848 <osDelay+0x1c>
    stat = osErrorISR;
 8015840:	f06f 0305 	mvn.w	r3, #5
 8015844:	60fb      	str	r3, [r7, #12]
 8015846:	e007      	b.n	8015858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015848:	2300      	movs	r3, #0
 801584a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d002      	beq.n	8015858 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f001 fbf6 	bl	8017044 <vTaskDelay>
    }
  }

  return (stat);
 8015858:	68fb      	ldr	r3, [r7, #12]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3710      	adds	r7, #16
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015862:	b580      	push	{r7, lr}
 8015864:	b08a      	sub	sp, #40	; 0x28
 8015866:	af02      	add	r7, sp, #8
 8015868:	60f8      	str	r0, [r7, #12]
 801586a:	60b9      	str	r1, [r7, #8]
 801586c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801586e:	2300      	movs	r3, #0
 8015870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015872:	f3ef 8305 	mrs	r3, IPSR
 8015876:	613b      	str	r3, [r7, #16]
  return(result);
 8015878:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801587a:	2b00      	cmp	r3, #0
 801587c:	d175      	bne.n	801596a <osSemaphoreNew+0x108>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d072      	beq.n	801596a <osSemaphoreNew+0x108>
 8015884:	68ba      	ldr	r2, [r7, #8]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	429a      	cmp	r2, r3
 801588a:	d86e      	bhi.n	801596a <osSemaphoreNew+0x108>
    mem = -1;
 801588c:	f04f 33ff 	mov.w	r3, #4294967295
 8015890:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d015      	beq.n	80158c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d006      	beq.n	80158ae <osSemaphoreNew+0x4c>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	2b4f      	cmp	r3, #79	; 0x4f
 80158a6:	d902      	bls.n	80158ae <osSemaphoreNew+0x4c>
        mem = 1;
 80158a8:	2301      	movs	r3, #1
 80158aa:	61bb      	str	r3, [r7, #24]
 80158ac:	e00c      	b.n	80158c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d108      	bne.n	80158c8 <osSemaphoreNew+0x66>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d104      	bne.n	80158c8 <osSemaphoreNew+0x66>
          mem = 0;
 80158be:	2300      	movs	r3, #0
 80158c0:	61bb      	str	r3, [r7, #24]
 80158c2:	e001      	b.n	80158c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80158c4:	2300      	movs	r3, #0
 80158c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ce:	d04c      	beq.n	801596a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d128      	bne.n	8015928 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80158d6:	69bb      	ldr	r3, [r7, #24]
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d10a      	bne.n	80158f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	2203      	movs	r2, #3
 80158e2:	9200      	str	r2, [sp, #0]
 80158e4:	2200      	movs	r2, #0
 80158e6:	2100      	movs	r1, #0
 80158e8:	2001      	movs	r0, #1
 80158ea:	f000 fa4d 	bl	8015d88 <xQueueGenericCreateStatic>
 80158ee:	61f8      	str	r0, [r7, #28]
 80158f0:	e005      	b.n	80158fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80158f2:	2203      	movs	r2, #3
 80158f4:	2100      	movs	r1, #0
 80158f6:	2001      	movs	r0, #1
 80158f8:	f000 fabe 	bl	8015e78 <xQueueGenericCreate>
 80158fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d022      	beq.n	801594a <osSemaphoreNew+0xe8>
 8015904:	68bb      	ldr	r3, [r7, #8]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d01f      	beq.n	801594a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801590a:	2300      	movs	r3, #0
 801590c:	2200      	movs	r2, #0
 801590e:	2100      	movs	r1, #0
 8015910:	69f8      	ldr	r0, [r7, #28]
 8015912:	f000 fb79 	bl	8016008 <xQueueGenericSend>
 8015916:	4603      	mov	r3, r0
 8015918:	2b01      	cmp	r3, #1
 801591a:	d016      	beq.n	801594a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801591c:	69f8      	ldr	r0, [r7, #28]
 801591e:	f001 f805 	bl	801692c <vQueueDelete>
            hSemaphore = NULL;
 8015922:	2300      	movs	r3, #0
 8015924:	61fb      	str	r3, [r7, #28]
 8015926:	e010      	b.n	801594a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	2b01      	cmp	r3, #1
 801592c:	d108      	bne.n	8015940 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	689b      	ldr	r3, [r3, #8]
 8015932:	461a      	mov	r2, r3
 8015934:	68b9      	ldr	r1, [r7, #8]
 8015936:	68f8      	ldr	r0, [r7, #12]
 8015938:	f000 fafb 	bl	8015f32 <xQueueCreateCountingSemaphoreStatic>
 801593c:	61f8      	str	r0, [r7, #28]
 801593e:	e004      	b.n	801594a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015940:	68b9      	ldr	r1, [r7, #8]
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	f000 fb2c 	bl	8015fa0 <xQueueCreateCountingSemaphore>
 8015948:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d00c      	beq.n	801596a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d003      	beq.n	801595e <osSemaphoreNew+0xfc>
          name = attr->name;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	617b      	str	r3, [r7, #20]
 801595c:	e001      	b.n	8015962 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801595e:	2300      	movs	r3, #0
 8015960:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015962:	6979      	ldr	r1, [r7, #20]
 8015964:	69f8      	ldr	r0, [r7, #28]
 8015966:	f001 f92d 	bl	8016bc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801596a:	69fb      	ldr	r3, [r7, #28]
}
 801596c:	4618      	mov	r0, r3
 801596e:	3720      	adds	r7, #32
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015974:	b580      	push	{r7, lr}
 8015976:	b086      	sub	sp, #24
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015982:	2300      	movs	r3, #0
 8015984:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d103      	bne.n	8015994 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801598c:	f06f 0303 	mvn.w	r3, #3
 8015990:	617b      	str	r3, [r7, #20]
 8015992:	e039      	b.n	8015a08 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015994:	f3ef 8305 	mrs	r3, IPSR
 8015998:	60fb      	str	r3, [r7, #12]
  return(result);
 801599a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801599c:	2b00      	cmp	r3, #0
 801599e:	d022      	beq.n	80159e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d003      	beq.n	80159ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80159a6:	f06f 0303 	mvn.w	r3, #3
 80159aa:	617b      	str	r3, [r7, #20]
 80159ac:	e02c      	b.n	8015a08 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80159ae:	2300      	movs	r3, #0
 80159b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80159b2:	f107 0308 	add.w	r3, r7, #8
 80159b6:	461a      	mov	r2, r3
 80159b8:	2100      	movs	r1, #0
 80159ba:	6938      	ldr	r0, [r7, #16]
 80159bc:	f000 ff36 	bl	801682c <xQueueReceiveFromISR>
 80159c0:	4603      	mov	r3, r0
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	d003      	beq.n	80159ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80159c6:	f06f 0302 	mvn.w	r3, #2
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	e01c      	b.n	8015a08 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d019      	beq.n	8015a08 <osSemaphoreAcquire+0x94>
 80159d4:	4b0f      	ldr	r3, [pc, #60]	; (8015a14 <osSemaphoreAcquire+0xa0>)
 80159d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159da:	601a      	str	r2, [r3, #0]
 80159dc:	f3bf 8f4f 	dsb	sy
 80159e0:	f3bf 8f6f 	isb	sy
 80159e4:	e010      	b.n	8015a08 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80159e6:	6839      	ldr	r1, [r7, #0]
 80159e8:	6938      	ldr	r0, [r7, #16]
 80159ea:	f000 fe13 	bl	8016614 <xQueueSemaphoreTake>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d009      	beq.n	8015a08 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d003      	beq.n	8015a02 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80159fa:	f06f 0301 	mvn.w	r3, #1
 80159fe:	617b      	str	r3, [r7, #20]
 8015a00:	e002      	b.n	8015a08 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015a02:	f06f 0302 	mvn.w	r3, #2
 8015a06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015a08:	697b      	ldr	r3, [r7, #20]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3718      	adds	r7, #24
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	e000ed04 	.word	0xe000ed04

08015a18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015a24:	2300      	movs	r3, #0
 8015a26:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d103      	bne.n	8015a36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015a2e:	f06f 0303 	mvn.w	r3, #3
 8015a32:	617b      	str	r3, [r7, #20]
 8015a34:	e02c      	b.n	8015a90 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a36:	f3ef 8305 	mrs	r3, IPSR
 8015a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8015a3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d01a      	beq.n	8015a78 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015a42:	2300      	movs	r3, #0
 8015a44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015a46:	f107 0308 	add.w	r3, r7, #8
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	6938      	ldr	r0, [r7, #16]
 8015a4e:	f000 fc74 	bl	801633a <xQueueGiveFromISR>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d003      	beq.n	8015a60 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015a58:	f06f 0302 	mvn.w	r3, #2
 8015a5c:	617b      	str	r3, [r7, #20]
 8015a5e:	e017      	b.n	8015a90 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d014      	beq.n	8015a90 <osSemaphoreRelease+0x78>
 8015a66:	4b0d      	ldr	r3, [pc, #52]	; (8015a9c <osSemaphoreRelease+0x84>)
 8015a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a6c:	601a      	str	r2, [r3, #0]
 8015a6e:	f3bf 8f4f 	dsb	sy
 8015a72:	f3bf 8f6f 	isb	sy
 8015a76:	e00b      	b.n	8015a90 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015a78:	2300      	movs	r3, #0
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	6938      	ldr	r0, [r7, #16]
 8015a80:	f000 fac2 	bl	8016008 <xQueueGenericSend>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b01      	cmp	r3, #1
 8015a88:	d002      	beq.n	8015a90 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015a8a:	f06f 0302 	mvn.w	r3, #2
 8015a8e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015a90:	697b      	ldr	r3, [r7, #20]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3718      	adds	r7, #24
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
 8015a9a:	bf00      	nop
 8015a9c:	e000ed04 	.word	0xe000ed04

08015aa0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015aac:	f3ef 8305 	mrs	r3, IPSR
 8015ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d003      	beq.n	8015ac0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015ab8:	f06f 0305 	mvn.w	r3, #5
 8015abc:	617b      	str	r3, [r7, #20]
 8015abe:	e00e      	b.n	8015ade <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d103      	bne.n	8015ace <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8015ac6:	f06f 0303 	mvn.w	r3, #3
 8015aca:	617b      	str	r3, [r7, #20]
 8015acc:	e007      	b.n	8015ade <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015ace:	6938      	ldr	r0, [r7, #16]
 8015ad0:	f001 f8a2 	bl	8016c18 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8015ad8:	6938      	ldr	r0, [r7, #16]
 8015ada:	f000 ff27 	bl	801692c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015ade:	697b      	ldr	r3, [r7, #20]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3718      	adds	r7, #24
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}

08015ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015ae8:	b480      	push	{r7}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	60f8      	str	r0, [r7, #12]
 8015af0:	60b9      	str	r1, [r7, #8]
 8015af2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	4a07      	ldr	r2, [pc, #28]	; (8015b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8015af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	4a06      	ldr	r2, [pc, #24]	; (8015b18 <vApplicationGetIdleTaskMemory+0x30>)
 8015afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2280      	movs	r2, #128	; 0x80
 8015b04:	601a      	str	r2, [r3, #0]
}
 8015b06:	bf00      	nop
 8015b08:	3714      	adds	r7, #20
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop
 8015b14:	20019190 	.word	0x20019190
 8015b18:	20019238 	.word	0x20019238

08015b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60f8      	str	r0, [r7, #12]
 8015b24:	60b9      	str	r1, [r7, #8]
 8015b26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	4a07      	ldr	r2, [pc, #28]	; (8015b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8015b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	4a06      	ldr	r2, [pc, #24]	; (8015b4c <vApplicationGetTimerTaskMemory+0x30>)
 8015b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015b3a:	601a      	str	r2, [r3, #0]
}
 8015b3c:	bf00      	nop
 8015b3e:	3714      	adds	r7, #20
 8015b40:	46bd      	mov	sp, r7
 8015b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b46:	4770      	bx	lr
 8015b48:	20019438 	.word	0x20019438
 8015b4c:	200194e0 	.word	0x200194e0

08015b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f103 0208 	add.w	r2, r3, #8
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f04f 32ff 	mov.w	r2, #4294967295
 8015b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f103 0208 	add.w	r2, r3, #8
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f103 0208 	add.w	r2, r3, #8
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2200      	movs	r2, #0
 8015b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015b84:	bf00      	nop
 8015b86:	370c      	adds	r7, #12
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8e:	4770      	bx	lr

08015b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015b90:	b480      	push	{r7}
 8015b92:	b083      	sub	sp, #12
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015b9e:	bf00      	nop
 8015ba0:	370c      	adds	r7, #12
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba8:	4770      	bx	lr

08015baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015baa:	b480      	push	{r7}
 8015bac:	b085      	sub	sp, #20
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	6078      	str	r0, [r7, #4]
 8015bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	68fa      	ldr	r2, [r7, #12]
 8015bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	689a      	ldr	r2, [r3, #8]
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	683a      	ldr	r2, [r7, #0]
 8015bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	1c5a      	adds	r2, r3, #1
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	601a      	str	r2, [r3, #0]
}
 8015be6:	bf00      	nop
 8015be8:	3714      	adds	r7, #20
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr

08015bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015bf2:	b480      	push	{r7}
 8015bf4:	b085      	sub	sp, #20
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
 8015bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c08:	d103      	bne.n	8015c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	691b      	ldr	r3, [r3, #16]
 8015c0e:	60fb      	str	r3, [r7, #12]
 8015c10:	e00c      	b.n	8015c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	3308      	adds	r3, #8
 8015c16:	60fb      	str	r3, [r7, #12]
 8015c18:	e002      	b.n	8015c20 <vListInsert+0x2e>
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	60fb      	str	r3, [r7, #12]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	68ba      	ldr	r2, [r7, #8]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d2f6      	bcs.n	8015c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	685a      	ldr	r2, [r3, #4]
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	68fa      	ldr	r2, [r7, #12]
 8015c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	683a      	ldr	r2, [r7, #0]
 8015c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	1c5a      	adds	r2, r3, #1
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	601a      	str	r2, [r3, #0]
}
 8015c58:	bf00      	nop
 8015c5a:	3714      	adds	r7, #20
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c62:	4770      	bx	lr

08015c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015c64:	b480      	push	{r7}
 8015c66:	b085      	sub	sp, #20
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	691b      	ldr	r3, [r3, #16]
 8015c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	6892      	ldr	r2, [r2, #8]
 8015c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	6852      	ldr	r2, [r2, #4]
 8015c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	687a      	ldr	r2, [r7, #4]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d103      	bne.n	8015c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	689a      	ldr	r2, [r3, #8]
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	1e5a      	subs	r2, r3, #1
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681b      	ldr	r3, [r3, #0]
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3714      	adds	r7, #20
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr

08015cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d10a      	bne.n	8015ce2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd0:	f383 8811 	msr	BASEPRI, r3
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	f3bf 8f4f 	dsb	sy
 8015cdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015cde:	bf00      	nop
 8015ce0:	e7fe      	b.n	8015ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015ce2:	f002 fc97 	bl	8018614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cee:	68f9      	ldr	r1, [r7, #12]
 8015cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015cf2:	fb01 f303 	mul.w	r3, r1, r3
 8015cf6:	441a      	add	r2, r3
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d12:	3b01      	subs	r3, #1
 8015d14:	68f9      	ldr	r1, [r7, #12]
 8015d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015d18:	fb01 f303 	mul.w	r3, r1, r3
 8015d1c:	441a      	add	r2, r3
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	22ff      	movs	r2, #255	; 0xff
 8015d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	22ff      	movs	r2, #255	; 0xff
 8015d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d114      	bne.n	8015d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	691b      	ldr	r3, [r3, #16]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d01a      	beq.n	8015d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	3310      	adds	r3, #16
 8015d44:	4618      	mov	r0, r3
 8015d46:	f001 fc4b 	bl	80175e0 <xTaskRemoveFromEventList>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d012      	beq.n	8015d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015d50:	4b0c      	ldr	r3, [pc, #48]	; (8015d84 <xQueueGenericReset+0xcc>)
 8015d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d56:	601a      	str	r2, [r3, #0]
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	e009      	b.n	8015d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	3310      	adds	r3, #16
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7ff fef2 	bl	8015b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	3324      	adds	r3, #36	; 0x24
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7ff feed 	bl	8015b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015d76:	f002 fc7d 	bl	8018674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015d7a:	2301      	movs	r3, #1
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3710      	adds	r7, #16
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	e000ed04 	.word	0xe000ed04

08015d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b08e      	sub	sp, #56	; 0x38
 8015d8c:	af02      	add	r7, sp, #8
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	60b9      	str	r1, [r7, #8]
 8015d92:	607a      	str	r2, [r7, #4]
 8015d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d10a      	bne.n	8015db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da0:	f383 8811 	msr	BASEPRI, r3
 8015da4:	f3bf 8f6f 	isb	sy
 8015da8:	f3bf 8f4f 	dsb	sy
 8015dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015dae:	bf00      	nop
 8015db0:	e7fe      	b.n	8015db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d10a      	bne.n	8015dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dbc:	f383 8811 	msr	BASEPRI, r3
 8015dc0:	f3bf 8f6f 	isb	sy
 8015dc4:	f3bf 8f4f 	dsb	sy
 8015dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015dca:	bf00      	nop
 8015dcc:	e7fe      	b.n	8015dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d002      	beq.n	8015dda <xQueueGenericCreateStatic+0x52>
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d001      	beq.n	8015dde <xQueueGenericCreateStatic+0x56>
 8015dda:	2301      	movs	r3, #1
 8015ddc:	e000      	b.n	8015de0 <xQueueGenericCreateStatic+0x58>
 8015dde:	2300      	movs	r3, #0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d10a      	bne.n	8015dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de8:	f383 8811 	msr	BASEPRI, r3
 8015dec:	f3bf 8f6f 	isb	sy
 8015df0:	f3bf 8f4f 	dsb	sy
 8015df4:	623b      	str	r3, [r7, #32]
}
 8015df6:	bf00      	nop
 8015df8:	e7fe      	b.n	8015df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d102      	bne.n	8015e06 <xQueueGenericCreateStatic+0x7e>
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d101      	bne.n	8015e0a <xQueueGenericCreateStatic+0x82>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e000      	b.n	8015e0c <xQueueGenericCreateStatic+0x84>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d10a      	bne.n	8015e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e14:	f383 8811 	msr	BASEPRI, r3
 8015e18:	f3bf 8f6f 	isb	sy
 8015e1c:	f3bf 8f4f 	dsb	sy
 8015e20:	61fb      	str	r3, [r7, #28]
}
 8015e22:	bf00      	nop
 8015e24:	e7fe      	b.n	8015e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015e26:	2350      	movs	r3, #80	; 0x50
 8015e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	2b50      	cmp	r3, #80	; 0x50
 8015e2e:	d00a      	beq.n	8015e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e34:	f383 8811 	msr	BASEPRI, r3
 8015e38:	f3bf 8f6f 	isb	sy
 8015e3c:	f3bf 8f4f 	dsb	sy
 8015e40:	61bb      	str	r3, [r7, #24]
}
 8015e42:	bf00      	nop
 8015e44:	e7fe      	b.n	8015e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d00d      	beq.n	8015e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e54:	2201      	movs	r2, #1
 8015e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	4613      	mov	r3, r2
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	68b9      	ldr	r1, [r7, #8]
 8015e68:	68f8      	ldr	r0, [r7, #12]
 8015e6a:	f000 f83f 	bl	8015eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3730      	adds	r7, #48	; 0x30
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b08a      	sub	sp, #40	; 0x28
 8015e7c:	af02      	add	r7, sp, #8
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	4613      	mov	r3, r2
 8015e84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d10a      	bne.n	8015ea2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e90:	f383 8811 	msr	BASEPRI, r3
 8015e94:	f3bf 8f6f 	isb	sy
 8015e98:	f3bf 8f4f 	dsb	sy
 8015e9c:	613b      	str	r3, [r7, #16]
}
 8015e9e:	bf00      	nop
 8015ea0:	e7fe      	b.n	8015ea0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	fb02 f303 	mul.w	r3, r2, r3
 8015eaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	3350      	adds	r3, #80	; 0x50
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f002 fcd1 	bl	8018858 <pvPortMalloc>
 8015eb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d011      	beq.n	8015ee2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015ebe:	69bb      	ldr	r3, [r7, #24]
 8015ec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	3350      	adds	r3, #80	; 0x50
 8015ec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ed0:	79fa      	ldrb	r2, [r7, #7]
 8015ed2:	69bb      	ldr	r3, [r7, #24]
 8015ed4:	9300      	str	r3, [sp, #0]
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	697a      	ldr	r2, [r7, #20]
 8015eda:	68b9      	ldr	r1, [r7, #8]
 8015edc:	68f8      	ldr	r0, [r7, #12]
 8015ede:	f000 f805 	bl	8015eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3720      	adds	r7, #32
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b084      	sub	sp, #16
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	60b9      	str	r1, [r7, #8]
 8015ef6:	607a      	str	r2, [r7, #4]
 8015ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d103      	bne.n	8015f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	69ba      	ldr	r2, [r7, #24]
 8015f04:	601a      	str	r2, [r3, #0]
 8015f06:	e002      	b.n	8015f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015f0e:	69bb      	ldr	r3, [r7, #24]
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015f14:	69bb      	ldr	r3, [r7, #24]
 8015f16:	68ba      	ldr	r2, [r7, #8]
 8015f18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	69b8      	ldr	r0, [r7, #24]
 8015f1e:	f7ff fecb 	bl	8015cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015f22:	69bb      	ldr	r3, [r7, #24]
 8015f24:	78fa      	ldrb	r2, [r7, #3]
 8015f26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015f2a:	bf00      	nop
 8015f2c:	3710      	adds	r7, #16
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015f32:	b580      	push	{r7, lr}
 8015f34:	b08a      	sub	sp, #40	; 0x28
 8015f36:	af02      	add	r7, sp, #8
 8015f38:	60f8      	str	r0, [r7, #12]
 8015f3a:	60b9      	str	r1, [r7, #8]
 8015f3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10a      	bne.n	8015f5a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f48:	f383 8811 	msr	BASEPRI, r3
 8015f4c:	f3bf 8f6f 	isb	sy
 8015f50:	f3bf 8f4f 	dsb	sy
 8015f54:	61bb      	str	r3, [r7, #24]
}
 8015f56:	bf00      	nop
 8015f58:	e7fe      	b.n	8015f58 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d90a      	bls.n	8015f78 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f66:	f383 8811 	msr	BASEPRI, r3
 8015f6a:	f3bf 8f6f 	isb	sy
 8015f6e:	f3bf 8f4f 	dsb	sy
 8015f72:	617b      	str	r3, [r7, #20]
}
 8015f74:	bf00      	nop
 8015f76:	e7fe      	b.n	8015f76 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015f78:	2302      	movs	r3, #2
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	2100      	movs	r1, #0
 8015f82:	68f8      	ldr	r0, [r7, #12]
 8015f84:	f7ff ff00 	bl	8015d88 <xQueueGenericCreateStatic>
 8015f88:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d002      	beq.n	8015f96 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	68ba      	ldr	r2, [r7, #8]
 8015f94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015f96:	69fb      	ldr	r3, [r7, #28]
	}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	3720      	adds	r7, #32
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}

08015fa0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d10a      	bne.n	8015fc6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb4:	f383 8811 	msr	BASEPRI, r3
 8015fb8:	f3bf 8f6f 	isb	sy
 8015fbc:	f3bf 8f4f 	dsb	sy
 8015fc0:	613b      	str	r3, [r7, #16]
}
 8015fc2:	bf00      	nop
 8015fc4:	e7fe      	b.n	8015fc4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015fc6:	683a      	ldr	r2, [r7, #0]
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d90a      	bls.n	8015fe4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd2:	f383 8811 	msr	BASEPRI, r3
 8015fd6:	f3bf 8f6f 	isb	sy
 8015fda:	f3bf 8f4f 	dsb	sy
 8015fde:	60fb      	str	r3, [r7, #12]
}
 8015fe0:	bf00      	nop
 8015fe2:	e7fe      	b.n	8015fe2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015fe4:	2202      	movs	r2, #2
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f7ff ff45 	bl	8015e78 <xQueueGenericCreate>
 8015fee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d002      	beq.n	8015ffc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015ffc:	697b      	ldr	r3, [r7, #20]
	}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3718      	adds	r7, #24
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
	...

08016008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b08e      	sub	sp, #56	; 0x38
 801600c:	af00      	add	r7, sp, #0
 801600e:	60f8      	str	r0, [r7, #12]
 8016010:	60b9      	str	r1, [r7, #8]
 8016012:	607a      	str	r2, [r7, #4]
 8016014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016016:	2300      	movs	r3, #0
 8016018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016020:	2b00      	cmp	r3, #0
 8016022:	d10a      	bne.n	801603a <xQueueGenericSend+0x32>
	__asm volatile
 8016024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016028:	f383 8811 	msr	BASEPRI, r3
 801602c:	f3bf 8f6f 	isb	sy
 8016030:	f3bf 8f4f 	dsb	sy
 8016034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016036:	bf00      	nop
 8016038:	e7fe      	b.n	8016038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d103      	bne.n	8016048 <xQueueGenericSend+0x40>
 8016040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016044:	2b00      	cmp	r3, #0
 8016046:	d101      	bne.n	801604c <xQueueGenericSend+0x44>
 8016048:	2301      	movs	r3, #1
 801604a:	e000      	b.n	801604e <xQueueGenericSend+0x46>
 801604c:	2300      	movs	r3, #0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d10a      	bne.n	8016068 <xQueueGenericSend+0x60>
	__asm volatile
 8016052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016056:	f383 8811 	msr	BASEPRI, r3
 801605a:	f3bf 8f6f 	isb	sy
 801605e:	f3bf 8f4f 	dsb	sy
 8016062:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016064:	bf00      	nop
 8016066:	e7fe      	b.n	8016066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	2b02      	cmp	r3, #2
 801606c:	d103      	bne.n	8016076 <xQueueGenericSend+0x6e>
 801606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016072:	2b01      	cmp	r3, #1
 8016074:	d101      	bne.n	801607a <xQueueGenericSend+0x72>
 8016076:	2301      	movs	r3, #1
 8016078:	e000      	b.n	801607c <xQueueGenericSend+0x74>
 801607a:	2300      	movs	r3, #0
 801607c:	2b00      	cmp	r3, #0
 801607e:	d10a      	bne.n	8016096 <xQueueGenericSend+0x8e>
	__asm volatile
 8016080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016084:	f383 8811 	msr	BASEPRI, r3
 8016088:	f3bf 8f6f 	isb	sy
 801608c:	f3bf 8f4f 	dsb	sy
 8016090:	623b      	str	r3, [r7, #32]
}
 8016092:	bf00      	nop
 8016094:	e7fe      	b.n	8016094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016096:	f001 fc65 	bl	8017964 <xTaskGetSchedulerState>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d102      	bne.n	80160a6 <xQueueGenericSend+0x9e>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <xQueueGenericSend+0xa2>
 80160a6:	2301      	movs	r3, #1
 80160a8:	e000      	b.n	80160ac <xQueueGenericSend+0xa4>
 80160aa:	2300      	movs	r3, #0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10a      	bne.n	80160c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80160b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b4:	f383 8811 	msr	BASEPRI, r3
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	f3bf 8f4f 	dsb	sy
 80160c0:	61fb      	str	r3, [r7, #28]
}
 80160c2:	bf00      	nop
 80160c4:	e7fe      	b.n	80160c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160c6:	f002 faa5 	bl	8018614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d302      	bcc.n	80160dc <xQueueGenericSend+0xd4>
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d129      	bne.n	8016130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	68b9      	ldr	r1, [r7, #8]
 80160e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160e2:	f000 fc5e 	bl	80169a2 <prvCopyDataToQueue>
 80160e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d010      	beq.n	8016112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f2:	3324      	adds	r3, #36	; 0x24
 80160f4:	4618      	mov	r0, r3
 80160f6:	f001 fa73 	bl	80175e0 <xTaskRemoveFromEventList>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d013      	beq.n	8016128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016100:	4b3f      	ldr	r3, [pc, #252]	; (8016200 <xQueueGenericSend+0x1f8>)
 8016102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016106:	601a      	str	r2, [r3, #0]
 8016108:	f3bf 8f4f 	dsb	sy
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	e00a      	b.n	8016128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016114:	2b00      	cmp	r3, #0
 8016116:	d007      	beq.n	8016128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016118:	4b39      	ldr	r3, [pc, #228]	; (8016200 <xQueueGenericSend+0x1f8>)
 801611a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801611e:	601a      	str	r2, [r3, #0]
 8016120:	f3bf 8f4f 	dsb	sy
 8016124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016128:	f002 faa4 	bl	8018674 <vPortExitCritical>
				return pdPASS;
 801612c:	2301      	movs	r3, #1
 801612e:	e063      	b.n	80161f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d103      	bne.n	801613e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016136:	f002 fa9d 	bl	8018674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801613a:	2300      	movs	r3, #0
 801613c:	e05c      	b.n	80161f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016140:	2b00      	cmp	r3, #0
 8016142:	d106      	bne.n	8016152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016144:	f107 0314 	add.w	r3, r7, #20
 8016148:	4618      	mov	r0, r3
 801614a:	f001 faad 	bl	80176a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801614e:	2301      	movs	r3, #1
 8016150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016152:	f002 fa8f 	bl	8018674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016156:	f001 f819 	bl	801718c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801615a:	f002 fa5b 	bl	8018614 <vPortEnterCritical>
 801615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016164:	b25b      	sxtb	r3, r3
 8016166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801616a:	d103      	bne.n	8016174 <xQueueGenericSend+0x16c>
 801616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616e:	2200      	movs	r2, #0
 8016170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801617a:	b25b      	sxtb	r3, r3
 801617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016180:	d103      	bne.n	801618a <xQueueGenericSend+0x182>
 8016182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016184:	2200      	movs	r2, #0
 8016186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801618a:	f002 fa73 	bl	8018674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801618e:	1d3a      	adds	r2, r7, #4
 8016190:	f107 0314 	add.w	r3, r7, #20
 8016194:	4611      	mov	r1, r2
 8016196:	4618      	mov	r0, r3
 8016198:	f001 fa9c 	bl	80176d4 <xTaskCheckForTimeOut>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d124      	bne.n	80161ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80161a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161a4:	f000 fcf5 	bl	8016b92 <prvIsQueueFull>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d018      	beq.n	80161e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80161ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b0:	3310      	adds	r3, #16
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	4611      	mov	r1, r2
 80161b6:	4618      	mov	r0, r3
 80161b8:	f001 f9c2 	bl	8017540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80161bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161be:	f000 fc80 	bl	8016ac2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80161c2:	f000 fff1 	bl	80171a8 <xTaskResumeAll>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	f47f af7c 	bne.w	80160c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80161ce:	4b0c      	ldr	r3, [pc, #48]	; (8016200 <xQueueGenericSend+0x1f8>)
 80161d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161d4:	601a      	str	r2, [r3, #0]
 80161d6:	f3bf 8f4f 	dsb	sy
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	e772      	b.n	80160c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80161e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161e2:	f000 fc6e 	bl	8016ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80161e6:	f000 ffdf 	bl	80171a8 <xTaskResumeAll>
 80161ea:	e76c      	b.n	80160c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80161ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161ee:	f000 fc68 	bl	8016ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80161f2:	f000 ffd9 	bl	80171a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80161f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3738      	adds	r7, #56	; 0x38
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}
 8016200:	e000ed04 	.word	0xe000ed04

08016204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b090      	sub	sp, #64	; 0x40
 8016208:	af00      	add	r7, sp, #0
 801620a:	60f8      	str	r0, [r7, #12]
 801620c:	60b9      	str	r1, [r7, #8]
 801620e:	607a      	str	r2, [r7, #4]
 8016210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016218:	2b00      	cmp	r3, #0
 801621a:	d10a      	bne.n	8016232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016220:	f383 8811 	msr	BASEPRI, r3
 8016224:	f3bf 8f6f 	isb	sy
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801622e:	bf00      	nop
 8016230:	e7fe      	b.n	8016230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d103      	bne.n	8016240 <xQueueGenericSendFromISR+0x3c>
 8016238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801623c:	2b00      	cmp	r3, #0
 801623e:	d101      	bne.n	8016244 <xQueueGenericSendFromISR+0x40>
 8016240:	2301      	movs	r3, #1
 8016242:	e000      	b.n	8016246 <xQueueGenericSendFromISR+0x42>
 8016244:	2300      	movs	r3, #0
 8016246:	2b00      	cmp	r3, #0
 8016248:	d10a      	bne.n	8016260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624e:	f383 8811 	msr	BASEPRI, r3
 8016252:	f3bf 8f6f 	isb	sy
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801625c:	bf00      	nop
 801625e:	e7fe      	b.n	801625e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	2b02      	cmp	r3, #2
 8016264:	d103      	bne.n	801626e <xQueueGenericSendFromISR+0x6a>
 8016266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801626a:	2b01      	cmp	r3, #1
 801626c:	d101      	bne.n	8016272 <xQueueGenericSendFromISR+0x6e>
 801626e:	2301      	movs	r3, #1
 8016270:	e000      	b.n	8016274 <xQueueGenericSendFromISR+0x70>
 8016272:	2300      	movs	r3, #0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d10a      	bne.n	801628e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801627c:	f383 8811 	msr	BASEPRI, r3
 8016280:	f3bf 8f6f 	isb	sy
 8016284:	f3bf 8f4f 	dsb	sy
 8016288:	623b      	str	r3, [r7, #32]
}
 801628a:	bf00      	nop
 801628c:	e7fe      	b.n	801628c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801628e:	f002 faa3 	bl	80187d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016292:	f3ef 8211 	mrs	r2, BASEPRI
 8016296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801629a:	f383 8811 	msr	BASEPRI, r3
 801629e:	f3bf 8f6f 	isb	sy
 80162a2:	f3bf 8f4f 	dsb	sy
 80162a6:	61fa      	str	r2, [r7, #28]
 80162a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80162aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80162ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80162ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d302      	bcc.n	80162c0 <xQueueGenericSendFromISR+0xbc>
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	2b02      	cmp	r3, #2
 80162be:	d12f      	bne.n	8016320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80162c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80162c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	68b9      	ldr	r1, [r7, #8]
 80162d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162d6:	f000 fb64 	bl	80169a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80162da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80162de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162e2:	d112      	bne.n	801630a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80162e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d016      	beq.n	801631a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80162ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ee:	3324      	adds	r3, #36	; 0x24
 80162f0:	4618      	mov	r0, r3
 80162f2:	f001 f975 	bl	80175e0 <xTaskRemoveFromEventList>
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d00e      	beq.n	801631a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00b      	beq.n	801631a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	601a      	str	r2, [r3, #0]
 8016308:	e007      	b.n	801631a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801630a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801630e:	3301      	adds	r3, #1
 8016310:	b2db      	uxtb	r3, r3
 8016312:	b25a      	sxtb	r2, r3
 8016314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801631a:	2301      	movs	r3, #1
 801631c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801631e:	e001      	b.n	8016324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016320:	2300      	movs	r3, #0
 8016322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016326:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801632e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016332:	4618      	mov	r0, r3
 8016334:	3740      	adds	r7, #64	; 0x40
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801633a:	b580      	push	{r7, lr}
 801633c:	b08e      	sub	sp, #56	; 0x38
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
 8016342:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634a:	2b00      	cmp	r3, #0
 801634c:	d10a      	bne.n	8016364 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	623b      	str	r3, [r7, #32]
}
 8016360:	bf00      	nop
 8016362:	e7fe      	b.n	8016362 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00a      	beq.n	8016382 <xQueueGiveFromISR+0x48>
	__asm volatile
 801636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016370:	f383 8811 	msr	BASEPRI, r3
 8016374:	f3bf 8f6f 	isb	sy
 8016378:	f3bf 8f4f 	dsb	sy
 801637c:	61fb      	str	r3, [r7, #28]
}
 801637e:	bf00      	nop
 8016380:	e7fe      	b.n	8016380 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d103      	bne.n	8016392 <xQueueGiveFromISR+0x58>
 801638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638c:	689b      	ldr	r3, [r3, #8]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d101      	bne.n	8016396 <xQueueGiveFromISR+0x5c>
 8016392:	2301      	movs	r3, #1
 8016394:	e000      	b.n	8016398 <xQueueGiveFromISR+0x5e>
 8016396:	2300      	movs	r3, #0
 8016398:	2b00      	cmp	r3, #0
 801639a:	d10a      	bne.n	80163b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 801639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a0:	f383 8811 	msr	BASEPRI, r3
 80163a4:	f3bf 8f6f 	isb	sy
 80163a8:	f3bf 8f4f 	dsb	sy
 80163ac:	61bb      	str	r3, [r7, #24]
}
 80163ae:	bf00      	nop
 80163b0:	e7fe      	b.n	80163b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80163b2:	f002 fa11 	bl	80187d8 <vPortValidateInterruptPriority>
	__asm volatile
 80163b6:	f3ef 8211 	mrs	r2, BASEPRI
 80163ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163be:	f383 8811 	msr	BASEPRI, r3
 80163c2:	f3bf 8f6f 	isb	sy
 80163c6:	f3bf 8f4f 	dsb	sy
 80163ca:	617a      	str	r2, [r7, #20]
 80163cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80163ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80163d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80163d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163de:	429a      	cmp	r2, r3
 80163e0:	d22b      	bcs.n	801643a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80163e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80163ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ee:	1c5a      	adds	r2, r3, #1
 80163f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80163f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163fc:	d112      	bne.n	8016424 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016402:	2b00      	cmp	r3, #0
 8016404:	d016      	beq.n	8016434 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016408:	3324      	adds	r3, #36	; 0x24
 801640a:	4618      	mov	r0, r3
 801640c:	f001 f8e8 	bl	80175e0 <xTaskRemoveFromEventList>
 8016410:	4603      	mov	r3, r0
 8016412:	2b00      	cmp	r3, #0
 8016414:	d00e      	beq.n	8016434 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00b      	beq.n	8016434 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	2201      	movs	r2, #1
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	e007      	b.n	8016434 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016428:	3301      	adds	r3, #1
 801642a:	b2db      	uxtb	r3, r3
 801642c:	b25a      	sxtb	r2, r3
 801642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016434:	2301      	movs	r3, #1
 8016436:	637b      	str	r3, [r7, #52]	; 0x34
 8016438:	e001      	b.n	801643e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801643a:	2300      	movs	r3, #0
 801643c:	637b      	str	r3, [r7, #52]	; 0x34
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	f383 8811 	msr	BASEPRI, r3
}
 8016448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801644c:	4618      	mov	r0, r3
 801644e:	3738      	adds	r7, #56	; 0x38
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b08c      	sub	sp, #48	; 0x30
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016460:	2300      	movs	r3, #0
 8016462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646a:	2b00      	cmp	r3, #0
 801646c:	d10a      	bne.n	8016484 <xQueueReceive+0x30>
	__asm volatile
 801646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016472:	f383 8811 	msr	BASEPRI, r3
 8016476:	f3bf 8f6f 	isb	sy
 801647a:	f3bf 8f4f 	dsb	sy
 801647e:	623b      	str	r3, [r7, #32]
}
 8016480:	bf00      	nop
 8016482:	e7fe      	b.n	8016482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d103      	bne.n	8016492 <xQueueReceive+0x3e>
 801648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801648e:	2b00      	cmp	r3, #0
 8016490:	d101      	bne.n	8016496 <xQueueReceive+0x42>
 8016492:	2301      	movs	r3, #1
 8016494:	e000      	b.n	8016498 <xQueueReceive+0x44>
 8016496:	2300      	movs	r3, #0
 8016498:	2b00      	cmp	r3, #0
 801649a:	d10a      	bne.n	80164b2 <xQueueReceive+0x5e>
	__asm volatile
 801649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a0:	f383 8811 	msr	BASEPRI, r3
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	61fb      	str	r3, [r7, #28]
}
 80164ae:	bf00      	nop
 80164b0:	e7fe      	b.n	80164b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80164b2:	f001 fa57 	bl	8017964 <xTaskGetSchedulerState>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d102      	bne.n	80164c2 <xQueueReceive+0x6e>
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d101      	bne.n	80164c6 <xQueueReceive+0x72>
 80164c2:	2301      	movs	r3, #1
 80164c4:	e000      	b.n	80164c8 <xQueueReceive+0x74>
 80164c6:	2300      	movs	r3, #0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10a      	bne.n	80164e2 <xQueueReceive+0x8e>
	__asm volatile
 80164cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d0:	f383 8811 	msr	BASEPRI, r3
 80164d4:	f3bf 8f6f 	isb	sy
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	61bb      	str	r3, [r7, #24]
}
 80164de:	bf00      	nop
 80164e0:	e7fe      	b.n	80164e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80164e2:	f002 f897 	bl	8018614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80164e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80164ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d01f      	beq.n	8016532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80164f2:	68b9      	ldr	r1, [r7, #8]
 80164f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164f6:	f000 fabe 	bl	8016a76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	1e5a      	subs	r2, r3, #1
 80164fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016504:	691b      	ldr	r3, [r3, #16]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d00f      	beq.n	801652a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650c:	3310      	adds	r3, #16
 801650e:	4618      	mov	r0, r3
 8016510:	f001 f866 	bl	80175e0 <xTaskRemoveFromEventList>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d007      	beq.n	801652a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801651a:	4b3d      	ldr	r3, [pc, #244]	; (8016610 <xQueueReceive+0x1bc>)
 801651c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016520:	601a      	str	r2, [r3, #0]
 8016522:	f3bf 8f4f 	dsb	sy
 8016526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801652a:	f002 f8a3 	bl	8018674 <vPortExitCritical>
				return pdPASS;
 801652e:	2301      	movs	r3, #1
 8016530:	e069      	b.n	8016606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d103      	bne.n	8016540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016538:	f002 f89c 	bl	8018674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801653c:	2300      	movs	r3, #0
 801653e:	e062      	b.n	8016606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	2b00      	cmp	r3, #0
 8016544:	d106      	bne.n	8016554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016546:	f107 0310 	add.w	r3, r7, #16
 801654a:	4618      	mov	r0, r3
 801654c:	f001 f8ac 	bl	80176a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016550:	2301      	movs	r3, #1
 8016552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016554:	f002 f88e 	bl	8018674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016558:	f000 fe18 	bl	801718c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801655c:	f002 f85a 	bl	8018614 <vPortEnterCritical>
 8016560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016566:	b25b      	sxtb	r3, r3
 8016568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801656c:	d103      	bne.n	8016576 <xQueueReceive+0x122>
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	2200      	movs	r2, #0
 8016572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801657c:	b25b      	sxtb	r3, r3
 801657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016582:	d103      	bne.n	801658c <xQueueReceive+0x138>
 8016584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016586:	2200      	movs	r2, #0
 8016588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801658c:	f002 f872 	bl	8018674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016590:	1d3a      	adds	r2, r7, #4
 8016592:	f107 0310 	add.w	r3, r7, #16
 8016596:	4611      	mov	r1, r2
 8016598:	4618      	mov	r0, r3
 801659a:	f001 f89b 	bl	80176d4 <xTaskCheckForTimeOut>
 801659e:	4603      	mov	r3, r0
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d123      	bne.n	80165ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165a6:	f000 fade 	bl	8016b66 <prvIsQueueEmpty>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d017      	beq.n	80165e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80165b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b2:	3324      	adds	r3, #36	; 0x24
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	4611      	mov	r1, r2
 80165b8:	4618      	mov	r0, r3
 80165ba:	f000 ffc1 	bl	8017540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80165be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165c0:	f000 fa7f 	bl	8016ac2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80165c4:	f000 fdf0 	bl	80171a8 <xTaskResumeAll>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d189      	bne.n	80164e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80165ce:	4b10      	ldr	r3, [pc, #64]	; (8016610 <xQueueReceive+0x1bc>)
 80165d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	f3bf 8f4f 	dsb	sy
 80165da:	f3bf 8f6f 	isb	sy
 80165de:	e780      	b.n	80164e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80165e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165e2:	f000 fa6e 	bl	8016ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165e6:	f000 fddf 	bl	80171a8 <xTaskResumeAll>
 80165ea:	e77a      	b.n	80164e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80165ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165ee:	f000 fa68 	bl	8016ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165f2:	f000 fdd9 	bl	80171a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165f8:	f000 fab5 	bl	8016b66 <prvIsQueueEmpty>
 80165fc:	4603      	mov	r3, r0
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f43f af6f 	beq.w	80164e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016606:	4618      	mov	r0, r3
 8016608:	3730      	adds	r7, #48	; 0x30
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	e000ed04 	.word	0xe000ed04

08016614 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b08e      	sub	sp, #56	; 0x38
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801661e:	2300      	movs	r3, #0
 8016620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016626:	2300      	movs	r3, #0
 8016628:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10a      	bne.n	8016646 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016634:	f383 8811 	msr	BASEPRI, r3
 8016638:	f3bf 8f6f 	isb	sy
 801663c:	f3bf 8f4f 	dsb	sy
 8016640:	623b      	str	r3, [r7, #32]
}
 8016642:	bf00      	nop
 8016644:	e7fe      	b.n	8016644 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801664a:	2b00      	cmp	r3, #0
 801664c:	d00a      	beq.n	8016664 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016652:	f383 8811 	msr	BASEPRI, r3
 8016656:	f3bf 8f6f 	isb	sy
 801665a:	f3bf 8f4f 	dsb	sy
 801665e:	61fb      	str	r3, [r7, #28]
}
 8016660:	bf00      	nop
 8016662:	e7fe      	b.n	8016662 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016664:	f001 f97e 	bl	8017964 <xTaskGetSchedulerState>
 8016668:	4603      	mov	r3, r0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d102      	bne.n	8016674 <xQueueSemaphoreTake+0x60>
 801666e:	683b      	ldr	r3, [r7, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d101      	bne.n	8016678 <xQueueSemaphoreTake+0x64>
 8016674:	2301      	movs	r3, #1
 8016676:	e000      	b.n	801667a <xQueueSemaphoreTake+0x66>
 8016678:	2300      	movs	r3, #0
 801667a:	2b00      	cmp	r3, #0
 801667c:	d10a      	bne.n	8016694 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016682:	f383 8811 	msr	BASEPRI, r3
 8016686:	f3bf 8f6f 	isb	sy
 801668a:	f3bf 8f4f 	dsb	sy
 801668e:	61bb      	str	r3, [r7, #24]
}
 8016690:	bf00      	nop
 8016692:	e7fe      	b.n	8016692 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016694:	f001 ffbe 	bl	8018614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801669c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d024      	beq.n	80166ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80166a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a6:	1e5a      	subs	r2, r3, #1
 80166a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80166ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d104      	bne.n	80166be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80166b4:	f001 facc 	bl	8017c50 <pvTaskIncrementMutexHeldCount>
 80166b8:	4602      	mov	r2, r0
 80166ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80166be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c0:	691b      	ldr	r3, [r3, #16]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00f      	beq.n	80166e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c8:	3310      	adds	r3, #16
 80166ca:	4618      	mov	r0, r3
 80166cc:	f000 ff88 	bl	80175e0 <xTaskRemoveFromEventList>
 80166d0:	4603      	mov	r3, r0
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d007      	beq.n	80166e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166d6:	4b54      	ldr	r3, [pc, #336]	; (8016828 <xQueueSemaphoreTake+0x214>)
 80166d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	f3bf 8f4f 	dsb	sy
 80166e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166e6:	f001 ffc5 	bl	8018674 <vPortExitCritical>
				return pdPASS;
 80166ea:	2301      	movs	r3, #1
 80166ec:	e097      	b.n	801681e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d111      	bne.n	8016718 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80166f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00a      	beq.n	8016710 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80166fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fe:	f383 8811 	msr	BASEPRI, r3
 8016702:	f3bf 8f6f 	isb	sy
 8016706:	f3bf 8f4f 	dsb	sy
 801670a:	617b      	str	r3, [r7, #20]
}
 801670c:	bf00      	nop
 801670e:	e7fe      	b.n	801670e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016710:	f001 ffb0 	bl	8018674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016714:	2300      	movs	r3, #0
 8016716:	e082      	b.n	801681e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801671e:	f107 030c 	add.w	r3, r7, #12
 8016722:	4618      	mov	r0, r3
 8016724:	f000 ffc0 	bl	80176a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016728:	2301      	movs	r3, #1
 801672a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801672c:	f001 ffa2 	bl	8018674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016730:	f000 fd2c 	bl	801718c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016734:	f001 ff6e 	bl	8018614 <vPortEnterCritical>
 8016738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801673e:	b25b      	sxtb	r3, r3
 8016740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016744:	d103      	bne.n	801674e <xQueueSemaphoreTake+0x13a>
 8016746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016748:	2200      	movs	r2, #0
 801674a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016754:	b25b      	sxtb	r3, r3
 8016756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801675a:	d103      	bne.n	8016764 <xQueueSemaphoreTake+0x150>
 801675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801675e:	2200      	movs	r2, #0
 8016760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016764:	f001 ff86 	bl	8018674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016768:	463a      	mov	r2, r7
 801676a:	f107 030c 	add.w	r3, r7, #12
 801676e:	4611      	mov	r1, r2
 8016770:	4618      	mov	r0, r3
 8016772:	f000 ffaf 	bl	80176d4 <xTaskCheckForTimeOut>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d132      	bne.n	80167e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801677c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801677e:	f000 f9f2 	bl	8016b66 <prvIsQueueEmpty>
 8016782:	4603      	mov	r3, r0
 8016784:	2b00      	cmp	r3, #0
 8016786:	d026      	beq.n	80167d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d109      	bne.n	80167a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016790:	f001 ff40 	bl	8018614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016796:	689b      	ldr	r3, [r3, #8]
 8016798:	4618      	mov	r0, r3
 801679a:	f001 f901 	bl	80179a0 <xTaskPriorityInherit>
 801679e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80167a0:	f001 ff68 	bl	8018674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80167a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a6:	3324      	adds	r3, #36	; 0x24
 80167a8:	683a      	ldr	r2, [r7, #0]
 80167aa:	4611      	mov	r1, r2
 80167ac:	4618      	mov	r0, r3
 80167ae:	f000 fec7 	bl	8017540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80167b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167b4:	f000 f985 	bl	8016ac2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80167b8:	f000 fcf6 	bl	80171a8 <xTaskResumeAll>
 80167bc:	4603      	mov	r3, r0
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f47f af68 	bne.w	8016694 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80167c4:	4b18      	ldr	r3, [pc, #96]	; (8016828 <xQueueSemaphoreTake+0x214>)
 80167c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167ca:	601a      	str	r2, [r3, #0]
 80167cc:	f3bf 8f4f 	dsb	sy
 80167d0:	f3bf 8f6f 	isb	sy
 80167d4:	e75e      	b.n	8016694 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80167d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167d8:	f000 f973 	bl	8016ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80167dc:	f000 fce4 	bl	80171a8 <xTaskResumeAll>
 80167e0:	e758      	b.n	8016694 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80167e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167e4:	f000 f96d 	bl	8016ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80167e8:	f000 fcde 	bl	80171a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80167ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167ee:	f000 f9ba 	bl	8016b66 <prvIsQueueEmpty>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f43f af4d 	beq.w	8016694 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80167fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00d      	beq.n	801681c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016800:	f001 ff08 	bl	8018614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016806:	f000 f8b4 	bl	8016972 <prvGetDisinheritPriorityAfterTimeout>
 801680a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680e:	689b      	ldr	r3, [r3, #8]
 8016810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016812:	4618      	mov	r0, r3
 8016814:	f001 f99a 	bl	8017b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016818:	f001 ff2c 	bl	8018674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801681c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801681e:	4618      	mov	r0, r3
 8016820:	3738      	adds	r7, #56	; 0x38
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	e000ed04 	.word	0xe000ed04

0801682c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b08e      	sub	sp, #56	; 0x38
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10a      	bne.n	8016858 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016846:	f383 8811 	msr	BASEPRI, r3
 801684a:	f3bf 8f6f 	isb	sy
 801684e:	f3bf 8f4f 	dsb	sy
 8016852:	623b      	str	r3, [r7, #32]
}
 8016854:	bf00      	nop
 8016856:	e7fe      	b.n	8016856 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d103      	bne.n	8016866 <xQueueReceiveFromISR+0x3a>
 801685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016862:	2b00      	cmp	r3, #0
 8016864:	d101      	bne.n	801686a <xQueueReceiveFromISR+0x3e>
 8016866:	2301      	movs	r3, #1
 8016868:	e000      	b.n	801686c <xQueueReceiveFromISR+0x40>
 801686a:	2300      	movs	r3, #0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d10a      	bne.n	8016886 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016874:	f383 8811 	msr	BASEPRI, r3
 8016878:	f3bf 8f6f 	isb	sy
 801687c:	f3bf 8f4f 	dsb	sy
 8016880:	61fb      	str	r3, [r7, #28]
}
 8016882:	bf00      	nop
 8016884:	e7fe      	b.n	8016884 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016886:	f001 ffa7 	bl	80187d8 <vPortValidateInterruptPriority>
	__asm volatile
 801688a:	f3ef 8211 	mrs	r2, BASEPRI
 801688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	61ba      	str	r2, [r7, #24]
 80168a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80168a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80168a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80168a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80168ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d02f      	beq.n	8016912 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80168b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80168bc:	68b9      	ldr	r1, [r7, #8]
 80168be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168c0:	f000 f8d9 	bl	8016a76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80168c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c6:	1e5a      	subs	r2, r3, #1
 80168c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80168cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80168d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d4:	d112      	bne.n	80168fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	691b      	ldr	r3, [r3, #16]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d016      	beq.n	801690c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e0:	3310      	adds	r3, #16
 80168e2:	4618      	mov	r0, r3
 80168e4:	f000 fe7c 	bl	80175e0 <xTaskRemoveFromEventList>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00e      	beq.n	801690c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d00b      	beq.n	801690c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2201      	movs	r2, #1
 80168f8:	601a      	str	r2, [r3, #0]
 80168fa:	e007      	b.n	801690c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80168fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016900:	3301      	adds	r3, #1
 8016902:	b2db      	uxtb	r3, r3
 8016904:	b25a      	sxtb	r2, r3
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801690c:	2301      	movs	r3, #1
 801690e:	637b      	str	r3, [r7, #52]	; 0x34
 8016910:	e001      	b.n	8016916 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016912:	2300      	movs	r3, #0
 8016914:	637b      	str	r3, [r7, #52]	; 0x34
 8016916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016918:	613b      	str	r3, [r7, #16]
	__asm volatile
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	f383 8811 	msr	BASEPRI, r3
}
 8016920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016924:	4618      	mov	r0, r3
 8016926:	3738      	adds	r7, #56	; 0x38
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}

0801692c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d10a      	bne.n	8016954 <vQueueDelete+0x28>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
 801694e:	60bb      	str	r3, [r7, #8]
}
 8016950:	bf00      	nop
 8016952:	e7fe      	b.n	8016952 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f000 f95f 	bl	8016c18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016960:	2b00      	cmp	r3, #0
 8016962:	d102      	bne.n	801696a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f002 f843 	bl	80189f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801696a:	bf00      	nop
 801696c:	3710      	adds	r7, #16
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016972:	b480      	push	{r7}
 8016974:	b085      	sub	sp, #20
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801697e:	2b00      	cmp	r3, #0
 8016980:	d006      	beq.n	8016990 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801698c:	60fb      	str	r3, [r7, #12]
 801698e:	e001      	b.n	8016994 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016990:	2300      	movs	r3, #0
 8016992:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016994:	68fb      	ldr	r3, [r7, #12]
	}
 8016996:	4618      	mov	r0, r3
 8016998:	3714      	adds	r7, #20
 801699a:	46bd      	mov	sp, r7
 801699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a0:	4770      	bx	lr

080169a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80169a2:	b580      	push	{r7, lr}
 80169a4:	b086      	sub	sp, #24
 80169a6:	af00      	add	r7, sp, #0
 80169a8:	60f8      	str	r0, [r7, #12]
 80169aa:	60b9      	str	r1, [r7, #8]
 80169ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80169ae:	2300      	movs	r3, #0
 80169b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d10d      	bne.n	80169dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d14d      	bne.n	8016a64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	689b      	ldr	r3, [r3, #8]
 80169cc:	4618      	mov	r0, r3
 80169ce:	f001 f84f 	bl	8017a70 <xTaskPriorityDisinherit>
 80169d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2200      	movs	r2, #0
 80169d8:	609a      	str	r2, [r3, #8]
 80169da:	e043      	b.n	8016a64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d119      	bne.n	8016a16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6858      	ldr	r0, [r3, #4]
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ea:	461a      	mov	r2, r3
 80169ec:	68b9      	ldr	r1, [r7, #8]
 80169ee:	f007 ff49 	bl	801e884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	685a      	ldr	r2, [r3, #4]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169fa:	441a      	add	r2, r3
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	685a      	ldr	r2, [r3, #4]
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	689b      	ldr	r3, [r3, #8]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d32b      	bcc.n	8016a64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	605a      	str	r2, [r3, #4]
 8016a14:	e026      	b.n	8016a64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	68d8      	ldr	r0, [r3, #12]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a1e:	461a      	mov	r2, r3
 8016a20:	68b9      	ldr	r1, [r7, #8]
 8016a22:	f007 ff2f 	bl	801e884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	68da      	ldr	r2, [r3, #12]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a2e:	425b      	negs	r3, r3
 8016a30:	441a      	add	r2, r3
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	68da      	ldr	r2, [r3, #12]
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d207      	bcs.n	8016a52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	689a      	ldr	r2, [r3, #8]
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a4a:	425b      	negs	r3, r3
 8016a4c:	441a      	add	r2, r3
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	2b02      	cmp	r3, #2
 8016a56:	d105      	bne.n	8016a64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d002      	beq.n	8016a64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	3b01      	subs	r3, #1
 8016a62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	1c5a      	adds	r2, r3, #1
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016a6c:	697b      	ldr	r3, [r7, #20]
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	3718      	adds	r7, #24
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}

08016a76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016a76:	b580      	push	{r7, lr}
 8016a78:	b082      	sub	sp, #8
 8016a7a:	af00      	add	r7, sp, #0
 8016a7c:	6078      	str	r0, [r7, #4]
 8016a7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d018      	beq.n	8016aba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	68da      	ldr	r2, [r3, #12]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a90:	441a      	add	r2, r3
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	68da      	ldr	r2, [r3, #12]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	689b      	ldr	r3, [r3, #8]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d303      	bcc.n	8016aaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	68d9      	ldr	r1, [r3, #12]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ab2:	461a      	mov	r2, r3
 8016ab4:	6838      	ldr	r0, [r7, #0]
 8016ab6:	f007 fee5 	bl	801e884 <memcpy>
	}
}
 8016aba:	bf00      	nop
 8016abc:	3708      	adds	r7, #8
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	bd80      	pop	{r7, pc}

08016ac2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016ac2:	b580      	push	{r7, lr}
 8016ac4:	b084      	sub	sp, #16
 8016ac6:	af00      	add	r7, sp, #0
 8016ac8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016aca:	f001 fda3 	bl	8018614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ad4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016ad6:	e011      	b.n	8016afc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d012      	beq.n	8016b06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	3324      	adds	r3, #36	; 0x24
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f000 fd7b 	bl	80175e0 <xTaskRemoveFromEventList>
 8016aea:	4603      	mov	r3, r0
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d001      	beq.n	8016af4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016af0:	f000 fe52 	bl	8017798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016af4:	7bfb      	ldrb	r3, [r7, #15]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	dce9      	bgt.n	8016ad8 <prvUnlockQueue+0x16>
 8016b04:	e000      	b.n	8016b08 <prvUnlockQueue+0x46>
					break;
 8016b06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	22ff      	movs	r2, #255	; 0xff
 8016b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016b10:	f001 fdb0 	bl	8018674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016b14:	f001 fd7e 	bl	8018614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b20:	e011      	b.n	8016b46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	691b      	ldr	r3, [r3, #16]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d012      	beq.n	8016b50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	3310      	adds	r3, #16
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f000 fd56 	bl	80175e0 <xTaskRemoveFromEventList>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d001      	beq.n	8016b3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016b3a:	f000 fe2d 	bl	8017798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016b3e:	7bbb      	ldrb	r3, [r7, #14]
 8016b40:	3b01      	subs	r3, #1
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	dce9      	bgt.n	8016b22 <prvUnlockQueue+0x60>
 8016b4e:	e000      	b.n	8016b52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016b50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	22ff      	movs	r2, #255	; 0xff
 8016b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016b5a:	f001 fd8b 	bl	8018674 <vPortExitCritical>
}
 8016b5e:	bf00      	nop
 8016b60:	3710      	adds	r7, #16
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b084      	sub	sp, #16
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b6e:	f001 fd51 	bl	8018614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d102      	bne.n	8016b80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	60fb      	str	r3, [r7, #12]
 8016b7e:	e001      	b.n	8016b84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016b80:	2300      	movs	r3, #0
 8016b82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016b84:	f001 fd76 	bl	8018674 <vPortExitCritical>

	return xReturn;
 8016b88:	68fb      	ldr	r3, [r7, #12]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b084      	sub	sp, #16
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b9a:	f001 fd3b 	bl	8018614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d102      	bne.n	8016bb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016baa:	2301      	movs	r3, #1
 8016bac:	60fb      	str	r3, [r7, #12]
 8016bae:	e001      	b.n	8016bb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016bb4:	f001 fd5e 	bl	8018674 <vPortExitCritical>

	return xReturn;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
	...

08016bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016bce:	2300      	movs	r3, #0
 8016bd0:	60fb      	str	r3, [r7, #12]
 8016bd2:	e014      	b.n	8016bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016bd4:	4a0f      	ldr	r2, [pc, #60]	; (8016c14 <vQueueAddToRegistry+0x50>)
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d10b      	bne.n	8016bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016be0:	490c      	ldr	r1, [pc, #48]	; (8016c14 <vQueueAddToRegistry+0x50>)
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	683a      	ldr	r2, [r7, #0]
 8016be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016bea:	4a0a      	ldr	r2, [pc, #40]	; (8016c14 <vQueueAddToRegistry+0x50>)
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	00db      	lsls	r3, r3, #3
 8016bf0:	4413      	add	r3, r2
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016bf6:	e006      	b.n	8016c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	60fb      	str	r3, [r7, #12]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	2b07      	cmp	r3, #7
 8016c02:	d9e7      	bls.n	8016bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016c04:	bf00      	nop
 8016c06:	bf00      	nop
 8016c08:	3714      	adds	r7, #20
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop
 8016c14:	200198e0 	.word	0x200198e0

08016c18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016c18:	b480      	push	{r7}
 8016c1a:	b085      	sub	sp, #20
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c20:	2300      	movs	r3, #0
 8016c22:	60fb      	str	r3, [r7, #12]
 8016c24:	e016      	b.n	8016c54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016c26:	4a10      	ldr	r2, [pc, #64]	; (8016c68 <vQueueUnregisterQueue+0x50>)
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	4413      	add	r3, r2
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d10b      	bne.n	8016c4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016c36:	4a0c      	ldr	r2, [pc, #48]	; (8016c68 <vQueueUnregisterQueue+0x50>)
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2100      	movs	r1, #0
 8016c3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016c40:	4a09      	ldr	r2, [pc, #36]	; (8016c68 <vQueueUnregisterQueue+0x50>)
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	00db      	lsls	r3, r3, #3
 8016c46:	4413      	add	r3, r2
 8016c48:	2200      	movs	r2, #0
 8016c4a:	605a      	str	r2, [r3, #4]
				break;
 8016c4c:	e006      	b.n	8016c5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	3301      	adds	r3, #1
 8016c52:	60fb      	str	r3, [r7, #12]
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2b07      	cmp	r3, #7
 8016c58:	d9e5      	bls.n	8016c26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016c5a:	bf00      	nop
 8016c5c:	bf00      	nop
 8016c5e:	3714      	adds	r7, #20
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr
 8016c68:	200198e0 	.word	0x200198e0

08016c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016c7c:	f001 fcca 	bl	8018614 <vPortEnterCritical>
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c86:	b25b      	sxtb	r3, r3
 8016c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c8c:	d103      	bne.n	8016c96 <vQueueWaitForMessageRestricted+0x2a>
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	2200      	movs	r2, #0
 8016c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c96:	697b      	ldr	r3, [r7, #20]
 8016c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c9c:	b25b      	sxtb	r3, r3
 8016c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ca2:	d103      	bne.n	8016cac <vQueueWaitForMessageRestricted+0x40>
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016cac:	f001 fce2 	bl	8018674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d106      	bne.n	8016cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	3324      	adds	r3, #36	; 0x24
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	68b9      	ldr	r1, [r7, #8]
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f000 fc61 	bl	8017588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016cc6:	6978      	ldr	r0, [r7, #20]
 8016cc8:	f7ff fefb 	bl	8016ac2 <prvUnlockQueue>
	}
 8016ccc:	bf00      	nop
 8016cce:	3718      	adds	r7, #24
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b08e      	sub	sp, #56	; 0x38
 8016cd8:	af04      	add	r7, sp, #16
 8016cda:	60f8      	str	r0, [r7, #12]
 8016cdc:	60b9      	str	r1, [r7, #8]
 8016cde:	607a      	str	r2, [r7, #4]
 8016ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d10a      	bne.n	8016cfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8016ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cec:	f383 8811 	msr	BASEPRI, r3
 8016cf0:	f3bf 8f6f 	isb	sy
 8016cf4:	f3bf 8f4f 	dsb	sy
 8016cf8:	623b      	str	r3, [r7, #32]
}
 8016cfa:	bf00      	nop
 8016cfc:	e7fe      	b.n	8016cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10a      	bne.n	8016d1a <xTaskCreateStatic+0x46>
	__asm volatile
 8016d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	61fb      	str	r3, [r7, #28]
}
 8016d16:	bf00      	nop
 8016d18:	e7fe      	b.n	8016d18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016d1a:	23a8      	movs	r3, #168	; 0xa8
 8016d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	2ba8      	cmp	r3, #168	; 0xa8
 8016d22:	d00a      	beq.n	8016d3a <xTaskCreateStatic+0x66>
	__asm volatile
 8016d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d28:	f383 8811 	msr	BASEPRI, r3
 8016d2c:	f3bf 8f6f 	isb	sy
 8016d30:	f3bf 8f4f 	dsb	sy
 8016d34:	61bb      	str	r3, [r7, #24]
}
 8016d36:	bf00      	nop
 8016d38:	e7fe      	b.n	8016d38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016d3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d01e      	beq.n	8016d80 <xTaskCreateStatic+0xac>
 8016d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d01b      	beq.n	8016d80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d54:	2202      	movs	r2, #2
 8016d56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	9303      	str	r3, [sp, #12]
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d60:	9302      	str	r3, [sp, #8]
 8016d62:	f107 0314 	add.w	r3, r7, #20
 8016d66:	9301      	str	r3, [sp, #4]
 8016d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6a:	9300      	str	r3, [sp, #0]
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	68b9      	ldr	r1, [r7, #8]
 8016d72:	68f8      	ldr	r0, [r7, #12]
 8016d74:	f000 f850 	bl	8016e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d7a:	f000 f8f3 	bl	8016f64 <prvAddNewTaskToReadyList>
 8016d7e:	e001      	b.n	8016d84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016d80:	2300      	movs	r3, #0
 8016d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016d84:	697b      	ldr	r3, [r7, #20]
	}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3728      	adds	r7, #40	; 0x28
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}

08016d8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b08c      	sub	sp, #48	; 0x30
 8016d92:	af04      	add	r7, sp, #16
 8016d94:	60f8      	str	r0, [r7, #12]
 8016d96:	60b9      	str	r1, [r7, #8]
 8016d98:	603b      	str	r3, [r7, #0]
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016d9e:	88fb      	ldrh	r3, [r7, #6]
 8016da0:	009b      	lsls	r3, r3, #2
 8016da2:	4618      	mov	r0, r3
 8016da4:	f001 fd58 	bl	8018858 <pvPortMalloc>
 8016da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d00e      	beq.n	8016dce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016db0:	20a8      	movs	r0, #168	; 0xa8
 8016db2:	f001 fd51 	bl	8018858 <pvPortMalloc>
 8016db6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d003      	beq.n	8016dc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	697a      	ldr	r2, [r7, #20]
 8016dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8016dc4:	e005      	b.n	8016dd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016dc6:	6978      	ldr	r0, [r7, #20]
 8016dc8:	f001 fe12 	bl	80189f0 <vPortFree>
 8016dcc:	e001      	b.n	8016dd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016dd2:	69fb      	ldr	r3, [r7, #28]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d017      	beq.n	8016e08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016de0:	88fa      	ldrh	r2, [r7, #6]
 8016de2:	2300      	movs	r3, #0
 8016de4:	9303      	str	r3, [sp, #12]
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	9302      	str	r3, [sp, #8]
 8016dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df0:	9300      	str	r3, [sp, #0]
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	68b9      	ldr	r1, [r7, #8]
 8016df6:	68f8      	ldr	r0, [r7, #12]
 8016df8:	f000 f80e 	bl	8016e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016dfc:	69f8      	ldr	r0, [r7, #28]
 8016dfe:	f000 f8b1 	bl	8016f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016e02:	2301      	movs	r3, #1
 8016e04:	61bb      	str	r3, [r7, #24]
 8016e06:	e002      	b.n	8016e0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016e08:	f04f 33ff 	mov.w	r3, #4294967295
 8016e0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3720      	adds	r7, #32
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b088      	sub	sp, #32
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	607a      	str	r2, [r7, #4]
 8016e24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	009b      	lsls	r3, r3, #2
 8016e2e:	461a      	mov	r2, r3
 8016e30:	21a5      	movs	r1, #165	; 0xa5
 8016e32:	f007 fc3f 	bl	801e6b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016e40:	3b01      	subs	r3, #1
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	4413      	add	r3, r2
 8016e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016e48:	69bb      	ldr	r3, [r7, #24]
 8016e4a:	f023 0307 	bic.w	r3, r3, #7
 8016e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016e50:	69bb      	ldr	r3, [r7, #24]
 8016e52:	f003 0307 	and.w	r3, r3, #7
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d00a      	beq.n	8016e70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e5e:	f383 8811 	msr	BASEPRI, r3
 8016e62:	f3bf 8f6f 	isb	sy
 8016e66:	f3bf 8f4f 	dsb	sy
 8016e6a:	617b      	str	r3, [r7, #20]
}
 8016e6c:	bf00      	nop
 8016e6e:	e7fe      	b.n	8016e6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d01f      	beq.n	8016eb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e76:	2300      	movs	r3, #0
 8016e78:	61fb      	str	r3, [r7, #28]
 8016e7a:	e012      	b.n	8016ea2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016e7c:	68ba      	ldr	r2, [r7, #8]
 8016e7e:	69fb      	ldr	r3, [r7, #28]
 8016e80:	4413      	add	r3, r2
 8016e82:	7819      	ldrb	r1, [r3, #0]
 8016e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e86:	69fb      	ldr	r3, [r7, #28]
 8016e88:	4413      	add	r3, r2
 8016e8a:	3334      	adds	r3, #52	; 0x34
 8016e8c:	460a      	mov	r2, r1
 8016e8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016e90:	68ba      	ldr	r2, [r7, #8]
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	4413      	add	r3, r2
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d006      	beq.n	8016eaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	61fb      	str	r3, [r7, #28]
 8016ea2:	69fb      	ldr	r3, [r7, #28]
 8016ea4:	2b0f      	cmp	r3, #15
 8016ea6:	d9e9      	bls.n	8016e7c <prvInitialiseNewTask+0x64>
 8016ea8:	e000      	b.n	8016eac <prvInitialiseNewTask+0x94>
			{
				break;
 8016eaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eae:	2200      	movs	r2, #0
 8016eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016eb4:	e003      	b.n	8016ebe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb8:	2200      	movs	r2, #0
 8016eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec0:	2b37      	cmp	r3, #55	; 0x37
 8016ec2:	d901      	bls.n	8016ec8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ec4:	2337      	movs	r3, #55	; 0x37
 8016ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ed2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	3304      	adds	r3, #4
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7fe fe56 	bl	8015b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee6:	3318      	adds	r3, #24
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7fe fe51 	bl	8015b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f06:	2200      	movs	r2, #0
 8016f08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0e:	2200      	movs	r2, #0
 8016f10:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f16:	3354      	adds	r3, #84	; 0x54
 8016f18:	224c      	movs	r2, #76	; 0x4c
 8016f1a:	2100      	movs	r1, #0
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f007 fbc9 	bl	801e6b4 <memset>
 8016f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f24:	4a0c      	ldr	r2, [pc, #48]	; (8016f58 <prvInitialiseNewTask+0x140>)
 8016f26:	659a      	str	r2, [r3, #88]	; 0x58
 8016f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2a:	4a0c      	ldr	r2, [pc, #48]	; (8016f5c <prvInitialiseNewTask+0x144>)
 8016f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8016f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f30:	4a0b      	ldr	r2, [pc, #44]	; (8016f60 <prvInitialiseNewTask+0x148>)
 8016f32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016f34:	683a      	ldr	r2, [r7, #0]
 8016f36:	68f9      	ldr	r1, [r7, #12]
 8016f38:	69b8      	ldr	r0, [r7, #24]
 8016f3a:	f001 fa3f 	bl	80183bc <pxPortInitialiseStack>
 8016f3e:	4602      	mov	r2, r0
 8016f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d002      	beq.n	8016f50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f50:	bf00      	nop
 8016f52:	3720      	adds	r7, #32
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}
 8016f58:	2001e508 	.word	0x2001e508
 8016f5c:	2001e570 	.word	0x2001e570
 8016f60:	2001e5d8 	.word	0x2001e5d8

08016f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016f6c:	f001 fb52 	bl	8018614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016f70:	4b2d      	ldr	r3, [pc, #180]	; (8017028 <prvAddNewTaskToReadyList+0xc4>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	3301      	adds	r3, #1
 8016f76:	4a2c      	ldr	r2, [pc, #176]	; (8017028 <prvAddNewTaskToReadyList+0xc4>)
 8016f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016f7a:	4b2c      	ldr	r3, [pc, #176]	; (801702c <prvAddNewTaskToReadyList+0xc8>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d109      	bne.n	8016f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016f82:	4a2a      	ldr	r2, [pc, #168]	; (801702c <prvAddNewTaskToReadyList+0xc8>)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016f88:	4b27      	ldr	r3, [pc, #156]	; (8017028 <prvAddNewTaskToReadyList+0xc4>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d110      	bne.n	8016fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016f90:	f000 fc26 	bl	80177e0 <prvInitialiseTaskLists>
 8016f94:	e00d      	b.n	8016fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016f96:	4b26      	ldr	r3, [pc, #152]	; (8017030 <prvAddNewTaskToReadyList+0xcc>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d109      	bne.n	8016fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016f9e:	4b23      	ldr	r3, [pc, #140]	; (801702c <prvAddNewTaskToReadyList+0xc8>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d802      	bhi.n	8016fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016fac:	4a1f      	ldr	r2, [pc, #124]	; (801702c <prvAddNewTaskToReadyList+0xc8>)
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016fb2:	4b20      	ldr	r3, [pc, #128]	; (8017034 <prvAddNewTaskToReadyList+0xd0>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	3301      	adds	r3, #1
 8016fb8:	4a1e      	ldr	r2, [pc, #120]	; (8017034 <prvAddNewTaskToReadyList+0xd0>)
 8016fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016fbc:	4b1d      	ldr	r3, [pc, #116]	; (8017034 <prvAddNewTaskToReadyList+0xd0>)
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc8:	4b1b      	ldr	r3, [pc, #108]	; (8017038 <prvAddNewTaskToReadyList+0xd4>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d903      	bls.n	8016fd8 <prvAddNewTaskToReadyList+0x74>
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fd4:	4a18      	ldr	r2, [pc, #96]	; (8017038 <prvAddNewTaskToReadyList+0xd4>)
 8016fd6:	6013      	str	r3, [r2, #0]
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fdc:	4613      	mov	r3, r2
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	4413      	add	r3, r2
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	4a15      	ldr	r2, [pc, #84]	; (801703c <prvAddNewTaskToReadyList+0xd8>)
 8016fe6:	441a      	add	r2, r3
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	3304      	adds	r3, #4
 8016fec:	4619      	mov	r1, r3
 8016fee:	4610      	mov	r0, r2
 8016ff0:	f7fe fddb 	bl	8015baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016ff4:	f001 fb3e 	bl	8018674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016ff8:	4b0d      	ldr	r3, [pc, #52]	; (8017030 <prvAddNewTaskToReadyList+0xcc>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d00e      	beq.n	801701e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017000:	4b0a      	ldr	r3, [pc, #40]	; (801702c <prvAddNewTaskToReadyList+0xc8>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801700a:	429a      	cmp	r2, r3
 801700c:	d207      	bcs.n	801701e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801700e:	4b0c      	ldr	r3, [pc, #48]	; (8017040 <prvAddNewTaskToReadyList+0xdc>)
 8017010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017014:	601a      	str	r2, [r3, #0]
 8017016:	f3bf 8f4f 	dsb	sy
 801701a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801701e:	bf00      	nop
 8017020:	3708      	adds	r7, #8
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	20019df4 	.word	0x20019df4
 801702c:	20019920 	.word	0x20019920
 8017030:	20019e00 	.word	0x20019e00
 8017034:	20019e10 	.word	0x20019e10
 8017038:	20019dfc 	.word	0x20019dfc
 801703c:	20019924 	.word	0x20019924
 8017040:	e000ed04 	.word	0xe000ed04

08017044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017044:	b580      	push	{r7, lr}
 8017046:	b084      	sub	sp, #16
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801704c:	2300      	movs	r3, #0
 801704e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d017      	beq.n	8017086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017056:	4b13      	ldr	r3, [pc, #76]	; (80170a4 <vTaskDelay+0x60>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d00a      	beq.n	8017074 <vTaskDelay+0x30>
	__asm volatile
 801705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017062:	f383 8811 	msr	BASEPRI, r3
 8017066:	f3bf 8f6f 	isb	sy
 801706a:	f3bf 8f4f 	dsb	sy
 801706e:	60bb      	str	r3, [r7, #8]
}
 8017070:	bf00      	nop
 8017072:	e7fe      	b.n	8017072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017074:	f000 f88a 	bl	801718c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017078:	2100      	movs	r1, #0
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f000 fdfc 	bl	8017c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017080:	f000 f892 	bl	80171a8 <xTaskResumeAll>
 8017084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d107      	bne.n	801709c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801708c:	4b06      	ldr	r3, [pc, #24]	; (80170a8 <vTaskDelay+0x64>)
 801708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017092:	601a      	str	r2, [r3, #0]
 8017094:	f3bf 8f4f 	dsb	sy
 8017098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801709c:	bf00      	nop
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	20019e1c 	.word	0x20019e1c
 80170a8:	e000ed04 	.word	0xe000ed04

080170ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b08a      	sub	sp, #40	; 0x28
 80170b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80170b2:	2300      	movs	r3, #0
 80170b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80170b6:	2300      	movs	r3, #0
 80170b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80170ba:	463a      	mov	r2, r7
 80170bc:	1d39      	adds	r1, r7, #4
 80170be:	f107 0308 	add.w	r3, r7, #8
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fe fd10 	bl	8015ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80170c8:	6839      	ldr	r1, [r7, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	68ba      	ldr	r2, [r7, #8]
 80170ce:	9202      	str	r2, [sp, #8]
 80170d0:	9301      	str	r3, [sp, #4]
 80170d2:	2300      	movs	r3, #0
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	2300      	movs	r3, #0
 80170d8:	460a      	mov	r2, r1
 80170da:	4924      	ldr	r1, [pc, #144]	; (801716c <vTaskStartScheduler+0xc0>)
 80170dc:	4824      	ldr	r0, [pc, #144]	; (8017170 <vTaskStartScheduler+0xc4>)
 80170de:	f7ff fdf9 	bl	8016cd4 <xTaskCreateStatic>
 80170e2:	4603      	mov	r3, r0
 80170e4:	4a23      	ldr	r2, [pc, #140]	; (8017174 <vTaskStartScheduler+0xc8>)
 80170e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80170e8:	4b22      	ldr	r3, [pc, #136]	; (8017174 <vTaskStartScheduler+0xc8>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d002      	beq.n	80170f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80170f0:	2301      	movs	r3, #1
 80170f2:	617b      	str	r3, [r7, #20]
 80170f4:	e001      	b.n	80170fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80170f6:	2300      	movs	r3, #0
 80170f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d102      	bne.n	8017106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017100:	f000 fe0e 	bl	8017d20 <xTimerCreateTimerTask>
 8017104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	2b01      	cmp	r3, #1
 801710a:	d11b      	bne.n	8017144 <vTaskStartScheduler+0x98>
	__asm volatile
 801710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017110:	f383 8811 	msr	BASEPRI, r3
 8017114:	f3bf 8f6f 	isb	sy
 8017118:	f3bf 8f4f 	dsb	sy
 801711c:	613b      	str	r3, [r7, #16]
}
 801711e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017120:	4b15      	ldr	r3, [pc, #84]	; (8017178 <vTaskStartScheduler+0xcc>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	3354      	adds	r3, #84	; 0x54
 8017126:	4a15      	ldr	r2, [pc, #84]	; (801717c <vTaskStartScheduler+0xd0>)
 8017128:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801712a:	4b15      	ldr	r3, [pc, #84]	; (8017180 <vTaskStartScheduler+0xd4>)
 801712c:	f04f 32ff 	mov.w	r2, #4294967295
 8017130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017132:	4b14      	ldr	r3, [pc, #80]	; (8017184 <vTaskStartScheduler+0xd8>)
 8017134:	2201      	movs	r2, #1
 8017136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017138:	4b13      	ldr	r3, [pc, #76]	; (8017188 <vTaskStartScheduler+0xdc>)
 801713a:	2200      	movs	r2, #0
 801713c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801713e:	f001 f9c7 	bl	80184d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017142:	e00e      	b.n	8017162 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801714a:	d10a      	bne.n	8017162 <vTaskStartScheduler+0xb6>
	__asm volatile
 801714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017150:	f383 8811 	msr	BASEPRI, r3
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	f3bf 8f4f 	dsb	sy
 801715c:	60fb      	str	r3, [r7, #12]
}
 801715e:	bf00      	nop
 8017160:	e7fe      	b.n	8017160 <vTaskStartScheduler+0xb4>
}
 8017162:	bf00      	nop
 8017164:	3718      	adds	r7, #24
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	08020548 	.word	0x08020548
 8017170:	080177b1 	.word	0x080177b1
 8017174:	20019e18 	.word	0x20019e18
 8017178:	20019920 	.word	0x20019920
 801717c:	200000a0 	.word	0x200000a0
 8017180:	20019e14 	.word	0x20019e14
 8017184:	20019e00 	.word	0x20019e00
 8017188:	20019df8 	.word	0x20019df8

0801718c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801718c:	b480      	push	{r7}
 801718e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017190:	4b04      	ldr	r3, [pc, #16]	; (80171a4 <vTaskSuspendAll+0x18>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	3301      	adds	r3, #1
 8017196:	4a03      	ldr	r2, [pc, #12]	; (80171a4 <vTaskSuspendAll+0x18>)
 8017198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801719a:	bf00      	nop
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr
 80171a4:	20019e1c 	.word	0x20019e1c

080171a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80171ae:	2300      	movs	r3, #0
 80171b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80171b2:	2300      	movs	r3, #0
 80171b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80171b6:	4b42      	ldr	r3, [pc, #264]	; (80172c0 <xTaskResumeAll+0x118>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d10a      	bne.n	80171d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80171be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c2:	f383 8811 	msr	BASEPRI, r3
 80171c6:	f3bf 8f6f 	isb	sy
 80171ca:	f3bf 8f4f 	dsb	sy
 80171ce:	603b      	str	r3, [r7, #0]
}
 80171d0:	bf00      	nop
 80171d2:	e7fe      	b.n	80171d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80171d4:	f001 fa1e 	bl	8018614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80171d8:	4b39      	ldr	r3, [pc, #228]	; (80172c0 <xTaskResumeAll+0x118>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	3b01      	subs	r3, #1
 80171de:	4a38      	ldr	r2, [pc, #224]	; (80172c0 <xTaskResumeAll+0x118>)
 80171e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80171e2:	4b37      	ldr	r3, [pc, #220]	; (80172c0 <xTaskResumeAll+0x118>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d162      	bne.n	80172b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80171ea:	4b36      	ldr	r3, [pc, #216]	; (80172c4 <xTaskResumeAll+0x11c>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d05e      	beq.n	80172b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80171f2:	e02f      	b.n	8017254 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171f4:	4b34      	ldr	r3, [pc, #208]	; (80172c8 <xTaskResumeAll+0x120>)
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	3318      	adds	r3, #24
 8017200:	4618      	mov	r0, r3
 8017202:	f7fe fd2f 	bl	8015c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	3304      	adds	r3, #4
 801720a:	4618      	mov	r0, r3
 801720c:	f7fe fd2a 	bl	8015c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017214:	4b2d      	ldr	r3, [pc, #180]	; (80172cc <xTaskResumeAll+0x124>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	429a      	cmp	r2, r3
 801721a:	d903      	bls.n	8017224 <xTaskResumeAll+0x7c>
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017220:	4a2a      	ldr	r2, [pc, #168]	; (80172cc <xTaskResumeAll+0x124>)
 8017222:	6013      	str	r3, [r2, #0]
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017228:	4613      	mov	r3, r2
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	4413      	add	r3, r2
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	4a27      	ldr	r2, [pc, #156]	; (80172d0 <xTaskResumeAll+0x128>)
 8017232:	441a      	add	r2, r3
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	3304      	adds	r3, #4
 8017238:	4619      	mov	r1, r3
 801723a:	4610      	mov	r0, r2
 801723c:	f7fe fcb5 	bl	8015baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017244:	4b23      	ldr	r3, [pc, #140]	; (80172d4 <xTaskResumeAll+0x12c>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801724a:	429a      	cmp	r2, r3
 801724c:	d302      	bcc.n	8017254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801724e:	4b22      	ldr	r3, [pc, #136]	; (80172d8 <xTaskResumeAll+0x130>)
 8017250:	2201      	movs	r2, #1
 8017252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017254:	4b1c      	ldr	r3, [pc, #112]	; (80172c8 <xTaskResumeAll+0x120>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d1cb      	bne.n	80171f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017262:	f000 fb5f 	bl	8017924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017266:	4b1d      	ldr	r3, [pc, #116]	; (80172dc <xTaskResumeAll+0x134>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d010      	beq.n	8017294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017272:	f000 f847 	bl	8017304 <xTaskIncrementTick>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d002      	beq.n	8017282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801727c:	4b16      	ldr	r3, [pc, #88]	; (80172d8 <xTaskResumeAll+0x130>)
 801727e:	2201      	movs	r2, #1
 8017280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	3b01      	subs	r3, #1
 8017286:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d1f1      	bne.n	8017272 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801728e:	4b13      	ldr	r3, [pc, #76]	; (80172dc <xTaskResumeAll+0x134>)
 8017290:	2200      	movs	r2, #0
 8017292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017294:	4b10      	ldr	r3, [pc, #64]	; (80172d8 <xTaskResumeAll+0x130>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d009      	beq.n	80172b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801729c:	2301      	movs	r3, #1
 801729e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80172a0:	4b0f      	ldr	r3, [pc, #60]	; (80172e0 <xTaskResumeAll+0x138>)
 80172a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172a6:	601a      	str	r2, [r3, #0]
 80172a8:	f3bf 8f4f 	dsb	sy
 80172ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80172b0:	f001 f9e0 	bl	8018674 <vPortExitCritical>

	return xAlreadyYielded;
 80172b4:	68bb      	ldr	r3, [r7, #8]
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3710      	adds	r7, #16
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	20019e1c 	.word	0x20019e1c
 80172c4:	20019df4 	.word	0x20019df4
 80172c8:	20019db4 	.word	0x20019db4
 80172cc:	20019dfc 	.word	0x20019dfc
 80172d0:	20019924 	.word	0x20019924
 80172d4:	20019920 	.word	0x20019920
 80172d8:	20019e08 	.word	0x20019e08
 80172dc:	20019e04 	.word	0x20019e04
 80172e0:	e000ed04 	.word	0xe000ed04

080172e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b083      	sub	sp, #12
 80172e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80172ea:	4b05      	ldr	r3, [pc, #20]	; (8017300 <xTaskGetTickCount+0x1c>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80172f0:	687b      	ldr	r3, [r7, #4]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	370c      	adds	r7, #12
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop
 8017300:	20019df8 	.word	0x20019df8

08017304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801730a:	2300      	movs	r3, #0
 801730c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801730e:	4b4f      	ldr	r3, [pc, #316]	; (801744c <xTaskIncrementTick+0x148>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	f040 808f 	bne.w	8017436 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017318:	4b4d      	ldr	r3, [pc, #308]	; (8017450 <xTaskIncrementTick+0x14c>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	3301      	adds	r3, #1
 801731e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017320:	4a4b      	ldr	r2, [pc, #300]	; (8017450 <xTaskIncrementTick+0x14c>)
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d120      	bne.n	801736e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801732c:	4b49      	ldr	r3, [pc, #292]	; (8017454 <xTaskIncrementTick+0x150>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d00a      	beq.n	801734c <xTaskIncrementTick+0x48>
	__asm volatile
 8017336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801733a:	f383 8811 	msr	BASEPRI, r3
 801733e:	f3bf 8f6f 	isb	sy
 8017342:	f3bf 8f4f 	dsb	sy
 8017346:	603b      	str	r3, [r7, #0]
}
 8017348:	bf00      	nop
 801734a:	e7fe      	b.n	801734a <xTaskIncrementTick+0x46>
 801734c:	4b41      	ldr	r3, [pc, #260]	; (8017454 <xTaskIncrementTick+0x150>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	60fb      	str	r3, [r7, #12]
 8017352:	4b41      	ldr	r3, [pc, #260]	; (8017458 <xTaskIncrementTick+0x154>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	4a3f      	ldr	r2, [pc, #252]	; (8017454 <xTaskIncrementTick+0x150>)
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	4a3f      	ldr	r2, [pc, #252]	; (8017458 <xTaskIncrementTick+0x154>)
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	6013      	str	r3, [r2, #0]
 8017360:	4b3e      	ldr	r3, [pc, #248]	; (801745c <xTaskIncrementTick+0x158>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	3301      	adds	r3, #1
 8017366:	4a3d      	ldr	r2, [pc, #244]	; (801745c <xTaskIncrementTick+0x158>)
 8017368:	6013      	str	r3, [r2, #0]
 801736a:	f000 fadb 	bl	8017924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801736e:	4b3c      	ldr	r3, [pc, #240]	; (8017460 <xTaskIncrementTick+0x15c>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	693a      	ldr	r2, [r7, #16]
 8017374:	429a      	cmp	r2, r3
 8017376:	d349      	bcc.n	801740c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017378:	4b36      	ldr	r3, [pc, #216]	; (8017454 <xTaskIncrementTick+0x150>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d104      	bne.n	801738c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017382:	4b37      	ldr	r3, [pc, #220]	; (8017460 <xTaskIncrementTick+0x15c>)
 8017384:	f04f 32ff 	mov.w	r2, #4294967295
 8017388:	601a      	str	r2, [r3, #0]
					break;
 801738a:	e03f      	b.n	801740c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801738c:	4b31      	ldr	r3, [pc, #196]	; (8017454 <xTaskIncrementTick+0x150>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	685b      	ldr	r3, [r3, #4]
 801739a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801739c:	693a      	ldr	r2, [r7, #16]
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d203      	bcs.n	80173ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80173a4:	4a2e      	ldr	r2, [pc, #184]	; (8017460 <xTaskIncrementTick+0x15c>)
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80173aa:	e02f      	b.n	801740c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	3304      	adds	r3, #4
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7fe fc57 	bl	8015c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d004      	beq.n	80173c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	3318      	adds	r3, #24
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fe fc4e 	bl	8015c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173cc:	4b25      	ldr	r3, [pc, #148]	; (8017464 <xTaskIncrementTick+0x160>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d903      	bls.n	80173dc <xTaskIncrementTick+0xd8>
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d8:	4a22      	ldr	r2, [pc, #136]	; (8017464 <xTaskIncrementTick+0x160>)
 80173da:	6013      	str	r3, [r2, #0]
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173e0:	4613      	mov	r3, r2
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	4413      	add	r3, r2
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	4a1f      	ldr	r2, [pc, #124]	; (8017468 <xTaskIncrementTick+0x164>)
 80173ea:	441a      	add	r2, r3
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	3304      	adds	r3, #4
 80173f0:	4619      	mov	r1, r3
 80173f2:	4610      	mov	r0, r2
 80173f4:	f7fe fbd9 	bl	8015baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173fc:	4b1b      	ldr	r3, [pc, #108]	; (801746c <xTaskIncrementTick+0x168>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017402:	429a      	cmp	r2, r3
 8017404:	d3b8      	bcc.n	8017378 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017406:	2301      	movs	r3, #1
 8017408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801740a:	e7b5      	b.n	8017378 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801740c:	4b17      	ldr	r3, [pc, #92]	; (801746c <xTaskIncrementTick+0x168>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017412:	4915      	ldr	r1, [pc, #84]	; (8017468 <xTaskIncrementTick+0x164>)
 8017414:	4613      	mov	r3, r2
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	4413      	add	r3, r2
 801741a:	009b      	lsls	r3, r3, #2
 801741c:	440b      	add	r3, r1
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	2b01      	cmp	r3, #1
 8017422:	d901      	bls.n	8017428 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017424:	2301      	movs	r3, #1
 8017426:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017428:	4b11      	ldr	r3, [pc, #68]	; (8017470 <xTaskIncrementTick+0x16c>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d007      	beq.n	8017440 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017430:	2301      	movs	r3, #1
 8017432:	617b      	str	r3, [r7, #20]
 8017434:	e004      	b.n	8017440 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017436:	4b0f      	ldr	r3, [pc, #60]	; (8017474 <xTaskIncrementTick+0x170>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	3301      	adds	r3, #1
 801743c:	4a0d      	ldr	r2, [pc, #52]	; (8017474 <xTaskIncrementTick+0x170>)
 801743e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017440:	697b      	ldr	r3, [r7, #20]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3718      	adds	r7, #24
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	20019e1c 	.word	0x20019e1c
 8017450:	20019df8 	.word	0x20019df8
 8017454:	20019dac 	.word	0x20019dac
 8017458:	20019db0 	.word	0x20019db0
 801745c:	20019e0c 	.word	0x20019e0c
 8017460:	20019e14 	.word	0x20019e14
 8017464:	20019dfc 	.word	0x20019dfc
 8017468:	20019924 	.word	0x20019924
 801746c:	20019920 	.word	0x20019920
 8017470:	20019e08 	.word	0x20019e08
 8017474:	20019e04 	.word	0x20019e04

08017478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017478:	b480      	push	{r7}
 801747a:	b085      	sub	sp, #20
 801747c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801747e:	4b2a      	ldr	r3, [pc, #168]	; (8017528 <vTaskSwitchContext+0xb0>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d003      	beq.n	801748e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017486:	4b29      	ldr	r3, [pc, #164]	; (801752c <vTaskSwitchContext+0xb4>)
 8017488:	2201      	movs	r2, #1
 801748a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801748c:	e046      	b.n	801751c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801748e:	4b27      	ldr	r3, [pc, #156]	; (801752c <vTaskSwitchContext+0xb4>)
 8017490:	2200      	movs	r2, #0
 8017492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017494:	4b26      	ldr	r3, [pc, #152]	; (8017530 <vTaskSwitchContext+0xb8>)
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	60fb      	str	r3, [r7, #12]
 801749a:	e010      	b.n	80174be <vTaskSwitchContext+0x46>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d10a      	bne.n	80174b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80174a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a6:	f383 8811 	msr	BASEPRI, r3
 80174aa:	f3bf 8f6f 	isb	sy
 80174ae:	f3bf 8f4f 	dsb	sy
 80174b2:	607b      	str	r3, [r7, #4]
}
 80174b4:	bf00      	nop
 80174b6:	e7fe      	b.n	80174b6 <vTaskSwitchContext+0x3e>
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	3b01      	subs	r3, #1
 80174bc:	60fb      	str	r3, [r7, #12]
 80174be:	491d      	ldr	r1, [pc, #116]	; (8017534 <vTaskSwitchContext+0xbc>)
 80174c0:	68fa      	ldr	r2, [r7, #12]
 80174c2:	4613      	mov	r3, r2
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	4413      	add	r3, r2
 80174c8:	009b      	lsls	r3, r3, #2
 80174ca:	440b      	add	r3, r1
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d0e4      	beq.n	801749c <vTaskSwitchContext+0x24>
 80174d2:	68fa      	ldr	r2, [r7, #12]
 80174d4:	4613      	mov	r3, r2
 80174d6:	009b      	lsls	r3, r3, #2
 80174d8:	4413      	add	r3, r2
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	4a15      	ldr	r2, [pc, #84]	; (8017534 <vTaskSwitchContext+0xbc>)
 80174de:	4413      	add	r3, r2
 80174e0:	60bb      	str	r3, [r7, #8]
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	685b      	ldr	r3, [r3, #4]
 80174e6:	685a      	ldr	r2, [r3, #4]
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	605a      	str	r2, [r3, #4]
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	685a      	ldr	r2, [r3, #4]
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	3308      	adds	r3, #8
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d104      	bne.n	8017502 <vTaskSwitchContext+0x8a>
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	685b      	ldr	r3, [r3, #4]
 80174fc:	685a      	ldr	r2, [r3, #4]
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	605a      	str	r2, [r3, #4]
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	68db      	ldr	r3, [r3, #12]
 8017508:	4a0b      	ldr	r2, [pc, #44]	; (8017538 <vTaskSwitchContext+0xc0>)
 801750a:	6013      	str	r3, [r2, #0]
 801750c:	4a08      	ldr	r2, [pc, #32]	; (8017530 <vTaskSwitchContext+0xb8>)
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017512:	4b09      	ldr	r3, [pc, #36]	; (8017538 <vTaskSwitchContext+0xc0>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	3354      	adds	r3, #84	; 0x54
 8017518:	4a08      	ldr	r2, [pc, #32]	; (801753c <vTaskSwitchContext+0xc4>)
 801751a:	6013      	str	r3, [r2, #0]
}
 801751c:	bf00      	nop
 801751e:	3714      	adds	r7, #20
 8017520:	46bd      	mov	sp, r7
 8017522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017526:	4770      	bx	lr
 8017528:	20019e1c 	.word	0x20019e1c
 801752c:	20019e08 	.word	0x20019e08
 8017530:	20019dfc 	.word	0x20019dfc
 8017534:	20019924 	.word	0x20019924
 8017538:	20019920 	.word	0x20019920
 801753c:	200000a0 	.word	0x200000a0

08017540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d10a      	bne.n	8017566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017554:	f383 8811 	msr	BASEPRI, r3
 8017558:	f3bf 8f6f 	isb	sy
 801755c:	f3bf 8f4f 	dsb	sy
 8017560:	60fb      	str	r3, [r7, #12]
}
 8017562:	bf00      	nop
 8017564:	e7fe      	b.n	8017564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017566:	4b07      	ldr	r3, [pc, #28]	; (8017584 <vTaskPlaceOnEventList+0x44>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	3318      	adds	r3, #24
 801756c:	4619      	mov	r1, r3
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	f7fe fb3f 	bl	8015bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017574:	2101      	movs	r1, #1
 8017576:	6838      	ldr	r0, [r7, #0]
 8017578:	f000 fb7e 	bl	8017c78 <prvAddCurrentTaskToDelayedList>
}
 801757c:	bf00      	nop
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}
 8017584:	20019920 	.word	0x20019920

08017588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017588:	b580      	push	{r7, lr}
 801758a:	b086      	sub	sp, #24
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d10a      	bne.n	80175b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801759e:	f383 8811 	msr	BASEPRI, r3
 80175a2:	f3bf 8f6f 	isb	sy
 80175a6:	f3bf 8f4f 	dsb	sy
 80175aa:	617b      	str	r3, [r7, #20]
}
 80175ac:	bf00      	nop
 80175ae:	e7fe      	b.n	80175ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80175b0:	4b0a      	ldr	r3, [pc, #40]	; (80175dc <vTaskPlaceOnEventListRestricted+0x54>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	3318      	adds	r3, #24
 80175b6:	4619      	mov	r1, r3
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	f7fe faf6 	bl	8015baa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d002      	beq.n	80175ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80175c4:	f04f 33ff 	mov.w	r3, #4294967295
 80175c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80175ca:	6879      	ldr	r1, [r7, #4]
 80175cc:	68b8      	ldr	r0, [r7, #8]
 80175ce:	f000 fb53 	bl	8017c78 <prvAddCurrentTaskToDelayedList>
	}
 80175d2:	bf00      	nop
 80175d4:	3718      	adds	r7, #24
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	20019920 	.word	0x20019920

080175e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b086      	sub	sp, #24
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d10a      	bne.n	801760c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80175f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175fa:	f383 8811 	msr	BASEPRI, r3
 80175fe:	f3bf 8f6f 	isb	sy
 8017602:	f3bf 8f4f 	dsb	sy
 8017606:	60fb      	str	r3, [r7, #12]
}
 8017608:	bf00      	nop
 801760a:	e7fe      	b.n	801760a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	3318      	adds	r3, #24
 8017610:	4618      	mov	r0, r3
 8017612:	f7fe fb27 	bl	8015c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017616:	4b1e      	ldr	r3, [pc, #120]	; (8017690 <xTaskRemoveFromEventList+0xb0>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d11d      	bne.n	801765a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	3304      	adds	r3, #4
 8017622:	4618      	mov	r0, r3
 8017624:	f7fe fb1e 	bl	8015c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801762c:	4b19      	ldr	r3, [pc, #100]	; (8017694 <xTaskRemoveFromEventList+0xb4>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	429a      	cmp	r2, r3
 8017632:	d903      	bls.n	801763c <xTaskRemoveFromEventList+0x5c>
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017638:	4a16      	ldr	r2, [pc, #88]	; (8017694 <xTaskRemoveFromEventList+0xb4>)
 801763a:	6013      	str	r3, [r2, #0]
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017640:	4613      	mov	r3, r2
 8017642:	009b      	lsls	r3, r3, #2
 8017644:	4413      	add	r3, r2
 8017646:	009b      	lsls	r3, r3, #2
 8017648:	4a13      	ldr	r2, [pc, #76]	; (8017698 <xTaskRemoveFromEventList+0xb8>)
 801764a:	441a      	add	r2, r3
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	3304      	adds	r3, #4
 8017650:	4619      	mov	r1, r3
 8017652:	4610      	mov	r0, r2
 8017654:	f7fe faa9 	bl	8015baa <vListInsertEnd>
 8017658:	e005      	b.n	8017666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	3318      	adds	r3, #24
 801765e:	4619      	mov	r1, r3
 8017660:	480e      	ldr	r0, [pc, #56]	; (801769c <xTaskRemoveFromEventList+0xbc>)
 8017662:	f7fe faa2 	bl	8015baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801766a:	4b0d      	ldr	r3, [pc, #52]	; (80176a0 <xTaskRemoveFromEventList+0xc0>)
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017670:	429a      	cmp	r2, r3
 8017672:	d905      	bls.n	8017680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017674:	2301      	movs	r3, #1
 8017676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017678:	4b0a      	ldr	r3, [pc, #40]	; (80176a4 <xTaskRemoveFromEventList+0xc4>)
 801767a:	2201      	movs	r2, #1
 801767c:	601a      	str	r2, [r3, #0]
 801767e:	e001      	b.n	8017684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017680:	2300      	movs	r3, #0
 8017682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017684:	697b      	ldr	r3, [r7, #20]
}
 8017686:	4618      	mov	r0, r3
 8017688:	3718      	adds	r7, #24
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	20019e1c 	.word	0x20019e1c
 8017694:	20019dfc 	.word	0x20019dfc
 8017698:	20019924 	.word	0x20019924
 801769c:	20019db4 	.word	0x20019db4
 80176a0:	20019920 	.word	0x20019920
 80176a4:	20019e08 	.word	0x20019e08

080176a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80176a8:	b480      	push	{r7}
 80176aa:	b083      	sub	sp, #12
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80176b0:	4b06      	ldr	r3, [pc, #24]	; (80176cc <vTaskInternalSetTimeOutState+0x24>)
 80176b2:	681a      	ldr	r2, [r3, #0]
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80176b8:	4b05      	ldr	r3, [pc, #20]	; (80176d0 <vTaskInternalSetTimeOutState+0x28>)
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	605a      	str	r2, [r3, #4]
}
 80176c0:	bf00      	nop
 80176c2:	370c      	adds	r7, #12
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr
 80176cc:	20019e0c 	.word	0x20019e0c
 80176d0:	20019df8 	.word	0x20019df8

080176d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b088      	sub	sp, #32
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d10a      	bne.n	80176fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80176e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e8:	f383 8811 	msr	BASEPRI, r3
 80176ec:	f3bf 8f6f 	isb	sy
 80176f0:	f3bf 8f4f 	dsb	sy
 80176f4:	613b      	str	r3, [r7, #16]
}
 80176f6:	bf00      	nop
 80176f8:	e7fe      	b.n	80176f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d10a      	bne.n	8017716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017704:	f383 8811 	msr	BASEPRI, r3
 8017708:	f3bf 8f6f 	isb	sy
 801770c:	f3bf 8f4f 	dsb	sy
 8017710:	60fb      	str	r3, [r7, #12]
}
 8017712:	bf00      	nop
 8017714:	e7fe      	b.n	8017714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017716:	f000 ff7d 	bl	8018614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801771a:	4b1d      	ldr	r3, [pc, #116]	; (8017790 <xTaskCheckForTimeOut+0xbc>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	685b      	ldr	r3, [r3, #4]
 8017724:	69ba      	ldr	r2, [r7, #24]
 8017726:	1ad3      	subs	r3, r2, r3
 8017728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017732:	d102      	bne.n	801773a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017734:	2300      	movs	r3, #0
 8017736:	61fb      	str	r3, [r7, #28]
 8017738:	e023      	b.n	8017782 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	681a      	ldr	r2, [r3, #0]
 801773e:	4b15      	ldr	r3, [pc, #84]	; (8017794 <xTaskCheckForTimeOut+0xc0>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	429a      	cmp	r2, r3
 8017744:	d007      	beq.n	8017756 <xTaskCheckForTimeOut+0x82>
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	685b      	ldr	r3, [r3, #4]
 801774a:	69ba      	ldr	r2, [r7, #24]
 801774c:	429a      	cmp	r2, r3
 801774e:	d302      	bcc.n	8017756 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017750:	2301      	movs	r3, #1
 8017752:	61fb      	str	r3, [r7, #28]
 8017754:	e015      	b.n	8017782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	697a      	ldr	r2, [r7, #20]
 801775c:	429a      	cmp	r2, r3
 801775e:	d20b      	bcs.n	8017778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	681a      	ldr	r2, [r3, #0]
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	1ad2      	subs	r2, r2, r3
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	f7ff ff9b 	bl	80176a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017772:	2300      	movs	r3, #0
 8017774:	61fb      	str	r3, [r7, #28]
 8017776:	e004      	b.n	8017782 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	2200      	movs	r2, #0
 801777c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801777e:	2301      	movs	r3, #1
 8017780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017782:	f000 ff77 	bl	8018674 <vPortExitCritical>

	return xReturn;
 8017786:	69fb      	ldr	r3, [r7, #28]
}
 8017788:	4618      	mov	r0, r3
 801778a:	3720      	adds	r7, #32
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}
 8017790:	20019df8 	.word	0x20019df8
 8017794:	20019e0c 	.word	0x20019e0c

08017798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017798:	b480      	push	{r7}
 801779a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801779c:	4b03      	ldr	r3, [pc, #12]	; (80177ac <vTaskMissedYield+0x14>)
 801779e:	2201      	movs	r2, #1
 80177a0:	601a      	str	r2, [r3, #0]
}
 80177a2:	bf00      	nop
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	20019e08 	.word	0x20019e08

080177b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b082      	sub	sp, #8
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80177b8:	f000 f852 	bl	8017860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80177bc:	4b06      	ldr	r3, [pc, #24]	; (80177d8 <prvIdleTask+0x28>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	d9f9      	bls.n	80177b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80177c4:	4b05      	ldr	r3, [pc, #20]	; (80177dc <prvIdleTask+0x2c>)
 80177c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ca:	601a      	str	r2, [r3, #0]
 80177cc:	f3bf 8f4f 	dsb	sy
 80177d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80177d4:	e7f0      	b.n	80177b8 <prvIdleTask+0x8>
 80177d6:	bf00      	nop
 80177d8:	20019924 	.word	0x20019924
 80177dc:	e000ed04 	.word	0xe000ed04

080177e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b082      	sub	sp, #8
 80177e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80177e6:	2300      	movs	r3, #0
 80177e8:	607b      	str	r3, [r7, #4]
 80177ea:	e00c      	b.n	8017806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	4613      	mov	r3, r2
 80177f0:	009b      	lsls	r3, r3, #2
 80177f2:	4413      	add	r3, r2
 80177f4:	009b      	lsls	r3, r3, #2
 80177f6:	4a12      	ldr	r2, [pc, #72]	; (8017840 <prvInitialiseTaskLists+0x60>)
 80177f8:	4413      	add	r3, r2
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fe f9a8 	bl	8015b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	3301      	adds	r3, #1
 8017804:	607b      	str	r3, [r7, #4]
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2b37      	cmp	r3, #55	; 0x37
 801780a:	d9ef      	bls.n	80177ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801780c:	480d      	ldr	r0, [pc, #52]	; (8017844 <prvInitialiseTaskLists+0x64>)
 801780e:	f7fe f99f 	bl	8015b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017812:	480d      	ldr	r0, [pc, #52]	; (8017848 <prvInitialiseTaskLists+0x68>)
 8017814:	f7fe f99c 	bl	8015b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017818:	480c      	ldr	r0, [pc, #48]	; (801784c <prvInitialiseTaskLists+0x6c>)
 801781a:	f7fe f999 	bl	8015b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801781e:	480c      	ldr	r0, [pc, #48]	; (8017850 <prvInitialiseTaskLists+0x70>)
 8017820:	f7fe f996 	bl	8015b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017824:	480b      	ldr	r0, [pc, #44]	; (8017854 <prvInitialiseTaskLists+0x74>)
 8017826:	f7fe f993 	bl	8015b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801782a:	4b0b      	ldr	r3, [pc, #44]	; (8017858 <prvInitialiseTaskLists+0x78>)
 801782c:	4a05      	ldr	r2, [pc, #20]	; (8017844 <prvInitialiseTaskLists+0x64>)
 801782e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017830:	4b0a      	ldr	r3, [pc, #40]	; (801785c <prvInitialiseTaskLists+0x7c>)
 8017832:	4a05      	ldr	r2, [pc, #20]	; (8017848 <prvInitialiseTaskLists+0x68>)
 8017834:	601a      	str	r2, [r3, #0]
}
 8017836:	bf00      	nop
 8017838:	3708      	adds	r7, #8
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
 801783e:	bf00      	nop
 8017840:	20019924 	.word	0x20019924
 8017844:	20019d84 	.word	0x20019d84
 8017848:	20019d98 	.word	0x20019d98
 801784c:	20019db4 	.word	0x20019db4
 8017850:	20019dc8 	.word	0x20019dc8
 8017854:	20019de0 	.word	0x20019de0
 8017858:	20019dac 	.word	0x20019dac
 801785c:	20019db0 	.word	0x20019db0

08017860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017866:	e019      	b.n	801789c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017868:	f000 fed4 	bl	8018614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801786c:	4b10      	ldr	r3, [pc, #64]	; (80178b0 <prvCheckTasksWaitingTermination+0x50>)
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	3304      	adds	r3, #4
 8017878:	4618      	mov	r0, r3
 801787a:	f7fe f9f3 	bl	8015c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801787e:	4b0d      	ldr	r3, [pc, #52]	; (80178b4 <prvCheckTasksWaitingTermination+0x54>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	3b01      	subs	r3, #1
 8017884:	4a0b      	ldr	r2, [pc, #44]	; (80178b4 <prvCheckTasksWaitingTermination+0x54>)
 8017886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017888:	4b0b      	ldr	r3, [pc, #44]	; (80178b8 <prvCheckTasksWaitingTermination+0x58>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	3b01      	subs	r3, #1
 801788e:	4a0a      	ldr	r2, [pc, #40]	; (80178b8 <prvCheckTasksWaitingTermination+0x58>)
 8017890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017892:	f000 feef 	bl	8018674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f000 f810 	bl	80178bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801789c:	4b06      	ldr	r3, [pc, #24]	; (80178b8 <prvCheckTasksWaitingTermination+0x58>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1e1      	bne.n	8017868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80178a4:	bf00      	nop
 80178a6:	bf00      	nop
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	20019dc8 	.word	0x20019dc8
 80178b4:	20019df4 	.word	0x20019df4
 80178b8:	20019ddc 	.word	0x20019ddc

080178bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b084      	sub	sp, #16
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	3354      	adds	r3, #84	; 0x54
 80178c8:	4618      	mov	r0, r3
 80178ca:	f006 ff0b 	bl	801e6e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d108      	bne.n	80178ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178dc:	4618      	mov	r0, r3
 80178de:	f001 f887 	bl	80189f0 <vPortFree>
				vPortFree( pxTCB );
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f001 f884 	bl	80189f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80178e8:	e018      	b.n	801791c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80178f0:	2b01      	cmp	r3, #1
 80178f2:	d103      	bne.n	80178fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	f001 f87b 	bl	80189f0 <vPortFree>
	}
 80178fa:	e00f      	b.n	801791c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8017902:	2b02      	cmp	r3, #2
 8017904:	d00a      	beq.n	801791c <prvDeleteTCB+0x60>
	__asm volatile
 8017906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790a:	f383 8811 	msr	BASEPRI, r3
 801790e:	f3bf 8f6f 	isb	sy
 8017912:	f3bf 8f4f 	dsb	sy
 8017916:	60fb      	str	r3, [r7, #12]
}
 8017918:	bf00      	nop
 801791a:	e7fe      	b.n	801791a <prvDeleteTCB+0x5e>
	}
 801791c:	bf00      	nop
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017924:	b480      	push	{r7}
 8017926:	b083      	sub	sp, #12
 8017928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801792a:	4b0c      	ldr	r3, [pc, #48]	; (801795c <prvResetNextTaskUnblockTime+0x38>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d104      	bne.n	801793e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017934:	4b0a      	ldr	r3, [pc, #40]	; (8017960 <prvResetNextTaskUnblockTime+0x3c>)
 8017936:	f04f 32ff 	mov.w	r2, #4294967295
 801793a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801793c:	e008      	b.n	8017950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801793e:	4b07      	ldr	r3, [pc, #28]	; (801795c <prvResetNextTaskUnblockTime+0x38>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	68db      	ldr	r3, [r3, #12]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	685b      	ldr	r3, [r3, #4]
 801794c:	4a04      	ldr	r2, [pc, #16]	; (8017960 <prvResetNextTaskUnblockTime+0x3c>)
 801794e:	6013      	str	r3, [r2, #0]
}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	20019dac 	.word	0x20019dac
 8017960:	20019e14 	.word	0x20019e14

08017964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017964:	b480      	push	{r7}
 8017966:	b083      	sub	sp, #12
 8017968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801796a:	4b0b      	ldr	r3, [pc, #44]	; (8017998 <xTaskGetSchedulerState+0x34>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d102      	bne.n	8017978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017972:	2301      	movs	r3, #1
 8017974:	607b      	str	r3, [r7, #4]
 8017976:	e008      	b.n	801798a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017978:	4b08      	ldr	r3, [pc, #32]	; (801799c <xTaskGetSchedulerState+0x38>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017980:	2302      	movs	r3, #2
 8017982:	607b      	str	r3, [r7, #4]
 8017984:	e001      	b.n	801798a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017986:	2300      	movs	r3, #0
 8017988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801798a:	687b      	ldr	r3, [r7, #4]
	}
 801798c:	4618      	mov	r0, r3
 801798e:	370c      	adds	r7, #12
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr
 8017998:	20019e00 	.word	0x20019e00
 801799c:	20019e1c 	.word	0x20019e1c

080179a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80179ac:	2300      	movs	r3, #0
 80179ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d051      	beq.n	8017a5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ba:	4b2a      	ldr	r3, [pc, #168]	; (8017a64 <xTaskPriorityInherit+0xc4>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d241      	bcs.n	8017a48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	699b      	ldr	r3, [r3, #24]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	db06      	blt.n	80179da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179cc:	4b25      	ldr	r3, [pc, #148]	; (8017a64 <xTaskPriorityInherit+0xc4>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	6959      	ldr	r1, [r3, #20]
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179e2:	4613      	mov	r3, r2
 80179e4:	009b      	lsls	r3, r3, #2
 80179e6:	4413      	add	r3, r2
 80179e8:	009b      	lsls	r3, r3, #2
 80179ea:	4a1f      	ldr	r2, [pc, #124]	; (8017a68 <xTaskPriorityInherit+0xc8>)
 80179ec:	4413      	add	r3, r2
 80179ee:	4299      	cmp	r1, r3
 80179f0:	d122      	bne.n	8017a38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179f2:	68bb      	ldr	r3, [r7, #8]
 80179f4:	3304      	adds	r3, #4
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7fe f934 	bl	8015c64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80179fc:	4b19      	ldr	r3, [pc, #100]	; (8017a64 <xTaskPriorityInherit+0xc4>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a0a:	4b18      	ldr	r3, [pc, #96]	; (8017a6c <xTaskPriorityInherit+0xcc>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d903      	bls.n	8017a1a <xTaskPriorityInherit+0x7a>
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a16:	4a15      	ldr	r2, [pc, #84]	; (8017a6c <xTaskPriorityInherit+0xcc>)
 8017a18:	6013      	str	r3, [r2, #0]
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a1e:	4613      	mov	r3, r2
 8017a20:	009b      	lsls	r3, r3, #2
 8017a22:	4413      	add	r3, r2
 8017a24:	009b      	lsls	r3, r3, #2
 8017a26:	4a10      	ldr	r2, [pc, #64]	; (8017a68 <xTaskPriorityInherit+0xc8>)
 8017a28:	441a      	add	r2, r3
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	3304      	adds	r3, #4
 8017a2e:	4619      	mov	r1, r3
 8017a30:	4610      	mov	r0, r2
 8017a32:	f7fe f8ba 	bl	8015baa <vListInsertEnd>
 8017a36:	e004      	b.n	8017a42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017a38:	4b0a      	ldr	r3, [pc, #40]	; (8017a64 <xTaskPriorityInherit+0xc4>)
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017a42:	2301      	movs	r3, #1
 8017a44:	60fb      	str	r3, [r7, #12]
 8017a46:	e008      	b.n	8017a5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017a4c:	4b05      	ldr	r3, [pc, #20]	; (8017a64 <xTaskPriorityInherit+0xc4>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d201      	bcs.n	8017a5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017a56:	2301      	movs	r3, #1
 8017a58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
	}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3710      	adds	r7, #16
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	20019920 	.word	0x20019920
 8017a68:	20019924 	.word	0x20019924
 8017a6c:	20019dfc 	.word	0x20019dfc

08017a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b086      	sub	sp, #24
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d056      	beq.n	8017b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017a86:	4b2e      	ldr	r3, [pc, #184]	; (8017b40 <xTaskPriorityDisinherit+0xd0>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	693a      	ldr	r2, [r7, #16]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d00a      	beq.n	8017aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a94:	f383 8811 	msr	BASEPRI, r3
 8017a98:	f3bf 8f6f 	isb	sy
 8017a9c:	f3bf 8f4f 	dsb	sy
 8017aa0:	60fb      	str	r3, [r7, #12]
}
 8017aa2:	bf00      	nop
 8017aa4:	e7fe      	b.n	8017aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d10a      	bne.n	8017ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ab2:	f383 8811 	msr	BASEPRI, r3
 8017ab6:	f3bf 8f6f 	isb	sy
 8017aba:	f3bf 8f4f 	dsb	sy
 8017abe:	60bb      	str	r3, [r7, #8]
}
 8017ac0:	bf00      	nop
 8017ac2:	e7fe      	b.n	8017ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ac8:	1e5a      	subs	r2, r3, #1
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017ace:	693b      	ldr	r3, [r7, #16]
 8017ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ad2:	693b      	ldr	r3, [r7, #16]
 8017ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d02c      	beq.n	8017b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017ada:	693b      	ldr	r3, [r7, #16]
 8017adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d128      	bne.n	8017b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017ae2:	693b      	ldr	r3, [r7, #16]
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fe f8bc 	bl	8015c64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017aec:	693b      	ldr	r3, [r7, #16]
 8017aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017af4:	693b      	ldr	r3, [r7, #16]
 8017af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017afc:	693b      	ldr	r3, [r7, #16]
 8017afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017b00:	693b      	ldr	r3, [r7, #16]
 8017b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b04:	4b0f      	ldr	r3, [pc, #60]	; (8017b44 <xTaskPriorityDisinherit+0xd4>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d903      	bls.n	8017b14 <xTaskPriorityDisinherit+0xa4>
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b10:	4a0c      	ldr	r2, [pc, #48]	; (8017b44 <xTaskPriorityDisinherit+0xd4>)
 8017b12:	6013      	str	r3, [r2, #0]
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b18:	4613      	mov	r3, r2
 8017b1a:	009b      	lsls	r3, r3, #2
 8017b1c:	4413      	add	r3, r2
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	4a09      	ldr	r2, [pc, #36]	; (8017b48 <xTaskPriorityDisinherit+0xd8>)
 8017b22:	441a      	add	r2, r3
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	3304      	adds	r3, #4
 8017b28:	4619      	mov	r1, r3
 8017b2a:	4610      	mov	r0, r2
 8017b2c:	f7fe f83d 	bl	8015baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017b30:	2301      	movs	r3, #1
 8017b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017b34:	697b      	ldr	r3, [r7, #20]
	}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3718      	adds	r7, #24
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	20019920 	.word	0x20019920
 8017b44:	20019dfc 	.word	0x20019dfc
 8017b48:	20019924 	.word	0x20019924

08017b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b088      	sub	sp, #32
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d06a      	beq.n	8017c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017b64:	69bb      	ldr	r3, [r7, #24]
 8017b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d10a      	bne.n	8017b82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b70:	f383 8811 	msr	BASEPRI, r3
 8017b74:	f3bf 8f6f 	isb	sy
 8017b78:	f3bf 8f4f 	dsb	sy
 8017b7c:	60fb      	str	r3, [r7, #12]
}
 8017b7e:	bf00      	nop
 8017b80:	e7fe      	b.n	8017b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b86:	683a      	ldr	r2, [r7, #0]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d902      	bls.n	8017b92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	61fb      	str	r3, [r7, #28]
 8017b90:	e002      	b.n	8017b98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017b98:	69bb      	ldr	r3, [r7, #24]
 8017b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b9c:	69fa      	ldr	r2, [r7, #28]
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d04b      	beq.n	8017c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ba6:	697a      	ldr	r2, [r7, #20]
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d146      	bne.n	8017c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017bac:	4b25      	ldr	r3, [pc, #148]	; (8017c44 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	69ba      	ldr	r2, [r7, #24]
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d10a      	bne.n	8017bcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bba:	f383 8811 	msr	BASEPRI, r3
 8017bbe:	f3bf 8f6f 	isb	sy
 8017bc2:	f3bf 8f4f 	dsb	sy
 8017bc6:	60bb      	str	r3, [r7, #8]
}
 8017bc8:	bf00      	nop
 8017bca:	e7fe      	b.n	8017bca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017bd2:	69bb      	ldr	r3, [r7, #24]
 8017bd4:	69fa      	ldr	r2, [r7, #28]
 8017bd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017bd8:	69bb      	ldr	r3, [r7, #24]
 8017bda:	699b      	ldr	r3, [r3, #24]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	db04      	blt.n	8017bea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017be6:	69bb      	ldr	r3, [r7, #24]
 8017be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	6959      	ldr	r1, [r3, #20]
 8017bee:	693a      	ldr	r2, [r7, #16]
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	4413      	add	r3, r2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	4a13      	ldr	r2, [pc, #76]	; (8017c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017bfa:	4413      	add	r3, r2
 8017bfc:	4299      	cmp	r1, r3
 8017bfe:	d11c      	bne.n	8017c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c00:	69bb      	ldr	r3, [r7, #24]
 8017c02:	3304      	adds	r3, #4
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7fe f82d 	bl	8015c64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017c0a:	69bb      	ldr	r3, [r7, #24]
 8017c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0e:	4b0f      	ldr	r3, [pc, #60]	; (8017c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d903      	bls.n	8017c1e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017c16:	69bb      	ldr	r3, [r7, #24]
 8017c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c1a:	4a0c      	ldr	r2, [pc, #48]	; (8017c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017c1c:	6013      	str	r3, [r2, #0]
 8017c1e:	69bb      	ldr	r3, [r7, #24]
 8017c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c22:	4613      	mov	r3, r2
 8017c24:	009b      	lsls	r3, r3, #2
 8017c26:	4413      	add	r3, r2
 8017c28:	009b      	lsls	r3, r3, #2
 8017c2a:	4a07      	ldr	r2, [pc, #28]	; (8017c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017c2c:	441a      	add	r2, r3
 8017c2e:	69bb      	ldr	r3, [r7, #24]
 8017c30:	3304      	adds	r3, #4
 8017c32:	4619      	mov	r1, r3
 8017c34:	4610      	mov	r0, r2
 8017c36:	f7fd ffb8 	bl	8015baa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017c3a:	bf00      	nop
 8017c3c:	3720      	adds	r7, #32
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	20019920 	.word	0x20019920
 8017c48:	20019924 	.word	0x20019924
 8017c4c:	20019dfc 	.word	0x20019dfc

08017c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017c50:	b480      	push	{r7}
 8017c52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017c54:	4b07      	ldr	r3, [pc, #28]	; (8017c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d004      	beq.n	8017c66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017c5c:	4b05      	ldr	r3, [pc, #20]	; (8017c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017c62:	3201      	adds	r2, #1
 8017c64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017c66:	4b03      	ldr	r3, [pc, #12]	; (8017c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c68:	681b      	ldr	r3, [r3, #0]
	}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c72:	4770      	bx	lr
 8017c74:	20019920 	.word	0x20019920

08017c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b084      	sub	sp, #16
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017c82:	4b21      	ldr	r3, [pc, #132]	; (8017d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c88:	4b20      	ldr	r3, [pc, #128]	; (8017d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	3304      	adds	r3, #4
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fd ffe8 	bl	8015c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c9a:	d10a      	bne.n	8017cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d007      	beq.n	8017cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017ca2:	4b1a      	ldr	r3, [pc, #104]	; (8017d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	3304      	adds	r3, #4
 8017ca8:	4619      	mov	r1, r3
 8017caa:	4819      	ldr	r0, [pc, #100]	; (8017d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8017cac:	f7fd ff7d 	bl	8015baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017cb0:	e026      	b.n	8017d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017cb2:	68fa      	ldr	r2, [r7, #12]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	4413      	add	r3, r2
 8017cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017cba:	4b14      	ldr	r3, [pc, #80]	; (8017d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	68ba      	ldr	r2, [r7, #8]
 8017cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017cc2:	68ba      	ldr	r2, [r7, #8]
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d209      	bcs.n	8017cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017cca:	4b12      	ldr	r3, [pc, #72]	; (8017d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017ccc:	681a      	ldr	r2, [r3, #0]
 8017cce:	4b0f      	ldr	r3, [pc, #60]	; (8017d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	3304      	adds	r3, #4
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	4610      	mov	r0, r2
 8017cd8:	f7fd ff8b 	bl	8015bf2 <vListInsert>
}
 8017cdc:	e010      	b.n	8017d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017cde:	4b0e      	ldr	r3, [pc, #56]	; (8017d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017ce0:	681a      	ldr	r2, [r3, #0]
 8017ce2:	4b0a      	ldr	r3, [pc, #40]	; (8017d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	3304      	adds	r3, #4
 8017ce8:	4619      	mov	r1, r3
 8017cea:	4610      	mov	r0, r2
 8017cec:	f7fd ff81 	bl	8015bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017cf0:	4b0a      	ldr	r3, [pc, #40]	; (8017d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	68ba      	ldr	r2, [r7, #8]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d202      	bcs.n	8017d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017cfa:	4a08      	ldr	r2, [pc, #32]	; (8017d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cfc:	68bb      	ldr	r3, [r7, #8]
 8017cfe:	6013      	str	r3, [r2, #0]
}
 8017d00:	bf00      	nop
 8017d02:	3710      	adds	r7, #16
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	20019df8 	.word	0x20019df8
 8017d0c:	20019920 	.word	0x20019920
 8017d10:	20019de0 	.word	0x20019de0
 8017d14:	20019db0 	.word	0x20019db0
 8017d18:	20019dac 	.word	0x20019dac
 8017d1c:	20019e14 	.word	0x20019e14

08017d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b08a      	sub	sp, #40	; 0x28
 8017d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017d26:	2300      	movs	r3, #0
 8017d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017d2a:	f000 fb07 	bl	801833c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017d2e:	4b1c      	ldr	r3, [pc, #112]	; (8017da0 <xTimerCreateTimerTask+0x80>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d021      	beq.n	8017d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017d36:	2300      	movs	r3, #0
 8017d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017d3e:	1d3a      	adds	r2, r7, #4
 8017d40:	f107 0108 	add.w	r1, r7, #8
 8017d44:	f107 030c 	add.w	r3, r7, #12
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f7fd fee7 	bl	8015b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017d4e:	6879      	ldr	r1, [r7, #4]
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	68fa      	ldr	r2, [r7, #12]
 8017d54:	9202      	str	r2, [sp, #8]
 8017d56:	9301      	str	r3, [sp, #4]
 8017d58:	2302      	movs	r3, #2
 8017d5a:	9300      	str	r3, [sp, #0]
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	460a      	mov	r2, r1
 8017d60:	4910      	ldr	r1, [pc, #64]	; (8017da4 <xTimerCreateTimerTask+0x84>)
 8017d62:	4811      	ldr	r0, [pc, #68]	; (8017da8 <xTimerCreateTimerTask+0x88>)
 8017d64:	f7fe ffb6 	bl	8016cd4 <xTaskCreateStatic>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	4a10      	ldr	r2, [pc, #64]	; (8017dac <xTimerCreateTimerTask+0x8c>)
 8017d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017d6e:	4b0f      	ldr	r3, [pc, #60]	; (8017dac <xTimerCreateTimerTask+0x8c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d001      	beq.n	8017d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017d76:	2301      	movs	r3, #1
 8017d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d10a      	bne.n	8017d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d84:	f383 8811 	msr	BASEPRI, r3
 8017d88:	f3bf 8f6f 	isb	sy
 8017d8c:	f3bf 8f4f 	dsb	sy
 8017d90:	613b      	str	r3, [r7, #16]
}
 8017d92:	bf00      	nop
 8017d94:	e7fe      	b.n	8017d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017d96:	697b      	ldr	r3, [r7, #20]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3718      	adds	r7, #24
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	20019e50 	.word	0x20019e50
 8017da4:	08020550 	.word	0x08020550
 8017da8:	08017ee5 	.word	0x08017ee5
 8017dac:	20019e54 	.word	0x20019e54

08017db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b08a      	sub	sp, #40	; 0x28
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	60b9      	str	r1, [r7, #8]
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d10a      	bne.n	8017dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8017dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dcc:	f383 8811 	msr	BASEPRI, r3
 8017dd0:	f3bf 8f6f 	isb	sy
 8017dd4:	f3bf 8f4f 	dsb	sy
 8017dd8:	623b      	str	r3, [r7, #32]
}
 8017dda:	bf00      	nop
 8017ddc:	e7fe      	b.n	8017ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017dde:	4b1a      	ldr	r3, [pc, #104]	; (8017e48 <xTimerGenericCommand+0x98>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d02a      	beq.n	8017e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	2b05      	cmp	r3, #5
 8017df6:	dc18      	bgt.n	8017e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017df8:	f7ff fdb4 	bl	8017964 <xTaskGetSchedulerState>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	2b02      	cmp	r3, #2
 8017e00:	d109      	bne.n	8017e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017e02:	4b11      	ldr	r3, [pc, #68]	; (8017e48 <xTimerGenericCommand+0x98>)
 8017e04:	6818      	ldr	r0, [r3, #0]
 8017e06:	f107 0110 	add.w	r1, r7, #16
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e0e:	f7fe f8fb 	bl	8016008 <xQueueGenericSend>
 8017e12:	6278      	str	r0, [r7, #36]	; 0x24
 8017e14:	e012      	b.n	8017e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017e16:	4b0c      	ldr	r3, [pc, #48]	; (8017e48 <xTimerGenericCommand+0x98>)
 8017e18:	6818      	ldr	r0, [r3, #0]
 8017e1a:	f107 0110 	add.w	r1, r7, #16
 8017e1e:	2300      	movs	r3, #0
 8017e20:	2200      	movs	r2, #0
 8017e22:	f7fe f8f1 	bl	8016008 <xQueueGenericSend>
 8017e26:	6278      	str	r0, [r7, #36]	; 0x24
 8017e28:	e008      	b.n	8017e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017e2a:	4b07      	ldr	r3, [pc, #28]	; (8017e48 <xTimerGenericCommand+0x98>)
 8017e2c:	6818      	ldr	r0, [r3, #0]
 8017e2e:	f107 0110 	add.w	r1, r7, #16
 8017e32:	2300      	movs	r3, #0
 8017e34:	683a      	ldr	r2, [r7, #0]
 8017e36:	f7fe f9e5 	bl	8016204 <xQueueGenericSendFromISR>
 8017e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017e3e:	4618      	mov	r0, r3
 8017e40:	3728      	adds	r7, #40	; 0x28
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
 8017e46:	bf00      	nop
 8017e48:	20019e50 	.word	0x20019e50

08017e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b088      	sub	sp, #32
 8017e50:	af02      	add	r7, sp, #8
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e56:	4b22      	ldr	r3, [pc, #136]	; (8017ee0 <prvProcessExpiredTimer+0x94>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	68db      	ldr	r3, [r3, #12]
 8017e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	3304      	adds	r3, #4
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7fd fefd 	bl	8015c64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e6a:	697b      	ldr	r3, [r7, #20]
 8017e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e70:	f003 0304 	and.w	r3, r3, #4
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d022      	beq.n	8017ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	699a      	ldr	r2, [r3, #24]
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	18d1      	adds	r1, r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	683a      	ldr	r2, [r7, #0]
 8017e84:	6978      	ldr	r0, [r7, #20]
 8017e86:	f000 f8d1 	bl	801802c <prvInsertTimerInActiveList>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d01f      	beq.n	8017ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e90:	2300      	movs	r3, #0
 8017e92:	9300      	str	r3, [sp, #0]
 8017e94:	2300      	movs	r3, #0
 8017e96:	687a      	ldr	r2, [r7, #4]
 8017e98:	2100      	movs	r1, #0
 8017e9a:	6978      	ldr	r0, [r7, #20]
 8017e9c:	f7ff ff88 	bl	8017db0 <xTimerGenericCommand>
 8017ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d113      	bne.n	8017ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eac:	f383 8811 	msr	BASEPRI, r3
 8017eb0:	f3bf 8f6f 	isb	sy
 8017eb4:	f3bf 8f4f 	dsb	sy
 8017eb8:	60fb      	str	r3, [r7, #12]
}
 8017eba:	bf00      	nop
 8017ebc:	e7fe      	b.n	8017ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017ebe:	697b      	ldr	r3, [r7, #20]
 8017ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ec4:	f023 0301 	bic.w	r3, r3, #1
 8017ec8:	b2da      	uxtb	r2, r3
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	6a1b      	ldr	r3, [r3, #32]
 8017ed4:	6978      	ldr	r0, [r7, #20]
 8017ed6:	4798      	blx	r3
}
 8017ed8:	bf00      	nop
 8017eda:	3718      	adds	r7, #24
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}
 8017ee0:	20019e48 	.word	0x20019e48

08017ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017eec:	f107 0308 	add.w	r3, r7, #8
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f000 f857 	bl	8017fa4 <prvGetNextExpireTime>
 8017ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	4619      	mov	r1, r3
 8017efc:	68f8      	ldr	r0, [r7, #12]
 8017efe:	f000 f803 	bl	8017f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017f02:	f000 f8d5 	bl	80180b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017f06:	e7f1      	b.n	8017eec <prvTimerTask+0x8>

08017f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017f12:	f7ff f93b 	bl	801718c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017f16:	f107 0308 	add.w	r3, r7, #8
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f000 f866 	bl	8017fec <prvSampleTimeNow>
 8017f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d130      	bne.n	8017f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d10a      	bne.n	8017f44 <prvProcessTimerOrBlockTask+0x3c>
 8017f2e:	687a      	ldr	r2, [r7, #4]
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d806      	bhi.n	8017f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017f36:	f7ff f937 	bl	80171a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017f3a:	68f9      	ldr	r1, [r7, #12]
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f7ff ff85 	bl	8017e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017f42:	e024      	b.n	8017f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d008      	beq.n	8017f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017f4a:	4b13      	ldr	r3, [pc, #76]	; (8017f98 <prvProcessTimerOrBlockTask+0x90>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d101      	bne.n	8017f58 <prvProcessTimerOrBlockTask+0x50>
 8017f54:	2301      	movs	r3, #1
 8017f56:	e000      	b.n	8017f5a <prvProcessTimerOrBlockTask+0x52>
 8017f58:	2300      	movs	r3, #0
 8017f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017f5c:	4b0f      	ldr	r3, [pc, #60]	; (8017f9c <prvProcessTimerOrBlockTask+0x94>)
 8017f5e:	6818      	ldr	r0, [r3, #0]
 8017f60:	687a      	ldr	r2, [r7, #4]
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	1ad3      	subs	r3, r2, r3
 8017f66:	683a      	ldr	r2, [r7, #0]
 8017f68:	4619      	mov	r1, r3
 8017f6a:	f7fe fe7f 	bl	8016c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017f6e:	f7ff f91b 	bl	80171a8 <xTaskResumeAll>
 8017f72:	4603      	mov	r3, r0
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d10a      	bne.n	8017f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017f78:	4b09      	ldr	r3, [pc, #36]	; (8017fa0 <prvProcessTimerOrBlockTask+0x98>)
 8017f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	f3bf 8f4f 	dsb	sy
 8017f84:	f3bf 8f6f 	isb	sy
}
 8017f88:	e001      	b.n	8017f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017f8a:	f7ff f90d 	bl	80171a8 <xTaskResumeAll>
}
 8017f8e:	bf00      	nop
 8017f90:	3710      	adds	r7, #16
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}
 8017f96:	bf00      	nop
 8017f98:	20019e4c 	.word	0x20019e4c
 8017f9c:	20019e50 	.word	0x20019e50
 8017fa0:	e000ed04 	.word	0xe000ed04

08017fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b085      	sub	sp, #20
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017fac:	4b0e      	ldr	r3, [pc, #56]	; (8017fe8 <prvGetNextExpireTime+0x44>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d101      	bne.n	8017fba <prvGetNextExpireTime+0x16>
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	e000      	b.n	8017fbc <prvGetNextExpireTime+0x18>
 8017fba:	2200      	movs	r2, #0
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d105      	bne.n	8017fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017fc8:	4b07      	ldr	r3, [pc, #28]	; (8017fe8 <prvGetNextExpireTime+0x44>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	60fb      	str	r3, [r7, #12]
 8017fd2:	e001      	b.n	8017fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3714      	adds	r7, #20
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop
 8017fe8:	20019e48 	.word	0x20019e48

08017fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b084      	sub	sp, #16
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017ff4:	f7ff f976 	bl	80172e4 <xTaskGetTickCount>
 8017ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017ffa:	4b0b      	ldr	r3, [pc, #44]	; (8018028 <prvSampleTimeNow+0x3c>)
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	68fa      	ldr	r2, [r7, #12]
 8018000:	429a      	cmp	r2, r3
 8018002:	d205      	bcs.n	8018010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018004:	f000 f936 	bl	8018274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2201      	movs	r2, #1
 801800c:	601a      	str	r2, [r3, #0]
 801800e:	e002      	b.n	8018016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2200      	movs	r2, #0
 8018014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018016:	4a04      	ldr	r2, [pc, #16]	; (8018028 <prvSampleTimeNow+0x3c>)
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801801c:	68fb      	ldr	r3, [r7, #12]
}
 801801e:	4618      	mov	r0, r3
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	20019e58 	.word	0x20019e58

0801802c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b086      	sub	sp, #24
 8018030:	af00      	add	r7, sp, #0
 8018032:	60f8      	str	r0, [r7, #12]
 8018034:	60b9      	str	r1, [r7, #8]
 8018036:	607a      	str	r2, [r7, #4]
 8018038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801803a:	2300      	movs	r3, #0
 801803c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	68ba      	ldr	r2, [r7, #8]
 8018042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	68fa      	ldr	r2, [r7, #12]
 8018048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801804a:	68ba      	ldr	r2, [r7, #8]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	429a      	cmp	r2, r3
 8018050:	d812      	bhi.n	8018078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018052:	687a      	ldr	r2, [r7, #4]
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	1ad2      	subs	r2, r2, r3
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	699b      	ldr	r3, [r3, #24]
 801805c:	429a      	cmp	r2, r3
 801805e:	d302      	bcc.n	8018066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018060:	2301      	movs	r3, #1
 8018062:	617b      	str	r3, [r7, #20]
 8018064:	e01b      	b.n	801809e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018066:	4b10      	ldr	r3, [pc, #64]	; (80180a8 <prvInsertTimerInActiveList+0x7c>)
 8018068:	681a      	ldr	r2, [r3, #0]
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	3304      	adds	r3, #4
 801806e:	4619      	mov	r1, r3
 8018070:	4610      	mov	r0, r2
 8018072:	f7fd fdbe 	bl	8015bf2 <vListInsert>
 8018076:	e012      	b.n	801809e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018078:	687a      	ldr	r2, [r7, #4]
 801807a:	683b      	ldr	r3, [r7, #0]
 801807c:	429a      	cmp	r2, r3
 801807e:	d206      	bcs.n	801808e <prvInsertTimerInActiveList+0x62>
 8018080:	68ba      	ldr	r2, [r7, #8]
 8018082:	683b      	ldr	r3, [r7, #0]
 8018084:	429a      	cmp	r2, r3
 8018086:	d302      	bcc.n	801808e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018088:	2301      	movs	r3, #1
 801808a:	617b      	str	r3, [r7, #20]
 801808c:	e007      	b.n	801809e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801808e:	4b07      	ldr	r3, [pc, #28]	; (80180ac <prvInsertTimerInActiveList+0x80>)
 8018090:	681a      	ldr	r2, [r3, #0]
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	3304      	adds	r3, #4
 8018096:	4619      	mov	r1, r3
 8018098:	4610      	mov	r0, r2
 801809a:	f7fd fdaa 	bl	8015bf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801809e:	697b      	ldr	r3, [r7, #20]
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3718      	adds	r7, #24
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}
 80180a8:	20019e4c 	.word	0x20019e4c
 80180ac:	20019e48 	.word	0x20019e48

080180b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b08e      	sub	sp, #56	; 0x38
 80180b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80180b6:	e0ca      	b.n	801824e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	da18      	bge.n	80180f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80180be:	1d3b      	adds	r3, r7, #4
 80180c0:	3304      	adds	r3, #4
 80180c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80180c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d10a      	bne.n	80180e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80180ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ce:	f383 8811 	msr	BASEPRI, r3
 80180d2:	f3bf 8f6f 	isb	sy
 80180d6:	f3bf 8f4f 	dsb	sy
 80180da:	61fb      	str	r3, [r7, #28]
}
 80180dc:	bf00      	nop
 80180de:	e7fe      	b.n	80180de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80180e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180e6:	6850      	ldr	r0, [r2, #4]
 80180e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180ea:	6892      	ldr	r2, [r2, #8]
 80180ec:	4611      	mov	r1, r2
 80180ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f2c0 80ab 	blt.w	801824e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80180fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180fe:	695b      	ldr	r3, [r3, #20]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d004      	beq.n	801810e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018106:	3304      	adds	r3, #4
 8018108:	4618      	mov	r0, r3
 801810a:	f7fd fdab 	bl	8015c64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801810e:	463b      	mov	r3, r7
 8018110:	4618      	mov	r0, r3
 8018112:	f7ff ff6b 	bl	8017fec <prvSampleTimeNow>
 8018116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2b09      	cmp	r3, #9
 801811c:	f200 8096 	bhi.w	801824c <prvProcessReceivedCommands+0x19c>
 8018120:	a201      	add	r2, pc, #4	; (adr r2, 8018128 <prvProcessReceivedCommands+0x78>)
 8018122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018126:	bf00      	nop
 8018128:	08018151 	.word	0x08018151
 801812c:	08018151 	.word	0x08018151
 8018130:	08018151 	.word	0x08018151
 8018134:	080181c5 	.word	0x080181c5
 8018138:	080181d9 	.word	0x080181d9
 801813c:	08018223 	.word	0x08018223
 8018140:	08018151 	.word	0x08018151
 8018144:	08018151 	.word	0x08018151
 8018148:	080181c5 	.word	0x080181c5
 801814c:	080181d9 	.word	0x080181d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018156:	f043 0301 	orr.w	r3, r3, #1
 801815a:	b2da      	uxtb	r2, r3
 801815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801815e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018162:	68ba      	ldr	r2, [r7, #8]
 8018164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018166:	699b      	ldr	r3, [r3, #24]
 8018168:	18d1      	adds	r1, r2, r3
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018170:	f7ff ff5c 	bl	801802c <prvInsertTimerInActiveList>
 8018174:	4603      	mov	r3, r0
 8018176:	2b00      	cmp	r3, #0
 8018178:	d069      	beq.n	801824e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	6a1b      	ldr	r3, [r3, #32]
 801817e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018188:	f003 0304 	and.w	r3, r3, #4
 801818c:	2b00      	cmp	r3, #0
 801818e:	d05e      	beq.n	801824e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018194:	699b      	ldr	r3, [r3, #24]
 8018196:	441a      	add	r2, r3
 8018198:	2300      	movs	r3, #0
 801819a:	9300      	str	r3, [sp, #0]
 801819c:	2300      	movs	r3, #0
 801819e:	2100      	movs	r1, #0
 80181a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181a2:	f7ff fe05 	bl	8017db0 <xTimerGenericCommand>
 80181a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80181a8:	6a3b      	ldr	r3, [r7, #32]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d14f      	bne.n	801824e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80181ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b2:	f383 8811 	msr	BASEPRI, r3
 80181b6:	f3bf 8f6f 	isb	sy
 80181ba:	f3bf 8f4f 	dsb	sy
 80181be:	61bb      	str	r3, [r7, #24]
}
 80181c0:	bf00      	nop
 80181c2:	e7fe      	b.n	80181c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181ca:	f023 0301 	bic.w	r3, r3, #1
 80181ce:	b2da      	uxtb	r2, r3
 80181d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80181d6:	e03a      	b.n	801824e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80181d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181de:	f043 0301 	orr.w	r3, r3, #1
 80181e2:	b2da      	uxtb	r2, r3
 80181e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80181ea:	68ba      	ldr	r2, [r7, #8]
 80181ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80181f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f2:	699b      	ldr	r3, [r3, #24]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d10a      	bne.n	801820e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80181f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181fc:	f383 8811 	msr	BASEPRI, r3
 8018200:	f3bf 8f6f 	isb	sy
 8018204:	f3bf 8f4f 	dsb	sy
 8018208:	617b      	str	r3, [r7, #20]
}
 801820a:	bf00      	nop
 801820c:	e7fe      	b.n	801820c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018210:	699a      	ldr	r2, [r3, #24]
 8018212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018214:	18d1      	adds	r1, r2, r3
 8018216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801821a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801821c:	f7ff ff06 	bl	801802c <prvInsertTimerInActiveList>
					break;
 8018220:	e015      	b.n	801824e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018228:	f003 0302 	and.w	r3, r3, #2
 801822c:	2b00      	cmp	r3, #0
 801822e:	d103      	bne.n	8018238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018232:	f000 fbdd 	bl	80189f0 <vPortFree>
 8018236:	e00a      	b.n	801824e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801823a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801823e:	f023 0301 	bic.w	r3, r3, #1
 8018242:	b2da      	uxtb	r2, r3
 8018244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801824a:	e000      	b.n	801824e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801824c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801824e:	4b08      	ldr	r3, [pc, #32]	; (8018270 <prvProcessReceivedCommands+0x1c0>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	1d39      	adds	r1, r7, #4
 8018254:	2200      	movs	r2, #0
 8018256:	4618      	mov	r0, r3
 8018258:	f7fe f8fc 	bl	8016454 <xQueueReceive>
 801825c:	4603      	mov	r3, r0
 801825e:	2b00      	cmp	r3, #0
 8018260:	f47f af2a 	bne.w	80180b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8018264:	bf00      	nop
 8018266:	bf00      	nop
 8018268:	3730      	adds	r7, #48	; 0x30
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	20019e50 	.word	0x20019e50

08018274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b088      	sub	sp, #32
 8018278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801827a:	e048      	b.n	801830e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801827c:	4b2d      	ldr	r3, [pc, #180]	; (8018334 <prvSwitchTimerLists+0xc0>)
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	68db      	ldr	r3, [r3, #12]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018286:	4b2b      	ldr	r3, [pc, #172]	; (8018334 <prvSwitchTimerLists+0xc0>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	68db      	ldr	r3, [r3, #12]
 801828c:	68db      	ldr	r3, [r3, #12]
 801828e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	3304      	adds	r3, #4
 8018294:	4618      	mov	r0, r3
 8018296:	f7fd fce5 	bl	8015c64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	6a1b      	ldr	r3, [r3, #32]
 801829e:	68f8      	ldr	r0, [r7, #12]
 80182a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80182a8:	f003 0304 	and.w	r3, r3, #4
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d02e      	beq.n	801830e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	699b      	ldr	r3, [r3, #24]
 80182b4:	693a      	ldr	r2, [r7, #16]
 80182b6:	4413      	add	r3, r2
 80182b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80182ba:	68ba      	ldr	r2, [r7, #8]
 80182bc:	693b      	ldr	r3, [r7, #16]
 80182be:	429a      	cmp	r2, r3
 80182c0:	d90e      	bls.n	80182e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	68ba      	ldr	r2, [r7, #8]
 80182c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80182ce:	4b19      	ldr	r3, [pc, #100]	; (8018334 <prvSwitchTimerLists+0xc0>)
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	3304      	adds	r3, #4
 80182d6:	4619      	mov	r1, r3
 80182d8:	4610      	mov	r0, r2
 80182da:	f7fd fc8a 	bl	8015bf2 <vListInsert>
 80182de:	e016      	b.n	801830e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80182e0:	2300      	movs	r3, #0
 80182e2:	9300      	str	r3, [sp, #0]
 80182e4:	2300      	movs	r3, #0
 80182e6:	693a      	ldr	r2, [r7, #16]
 80182e8:	2100      	movs	r1, #0
 80182ea:	68f8      	ldr	r0, [r7, #12]
 80182ec:	f7ff fd60 	bl	8017db0 <xTimerGenericCommand>
 80182f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d10a      	bne.n	801830e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80182f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182fc:	f383 8811 	msr	BASEPRI, r3
 8018300:	f3bf 8f6f 	isb	sy
 8018304:	f3bf 8f4f 	dsb	sy
 8018308:	603b      	str	r3, [r7, #0]
}
 801830a:	bf00      	nop
 801830c:	e7fe      	b.n	801830c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801830e:	4b09      	ldr	r3, [pc, #36]	; (8018334 <prvSwitchTimerLists+0xc0>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d1b1      	bne.n	801827c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018318:	4b06      	ldr	r3, [pc, #24]	; (8018334 <prvSwitchTimerLists+0xc0>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801831e:	4b06      	ldr	r3, [pc, #24]	; (8018338 <prvSwitchTimerLists+0xc4>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a04      	ldr	r2, [pc, #16]	; (8018334 <prvSwitchTimerLists+0xc0>)
 8018324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018326:	4a04      	ldr	r2, [pc, #16]	; (8018338 <prvSwitchTimerLists+0xc4>)
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	6013      	str	r3, [r2, #0]
}
 801832c:	bf00      	nop
 801832e:	3718      	adds	r7, #24
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	20019e48 	.word	0x20019e48
 8018338:	20019e4c 	.word	0x20019e4c

0801833c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b082      	sub	sp, #8
 8018340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018342:	f000 f967 	bl	8018614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018346:	4b15      	ldr	r3, [pc, #84]	; (801839c <prvCheckForValidListAndQueue+0x60>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d120      	bne.n	8018390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801834e:	4814      	ldr	r0, [pc, #80]	; (80183a0 <prvCheckForValidListAndQueue+0x64>)
 8018350:	f7fd fbfe 	bl	8015b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018354:	4813      	ldr	r0, [pc, #76]	; (80183a4 <prvCheckForValidListAndQueue+0x68>)
 8018356:	f7fd fbfb 	bl	8015b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801835a:	4b13      	ldr	r3, [pc, #76]	; (80183a8 <prvCheckForValidListAndQueue+0x6c>)
 801835c:	4a10      	ldr	r2, [pc, #64]	; (80183a0 <prvCheckForValidListAndQueue+0x64>)
 801835e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018360:	4b12      	ldr	r3, [pc, #72]	; (80183ac <prvCheckForValidListAndQueue+0x70>)
 8018362:	4a10      	ldr	r2, [pc, #64]	; (80183a4 <prvCheckForValidListAndQueue+0x68>)
 8018364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018366:	2300      	movs	r3, #0
 8018368:	9300      	str	r3, [sp, #0]
 801836a:	4b11      	ldr	r3, [pc, #68]	; (80183b0 <prvCheckForValidListAndQueue+0x74>)
 801836c:	4a11      	ldr	r2, [pc, #68]	; (80183b4 <prvCheckForValidListAndQueue+0x78>)
 801836e:	2110      	movs	r1, #16
 8018370:	200a      	movs	r0, #10
 8018372:	f7fd fd09 	bl	8015d88 <xQueueGenericCreateStatic>
 8018376:	4603      	mov	r3, r0
 8018378:	4a08      	ldr	r2, [pc, #32]	; (801839c <prvCheckForValidListAndQueue+0x60>)
 801837a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801837c:	4b07      	ldr	r3, [pc, #28]	; (801839c <prvCheckForValidListAndQueue+0x60>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d005      	beq.n	8018390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018384:	4b05      	ldr	r3, [pc, #20]	; (801839c <prvCheckForValidListAndQueue+0x60>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	490b      	ldr	r1, [pc, #44]	; (80183b8 <prvCheckForValidListAndQueue+0x7c>)
 801838a:	4618      	mov	r0, r3
 801838c:	f7fe fc1a 	bl	8016bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018390:	f000 f970 	bl	8018674 <vPortExitCritical>
}
 8018394:	bf00      	nop
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}
 801839a:	bf00      	nop
 801839c:	20019e50 	.word	0x20019e50
 80183a0:	20019e20 	.word	0x20019e20
 80183a4:	20019e34 	.word	0x20019e34
 80183a8:	20019e48 	.word	0x20019e48
 80183ac:	20019e4c 	.word	0x20019e4c
 80183b0:	20019efc 	.word	0x20019efc
 80183b4:	20019e5c 	.word	0x20019e5c
 80183b8:	08020558 	.word	0x08020558

080183bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80183bc:	b480      	push	{r7}
 80183be:	b085      	sub	sp, #20
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	60f8      	str	r0, [r7, #12]
 80183c4:	60b9      	str	r1, [r7, #8]
 80183c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	3b04      	subs	r3, #4
 80183cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80183d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	3b04      	subs	r3, #4
 80183da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	f023 0201 	bic.w	r2, r3, #1
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	3b04      	subs	r3, #4
 80183ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80183ec:	4a0c      	ldr	r2, [pc, #48]	; (8018420 <pxPortInitialiseStack+0x64>)
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	3b14      	subs	r3, #20
 80183f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80183f8:	687a      	ldr	r2, [r7, #4]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	3b04      	subs	r3, #4
 8018402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	f06f 0202 	mvn.w	r2, #2
 801840a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	3b20      	subs	r3, #32
 8018410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018412:	68fb      	ldr	r3, [r7, #12]
}
 8018414:	4618      	mov	r0, r3
 8018416:	3714      	adds	r7, #20
 8018418:	46bd      	mov	sp, r7
 801841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841e:	4770      	bx	lr
 8018420:	08018425 	.word	0x08018425

08018424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018424:	b480      	push	{r7}
 8018426:	b085      	sub	sp, #20
 8018428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801842a:	2300      	movs	r3, #0
 801842c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801842e:	4b12      	ldr	r3, [pc, #72]	; (8018478 <prvTaskExitError+0x54>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018436:	d00a      	beq.n	801844e <prvTaskExitError+0x2a>
	__asm volatile
 8018438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801843c:	f383 8811 	msr	BASEPRI, r3
 8018440:	f3bf 8f6f 	isb	sy
 8018444:	f3bf 8f4f 	dsb	sy
 8018448:	60fb      	str	r3, [r7, #12]
}
 801844a:	bf00      	nop
 801844c:	e7fe      	b.n	801844c <prvTaskExitError+0x28>
	__asm volatile
 801844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018452:	f383 8811 	msr	BASEPRI, r3
 8018456:	f3bf 8f6f 	isb	sy
 801845a:	f3bf 8f4f 	dsb	sy
 801845e:	60bb      	str	r3, [r7, #8]
}
 8018460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018462:	bf00      	nop
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d0fc      	beq.n	8018464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801846a:	bf00      	nop
 801846c:	bf00      	nop
 801846e:	3714      	adds	r7, #20
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr
 8018478:	2000002c 	.word	0x2000002c
 801847c:	00000000 	.word	0x00000000

08018480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018480:	4b07      	ldr	r3, [pc, #28]	; (80184a0 <pxCurrentTCBConst2>)
 8018482:	6819      	ldr	r1, [r3, #0]
 8018484:	6808      	ldr	r0, [r1, #0]
 8018486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801848a:	f380 8809 	msr	PSP, r0
 801848e:	f3bf 8f6f 	isb	sy
 8018492:	f04f 0000 	mov.w	r0, #0
 8018496:	f380 8811 	msr	BASEPRI, r0
 801849a:	4770      	bx	lr
 801849c:	f3af 8000 	nop.w

080184a0 <pxCurrentTCBConst2>:
 80184a0:	20019920 	.word	0x20019920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80184a4:	bf00      	nop
 80184a6:	bf00      	nop

080184a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80184a8:	4808      	ldr	r0, [pc, #32]	; (80184cc <prvPortStartFirstTask+0x24>)
 80184aa:	6800      	ldr	r0, [r0, #0]
 80184ac:	6800      	ldr	r0, [r0, #0]
 80184ae:	f380 8808 	msr	MSP, r0
 80184b2:	f04f 0000 	mov.w	r0, #0
 80184b6:	f380 8814 	msr	CONTROL, r0
 80184ba:	b662      	cpsie	i
 80184bc:	b661      	cpsie	f
 80184be:	f3bf 8f4f 	dsb	sy
 80184c2:	f3bf 8f6f 	isb	sy
 80184c6:	df00      	svc	0
 80184c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80184ca:	bf00      	nop
 80184cc:	e000ed08 	.word	0xe000ed08

080184d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b086      	sub	sp, #24
 80184d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80184d6:	4b46      	ldr	r3, [pc, #280]	; (80185f0 <xPortStartScheduler+0x120>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	4a46      	ldr	r2, [pc, #280]	; (80185f4 <xPortStartScheduler+0x124>)
 80184dc:	4293      	cmp	r3, r2
 80184de:	d10a      	bne.n	80184f6 <xPortStartScheduler+0x26>
	__asm volatile
 80184e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e4:	f383 8811 	msr	BASEPRI, r3
 80184e8:	f3bf 8f6f 	isb	sy
 80184ec:	f3bf 8f4f 	dsb	sy
 80184f0:	613b      	str	r3, [r7, #16]
}
 80184f2:	bf00      	nop
 80184f4:	e7fe      	b.n	80184f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80184f6:	4b3e      	ldr	r3, [pc, #248]	; (80185f0 <xPortStartScheduler+0x120>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	4a3f      	ldr	r2, [pc, #252]	; (80185f8 <xPortStartScheduler+0x128>)
 80184fc:	4293      	cmp	r3, r2
 80184fe:	d10a      	bne.n	8018516 <xPortStartScheduler+0x46>
	__asm volatile
 8018500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018504:	f383 8811 	msr	BASEPRI, r3
 8018508:	f3bf 8f6f 	isb	sy
 801850c:	f3bf 8f4f 	dsb	sy
 8018510:	60fb      	str	r3, [r7, #12]
}
 8018512:	bf00      	nop
 8018514:	e7fe      	b.n	8018514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018516:	4b39      	ldr	r3, [pc, #228]	; (80185fc <xPortStartScheduler+0x12c>)
 8018518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	b2db      	uxtb	r3, r3
 8018520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	22ff      	movs	r2, #255	; 0xff
 8018526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	781b      	ldrb	r3, [r3, #0]
 801852c:	b2db      	uxtb	r3, r3
 801852e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018530:	78fb      	ldrb	r3, [r7, #3]
 8018532:	b2db      	uxtb	r3, r3
 8018534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018538:	b2da      	uxtb	r2, r3
 801853a:	4b31      	ldr	r3, [pc, #196]	; (8018600 <xPortStartScheduler+0x130>)
 801853c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801853e:	4b31      	ldr	r3, [pc, #196]	; (8018604 <xPortStartScheduler+0x134>)
 8018540:	2207      	movs	r2, #7
 8018542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018544:	e009      	b.n	801855a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018546:	4b2f      	ldr	r3, [pc, #188]	; (8018604 <xPortStartScheduler+0x134>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	3b01      	subs	r3, #1
 801854c:	4a2d      	ldr	r2, [pc, #180]	; (8018604 <xPortStartScheduler+0x134>)
 801854e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018550:	78fb      	ldrb	r3, [r7, #3]
 8018552:	b2db      	uxtb	r3, r3
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	b2db      	uxtb	r3, r3
 8018558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801855a:	78fb      	ldrb	r3, [r7, #3]
 801855c:	b2db      	uxtb	r3, r3
 801855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018562:	2b80      	cmp	r3, #128	; 0x80
 8018564:	d0ef      	beq.n	8018546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018566:	4b27      	ldr	r3, [pc, #156]	; (8018604 <xPortStartScheduler+0x134>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	f1c3 0307 	rsb	r3, r3, #7
 801856e:	2b04      	cmp	r3, #4
 8018570:	d00a      	beq.n	8018588 <xPortStartScheduler+0xb8>
	__asm volatile
 8018572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018576:	f383 8811 	msr	BASEPRI, r3
 801857a:	f3bf 8f6f 	isb	sy
 801857e:	f3bf 8f4f 	dsb	sy
 8018582:	60bb      	str	r3, [r7, #8]
}
 8018584:	bf00      	nop
 8018586:	e7fe      	b.n	8018586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018588:	4b1e      	ldr	r3, [pc, #120]	; (8018604 <xPortStartScheduler+0x134>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	021b      	lsls	r3, r3, #8
 801858e:	4a1d      	ldr	r2, [pc, #116]	; (8018604 <xPortStartScheduler+0x134>)
 8018590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018592:	4b1c      	ldr	r3, [pc, #112]	; (8018604 <xPortStartScheduler+0x134>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801859a:	4a1a      	ldr	r2, [pc, #104]	; (8018604 <xPortStartScheduler+0x134>)
 801859c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	b2da      	uxtb	r2, r3
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80185a6:	4b18      	ldr	r3, [pc, #96]	; (8018608 <xPortStartScheduler+0x138>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	4a17      	ldr	r2, [pc, #92]	; (8018608 <xPortStartScheduler+0x138>)
 80185ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80185b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80185b2:	4b15      	ldr	r3, [pc, #84]	; (8018608 <xPortStartScheduler+0x138>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a14      	ldr	r2, [pc, #80]	; (8018608 <xPortStartScheduler+0x138>)
 80185b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80185bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80185be:	f000 f8dd 	bl	801877c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80185c2:	4b12      	ldr	r3, [pc, #72]	; (801860c <xPortStartScheduler+0x13c>)
 80185c4:	2200      	movs	r2, #0
 80185c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80185c8:	f000 f8fc 	bl	80187c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80185cc:	4b10      	ldr	r3, [pc, #64]	; (8018610 <xPortStartScheduler+0x140>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	4a0f      	ldr	r2, [pc, #60]	; (8018610 <xPortStartScheduler+0x140>)
 80185d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80185d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80185d8:	f7ff ff66 	bl	80184a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80185dc:	f7fe ff4c 	bl	8017478 <vTaskSwitchContext>
	prvTaskExitError();
 80185e0:	f7ff ff20 	bl	8018424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80185e4:	2300      	movs	r3, #0
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3718      	adds	r7, #24
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}
 80185ee:	bf00      	nop
 80185f0:	e000ed00 	.word	0xe000ed00
 80185f4:	410fc271 	.word	0x410fc271
 80185f8:	410fc270 	.word	0x410fc270
 80185fc:	e000e400 	.word	0xe000e400
 8018600:	20019f4c 	.word	0x20019f4c
 8018604:	20019f50 	.word	0x20019f50
 8018608:	e000ed20 	.word	0xe000ed20
 801860c:	2000002c 	.word	0x2000002c
 8018610:	e000ef34 	.word	0xe000ef34

08018614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018614:	b480      	push	{r7}
 8018616:	b083      	sub	sp, #12
 8018618:	af00      	add	r7, sp, #0
	__asm volatile
 801861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801861e:	f383 8811 	msr	BASEPRI, r3
 8018622:	f3bf 8f6f 	isb	sy
 8018626:	f3bf 8f4f 	dsb	sy
 801862a:	607b      	str	r3, [r7, #4]
}
 801862c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801862e:	4b0f      	ldr	r3, [pc, #60]	; (801866c <vPortEnterCritical+0x58>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	3301      	adds	r3, #1
 8018634:	4a0d      	ldr	r2, [pc, #52]	; (801866c <vPortEnterCritical+0x58>)
 8018636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018638:	4b0c      	ldr	r3, [pc, #48]	; (801866c <vPortEnterCritical+0x58>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	2b01      	cmp	r3, #1
 801863e:	d10f      	bne.n	8018660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018640:	4b0b      	ldr	r3, [pc, #44]	; (8018670 <vPortEnterCritical+0x5c>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	b2db      	uxtb	r3, r3
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00a      	beq.n	8018660 <vPortEnterCritical+0x4c>
	__asm volatile
 801864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	603b      	str	r3, [r7, #0]
}
 801865c:	bf00      	nop
 801865e:	e7fe      	b.n	801865e <vPortEnterCritical+0x4a>
	}
}
 8018660:	bf00      	nop
 8018662:	370c      	adds	r7, #12
 8018664:	46bd      	mov	sp, r7
 8018666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866a:	4770      	bx	lr
 801866c:	2000002c 	.word	0x2000002c
 8018670:	e000ed04 	.word	0xe000ed04

08018674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801867a:	4b12      	ldr	r3, [pc, #72]	; (80186c4 <vPortExitCritical+0x50>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d10a      	bne.n	8018698 <vPortExitCritical+0x24>
	__asm volatile
 8018682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018686:	f383 8811 	msr	BASEPRI, r3
 801868a:	f3bf 8f6f 	isb	sy
 801868e:	f3bf 8f4f 	dsb	sy
 8018692:	607b      	str	r3, [r7, #4]
}
 8018694:	bf00      	nop
 8018696:	e7fe      	b.n	8018696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018698:	4b0a      	ldr	r3, [pc, #40]	; (80186c4 <vPortExitCritical+0x50>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	3b01      	subs	r3, #1
 801869e:	4a09      	ldr	r2, [pc, #36]	; (80186c4 <vPortExitCritical+0x50>)
 80186a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80186a2:	4b08      	ldr	r3, [pc, #32]	; (80186c4 <vPortExitCritical+0x50>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d105      	bne.n	80186b6 <vPortExitCritical+0x42>
 80186aa:	2300      	movs	r3, #0
 80186ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	f383 8811 	msr	BASEPRI, r3
}
 80186b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80186b6:	bf00      	nop
 80186b8:	370c      	adds	r7, #12
 80186ba:	46bd      	mov	sp, r7
 80186bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c0:	4770      	bx	lr
 80186c2:	bf00      	nop
 80186c4:	2000002c 	.word	0x2000002c
	...

080186d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80186d0:	f3ef 8009 	mrs	r0, PSP
 80186d4:	f3bf 8f6f 	isb	sy
 80186d8:	4b15      	ldr	r3, [pc, #84]	; (8018730 <pxCurrentTCBConst>)
 80186da:	681a      	ldr	r2, [r3, #0]
 80186dc:	f01e 0f10 	tst.w	lr, #16
 80186e0:	bf08      	it	eq
 80186e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80186e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ea:	6010      	str	r0, [r2, #0]
 80186ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80186f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80186f4:	f380 8811 	msr	BASEPRI, r0
 80186f8:	f3bf 8f4f 	dsb	sy
 80186fc:	f3bf 8f6f 	isb	sy
 8018700:	f7fe feba 	bl	8017478 <vTaskSwitchContext>
 8018704:	f04f 0000 	mov.w	r0, #0
 8018708:	f380 8811 	msr	BASEPRI, r0
 801870c:	bc09      	pop	{r0, r3}
 801870e:	6819      	ldr	r1, [r3, #0]
 8018710:	6808      	ldr	r0, [r1, #0]
 8018712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018716:	f01e 0f10 	tst.w	lr, #16
 801871a:	bf08      	it	eq
 801871c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018720:	f380 8809 	msr	PSP, r0
 8018724:	f3bf 8f6f 	isb	sy
 8018728:	4770      	bx	lr
 801872a:	bf00      	nop
 801872c:	f3af 8000 	nop.w

08018730 <pxCurrentTCBConst>:
 8018730:	20019920 	.word	0x20019920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018734:	bf00      	nop
 8018736:	bf00      	nop

08018738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
	__asm volatile
 801873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018742:	f383 8811 	msr	BASEPRI, r3
 8018746:	f3bf 8f6f 	isb	sy
 801874a:	f3bf 8f4f 	dsb	sy
 801874e:	607b      	str	r3, [r7, #4]
}
 8018750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018752:	f7fe fdd7 	bl	8017304 <xTaskIncrementTick>
 8018756:	4603      	mov	r3, r0
 8018758:	2b00      	cmp	r3, #0
 801875a:	d003      	beq.n	8018764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801875c:	4b06      	ldr	r3, [pc, #24]	; (8018778 <xPortSysTickHandler+0x40>)
 801875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018762:	601a      	str	r2, [r3, #0]
 8018764:	2300      	movs	r3, #0
 8018766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	f383 8811 	msr	BASEPRI, r3
}
 801876e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018770:	bf00      	nop
 8018772:	3708      	adds	r7, #8
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}
 8018778:	e000ed04 	.word	0xe000ed04

0801877c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801877c:	b480      	push	{r7}
 801877e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018780:	4b0b      	ldr	r3, [pc, #44]	; (80187b0 <vPortSetupTimerInterrupt+0x34>)
 8018782:	2200      	movs	r2, #0
 8018784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018786:	4b0b      	ldr	r3, [pc, #44]	; (80187b4 <vPortSetupTimerInterrupt+0x38>)
 8018788:	2200      	movs	r2, #0
 801878a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801878c:	4b0a      	ldr	r3, [pc, #40]	; (80187b8 <vPortSetupTimerInterrupt+0x3c>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	4a0a      	ldr	r2, [pc, #40]	; (80187bc <vPortSetupTimerInterrupt+0x40>)
 8018792:	fba2 2303 	umull	r2, r3, r2, r3
 8018796:	099b      	lsrs	r3, r3, #6
 8018798:	4a09      	ldr	r2, [pc, #36]	; (80187c0 <vPortSetupTimerInterrupt+0x44>)
 801879a:	3b01      	subs	r3, #1
 801879c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801879e:	4b04      	ldr	r3, [pc, #16]	; (80187b0 <vPortSetupTimerInterrupt+0x34>)
 80187a0:	2207      	movs	r2, #7
 80187a2:	601a      	str	r2, [r3, #0]
}
 80187a4:	bf00      	nop
 80187a6:	46bd      	mov	sp, r7
 80187a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ac:	4770      	bx	lr
 80187ae:	bf00      	nop
 80187b0:	e000e010 	.word	0xe000e010
 80187b4:	e000e018 	.word	0xe000e018
 80187b8:	2000000c 	.word	0x2000000c
 80187bc:	10624dd3 	.word	0x10624dd3
 80187c0:	e000e014 	.word	0xe000e014

080187c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80187c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80187d4 <vPortEnableVFP+0x10>
 80187c8:	6801      	ldr	r1, [r0, #0]
 80187ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80187ce:	6001      	str	r1, [r0, #0]
 80187d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80187d2:	bf00      	nop
 80187d4:	e000ed88 	.word	0xe000ed88

080187d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80187d8:	b480      	push	{r7}
 80187da:	b085      	sub	sp, #20
 80187dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80187de:	f3ef 8305 	mrs	r3, IPSR
 80187e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	2b0f      	cmp	r3, #15
 80187e8:	d914      	bls.n	8018814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80187ea:	4a17      	ldr	r2, [pc, #92]	; (8018848 <vPortValidateInterruptPriority+0x70>)
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	4413      	add	r3, r2
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80187f4:	4b15      	ldr	r3, [pc, #84]	; (801884c <vPortValidateInterruptPriority+0x74>)
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	7afa      	ldrb	r2, [r7, #11]
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d20a      	bcs.n	8018814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80187fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018802:	f383 8811 	msr	BASEPRI, r3
 8018806:	f3bf 8f6f 	isb	sy
 801880a:	f3bf 8f4f 	dsb	sy
 801880e:	607b      	str	r3, [r7, #4]
}
 8018810:	bf00      	nop
 8018812:	e7fe      	b.n	8018812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018814:	4b0e      	ldr	r3, [pc, #56]	; (8018850 <vPortValidateInterruptPriority+0x78>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801881c:	4b0d      	ldr	r3, [pc, #52]	; (8018854 <vPortValidateInterruptPriority+0x7c>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	429a      	cmp	r2, r3
 8018822:	d90a      	bls.n	801883a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018828:	f383 8811 	msr	BASEPRI, r3
 801882c:	f3bf 8f6f 	isb	sy
 8018830:	f3bf 8f4f 	dsb	sy
 8018834:	603b      	str	r3, [r7, #0]
}
 8018836:	bf00      	nop
 8018838:	e7fe      	b.n	8018838 <vPortValidateInterruptPriority+0x60>
	}
 801883a:	bf00      	nop
 801883c:	3714      	adds	r7, #20
 801883e:	46bd      	mov	sp, r7
 8018840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	e000e3f0 	.word	0xe000e3f0
 801884c:	20019f4c 	.word	0x20019f4c
 8018850:	e000ed0c 	.word	0xe000ed0c
 8018854:	20019f50 	.word	0x20019f50

08018858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08a      	sub	sp, #40	; 0x28
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018860:	2300      	movs	r3, #0
 8018862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018864:	f7fe fc92 	bl	801718c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018868:	4b5b      	ldr	r3, [pc, #364]	; (80189d8 <pvPortMalloc+0x180>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d101      	bne.n	8018874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018870:	f000 f920 	bl	8018ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018874:	4b59      	ldr	r3, [pc, #356]	; (80189dc <pvPortMalloc+0x184>)
 8018876:	681a      	ldr	r2, [r3, #0]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	4013      	ands	r3, r2
 801887c:	2b00      	cmp	r3, #0
 801887e:	f040 8093 	bne.w	80189a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d01d      	beq.n	80188c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018888:	2208      	movs	r2, #8
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	4413      	add	r3, r2
 801888e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	f003 0307 	and.w	r3, r3, #7
 8018896:	2b00      	cmp	r3, #0
 8018898:	d014      	beq.n	80188c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f023 0307 	bic.w	r3, r3, #7
 80188a0:	3308      	adds	r3, #8
 80188a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f003 0307 	and.w	r3, r3, #7
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d00a      	beq.n	80188c4 <pvPortMalloc+0x6c>
	__asm volatile
 80188ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b2:	f383 8811 	msr	BASEPRI, r3
 80188b6:	f3bf 8f6f 	isb	sy
 80188ba:	f3bf 8f4f 	dsb	sy
 80188be:	617b      	str	r3, [r7, #20]
}
 80188c0:	bf00      	nop
 80188c2:	e7fe      	b.n	80188c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d06e      	beq.n	80189a8 <pvPortMalloc+0x150>
 80188ca:	4b45      	ldr	r3, [pc, #276]	; (80189e0 <pvPortMalloc+0x188>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d869      	bhi.n	80189a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80188d4:	4b43      	ldr	r3, [pc, #268]	; (80189e4 <pvPortMalloc+0x18c>)
 80188d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80188d8:	4b42      	ldr	r3, [pc, #264]	; (80189e4 <pvPortMalloc+0x18c>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188de:	e004      	b.n	80188ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80188e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80188e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ec:	685b      	ldr	r3, [r3, #4]
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d903      	bls.n	80188fc <pvPortMalloc+0xa4>
 80188f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d1f1      	bne.n	80188e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80188fc:	4b36      	ldr	r3, [pc, #216]	; (80189d8 <pvPortMalloc+0x180>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018902:	429a      	cmp	r2, r3
 8018904:	d050      	beq.n	80189a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018906:	6a3b      	ldr	r3, [r7, #32]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2208      	movs	r2, #8
 801890c:	4413      	add	r3, r2
 801890e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018912:	681a      	ldr	r2, [r3, #0]
 8018914:	6a3b      	ldr	r3, [r7, #32]
 8018916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891a:	685a      	ldr	r2, [r3, #4]
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	1ad2      	subs	r2, r2, r3
 8018920:	2308      	movs	r3, #8
 8018922:	005b      	lsls	r3, r3, #1
 8018924:	429a      	cmp	r2, r3
 8018926:	d91f      	bls.n	8018968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	4413      	add	r3, r2
 801892e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018930:	69bb      	ldr	r3, [r7, #24]
 8018932:	f003 0307 	and.w	r3, r3, #7
 8018936:	2b00      	cmp	r3, #0
 8018938:	d00a      	beq.n	8018950 <pvPortMalloc+0xf8>
	__asm volatile
 801893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801893e:	f383 8811 	msr	BASEPRI, r3
 8018942:	f3bf 8f6f 	isb	sy
 8018946:	f3bf 8f4f 	dsb	sy
 801894a:	613b      	str	r3, [r7, #16]
}
 801894c:	bf00      	nop
 801894e:	e7fe      	b.n	801894e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018952:	685a      	ldr	r2, [r3, #4]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	1ad2      	subs	r2, r2, r3
 8018958:	69bb      	ldr	r3, [r7, #24]
 801895a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895e:	687a      	ldr	r2, [r7, #4]
 8018960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018962:	69b8      	ldr	r0, [r7, #24]
 8018964:	f000 f908 	bl	8018b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018968:	4b1d      	ldr	r3, [pc, #116]	; (80189e0 <pvPortMalloc+0x188>)
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801896e:	685b      	ldr	r3, [r3, #4]
 8018970:	1ad3      	subs	r3, r2, r3
 8018972:	4a1b      	ldr	r2, [pc, #108]	; (80189e0 <pvPortMalloc+0x188>)
 8018974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018976:	4b1a      	ldr	r3, [pc, #104]	; (80189e0 <pvPortMalloc+0x188>)
 8018978:	681a      	ldr	r2, [r3, #0]
 801897a:	4b1b      	ldr	r3, [pc, #108]	; (80189e8 <pvPortMalloc+0x190>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	429a      	cmp	r2, r3
 8018980:	d203      	bcs.n	801898a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018982:	4b17      	ldr	r3, [pc, #92]	; (80189e0 <pvPortMalloc+0x188>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	4a18      	ldr	r2, [pc, #96]	; (80189e8 <pvPortMalloc+0x190>)
 8018988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801898c:	685a      	ldr	r2, [r3, #4]
 801898e:	4b13      	ldr	r3, [pc, #76]	; (80189dc <pvPortMalloc+0x184>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	431a      	orrs	r2, r3
 8018994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801899a:	2200      	movs	r2, #0
 801899c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801899e:	4b13      	ldr	r3, [pc, #76]	; (80189ec <pvPortMalloc+0x194>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	3301      	adds	r3, #1
 80189a4:	4a11      	ldr	r2, [pc, #68]	; (80189ec <pvPortMalloc+0x194>)
 80189a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80189a8:	f7fe fbfe 	bl	80171a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80189ac:	69fb      	ldr	r3, [r7, #28]
 80189ae:	f003 0307 	and.w	r3, r3, #7
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d00a      	beq.n	80189cc <pvPortMalloc+0x174>
	__asm volatile
 80189b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ba:	f383 8811 	msr	BASEPRI, r3
 80189be:	f3bf 8f6f 	isb	sy
 80189c2:	f3bf 8f4f 	dsb	sy
 80189c6:	60fb      	str	r3, [r7, #12]
}
 80189c8:	bf00      	nop
 80189ca:	e7fe      	b.n	80189ca <pvPortMalloc+0x172>
	return pvReturn;
 80189cc:	69fb      	ldr	r3, [r7, #28]
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	3728      	adds	r7, #40	; 0x28
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	2001db5c 	.word	0x2001db5c
 80189dc:	2001db70 	.word	0x2001db70
 80189e0:	2001db60 	.word	0x2001db60
 80189e4:	2001db54 	.word	0x2001db54
 80189e8:	2001db64 	.word	0x2001db64
 80189ec:	2001db68 	.word	0x2001db68

080189f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b086      	sub	sp, #24
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d04d      	beq.n	8018a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018a02:	2308      	movs	r3, #8
 8018a04:	425b      	negs	r3, r3
 8018a06:	697a      	ldr	r2, [r7, #20]
 8018a08:	4413      	add	r3, r2
 8018a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	685a      	ldr	r2, [r3, #4]
 8018a14:	4b24      	ldr	r3, [pc, #144]	; (8018aa8 <vPortFree+0xb8>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	4013      	ands	r3, r2
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d10a      	bne.n	8018a34 <vPortFree+0x44>
	__asm volatile
 8018a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a22:	f383 8811 	msr	BASEPRI, r3
 8018a26:	f3bf 8f6f 	isb	sy
 8018a2a:	f3bf 8f4f 	dsb	sy
 8018a2e:	60fb      	str	r3, [r7, #12]
}
 8018a30:	bf00      	nop
 8018a32:	e7fe      	b.n	8018a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018a34:	693b      	ldr	r3, [r7, #16]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00a      	beq.n	8018a52 <vPortFree+0x62>
	__asm volatile
 8018a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a40:	f383 8811 	msr	BASEPRI, r3
 8018a44:	f3bf 8f6f 	isb	sy
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	60bb      	str	r3, [r7, #8]
}
 8018a4e:	bf00      	nop
 8018a50:	e7fe      	b.n	8018a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	685a      	ldr	r2, [r3, #4]
 8018a56:	4b14      	ldr	r3, [pc, #80]	; (8018aa8 <vPortFree+0xb8>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	4013      	ands	r3, r2
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d01e      	beq.n	8018a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018a60:	693b      	ldr	r3, [r7, #16]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d11a      	bne.n	8018a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	685a      	ldr	r2, [r3, #4]
 8018a6c:	4b0e      	ldr	r3, [pc, #56]	; (8018aa8 <vPortFree+0xb8>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	43db      	mvns	r3, r3
 8018a72:	401a      	ands	r2, r3
 8018a74:	693b      	ldr	r3, [r7, #16]
 8018a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018a78:	f7fe fb88 	bl	801718c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	685a      	ldr	r2, [r3, #4]
 8018a80:	4b0a      	ldr	r3, [pc, #40]	; (8018aac <vPortFree+0xbc>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	4413      	add	r3, r2
 8018a86:	4a09      	ldr	r2, [pc, #36]	; (8018aac <vPortFree+0xbc>)
 8018a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018a8a:	6938      	ldr	r0, [r7, #16]
 8018a8c:	f000 f874 	bl	8018b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018a90:	4b07      	ldr	r3, [pc, #28]	; (8018ab0 <vPortFree+0xc0>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	3301      	adds	r3, #1
 8018a96:	4a06      	ldr	r2, [pc, #24]	; (8018ab0 <vPortFree+0xc0>)
 8018a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018a9a:	f7fe fb85 	bl	80171a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018a9e:	bf00      	nop
 8018aa0:	3718      	adds	r7, #24
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	2001db70 	.word	0x2001db70
 8018aac:	2001db60 	.word	0x2001db60
 8018ab0:	2001db6c 	.word	0x2001db6c

08018ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018ab4:	b480      	push	{r7}
 8018ab6:	b085      	sub	sp, #20
 8018ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018ac0:	4b27      	ldr	r3, [pc, #156]	; (8018b60 <prvHeapInit+0xac>)
 8018ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	f003 0307 	and.w	r3, r3, #7
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d00c      	beq.n	8018ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	3307      	adds	r3, #7
 8018ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	f023 0307 	bic.w	r3, r3, #7
 8018ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018adc:	68ba      	ldr	r2, [r7, #8]
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	1ad3      	subs	r3, r2, r3
 8018ae2:	4a1f      	ldr	r2, [pc, #124]	; (8018b60 <prvHeapInit+0xac>)
 8018ae4:	4413      	add	r3, r2
 8018ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018aec:	4a1d      	ldr	r2, [pc, #116]	; (8018b64 <prvHeapInit+0xb0>)
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018af2:	4b1c      	ldr	r3, [pc, #112]	; (8018b64 <prvHeapInit+0xb0>)
 8018af4:	2200      	movs	r2, #0
 8018af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	68ba      	ldr	r2, [r7, #8]
 8018afc:	4413      	add	r3, r2
 8018afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018b00:	2208      	movs	r2, #8
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	1a9b      	subs	r3, r3, r2
 8018b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	f023 0307 	bic.w	r3, r3, #7
 8018b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	4a15      	ldr	r2, [pc, #84]	; (8018b68 <prvHeapInit+0xb4>)
 8018b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018b16:	4b14      	ldr	r3, [pc, #80]	; (8018b68 <prvHeapInit+0xb4>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018b1e:	4b12      	ldr	r3, [pc, #72]	; (8018b68 <prvHeapInit+0xb4>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2200      	movs	r2, #0
 8018b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018b2a:	683b      	ldr	r3, [r7, #0]
 8018b2c:	68fa      	ldr	r2, [r7, #12]
 8018b2e:	1ad2      	subs	r2, r2, r3
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018b34:	4b0c      	ldr	r3, [pc, #48]	; (8018b68 <prvHeapInit+0xb4>)
 8018b36:	681a      	ldr	r2, [r3, #0]
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	4a0a      	ldr	r2, [pc, #40]	; (8018b6c <prvHeapInit+0xb8>)
 8018b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	4a09      	ldr	r2, [pc, #36]	; (8018b70 <prvHeapInit+0xbc>)
 8018b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018b4c:	4b09      	ldr	r3, [pc, #36]	; (8018b74 <prvHeapInit+0xc0>)
 8018b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018b52:	601a      	str	r2, [r3, #0]
}
 8018b54:	bf00      	nop
 8018b56:	3714      	adds	r7, #20
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr
 8018b60:	20019f54 	.word	0x20019f54
 8018b64:	2001db54 	.word	0x2001db54
 8018b68:	2001db5c 	.word	0x2001db5c
 8018b6c:	2001db64 	.word	0x2001db64
 8018b70:	2001db60 	.word	0x2001db60
 8018b74:	2001db70 	.word	0x2001db70

08018b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018b78:	b480      	push	{r7}
 8018b7a:	b085      	sub	sp, #20
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018b80:	4b28      	ldr	r3, [pc, #160]	; (8018c24 <prvInsertBlockIntoFreeList+0xac>)
 8018b82:	60fb      	str	r3, [r7, #12]
 8018b84:	e002      	b.n	8018b8c <prvInsertBlockIntoFreeList+0x14>
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	60fb      	str	r3, [r7, #12]
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	429a      	cmp	r2, r3
 8018b94:	d8f7      	bhi.n	8018b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	685b      	ldr	r3, [r3, #4]
 8018b9e:	68ba      	ldr	r2, [r7, #8]
 8018ba0:	4413      	add	r3, r2
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d108      	bne.n	8018bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	685a      	ldr	r2, [r3, #4]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	441a      	add	r2, r3
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	68ba      	ldr	r2, [r7, #8]
 8018bc4:	441a      	add	r2, r3
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	429a      	cmp	r2, r3
 8018bcc:	d118      	bne.n	8018c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681a      	ldr	r2, [r3, #0]
 8018bd2:	4b15      	ldr	r3, [pc, #84]	; (8018c28 <prvInsertBlockIntoFreeList+0xb0>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	d00d      	beq.n	8018bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	685a      	ldr	r2, [r3, #4]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	441a      	add	r2, r3
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	601a      	str	r2, [r3, #0]
 8018bf4:	e008      	b.n	8018c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018bf6:	4b0c      	ldr	r3, [pc, #48]	; (8018c28 <prvInsertBlockIntoFreeList+0xb0>)
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	601a      	str	r2, [r3, #0]
 8018bfe:	e003      	b.n	8018c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	681a      	ldr	r2, [r3, #0]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d002      	beq.n	8018c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	687a      	ldr	r2, [r7, #4]
 8018c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018c16:	bf00      	nop
 8018c18:	3714      	adds	r7, #20
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c20:	4770      	bx	lr
 8018c22:	bf00      	nop
 8018c24:	2001db54 	.word	0x2001db54
 8018c28:	2001db5c 	.word	0x2001db5c

08018c2c <ble_prov_scan_result>:
		return;
	}
}

void ble_prov_scan_result(tstrM2mWifiscanResult* pstrScanResult, uint8_t resultsRemaining)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	460b      	mov	r3, r1
 8018c36:	70fb      	strb	r3, [r7, #3]
	if (ble_scan_list.num_valid < MAX_WIPROVTASK_AP_NUM && pstrScanResult->au8SSID[0])
 8018c38:	4b21      	ldr	r3, [pc, #132]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	2b0e      	cmp	r3, #14
 8018c3e:	d834      	bhi.n	8018caa <ble_prov_scan_result+0x7e>
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	7a9b      	ldrb	r3, [r3, #10]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d030      	beq.n	8018caa <ble_prov_scan_result+0x7e>
	{
		uint8_t index = ble_scan_list.num_valid;
 8018c48:	4b1d      	ldr	r3, [pc, #116]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	73fb      	strb	r3, [r7, #15]
		ble_scan_list.scandetails[index].rssi = pstrScanResult->s8rssi;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c54:	7bfa      	ldrb	r2, [r7, #15]
 8018c56:	b2d8      	uxtb	r0, r3
 8018c58:	4919      	ldr	r1, [pc, #100]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	011b      	lsls	r3, r3, #4
 8018c5e:	4413      	add	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	440b      	add	r3, r1
 8018c64:	3302      	adds	r3, #2
 8018c66:	4602      	mov	r2, r0
 8018c68:	701a      	strb	r2, [r3, #0]
		ble_scan_list.scandetails[index].sec_type = pstrScanResult->u8AuthType;
 8018c6a:	7bfa      	ldrb	r2, [r7, #15]
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	7898      	ldrb	r0, [r3, #2]
 8018c70:	4913      	ldr	r1, [pc, #76]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018c72:	4613      	mov	r3, r2
 8018c74:	011b      	lsls	r3, r3, #4
 8018c76:	4413      	add	r3, r2
 8018c78:	005b      	lsls	r3, r3, #1
 8018c7a:	440b      	add	r3, r1
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	4602      	mov	r2, r0
 8018c80:	701a      	strb	r2, [r3, #0]
		memcpy(ble_scan_list.scandetails[index].ssid, pstrScanResult->au8SSID, sizeof(ble_scan_list.scandetails[index].ssid));
 8018c82:	7bfa      	ldrb	r2, [r7, #15]
 8018c84:	4613      	mov	r3, r2
 8018c86:	011b      	lsls	r3, r3, #4
 8018c88:	4413      	add	r3, r2
 8018c8a:	005b      	lsls	r3, r3, #1
 8018c8c:	4a0c      	ldr	r2, [pc, #48]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018c8e:	4413      	add	r3, r2
 8018c90:	1cd8      	adds	r0, r3, #3
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	330a      	adds	r3, #10
 8018c96:	2220      	movs	r2, #32
 8018c98:	4619      	mov	r1, r3
 8018c9a:	f005 fdf3 	bl	801e884 <memcpy>
		ble_scan_list.num_valid++;
 8018c9e:	4b08      	ldr	r3, [pc, #32]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	3301      	adds	r3, #1
 8018ca4:	b2da      	uxtb	r2, r3
 8018ca6:	4b06      	ldr	r3, [pc, #24]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018ca8:	701a      	strb	r2, [r3, #0]
	}

	if (resultsRemaining==0)
 8018caa:	78fb      	ldrb	r3, [r7, #3]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d102      	bne.n	8018cb6 <ble_prov_scan_result+0x8a>
	{
		wifiprov_scan_list_ind_send(&ble_scan_list);
 8018cb0:	4803      	ldr	r0, [pc, #12]	; (8018cc0 <ble_prov_scan_result+0x94>)
 8018cb2:	f005 f9c1 	bl	801e038 <wifiprov_scan_list_ind_send>
	}
}
 8018cb6:	bf00      	nop
 8018cb8:	3710      	adds	r7, #16
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	2001db74 	.word	0x2001db74

08018cc4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8018cc4:	b480      	push	{r7}
 8018cc6:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
//    HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(CONF_WINC_PIN_RESET_PORT,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);

}
 8018cc8:	bf00      	nop
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr

08018cd2 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8018cd2:	b580      	push	{r7, lr}
 8018cd4:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8018cd6:	f7ff fff5 	bl	8018cc4 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 8018cda:	f000 f803 	bl	8018ce4 <nm_bsp_reset>

	return M2M_SUCCESS;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	af00      	add	r7, sp, #0
//    HAL_Delay(100);

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);

    HAL_Delay(1);
 8018ce8:	2001      	movs	r0, #1
 8018cea:	f7ed fc5b 	bl	80065a4 <HAL_Delay>
	HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 8018cee:	2201      	movs	r2, #1
 8018cf0:	2101      	movs	r1, #1
 8018cf2:	4806      	ldr	r0, [pc, #24]	; (8018d0c <nm_bsp_reset+0x28>)
 8018cf4:	f7ee fb3c 	bl	8007370 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8018cf8:	2005      	movs	r0, #5
 8018cfa:	f7ed fc53 	bl	80065a4 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PIN_RESET_PORT,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 8018cfe:	2201      	movs	r2, #1
 8018d00:	2102      	movs	r1, #2
 8018d02:	4803      	ldr	r0, [pc, #12]	; (8018d10 <nm_bsp_reset+0x2c>)
 8018d04:	f7ee fb34 	bl	8007370 <HAL_GPIO_WritePin>
//    HAL_Delay(100);

}
 8018d08:	bf00      	nop
 8018d0a:	bd80      	pop	{r7, pc}
 8018d0c:	40020800 	.word	0x40020800
 8018d10:	40020400 	.word	0x40020400

08018d14 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b082      	sub	sp, #8
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 8018d1c:	6878      	ldr	r0, [r7, #4]
 8018d1e:	f7ed fc41 	bl	80065a4 <HAL_Delay>
}
 8018d22:	bf00      	nop
 8018d24:	3708      	adds	r7, #8
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8018d2a:	b480      	push	{r7}
 8018d2c:	b089      	sub	sp, #36	; 0x24
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 8018d32:	bf00      	nop
 8018d34:	3724      	adds	r7, #36	; 0x24
 8018d36:	46bd      	mov	sp, r7
 8018d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3c:	4770      	bx	lr

08018d3e <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8018d3e:	b580      	push	{r7, lr}
 8018d40:	b082      	sub	sp, #8
 8018d42:	af00      	add	r7, sp, #0
 8018d44:	4603      	mov	r3, r0
 8018d46:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 8018d48:	79fb      	ldrb	r3, [r7, #7]
 8018d4a:	2b01      	cmp	r3, #1
 8018d4c:	d108      	bne.n	8018d60 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x031, 0);
 8018d4e:	2200      	movs	r2, #0
 8018d50:	2131      	movs	r1, #49	; 0x31
 8018d52:	200a      	movs	r0, #10
 8018d54:	f7ed fd26 	bl	80067a4 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8018d58:	200a      	movs	r0, #10
 8018d5a:	f7ed fd3f 	bl	80067dc <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8018d5e:	e002      	b.n	8018d66 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8018d60:	200a      	movs	r0, #10
 8018d62:	f7ed fd49 	bl	80067f8 <HAL_NVIC_DisableIRQ>
}
 8018d66:	bf00      	nop
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}
	...

08018d70 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b082      	sub	sp, #8
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	4603      	mov	r3, r0
 8018d78:	71fb      	strb	r3, [r7, #7]
    if (select)
 8018d7a:	79fb      	ldrb	r3, [r7, #7]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d005      	beq.n	8018d8c <spi_select_slave+0x1c>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 8018d80:	2200      	movs	r2, #0
 8018d82:	2140      	movs	r1, #64	; 0x40
 8018d84:	4806      	ldr	r0, [pc, #24]	; (8018da0 <spi_select_slave+0x30>)
 8018d86:	f7ee faf3 	bl	8007370 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8018d8a:	e004      	b.n	8018d96 <spi_select_slave+0x26>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8018d8c:	2201      	movs	r2, #1
 8018d8e:	2140      	movs	r1, #64	; 0x40
 8018d90:	4803      	ldr	r0, [pc, #12]	; (8018da0 <spi_select_slave+0x30>)
 8018d92:	f7ee faed 	bl	8007370 <HAL_GPIO_WritePin>
}
 8018d96:	bf00      	nop
 8018d98:	3708      	adds	r7, #8
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	40021400 	.word	0x40021400

08018da4 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b088      	sub	sp, #32
 8018da8:	af02      	add	r7, sp, #8
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	4613      	mov	r3, r2
 8018db0:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 8018db2:	2001      	movs	r0, #1
 8018db4:	f7ff ffdc 	bl	8018d70 <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d10b      	bne.n	8018dd6 <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspi5,spiDummyBuf,pu8Miso,u16Sz,1000);
 8018dbe:	88fb      	ldrh	r3, [r7, #6]
 8018dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018dc4:	9200      	str	r2, [sp, #0]
 8018dc6:	68ba      	ldr	r2, [r7, #8]
 8018dc8:	4921      	ldr	r1, [pc, #132]	; (8018e50 <spi_rw+0xac>)
 8018dca:	4822      	ldr	r0, [pc, #136]	; (8018e54 <spi_rw+0xb0>)
 8018dcc:	f7f1 fe32 	bl	800aa34 <HAL_SPI_TransmitReceive>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	75fb      	strb	r3, [r7, #23]
 8018dd4:	e01f      	b.n	8018e16 <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d111      	bne.n	8018e00 <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspi5,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8018ddc:	88fb      	ldrh	r3, [r7, #6]
 8018dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018de2:	9200      	str	r2, [sp, #0]
 8018de4:	4a1a      	ldr	r2, [pc, #104]	; (8018e50 <spi_rw+0xac>)
 8018de6:	68f9      	ldr	r1, [r7, #12]
 8018de8:	481a      	ldr	r0, [pc, #104]	; (8018e54 <spi_rw+0xb0>)
 8018dea:	f7f1 fe23 	bl	800aa34 <HAL_SPI_TransmitReceive>
 8018dee:	4603      	mov	r3, r0
 8018df0:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 8018df2:	88fb      	ldrh	r3, [r7, #6]
 8018df4:	461a      	mov	r2, r3
 8018df6:	2100      	movs	r1, #0
 8018df8:	4815      	ldr	r0, [pc, #84]	; (8018e50 <spi_rw+0xac>)
 8018dfa:	f005 fc5b 	bl	801e6b4 <memset>
 8018dfe:	e00a      	b.n	8018e16 <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspi5,pu8Mosi,pu8Miso,u16Sz,1000);
 8018e00:	88fb      	ldrh	r3, [r7, #6]
 8018e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e06:	9200      	str	r2, [sp, #0]
 8018e08:	68ba      	ldr	r2, [r7, #8]
 8018e0a:	68f9      	ldr	r1, [r7, #12]
 8018e0c:	4811      	ldr	r0, [pc, #68]	; (8018e54 <spi_rw+0xb0>)
 8018e0e:	f7f1 fe11 	bl	800aa34 <HAL_SPI_TransmitReceive>
 8018e12:	4603      	mov	r3, r0
 8018e14:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 8018e16:	7dfb      	ldrb	r3, [r7, #23]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d010      	beq.n	8018e3e <spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 8018e1c:	22b2      	movs	r2, #178	; 0xb2
 8018e1e:	490e      	ldr	r1, [pc, #56]	; (8018e58 <spi_rw+0xb4>)
 8018e20:	480e      	ldr	r0, [pc, #56]	; (8018e5c <spi_rw+0xb8>)
 8018e22:	f005 fabf 	bl	801e3a4 <iprintf>
 8018e26:	7dfb      	ldrb	r3, [r7, #23]
 8018e28:	461a      	mov	r2, r3
 8018e2a:	490b      	ldr	r1, [pc, #44]	; (8018e58 <spi_rw+0xb4>)
 8018e2c:	480c      	ldr	r0, [pc, #48]	; (8018e60 <spi_rw+0xbc>)
 8018e2e:	f005 fab9 	bl	801e3a4 <iprintf>
 8018e32:	200d      	movs	r0, #13
 8018e34:	f005 fac8 	bl	801e3c8 <putchar>
        return status;
 8018e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018e3c:	e003      	b.n	8018e46 <spi_rw+0xa2>
    }
    
  	spi_select_slave(false);
 8018e3e:	2000      	movs	r0, #0
 8018e40:	f7ff ff96 	bl	8018d70 <spi_select_slave>

	return M2M_SUCCESS;
 8018e44:	2300      	movs	r3, #0
}
 8018e46:	4618      	mov	r0, r3
 8018e48:	3718      	adds	r7, #24
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
 8018e4e:	bf00      	nop
 8018e50:	2001dd74 	.word	0x2001dd74
 8018e54:	2000e6ac 	.word	0x2000e6ac
 8018e58:	08028ebc 	.word	0x08028ebc
 8018e5c:	08020560 	.word	0x08020560
 8018e60:	08020574 	.word	0x08020574

08018e64 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(uint8 *pvinit, uint32 req_serial_number)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b085      	sub	sp, #20
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
	sint8 result = M2M_SUCCESS;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	73fb      	strb	r3, [r7, #15]
//	{
//		M2M_ERR("SPI bus Initialization error\r\n");
//	}
//
//	HAL_SPI_MspInit(&hspiWifi);
	return result;
 8018e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e76:	4618      	mov	r0, r3
 8018e78:	3714      	adds	r7, #20
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e80:	4770      	bx	lr
	...

08018e84 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b084      	sub	sp, #16
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	6039      	str	r1, [r7, #0]
 8018e8e:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 8018e90:	2300      	movs	r3, #0
 8018e92:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 8018e94:	79fb      	ldrb	r3, [r7, #7]
 8018e96:	2b03      	cmp	r3, #3
 8018e98:	d10d      	bne.n	8018eb6 <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8018e9e:	68bb      	ldr	r3, [r7, #8]
 8018ea0:	6818      	ldr	r0, [r3, #0]
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	6859      	ldr	r1, [r3, #4]
 8018ea6:	68bb      	ldr	r3, [r7, #8]
 8018ea8:	891b      	ldrh	r3, [r3, #8]
 8018eaa:	461a      	mov	r2, r3
 8018eac:	f7ff ff7a 	bl	8018da4 <spi_rw>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8018eb4:	e00e      	b.n	8018ed4 <nm_bus_ioctl+0x50>
		default:
			s8Ret = -1;
 8018eb6:	23ff      	movs	r3, #255	; 0xff
 8018eb8:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
 8018eba:	f44f 728a 	mov.w	r2, #276	; 0x114
 8018ebe:	4908      	ldr	r1, [pc, #32]	; (8018ee0 <nm_bus_ioctl+0x5c>)
 8018ec0:	4808      	ldr	r0, [pc, #32]	; (8018ee4 <nm_bus_ioctl+0x60>)
 8018ec2:	f005 fa6f 	bl	801e3a4 <iprintf>
 8018ec6:	4808      	ldr	r0, [pc, #32]	; (8018ee8 <nm_bus_ioctl+0x64>)
 8018ec8:	f005 fada 	bl	801e480 <puts>
 8018ecc:	200d      	movs	r0, #13
 8018ece:	f005 fa7b 	bl	801e3c8 <putchar>
			break;
 8018ed2:	bf00      	nop
	}

	return s8Ret;
 8018ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3710      	adds	r7, #16
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	08028ec4 	.word	0x08028ec4
 8018ee4:	08020560 	.word	0x08020560
 8018ee8:	080205a4 	.word	0x080205a4

08018eec <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8018eec:	b480      	push	{r7}
 8018eee:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 8018ef0:	2300      	movs	r3, #0
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr

08018efc <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 8018efc:	b480      	push	{r7}
 8018efe:	b085      	sub	sp, #20
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d010      	beq.n	8018f30 <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 8018f0e:	68bb      	ldr	r3, [r7, #8]
 8018f10:	781a      	ldrb	r2, [r3, #0]
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	701a      	strb	r2, [r3, #0]
        pDst++;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	3301      	adds	r3, #1
 8018f1a:	60fb      	str	r3, [r7, #12]
        pSrc++;
 8018f1c:	68bb      	ldr	r3, [r7, #8]
 8018f1e:	3301      	adds	r3, #1
 8018f20:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	3b01      	subs	r3, #1
 8018f26:	607b      	str	r3, [r7, #4]
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d1ef      	bne.n	8018f0e <m2m_memcpy+0x12>
 8018f2e:	e000      	b.n	8018f32 <m2m_memcpy+0x36>
    if(sz == 0) return;
 8018f30:	bf00      	nop
}
 8018f32:	3714      	adds	r7, #20
 8018f34:	46bd      	mov	sp, r7
 8018f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3a:	4770      	bx	lr

08018f3c <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 8018f3c:	b480      	push	{r7}
 8018f3e:	b085      	sub	sp, #20
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	460b      	mov	r3, r1
 8018f46:	607a      	str	r2, [r7, #4]
 8018f48:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d00c      	beq.n	8018f6a <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	7afa      	ldrb	r2, [r7, #11]
 8018f54:	701a      	strb	r2, [r3, #0]
        pBuf++;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	3b01      	subs	r3, #1
 8018f60:	607b      	str	r3, [r7, #4]
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d1f3      	bne.n	8018f50 <m2m_memset+0x14>
 8018f68:	e000      	b.n	8018f6c <m2m_memset+0x30>
    if(sz == 0) return;
 8018f6a:	bf00      	nop
}
 8018f6c:	3714      	adds	r7, #20
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f74:	4770      	bx	lr

08018f76 <m2m_strlen>:

uint16 m2m_strlen(const uint8 *pcStr)
{
 8018f76:	b480      	push	{r7}
 8018f78:	b085      	sub	sp, #20
 8018f7a:	af00      	add	r7, sp, #0
 8018f7c:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 8018f82:	e005      	b.n	8018f90 <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 8018f84:	89fb      	ldrh	r3, [r7, #14]
 8018f86:	3301      	adds	r3, #1
 8018f88:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1f5      	bne.n	8018f84 <m2m_strlen+0xe>
    }
    return u16StrLen;
 8018f98:	89fb      	ldrh	r3, [r7, #14]
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3714      	adds	r7, #20
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa4:	4770      	bx	lr

08018fa6 <hexchar_2_val>:
    return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 8018fa6:	b480      	push	{r7}
 8018fa8:	b083      	sub	sp, #12
 8018faa:	af00      	add	r7, sp, #0
 8018fac:	4603      	mov	r3, r0
 8018fae:	71fb      	strb	r3, [r7, #7]
    ch -= 0x30;
 8018fb0:	79fb      	ldrb	r3, [r7, #7]
 8018fb2:	3b30      	subs	r3, #48	; 0x30
 8018fb4:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 8018fb6:	79fb      	ldrb	r3, [r7, #7]
 8018fb8:	2b09      	cmp	r3, #9
 8018fba:	d801      	bhi.n	8018fc0 <hexchar_2_val+0x1a>
        return ch;
 8018fbc:	79fb      	ldrb	r3, [r7, #7]
 8018fbe:	e00e      	b.n	8018fde <hexchar_2_val+0x38>
    ch |= 0x20;
 8018fc0:	79fb      	ldrb	r3, [r7, #7]
 8018fc2:	f043 0320 	orr.w	r3, r3, #32
 8018fc6:	71fb      	strb	r3, [r7, #7]
    ch -= 0x31;
 8018fc8:	79fb      	ldrb	r3, [r7, #7]
 8018fca:	3b31      	subs	r3, #49	; 0x31
 8018fcc:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 8018fce:	79fb      	ldrb	r3, [r7, #7]
 8018fd0:	2b05      	cmp	r3, #5
 8018fd2:	d803      	bhi.n	8018fdc <hexchar_2_val+0x36>
        return ch + 10;
 8018fd4:	79fb      	ldrb	r3, [r7, #7]
 8018fd6:	330a      	adds	r3, #10
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	e000      	b.n	8018fde <hexchar_2_val+0x38>
    return 0xFF;
 8018fdc:	23ff      	movs	r3, #255	; 0xff
}
 8018fde:	4618      	mov	r0, r3
 8018fe0:	370c      	adds	r7, #12
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe8:	4770      	bx	lr

08018fea <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 8018fea:	b580      	push	{r7, lr}
 8018fec:	b086      	sub	sp, #24
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	60f8      	str	r0, [r7, #12]
 8018ff2:	60b9      	str	r1, [r7, #8]
 8018ff4:	4613      	mov	r3, r2
 8018ff6:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 8018ff8:	e02c      	b.n	8019054 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 8018ffa:	68bb      	ldr	r3, [r7, #8]
 8018ffc:	1c5a      	adds	r2, r3, #1
 8018ffe:	60ba      	str	r2, [r7, #8]
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	4618      	mov	r0, r3
 8019004:	f7ff ffcf 	bl	8018fa6 <hexchar_2_val>
 8019008:	4603      	mov	r3, r0
 801900a:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 801900c:	7dfb      	ldrb	r3, [r7, #23]
 801900e:	2b0f      	cmp	r3, #15
 8019010:	d902      	bls.n	8019018 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 8019012:	f06f 030e 	mvn.w	r3, #14
 8019016:	e023      	b.n	8019060 <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 8019018:	7dfb      	ldrb	r3, [r7, #23]
 801901a:	011b      	lsls	r3, r3, #4
 801901c:	b2da      	uxtb	r2, r3
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	1c5a      	adds	r2, r3, #1
 8019026:	60ba      	str	r2, [r7, #8]
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	4618      	mov	r0, r3
 801902c:	f7ff ffbb 	bl	8018fa6 <hexchar_2_val>
 8019030:	4603      	mov	r3, r0
 8019032:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8019034:	7dfb      	ldrb	r3, [r7, #23]
 8019036:	2b0f      	cmp	r3, #15
 8019038:	d902      	bls.n	8019040 <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 801903a:	f06f 030e 	mvn.w	r3, #14
 801903e:	e00f      	b.n	8019060 <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	781a      	ldrb	r2, [r3, #0]
 8019044:	7dfb      	ldrb	r3, [r7, #23]
 8019046:	4413      	add	r3, r2
 8019048:	b2da      	uxtb	r2, r3
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	3301      	adds	r3, #1
 8019052:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 8019054:	79fb      	ldrb	r3, [r7, #7]
 8019056:	1e5a      	subs	r2, r3, #1
 8019058:	71fa      	strb	r2, [r7, #7]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d1cd      	bne.n	8018ffa <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 801905e:	2300      	movs	r3, #0
}
 8019060:	4618      	mov	r0, r3
 8019062:	3718      	adds	r7, #24
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <isr>:
static uint16 gau16HifBlacklist[] = {NEW_HIF_LIST};
#define HIF_BLACKLIST_SZ (sizeof(gau16HifBlacklist)/sizeof(gau16HifBlacklist[0]))
static uint8 gu8HifBlOffset = 0;

/*static */void isr(void)
{
 8019068:	b480      	push	{r7}
 801906a:	af00      	add	r7, sp, #0
    gstrHifCxt.u8Interrupt++;
 801906c:	4b05      	ldr	r3, [pc, #20]	; (8019084 <isr+0x1c>)
 801906e:	78db      	ldrb	r3, [r3, #3]
 8019070:	b2db      	uxtb	r3, r3
 8019072:	3301      	adds	r3, #1
 8019074:	b2da      	uxtb	r2, r3
 8019076:	4b03      	ldr	r3, [pc, #12]	; (8019084 <isr+0x1c>)
 8019078:	70da      	strb	r2, [r3, #3]
    nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 801907a:	bf00      	nop
 801907c:	46bd      	mov	sp, r7
 801907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019082:	4770      	bx	lr
 8019084:	2001dea0 	.word	0x2001dea0

08019088 <hif_set_rx_done>:

static sint8 hif_set_rx_done(void)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b082      	sub	sp, #8
 801908c:	af00      	add	r7, sp, #0
    uint32 reg;
    sint8 ret = M2M_SUCCESS;
 801908e:	2300      	movs	r3, #0
 8019090:	71fb      	strb	r3, [r7, #7]
    gstrHifCxt.u8HifRXDone = 0;
 8019092:	4b1e      	ldr	r3, [pc, #120]	; (801910c <hif_set_rx_done+0x84>)
 8019094:	2200      	movs	r2, #0
 8019096:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
    nm_bsp_interrupt_ctrl(1);
 8019098:	2001      	movs	r0, #1
 801909a:	f7ff fe50 	bl	8018d3e <nm_bsp_interrupt_ctrl>
#endif
    if(ISNMC3400(nmi_get_chipid())) {
 801909e:	f002 f841 	bl	801b124 <nmi_get_chipid>
 80190a2:	4602      	mov	r2, r0
 80190a4:	4b1a      	ldr	r3, [pc, #104]	; (8019110 <hif_set_rx_done+0x88>)
 80190a6:	4013      	ands	r3, r2
 80190a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80190ac:	d10a      	bne.n	80190c4 <hif_set_rx_done+0x3c>
        ret = nm_write_reg(INTERRUPT_CORTUS_0_3000D0, 1);
 80190ae:	2101      	movs	r1, #1
 80190b0:	f241 00a8 	movw	r0, #4264	; 0x10a8
 80190b4:	f002 fc52 	bl	801b95c <nm_write_reg>
 80190b8:	4603      	mov	r3, r0
 80190ba:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	e01c      	b.n	80190fe <hif_set_rx_done+0x76>
    } else  {
        ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 80190c4:	463b      	mov	r3, r7
 80190c6:	4619      	mov	r1, r3
 80190c8:	f241 0070 	movw	r0, #4208	; 0x1070
 80190cc:	f002 fc38 	bl	801b940 <nm_read_reg_with_ret>
 80190d0:	4603      	mov	r3, r0
 80190d2:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d10f      	bne.n	80190fc <hif_set_rx_done+0x74>

        /* Set RX Done */
        reg |= NBIT1;
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	f043 0302 	orr.w	r3, r3, #2
 80190e2:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0, reg);
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	4619      	mov	r1, r3
 80190e8:	f241 0070 	movw	r0, #4208	; 0x1070
 80190ec:	f002 fc36 	bl	801b95c <nm_write_reg>
 80190f0:	4603      	mov	r3, r0
 80190f2:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190f8:	2b00      	cmp	r3, #0
    }

#ifdef NM_LEVEL_INTERRUPT
    nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 80190fa:	e000      	b.n	80190fe <hif_set_rx_done+0x76>
        if(ret != M2M_SUCCESS)goto ERR1;
 80190fc:	bf00      	nop
    return ret;
 80190fe:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8019102:	4618      	mov	r0, r3
 8019104:	3708      	adds	r7, #8
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	2001dea0 	.word	0x2001dea0
 8019110:	fff0f000 	.word	0xfff0f000

08019114 <m2m_hif_cb>:
 *                  HIF data length.
 *  @param[in]  u32Addr
 *                  HIF address.
 */
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8019114:	b480      	push	{r7}
 8019116:	b083      	sub	sp, #12
 8019118:	af00      	add	r7, sp, #0
 801911a:	4603      	mov	r3, r0
 801911c:	603a      	str	r2, [r7, #0]
 801911e:	71fb      	strb	r3, [r7, #7]
 8019120:	460b      	mov	r3, r1
 8019122:	80bb      	strh	r3, [r7, #4]

}
 8019124:	bf00      	nop
 8019126:	370c      	adds	r7, #12
 8019128:	46bd      	mov	sp, r7
 801912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912e:	4770      	bx	lr

08019130 <hif_chip_wake>:
 *  @fn         NMI_API sint8 hif_chip_wake(void);
 *  @brief      To Wakeup the chip.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_chip_wake(void)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 8019136:	2300      	movs	r3, #0
 8019138:	71fb      	strb	r3, [r7, #7]
    if(gstrHifCxt.u8HifRXDone)
 801913a:	4b14      	ldr	r3, [pc, #80]	; (801918c <hif_chip_wake+0x5c>)
 801913c:	789b      	ldrb	r3, [r3, #2]
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2b00      	cmp	r3, #0
 8019142:	d002      	beq.n	801914a <hif_chip_wake+0x1a>
    {
        /* chip already wake for the rx not done no need to send wake request */
        return ret;
 8019144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019148:	e01c      	b.n	8019184 <hif_chip_wake+0x54>
    }
    if(gstrHifCxt.u8ChipSleep == 0)
 801914a:	4b10      	ldr	r3, [pc, #64]	; (801918c <hif_chip_wake+0x5c>)
 801914c:	785b      	ldrb	r3, [r3, #1]
 801914e:	b2db      	uxtb	r3, r3
 8019150:	2b00      	cmp	r3, #0
 8019152:	d10c      	bne.n	801916e <hif_chip_wake+0x3e>
    {
        if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8019154:	4b0d      	ldr	r3, [pc, #52]	; (801918c <hif_chip_wake+0x5c>)
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	b2db      	uxtb	r3, r3
 801915a:	2b00      	cmp	r3, #0
 801915c:	d007      	beq.n	801916e <hif_chip_wake+0x3e>
        {
            ret = chip_wake();
 801915e:	f002 f8e5 	bl	801b32c <chip_wake>
 8019162:	4603      	mov	r3, r0
 8019164:	71fb      	strb	r3, [r7, #7]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d107      	bne.n	801917e <hif_chip_wake+0x4e>
        }
    }
    gstrHifCxt.u8ChipSleep++;
 801916e:	4b07      	ldr	r3, [pc, #28]	; (801918c <hif_chip_wake+0x5c>)
 8019170:	785b      	ldrb	r3, [r3, #1]
 8019172:	b2db      	uxtb	r3, r3
 8019174:	3301      	adds	r3, #1
 8019176:	b2da      	uxtb	r2, r3
 8019178:	4b04      	ldr	r3, [pc, #16]	; (801918c <hif_chip_wake+0x5c>)
 801917a:	705a      	strb	r2, [r3, #1]
 801917c:	e000      	b.n	8019180 <hif_chip_wake+0x50>
            if(ret != M2M_SUCCESS)goto ERR1;
 801917e:	bf00      	nop
ERR1:
    return ret;
 8019180:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019184:	4618      	mov	r0, r3
 8019186:	3708      	adds	r7, #8
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}
 801918c:	2001dea0 	.word	0x2001dea0

08019190 <hif_set_sleep_mode>:
@return
    The function SHALL return 0 for success and a negative value otherwise.
*/

void hif_set_sleep_mode(uint8 u8Pstype)
{
 8019190:	b480      	push	{r7}
 8019192:	b083      	sub	sp, #12
 8019194:	af00      	add	r7, sp, #0
 8019196:	4603      	mov	r3, r0
 8019198:	71fb      	strb	r3, [r7, #7]
    gstrHifCxt.u8ChipMode = u8Pstype;
 801919a:	4a04      	ldr	r2, [pc, #16]	; (80191ac <hif_set_sleep_mode+0x1c>)
 801919c:	79fb      	ldrb	r3, [r7, #7]
 801919e:	7013      	strb	r3, [r2, #0]
}
 80191a0:	bf00      	nop
 80191a2:	370c      	adds	r7, #12
 80191a4:	46bd      	mov	sp, r7
 80191a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191aa:	4770      	bx	lr
 80191ac:	2001dea0 	.word	0x2001dea0

080191b0 <hif_chip_sleep_sc>:
 *  @fn         NMI_API sint8 hif_chip_sleep_sc(void);
 *  @brief      To clear the chip sleep but keep the chip sleep
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
static sint8 hif_chip_sleep_sc(void)
{
 80191b0:	b480      	push	{r7}
 80191b2:	af00      	add	r7, sp, #0
    if(gstrHifCxt.u8ChipSleep >= 1)
 80191b4:	4b08      	ldr	r3, [pc, #32]	; (80191d8 <hif_chip_sleep_sc+0x28>)
 80191b6:	785b      	ldrb	r3, [r3, #1]
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d006      	beq.n	80191cc <hif_chip_sleep_sc+0x1c>
    {
        gstrHifCxt.u8ChipSleep--;
 80191be:	4b06      	ldr	r3, [pc, #24]	; (80191d8 <hif_chip_sleep_sc+0x28>)
 80191c0:	785b      	ldrb	r3, [r3, #1]
 80191c2:	b2db      	uxtb	r3, r3
 80191c4:	3b01      	subs	r3, #1
 80191c6:	b2da      	uxtb	r2, r3
 80191c8:	4b03      	ldr	r3, [pc, #12]	; (80191d8 <hif_chip_sleep_sc+0x28>)
 80191ca:	705a      	strb	r2, [r3, #1]
    }
    return M2M_SUCCESS;
 80191cc:	2300      	movs	r3, #0
}
 80191ce:	4618      	mov	r0, r3
 80191d0:	46bd      	mov	sp, r7
 80191d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d6:	4770      	bx	lr
 80191d8:	2001dea0 	.word	0x2001dea0

080191dc <hif_chip_sleep>:
 *  @fn         NMI_API sint8 hif_chip_sleep(void);
 *  @brief      To make the chip sleep.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_chip_sleep(void)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 80191e2:	2300      	movs	r3, #0
 80191e4:	71fb      	strb	r3, [r7, #7]

    if(gstrHifCxt.u8ChipSleep >= 1)
 80191e6:	4b10      	ldr	r3, [pc, #64]	; (8019228 <hif_chip_sleep+0x4c>)
 80191e8:	785b      	ldrb	r3, [r3, #1]
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d006      	beq.n	80191fe <hif_chip_sleep+0x22>
    {
        gstrHifCxt.u8ChipSleep--;
 80191f0:	4b0d      	ldr	r3, [pc, #52]	; (8019228 <hif_chip_sleep+0x4c>)
 80191f2:	785b      	ldrb	r3, [r3, #1]
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	3b01      	subs	r3, #1
 80191f8:	b2da      	uxtb	r2, r3
 80191fa:	4b0b      	ldr	r3, [pc, #44]	; (8019228 <hif_chip_sleep+0x4c>)
 80191fc:	705a      	strb	r2, [r3, #1]
    }

    if(gstrHifCxt.u8ChipSleep == 0)
 80191fe:	4b0a      	ldr	r3, [pc, #40]	; (8019228 <hif_chip_sleep+0x4c>)
 8019200:	785b      	ldrb	r3, [r3, #1]
 8019202:	b2db      	uxtb	r3, r3
 8019204:	2b00      	cmp	r3, #0
 8019206:	d108      	bne.n	801921a <hif_chip_sleep+0x3e>
    {
        if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8019208:	4b07      	ldr	r3, [pc, #28]	; (8019228 <hif_chip_sleep+0x4c>)
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	b2db      	uxtb	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d003      	beq.n	801921a <hif_chip_sleep+0x3e>
            ret = chip_sleep();
 8019212:	f002 f827 	bl	801b264 <chip_sleep>
 8019216:	4603      	mov	r3, r0
 8019218:	71fb      	strb	r3, [r7, #7]
    }
//ERR1:
    return ret;
 801921a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801921e:	4618      	mov	r0, r3
 8019220:	3708      	adds	r7, #8
 8019222:	46bd      	mov	sp, r7
 8019224:	bd80      	pop	{r7, pc}
 8019226:	bf00      	nop
 8019228:	2001dea0 	.word	0x2001dea0

0801922c <hif_init>:
 *  @param[in]  arg
 *                  Pointer to the arguments.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_init(void *arg)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b084      	sub	sp, #16
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 8019234:	2300      	movs	r3, #0
 8019236:	73fb      	strb	r3, [r7, #15]
    m2m_memset((uint8*)&gstrHifCxt, 0, sizeof(tstrHifContext));
 8019238:	2228      	movs	r2, #40	; 0x28
 801923a:	2100      	movs	r1, #0
 801923c:	4809      	ldr	r0, [pc, #36]	; (8019264 <hif_init+0x38>)
 801923e:	f7ff fe7d 	bl	8018f3c <m2m_memset>
    nm_bsp_register_isr(isr);
 8019242:	4809      	ldr	r0, [pc, #36]	; (8019268 <hif_init+0x3c>)
 8019244:	f7ff fd71 	bl	8018d2a <nm_bsp_register_isr>

    hif_register_cb(M2M_REQ_GROUP_HIF, m2m_hif_cb);
 8019248:	4908      	ldr	r1, [pc, #32]	; (801926c <hif_init+0x40>)
 801924a:	2003      	movs	r0, #3
 801924c:	f000 fde8 	bl	8019e20 <hif_register_cb>
    ret = hif_chip_sleep();
 8019250:	f7ff ffc4 	bl	80191dc <hif_chip_sleep>
 8019254:	4603      	mov	r3, r0
 8019256:	73fb      	strb	r3, [r7, #15]

    return ret;
 8019258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801925c:	4618      	mov	r0, r3
 801925e:	3710      	adds	r7, #16
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	2001dea0 	.word	0x2001dea0
 8019268:	08019069 	.word	0x08019069
 801926c:	08019115 	.word	0x08019115

08019270 <hif_check_compatibility>:
 *  @param [in] u16HifInfo
 *                  HIF info of image to be checked.
 *  @return     The function shall return ZERO for compatible image and a negative value otherwise.
 */
sint8 hif_check_compatibility(uint16 u16HifInfo)
{
 8019270:	b480      	push	{r7}
 8019272:	b085      	sub	sp, #20
 8019274:	af00      	add	r7, sp, #0
 8019276:	4603      	mov	r3, r0
 8019278:	80fb      	strh	r3, [r7, #6]
    sint8 ret = M2M_ERR_FW_VER_MISMATCH;
 801927a:	23f3      	movs	r3, #243	; 0xf3
 801927c:	73fb      	strb	r3, [r7, #15]
    if((M2M_GET_HIF_BLOCK(u16HifInfo) == M2M_HIF_BLOCK_VALUE) && (M2M_GET_HIF_MAJOR(u16HifInfo) == M2M_HIF_MAJOR_VALUE))
 801927e:	88fb      	ldrh	r3, [r7, #6]
 8019280:	0b9b      	lsrs	r3, r3, #14
 8019282:	b29b      	uxth	r3, r3
 8019284:	b2db      	uxtb	r3, r3
 8019286:	f003 0303 	and.w	r3, r3, #3
 801928a:	2b02      	cmp	r3, #2
 801928c:	d109      	bne.n	80192a2 <hif_check_compatibility+0x32>
 801928e:	88fb      	ldrh	r3, [r7, #6]
 8019290:	0a1b      	lsrs	r3, r3, #8
 8019292:	b29b      	uxth	r3, r3
 8019294:	b2db      	uxtb	r3, r3
 8019296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801929a:	2b01      	cmp	r3, #1
 801929c:	d101      	bne.n	80192a2 <hif_check_compatibility+0x32>
    {
        ret = M2M_SUCCESS;
 801929e:	2300      	movs	r3, #0
 80192a0:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 80192a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80192a6:	4618      	mov	r0, r3
 80192a8:	3714      	adds	r7, #20
 80192aa:	46bd      	mov	sp, r7
 80192ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b0:	4770      	bx	lr
	...

080192b4 <hif_enable_access>:
 *              To enable access to HIF layer, based on HIF level of Firmware.
 *              This function reads HIF level directly from a register written by Firmware.
 *  @return     The function shall return ZERO for full match operation and a negative value if operation is restricted.
 */
sint8 hif_enable_access(void)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 80192ba:	2300      	movs	r3, #0
 80192bc:	71fb      	strb	r3, [r7, #7]
    uint16 fw_hif_info = 0;
 80192be:	2300      	movs	r3, #0
 80192c0:	80bb      	strh	r3, [r7, #4]

    ret = nm_get_hif_info(&fw_hif_info, NULL);
 80192c2:	1d3b      	adds	r3, r7, #4
 80192c4:	2100      	movs	r1, #0
 80192c6:	4618      	mov	r0, r3
 80192c8:	f002 fc0e 	bl	801bae8 <nm_get_hif_info>
 80192cc:	4603      	mov	r3, r0
 80192ce:	71fb      	strb	r3, [r7, #7]
    if(ret == M2M_SUCCESS)
 80192d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d142      	bne.n	801935e <hif_enable_access+0xaa>
    {
        ret = hif_check_compatibility(fw_hif_info);
 80192d8:	88bb      	ldrh	r3, [r7, #4]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7ff ffc8 	bl	8019270 <hif_check_compatibility>
 80192e0:	4603      	mov	r3, r0
 80192e2:	71fb      	strb	r3, [r7, #7]
        if(ret == M2M_SUCCESS)
 80192e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d129      	bne.n	8019340 <hif_enable_access+0x8c>
        {
            switch(M2M_GET_HIF_MINOR(fw_hif_info))
 80192ec:	88bb      	ldrh	r3, [r7, #4]
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	2b04      	cmp	r3, #4
 80192f2:	d821      	bhi.n	8019338 <hif_enable_access+0x84>
 80192f4:	a201      	add	r2, pc, #4	; (adr r2, 80192fc <hif_enable_access+0x48>)
 80192f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192fa:	bf00      	nop
 80192fc:	08019311 	.word	0x08019311
 8019300:	08019319 	.word	0x08019319
 8019304:	08019321 	.word	0x08019321
 8019308:	08019329 	.word	0x08019329
 801930c:	08019331 	.word	0x08019331
            {
            case 0:
                gu8HifBlOffset = 1;
 8019310:	4b16      	ldr	r3, [pc, #88]	; (801936c <hif_enable_access+0xb8>)
 8019312:	2201      	movs	r2, #1
 8019314:	701a      	strb	r2, [r3, #0]
                break;
 8019316:	e022      	b.n	801935e <hif_enable_access+0xaa>
            case 1:
                gu8HifBlOffset = 2;
 8019318:	4b14      	ldr	r3, [pc, #80]	; (801936c <hif_enable_access+0xb8>)
 801931a:	2202      	movs	r2, #2
 801931c:	701a      	strb	r2, [r3, #0]
                break;
 801931e:	e01e      	b.n	801935e <hif_enable_access+0xaa>
            case 2:
                gu8HifBlOffset = 2;
 8019320:	4b12      	ldr	r3, [pc, #72]	; (801936c <hif_enable_access+0xb8>)
 8019322:	2202      	movs	r2, #2
 8019324:	701a      	strb	r2, [r3, #0]
                break;
 8019326:	e01a      	b.n	801935e <hif_enable_access+0xaa>
            case 3:
                gu8HifBlOffset = 3;
 8019328:	4b10      	ldr	r3, [pc, #64]	; (801936c <hif_enable_access+0xb8>)
 801932a:	2203      	movs	r2, #3
 801932c:	701a      	strb	r2, [r3, #0]
                break;
 801932e:	e016      	b.n	801935e <hif_enable_access+0xaa>
            case 4:
                gu8HifBlOffset = 9;
 8019330:	4b0e      	ldr	r3, [pc, #56]	; (801936c <hif_enable_access+0xb8>)
 8019332:	2209      	movs	r2, #9
 8019334:	701a      	strb	r2, [r3, #0]
                break;
 8019336:	e012      	b.n	801935e <hif_enable_access+0xaa>
            // Additional case to be added each time hif minor increments.
            // All additional cases to be removed in the event of a hif major increment.
            // Default catches all cases in which hif minor is greater in Firmware than in Driver.
            default:
                gu8HifBlOffset = HIF_BLACKLIST_SZ;
 8019338:	4b0c      	ldr	r3, [pc, #48]	; (801936c <hif_enable_access+0xb8>)
 801933a:	2209      	movs	r2, #9
 801933c:	701a      	strb	r2, [r3, #0]
                break;
 801933e:	e00e      	b.n	801935e <hif_enable_access+0xaa>
            }
        }
        else
        {
            gu8HifBlOffset = 0;
 8019340:	4b0a      	ldr	r3, [pc, #40]	; (801936c <hif_enable_access+0xb8>)
 8019342:	2200      	movs	r2, #0
 8019344:	701a      	strb	r2, [r3, #0]
            M2M_ERR("HIF access limited to OTA Switch/Rollback only\n");
 8019346:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801934a:	4909      	ldr	r1, [pc, #36]	; (8019370 <hif_enable_access+0xbc>)
 801934c:	4809      	ldr	r0, [pc, #36]	; (8019374 <hif_enable_access+0xc0>)
 801934e:	f005 f829 	bl	801e3a4 <iprintf>
 8019352:	4809      	ldr	r0, [pc, #36]	; (8019378 <hif_enable_access+0xc4>)
 8019354:	f005 f894 	bl	801e480 <puts>
 8019358:	200d      	movs	r0, #13
 801935a:	f005 f835 	bl	801e3c8 <putchar>
        }
    }
    return ret;
 801935e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019362:	4618      	mov	r0, r3
 8019364:	3708      	adds	r7, #8
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	2001dec8 	.word	0x2001dec8
 8019370:	08028ed4 	.word	0x08028ed4
 8019374:	080205b8 	.word	0x080205b8
 8019378:	080205cc 	.word	0x080205cc

0801937c <hif_check_code>:
 *  @param[in]  u8Opcode
 *                  Operation ID.
 *  @return     The function shall return @ref M2M_SUCCESS for success and a negative value otherwise.
 */
sint8 hif_check_code(uint8 u8Gid, uint8 u8OpCode)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b084      	sub	sp, #16
 8019380:	af00      	add	r7, sp, #0
 8019382:	4603      	mov	r3, r0
 8019384:	460a      	mov	r2, r1
 8019386:	71fb      	strb	r3, [r7, #7]
 8019388:	4613      	mov	r3, r2
 801938a:	71bb      	strb	r3, [r7, #6]
    uint8 u8BlId;
    uint16 u16HifCode = ((uint16)u8Gid<<8) | u8OpCode;
 801938c:	79fb      	ldrb	r3, [r7, #7]
 801938e:	021b      	lsls	r3, r3, #8
 8019390:	b21a      	sxth	r2, r3
 8019392:	79bb      	ldrb	r3, [r7, #6]
 8019394:	b21b      	sxth	r3, r3
 8019396:	4313      	orrs	r3, r2
 8019398:	b21b      	sxth	r3, r3
 801939a:	81bb      	strh	r3, [r7, #12]
    if((u16HifCode == HIFCODE_OTA_RB) || (u16HifCode == HIFCODE_OTA_SW))
 801939c:	89bb      	ldrh	r3, [r7, #12]
 801939e:	f240 4269 	movw	r2, #1129	; 0x469
 80193a2:	4293      	cmp	r3, r2
 80193a4:	d003      	beq.n	80193ae <hif_check_code+0x32>
 80193a6:	89bb      	ldrh	r3, [r7, #12]
 80193a8:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 80193ac:	d101      	bne.n	80193b2 <hif_check_code+0x36>
    {
        return M2M_SUCCESS;
 80193ae:	2300      	movs	r3, #0
 80193b0:	e033      	b.n	801941a <hif_check_code+0x9e>
    }
    if(gu8HifBlOffset == 0)
 80193b2:	4b1c      	ldr	r3, [pc, #112]	; (8019424 <hif_check_code+0xa8>)
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d10e      	bne.n	80193d8 <hif_check_code+0x5c>
    {
        M2M_ERR("HIF OTA rb/sw only\n");
 80193ba:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80193be:	491a      	ldr	r1, [pc, #104]	; (8019428 <hif_check_code+0xac>)
 80193c0:	481a      	ldr	r0, [pc, #104]	; (801942c <hif_check_code+0xb0>)
 80193c2:	f004 ffef 	bl	801e3a4 <iprintf>
 80193c6:	481a      	ldr	r0, [pc, #104]	; (8019430 <hif_check_code+0xb4>)
 80193c8:	f005 f85a 	bl	801e480 <puts>
 80193cc:	200d      	movs	r0, #13
 80193ce:	f004 fffb 	bl	801e3c8 <putchar>
        return M2M_ERR_SEND;
 80193d2:	f04f 33ff 	mov.w	r3, #4294967295
 80193d6:	e020      	b.n	801941a <hif_check_code+0x9e>
    }
    for(u8BlId = gu8HifBlOffset; u8BlId < HIF_BLACKLIST_SZ; u8BlId++)
 80193d8:	4b12      	ldr	r3, [pc, #72]	; (8019424 <hif_check_code+0xa8>)
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	73fb      	strb	r3, [r7, #15]
 80193de:	e018      	b.n	8019412 <hif_check_code+0x96>
    {
        if(u16HifCode == gau16HifBlacklist[u8BlId])
 80193e0:	7bfb      	ldrb	r3, [r7, #15]
 80193e2:	4a14      	ldr	r2, [pc, #80]	; (8019434 <hif_check_code+0xb8>)
 80193e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80193e8:	89ba      	ldrh	r2, [r7, #12]
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d10e      	bne.n	801940c <hif_check_code+0x90>
        {
            M2M_ERR("HIF message unsupported\n");
 80193ee:	f240 12a3 	movw	r2, #419	; 0x1a3
 80193f2:	490d      	ldr	r1, [pc, #52]	; (8019428 <hif_check_code+0xac>)
 80193f4:	480d      	ldr	r0, [pc, #52]	; (801942c <hif_check_code+0xb0>)
 80193f6:	f004 ffd5 	bl	801e3a4 <iprintf>
 80193fa:	480f      	ldr	r0, [pc, #60]	; (8019438 <hif_check_code+0xbc>)
 80193fc:	f005 f840 	bl	801e480 <puts>
 8019400:	200d      	movs	r0, #13
 8019402:	f004 ffe1 	bl	801e3c8 <putchar>
            return M2M_ERR_SEND;
 8019406:	f04f 33ff 	mov.w	r3, #4294967295
 801940a:	e006      	b.n	801941a <hif_check_code+0x9e>
    for(u8BlId = gu8HifBlOffset; u8BlId < HIF_BLACKLIST_SZ; u8BlId++)
 801940c:	7bfb      	ldrb	r3, [r7, #15]
 801940e:	3301      	adds	r3, #1
 8019410:	73fb      	strb	r3, [r7, #15]
 8019412:	7bfb      	ldrb	r3, [r7, #15]
 8019414:	2b08      	cmp	r3, #8
 8019416:	d9e3      	bls.n	80193e0 <hif_check_code+0x64>
        }
    }
    return M2M_SUCCESS;
 8019418:	2300      	movs	r3, #0
}
 801941a:	4618      	mov	r0, r3
 801941c:	3710      	adds	r7, #16
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}
 8019422:	bf00      	nop
 8019424:	2001dec8 	.word	0x2001dec8
 8019428:	08028ee8 	.word	0x08028ee8
 801942c:	080205b8 	.word	0x080205b8
 8019430:	080205fc 	.word	0x080205fc
 8019434:	20000034 	.word	0x20000034
 8019438:	08020610 	.word	0x08020610

0801943c <hif_send>:
 *                  Packet buffer size (including the HIF header).
 *   @return    The function shall return @ref M2M_SUCCESS for successful operation and a negative value otherwise.
 */
sint8 hif_send(uint8 u8Gid, uint8 u8Opcode, uint8 *pu8CtrlBuf, uint16 u16CtrlBufSize,
               uint8 *pu8DataBuf, uint16 u16DataSize, uint16 u16DataOffset)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b08a      	sub	sp, #40	; 0x28
 8019440:	af00      	add	r7, sp, #0
 8019442:	603a      	str	r2, [r7, #0]
 8019444:	461a      	mov	r2, r3
 8019446:	4603      	mov	r3, r0
 8019448:	71fb      	strb	r3, [r7, #7]
 801944a:	460b      	mov	r3, r1
 801944c:	71bb      	strb	r3, [r7, #6]
 801944e:	4613      	mov	r3, r2
 8019450:	80bb      	strh	r3, [r7, #4]
    sint8       ret = M2M_ERR_SEND;
 8019452:	23ff      	movs	r3, #255	; 0xff
 8019454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tstrHifHdr  strHif;
    uint32      u32CtrlDataGap = u16DataOffset;
 8019458:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801945a:	623b      	str	r3, [r7, #32]

    strHif.u8Opcode     = u8Opcode&(~NBIT7);
 801945c:	79bb      	ldrb	r3, [r7, #6]
 801945e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019462:	b2db      	uxtb	r3, r3
 8019464:	777b      	strb	r3, [r7, #29]
    strHif.u8Gid        = u8Gid;
 8019466:	79fb      	ldrb	r3, [r7, #7]
 8019468:	773b      	strb	r3, [r7, #28]
    strHif.u16Length    = M2M_HIF_HDR_OFFSET;
 801946a:	2308      	movs	r3, #8
 801946c:	83fb      	strh	r3, [r7, #30]

    if(pu8CtrlBuf != NULL)
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d01e      	beq.n	80194b2 <hif_send+0x76>
    {
        if(u16CtrlBufSize > M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET)
 8019474:	88bb      	ldrh	r3, [r7, #4]
 8019476:	f240 6234 	movw	r2, #1588	; 0x634
 801947a:	4293      	cmp	r3, r2
 801947c:	d910      	bls.n	80194a0 <hif_send+0x64>
        {
            M2M_ERR("HIF %s (%dB) exceeds max (%dB)\n", "Ctrl", u16CtrlBufSize, M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET);
 801947e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8019482:	49b2      	ldr	r1, [pc, #712]	; (801974c <hif_send+0x310>)
 8019484:	48b2      	ldr	r0, [pc, #712]	; (8019750 <hif_send+0x314>)
 8019486:	f004 ff8d 	bl	801e3a4 <iprintf>
 801948a:	88ba      	ldrh	r2, [r7, #4]
 801948c:	f240 6334 	movw	r3, #1588	; 0x634
 8019490:	49b0      	ldr	r1, [pc, #704]	; (8019754 <hif_send+0x318>)
 8019492:	48b1      	ldr	r0, [pc, #708]	; (8019758 <hif_send+0x31c>)
 8019494:	f004 ff86 	bl	801e3a4 <iprintf>
 8019498:	200d      	movs	r0, #13
 801949a:	f004 ff95 	bl	801e3c8 <putchar>
            goto ERR2;
 801949e:	e1b5      	b.n	801980c <hif_send+0x3d0>
        }
        strHif.u16Length += u16CtrlBufSize;
 80194a0:	8bfa      	ldrh	r2, [r7, #30]
 80194a2:	88bb      	ldrh	r3, [r7, #4]
 80194a4:	4413      	add	r3, r2
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	83fb      	strh	r3, [r7, #30]
        u32CtrlDataGap -= u16CtrlBufSize;
 80194aa:	88bb      	ldrh	r3, [r7, #4]
 80194ac:	6a3a      	ldr	r2, [r7, #32]
 80194ae:	1ad3      	subs	r3, r2, r3
 80194b0:	623b      	str	r3, [r7, #32]
    }
    if(pu8DataBuf != NULL)
 80194b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d022      	beq.n	80194fe <hif_send+0xc2>
    {
        if((uint32)u16DataOffset + u16DataSize > M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET)
 80194b8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80194ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194bc:	4413      	add	r3, r2
 80194be:	f240 6234 	movw	r2, #1588	; 0x634
 80194c2:	4293      	cmp	r3, r2
 80194c4:	d912      	bls.n	80194ec <hif_send+0xb0>
        {
            M2M_ERR("HIF %s (%luB) exceeds max (%luB)\n", "Data", (uint32)u16DataOffset + u16DataSize, (uint32)M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET);
 80194c6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80194ca:	49a0      	ldr	r1, [pc, #640]	; (801974c <hif_send+0x310>)
 80194cc:	48a0      	ldr	r0, [pc, #640]	; (8019750 <hif_send+0x314>)
 80194ce:	f004 ff69 	bl	801e3a4 <iprintf>
 80194d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80194d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194d6:	441a      	add	r2, r3
 80194d8:	f240 6334 	movw	r3, #1588	; 0x634
 80194dc:	499f      	ldr	r1, [pc, #636]	; (801975c <hif_send+0x320>)
 80194de:	48a0      	ldr	r0, [pc, #640]	; (8019760 <hif_send+0x324>)
 80194e0:	f004 ff60 	bl	801e3a4 <iprintf>
 80194e4:	200d      	movs	r0, #13
 80194e6:	f004 ff6f 	bl	801e3c8 <putchar>
            goto ERR2;
 80194ea:	e18f      	b.n	801980c <hif_send+0x3d0>
        }
        strHif.u16Length += u32CtrlDataGap + u16DataSize;
 80194ec:	8bfa      	ldrh	r2, [r7, #30]
 80194ee:	6a3b      	ldr	r3, [r7, #32]
 80194f0:	b299      	uxth	r1, r3
 80194f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194f4:	440b      	add	r3, r1
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	4413      	add	r3, r2
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	83fb      	strh	r3, [r7, #30]
    }

    ret = hif_check_code(strHif.u8Gid, strHif.u8Opcode);
 80194fe:	7f3b      	ldrb	r3, [r7, #28]
 8019500:	7f7a      	ldrb	r2, [r7, #29]
 8019502:	4611      	mov	r1, r2
 8019504:	4618      	mov	r0, r3
 8019506:	f7ff ff39 	bl	801937c <hif_check_code>
 801950a:	4603      	mov	r3, r0
 801950c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(ret != M2M_SUCCESS)
 8019510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019514:	2b00      	cmp	r3, #0
 8019516:	f040 8178 	bne.w	801980a <hif_send+0x3ce>
    {
        goto ERR2;
    }

    if(strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 801951a:	8bfb      	ldrh	r3, [r7, #30]
 801951c:	f240 623c 	movw	r2, #1596	; 0x63c
 8019520:	4293      	cmp	r3, r2
 8019522:	f200 8146 	bhi.w	80197b2 <hif_send+0x376>
    {
        ret = hif_chip_wake();
 8019526:	f7ff fe03 	bl	8019130 <hif_chip_wake>
 801952a:	4603      	mov	r3, r0
 801952c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(ret == M2M_SUCCESS)
 8019530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019534:	2b00      	cmp	r3, #0
 8019536:	f040 812f 	bne.w	8019798 <hif_send+0x35c>
        {
            volatile uint32 reg, dma_addr = 0;
 801953a:	2300      	movs	r3, #0
 801953c:	617b      	str	r3, [r7, #20]
            volatile uint16 cnt = 0;
 801953e:	2300      	movs	r3, #0
 8019540:	827b      	strh	r3, [r7, #18]

            reg = 0UL;
 8019542:	2300      	movs	r3, #0
 8019544:	61bb      	str	r3, [r7, #24]
            reg |= (uint32)u8Gid;
 8019546:	79fa      	ldrb	r2, [r7, #7]
 8019548:	69bb      	ldr	r3, [r7, #24]
 801954a:	4313      	orrs	r3, r2
 801954c:	61bb      	str	r3, [r7, #24]
            reg |= ((uint32)u8Opcode<<8);
 801954e:	79bb      	ldrb	r3, [r7, #6]
 8019550:	021a      	lsls	r2, r3, #8
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	4313      	orrs	r3, r2
 8019556:	61bb      	str	r3, [r7, #24]
            reg |= ((uint32)strHif.u16Length<<16);
 8019558:	8bfb      	ldrh	r3, [r7, #30]
 801955a:	041a      	lsls	r2, r3, #16
 801955c:	69bb      	ldr	r3, [r7, #24]
 801955e:	4313      	orrs	r3, r2
 8019560:	61bb      	str	r3, [r7, #24]
            ret = nm_write_reg(NMI_STATE_REG, reg);
 8019562:	69bb      	ldr	r3, [r7, #24]
 8019564:	4619      	mov	r1, r3
 8019566:	f241 008c 	movw	r0, #4236	; 0x108c
 801956a:	f002 f9f7 	bl	801b95c <nm_write_reg>
 801956e:	4603      	mov	r3, r0
 8019570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(M2M_SUCCESS != ret) goto ERR1;
 8019574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019578:	2b00      	cmp	r3, #0
 801957a:	f040 8136 	bne.w	80197ea <hif_send+0x3ae>

            reg = 0UL;
 801957e:	2300      	movs	r3, #0
 8019580:	61bb      	str	r3, [r7, #24]
            reg |= NBIT1;
 8019582:	69bb      	ldr	r3, [r7, #24]
 8019584:	f043 0302 	orr.w	r3, r3, #2
 8019588:	61bb      	str	r3, [r7, #24]
            ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 801958a:	69bb      	ldr	r3, [r7, #24]
 801958c:	4619      	mov	r1, r3
 801958e:	f241 0078 	movw	r0, #4216	; 0x1078
 8019592:	f002 f9e3 	bl	801b95c <nm_write_reg>
 8019596:	4603      	mov	r3, r0
 8019598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(M2M_SUCCESS != ret) goto ERR1;
 801959c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	f040 8124 	bne.w	80197ee <hif_send+0x3b2>


            if(ISNMC3400(nmi_get_chipid())) {
 80195a6:	f001 fdbd 	bl	801b124 <nmi_get_chipid>
 80195aa:	4602      	mov	r2, r0
 80195ac:	4b6d      	ldr	r3, [pc, #436]	; (8019764 <hif_send+0x328>)
 80195ae:	4013      	ands	r3, r2
 80195b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80195b4:	d10c      	bne.n	80195d0 <hif_send+0x194>

                ret = nm_write_reg(INTERRUPT_CORTUS_1_3000D0, 1);
 80195b6:	2101      	movs	r1, #1
 80195b8:	f241 00ac 	movw	r0, #4268	; 0x10ac
 80195bc:	f002 f9ce 	bl	801b95c <nm_write_reg>
 80195c0:	4603      	mov	r3, r0
 80195c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 80195c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	f040 8111 	bne.w	80197f2 <hif_send+0x3b6>
            }

            dma_addr = 0;
 80195d0:	2300      	movs	r3, #0
 80195d2:	617b      	str	r3, [r7, #20]

            for(cnt = 0; cnt < 1000*5; cnt ++)
 80195d4:	2300      	movs	r3, #0
 80195d6:	827b      	strh	r3, [r7, #18]
 80195d8:	e03d      	b.n	8019656 <hif_send+0x21a>
            {
                ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2, (uint32 *)&reg);
 80195da:	f107 0318 	add.w	r3, r7, #24
 80195de:	4619      	mov	r1, r3
 80195e0:	f241 0078 	movw	r0, #4216	; 0x1078
 80195e4:	f002 f9ac 	bl	801b940 <nm_read_reg_with_ret>
 80195e8:	4603      	mov	r3, r0
 80195ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(ret != M2M_SUCCESS) break;
 80195ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d136      	bne.n	8019664 <hif_send+0x228>
                /*
                 * If it takes too long to get a response, the slow down to
                 * avoid back-to-back register read operations.
                 */
                if(cnt >= 1000) {
 80195f6:	8a7b      	ldrh	r3, [r7, #18]
 80195f8:	b29b      	uxth	r3, r3
 80195fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80195fe:	d310      	bcc.n	8019622 <hif_send+0x1e6>
                    if(cnt == 1000) {
 8019600:	8a7b      	ldrh	r3, [r7, #18]
 8019602:	b29b      	uxth	r3, r3
 8019604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019608:	d108      	bne.n	801961c <hif_send+0x1e0>
                        M2M_INFO("Slowing down...\n");
 801960a:	4857      	ldr	r0, [pc, #348]	; (8019768 <hif_send+0x32c>)
 801960c:	f004 feca 	bl	801e3a4 <iprintf>
 8019610:	4856      	ldr	r0, [pc, #344]	; (801976c <hif_send+0x330>)
 8019612:	f004 ff35 	bl	801e480 <puts>
 8019616:	200d      	movs	r0, #13
 8019618:	f004 fed6 	bl	801e3c8 <putchar>
                    }
                    nm_bsp_sleep(5);
 801961c:	2005      	movs	r0, #5
 801961e:	f7ff fb79 	bl	8018d14 <nm_bsp_sleep>
                }
                if(!(reg & NBIT1))
 8019622:	69bb      	ldr	r3, [r7, #24]
 8019624:	f003 0302 	and.w	r3, r3, #2
 8019628:	2b00      	cmp	r3, #0
 801962a:	d10f      	bne.n	801964c <hif_send+0x210>
                {
                    ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4, (uint32 *)&dma_addr);
 801962c:	f107 0314 	add.w	r3, r7, #20
 8019630:	4619      	mov	r1, r3
 8019632:	484f      	ldr	r0, [pc, #316]	; (8019770 <hif_send+0x334>)
 8019634:	f002 f984 	bl	801b940 <nm_read_reg_with_ret>
 8019638:	4603      	mov	r3, r0
 801963a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(ret != M2M_SUCCESS) {
 801963e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019642:	2b00      	cmp	r3, #0
 8019644:	d010      	beq.n	8019668 <hif_send+0x22c>
                        /*in case of read error clear the DMA address and return error*/
                        dma_addr = 0;
 8019646:	2300      	movs	r3, #0
 8019648:	617b      	str	r3, [r7, #20]
                        goto ERR1;
 801964a:	e0db      	b.n	8019804 <hif_send+0x3c8>
            for(cnt = 0; cnt < 1000*5; cnt ++)
 801964c:	8a7b      	ldrh	r3, [r7, #18]
 801964e:	b29b      	uxth	r3, r3
 8019650:	3301      	adds	r3, #1
 8019652:	b29b      	uxth	r3, r3
 8019654:	827b      	strh	r3, [r7, #18]
 8019656:	8a7b      	ldrh	r3, [r7, #18]
 8019658:	b29b      	uxth	r3, r3
 801965a:	f241 3287 	movw	r2, #4999	; 0x1387
 801965e:	4293      	cmp	r3, r2
 8019660:	d9bb      	bls.n	80195da <hif_send+0x19e>
 8019662:	e002      	b.n	801966a <hif_send+0x22e>
                if(ret != M2M_SUCCESS) break;
 8019664:	bf00      	nop
 8019666:	e000      	b.n	801966a <hif_send+0x22e>
                    }
                    /*in case of success break */
                    break;
 8019668:	bf00      	nop
                }
            }

            if(dma_addr != 0)
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	2b00      	cmp	r3, #0
 801966e:	f000 8081 	beq.w	8019774 <hif_send+0x338>
            {
                volatile uint32 u32CurrAddr;
                u32CurrAddr = dma_addr;
 8019672:	697b      	ldr	r3, [r7, #20]
 8019674:	60fb      	str	r3, [r7, #12]
                strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8019676:	8bfb      	ldrh	r3, [r7, #30]
 8019678:	83fb      	strh	r3, [r7, #30]
                M2M_DBG("Writing into %lx %ld\n", dma_addr, strHif.u16Length);
                ret = nm_write_block(u32CurrAddr, (uint8 *)&strHif, M2M_HIF_HDR_OFFSET);
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	f107 011c 	add.w	r1, r7, #28
 8019680:	2208      	movs	r2, #8
 8019682:	4618      	mov	r0, r3
 8019684:	f002 f9e6 	bl	801ba54 <nm_write_block>
 8019688:	4603      	mov	r3, r0
 801968a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 801968e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019692:	2b00      	cmp	r3, #0
 8019694:	f040 80af 	bne.w	80197f6 <hif_send+0x3ba>
                u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	3308      	adds	r3, #8
 801969c:	60fb      	str	r3, [r7, #12]
                if(pu8CtrlBuf != NULL)
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d011      	beq.n	80196c8 <hif_send+0x28c>
                {
                    ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	88ba      	ldrh	r2, [r7, #4]
 80196a8:	6839      	ldr	r1, [r7, #0]
 80196aa:	4618      	mov	r0, r3
 80196ac:	f002 f9d2 	bl	801ba54 <nm_write_block>
 80196b0:	4603      	mov	r3, r0
 80196b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 80196b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	f040 809d 	bne.w	80197fa <hif_send+0x3be>
                    u32CurrAddr += u16CtrlBufSize;
 80196c0:	88ba      	ldrh	r2, [r7, #4]
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	4413      	add	r3, r2
 80196c6:	60fb      	str	r3, [r7, #12]
                }
                if(pu8DataBuf != NULL)
 80196c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d015      	beq.n	80196fa <hif_send+0x2be>
                {
                    u32CurrAddr += u32CtrlDataGap;
 80196ce:	68fa      	ldr	r2, [r7, #12]
 80196d0:	6a3b      	ldr	r3, [r7, #32]
 80196d2:	4413      	add	r3, r2
 80196d4:	60fb      	str	r3, [r7, #12]
                    ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80196da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196dc:	4618      	mov	r0, r3
 80196de:	f002 f9b9 	bl	801ba54 <nm_write_block>
 80196e2:	4603      	mov	r3, r0
 80196e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 80196e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	f040 8086 	bne.w	80197fe <hif_send+0x3c2>
                    u32CurrAddr += u16DataSize;
 80196f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	4413      	add	r3, r2
 80196f8:	60fb      	str	r3, [r7, #12]
                }

                reg = dma_addr << 2;
 80196fa:	697b      	ldr	r3, [r7, #20]
 80196fc:	009b      	lsls	r3, r3, #2
 80196fe:	61bb      	str	r3, [r7, #24]

                /* Following line of code is to generate the interrupt which is not strictly needed for 3400,
                 * but has no noticeable side effects
                 */
                reg |= NBIT1;
 8019700:	69bb      	ldr	r3, [r7, #24]
 8019702:	f043 0302 	orr.w	r3, r3, #2
 8019706:	61bb      	str	r3, [r7, #24]
                ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 8019708:	69bb      	ldr	r3, [r7, #24]
 801970a:	4619      	mov	r1, r3
 801970c:	f241 006c 	movw	r0, #4204	; 0x106c
 8019710:	f002 f924 	bl	801b95c <nm_write_reg>
 8019714:	4603      	mov	r3, r0
 8019716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 801971a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801971e:	2b00      	cmp	r3, #0
 8019720:	d16f      	bne.n	8019802 <hif_send+0x3c6>

                if(ISNMC3400(nmi_get_chipid())) {
 8019722:	f001 fcff 	bl	801b124 <nmi_get_chipid>
 8019726:	4602      	mov	r2, r0
 8019728:	4b0e      	ldr	r3, [pc, #56]	; (8019764 <hif_send+0x328>)
 801972a:	4013      	ands	r3, r2
 801972c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8019730:	d153      	bne.n	80197da <hif_send+0x39e>
                    ret = nm_write_reg(INTERRUPT_CORTUS_2_3000D0, 1);
 8019732:	2101      	movs	r1, #1
 8019734:	f241 00b0 	movw	r0, #4272	; 0x10b0
 8019738:	f002 f910 	bl	801b95c <nm_write_reg>
 801973c:	4603      	mov	r3, r0
 801973e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 8019742:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019746:	2b00      	cmp	r3, #0
 8019748:	d047      	beq.n	80197da <hif_send+0x39e>
 801974a:	e05b      	b.n	8019804 <hif_send+0x3c8>
 801974c:	08028ef8 	.word	0x08028ef8
 8019750:	080205b8 	.word	0x080205b8
 8019754:	08020628 	.word	0x08020628
 8019758:	08020630 	.word	0x08020630
 801975c:	08020650 	.word	0x08020650
 8019760:	08020658 	.word	0x08020658
 8019764:	fff0f000 	.word	0xfff0f000
 8019768:	0802067c 	.word	0x0802067c
 801976c:	08020688 	.word	0x08020688
 8019770:	00150400 	.word	0x00150400
                }
            }
            else
            {
                ret = hif_chip_sleep();
 8019774:	f7ff fd32 	bl	80191dc <hif_chip_sleep>
 8019778:	4603      	mov	r3, r0
 801977a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                M2M_INFO("Failed to alloc rx size\n");
 801977e:	4826      	ldr	r0, [pc, #152]	; (8019818 <hif_send+0x3dc>)
 8019780:	f004 fe10 	bl	801e3a4 <iprintf>
 8019784:	4825      	ldr	r0, [pc, #148]	; (801981c <hif_send+0x3e0>)
 8019786:	f004 fe7b 	bl	801e480 <puts>
 801978a:	200d      	movs	r0, #13
 801978c:	f004 fe1c 	bl	801e3c8 <putchar>
                ret =  M2M_ERR_MEM_ALLOC;
 8019790:	23fd      	movs	r3, #253	; 0xfd
 8019792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                goto ERR2;
 8019796:	e039      	b.n	801980c <hif_send+0x3d0>
            }
        }
        else
        {
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 8019798:	f240 224b 	movw	r2, #587	; 0x24b
 801979c:	4920      	ldr	r1, [pc, #128]	; (8019820 <hif_send+0x3e4>)
 801979e:	4821      	ldr	r0, [pc, #132]	; (8019824 <hif_send+0x3e8>)
 80197a0:	f004 fe00 	bl	801e3a4 <iprintf>
 80197a4:	4820      	ldr	r0, [pc, #128]	; (8019828 <hif_send+0x3ec>)
 80197a6:	f004 fe6b 	bl	801e480 <puts>
 80197aa:	200d      	movs	r0, #13
 80197ac:	f004 fe0c 	bl	801e3c8 <putchar>
            goto ERR2;
 80197b0:	e02c      	b.n	801980c <hif_send+0x3d0>
        }
    }
    else
    {
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n", strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 80197b2:	f240 2251 	movw	r2, #593	; 0x251
 80197b6:	491a      	ldr	r1, [pc, #104]	; (8019820 <hif_send+0x3e4>)
 80197b8:	481a      	ldr	r0, [pc, #104]	; (8019824 <hif_send+0x3e8>)
 80197ba:	f004 fdf3 	bl	801e3a4 <iprintf>
 80197be:	8bfb      	ldrh	r3, [r7, #30]
 80197c0:	f240 623c 	movw	r2, #1596	; 0x63c
 80197c4:	4619      	mov	r1, r3
 80197c6:	4819      	ldr	r0, [pc, #100]	; (801982c <hif_send+0x3f0>)
 80197c8:	f004 fdec 	bl	801e3a4 <iprintf>
 80197cc:	200d      	movs	r0, #13
 80197ce:	f004 fdfb 	bl	801e3c8 <putchar>
        ret = M2M_ERR_SEND;
 80197d2:	23ff      	movs	r3, #255	; 0xff
 80197d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto ERR2;
 80197d8:	e018      	b.n	801980c <hif_send+0x3d0>
    }
    /*actual sleep ret = M2M_SUCCESS*/
    ret = hif_chip_sleep();
 80197da:	f7ff fcff 	bl	80191dc <hif_chip_sleep>
 80197de:	4603      	mov	r3, r0
 80197e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return ret;
 80197e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80197e8:	e012      	b.n	8019810 <hif_send+0x3d4>
            if(M2M_SUCCESS != ret) goto ERR1;
 80197ea:	bf00      	nop
 80197ec:	e00a      	b.n	8019804 <hif_send+0x3c8>
            if(M2M_SUCCESS != ret) goto ERR1;
 80197ee:	bf00      	nop
 80197f0:	e008      	b.n	8019804 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 80197f2:	bf00      	nop
 80197f4:	e006      	b.n	8019804 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 80197f6:	bf00      	nop
 80197f8:	e004      	b.n	8019804 <hif_send+0x3c8>
                    if(M2M_SUCCESS != ret) goto ERR1;
 80197fa:	bf00      	nop
 80197fc:	e002      	b.n	8019804 <hif_send+0x3c8>
                    if(M2M_SUCCESS != ret) goto ERR1;
 80197fe:	bf00      	nop
 8019800:	e000      	b.n	8019804 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 8019802:	bf00      	nop
ERR1:
    /*reset the count but no actual sleep as it already bus error*/
    hif_chip_sleep_sc();
 8019804:	f7ff fcd4 	bl	80191b0 <hif_chip_sleep_sc>
 8019808:	e000      	b.n	801980c <hif_send+0x3d0>
        goto ERR2;
 801980a:	bf00      	nop
ERR2:
    /*logical error*/
    return ret;
 801980c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019810:	4618      	mov	r0, r3
 8019812:	3728      	adds	r7, #40	; 0x28
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}
 8019818:	0802067c 	.word	0x0802067c
 801981c:	08020698 	.word	0x08020698
 8019820:	08028ef8 	.word	0x08028ef8
 8019824:	080205b8 	.word	0x080205b8
 8019828:	080206b0 	.word	0x080206b0
 801982c:	080206d0 	.word	0x080206d0

08019830 <hif_isr>:
 *  @fn         hif_isr
 *  @brief      Host interface interrupt service routine
 *  @return     @ref M2M_SUCCESS in case of success or a negative vale otherwise
 */
static sint8 hif_isr(void)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b086      	sub	sp, #24
 8019834:	af02      	add	r7, sp, #8
    sint8 ret = M2M_SUCCESS;
 8019836:	2300      	movs	r3, #0
 8019838:	73fb      	strb	r3, [r7, #15]
    uint32 reg;
    volatile tstrHifHdr strHif;

    ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 801983a:	f107 0308 	add.w	r3, r7, #8
 801983e:	4619      	mov	r1, r3
 8019840:	f241 0070 	movw	r0, #4208	; 0x1070
 8019844:	f002 f87c 	bl	801b940 <nm_read_reg_with_ret>
 8019848:	4603      	mov	r3, r0
 801984a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS == ret)
 801984c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019850:	2b00      	cmp	r3, #0
 8019852:	f040 81bb 	bne.w	8019bcc <hif_isr+0x39c>
    {
        if(reg & 0x1)   /* New interrupt has been received */
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	f003 0301 	and.w	r3, r3, #1
 801985c:	2b00      	cmp	r3, #0
 801985e:	f000 81a6 	beq.w	8019bae <hif_isr+0x37e>
        {
            uint16 size;

            /*Clearing RX interrupt*/
            ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8019862:	f107 0308 	add.w	r3, r7, #8
 8019866:	4619      	mov	r1, r3
 8019868:	f241 0070 	movw	r0, #4208	; 0x1070
 801986c:	f002 f868 	bl	801b940 <nm_read_reg_with_ret>
 8019870:	4603      	mov	r3, r0
 8019872:	73fb      	strb	r3, [r7, #15]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019878:	2b00      	cmp	r3, #0
 801987a:	f040 81b4 	bne.w	8019be6 <hif_isr+0x3b6>
            reg &= ~NBIT0;
 801987e:	68bb      	ldr	r3, [r7, #8]
 8019880:	f023 0301 	bic.w	r3, r3, #1
 8019884:	60bb      	str	r3, [r7, #8]
            ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0, reg);
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	4619      	mov	r1, r3
 801988a:	f241 0070 	movw	r0, #4208	; 0x1070
 801988e:	f002 f865 	bl	801b95c <nm_write_reg>
 8019892:	4603      	mov	r3, r0
 8019894:	73fb      	strb	r3, [r7, #15]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801989a:	2b00      	cmp	r3, #0
 801989c:	f040 81a5 	bne.w	8019bea <hif_isr+0x3ba>
            /* read the rx size */
            ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 80198a0:	f107 0308 	add.w	r3, r7, #8
 80198a4:	4619      	mov	r1, r3
 80198a6:	f241 0070 	movw	r0, #4208	; 0x1070
 80198aa:	f002 f849 	bl	801b940 <nm_read_reg_with_ret>
 80198ae:	4603      	mov	r3, r0
 80198b0:	73fb      	strb	r3, [r7, #15]
            if(M2M_SUCCESS != ret)
 80198b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d00c      	beq.n	80198d4 <hif_isr+0xa4>
            {
                M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
 80198ba:	f240 227b 	movw	r2, #635	; 0x27b
 80198be:	49a6      	ldr	r1, [pc, #664]	; (8019b58 <hif_isr+0x328>)
 80198c0:	48a6      	ldr	r0, [pc, #664]	; (8019b5c <hif_isr+0x32c>)
 80198c2:	f004 fd6f 	bl	801e3a4 <iprintf>
 80198c6:	48a6      	ldr	r0, [pc, #664]	; (8019b60 <hif_isr+0x330>)
 80198c8:	f004 fdda 	bl	801e480 <puts>
 80198cc:	200d      	movs	r0, #13
 80198ce:	f004 fd7b 	bl	801e3c8 <putchar>
                goto ERR1;
 80198d2:	e18b      	b.n	8019bec <hif_isr+0x3bc>
            }
            gstrHifCxt.u8HifRXDone = 1;
 80198d4:	4ba3      	ldr	r3, [pc, #652]	; (8019b64 <hif_isr+0x334>)
 80198d6:	2201      	movs	r2, #1
 80198d8:	709a      	strb	r2, [r3, #2]
            size = (uint16)((reg >> 2) & 0xfff);
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	089b      	lsrs	r3, r3, #2
 80198de:	b29b      	uxth	r3, r3
 80198e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80198e4:	81bb      	strh	r3, [r7, #12]
            if(size > 0) {
 80198e6:	89bb      	ldrh	r3, [r7, #12]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	f000 8151 	beq.w	8019b90 <hif_isr+0x360>
                uint32 address = 0;
 80198ee:	2300      	movs	r3, #0
 80198f0:	603b      	str	r3, [r7, #0]
                /**
                start bus transfer
                **/
                ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 80198f2:	463b      	mov	r3, r7
 80198f4:	4619      	mov	r1, r3
 80198f6:	f241 0084 	movw	r0, #4228	; 0x1084
 80198fa:	f002 f821 	bl	801b940 <nm_read_reg_with_ret>
 80198fe:	4603      	mov	r3, r0
 8019900:	73fb      	strb	r3, [r7, #15]
                if(M2M_SUCCESS != ret)
 8019902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00c      	beq.n	8019924 <hif_isr+0xf4>
                {
                    M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 801990a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801990e:	4992      	ldr	r1, [pc, #584]	; (8019b58 <hif_isr+0x328>)
 8019910:	4892      	ldr	r0, [pc, #584]	; (8019b5c <hif_isr+0x32c>)
 8019912:	f004 fd47 	bl	801e3a4 <iprintf>
 8019916:	4894      	ldr	r0, [pc, #592]	; (8019b68 <hif_isr+0x338>)
 8019918:	f004 fdb2 	bl	801e480 <puts>
 801991c:	200d      	movs	r0, #13
 801991e:	f004 fd53 	bl	801e3c8 <putchar>
                    goto ERR1;
 8019922:	e163      	b.n	8019bec <hif_isr+0x3bc>
                }
                gstrHifCxt.u32RxAddr = address;
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	4a8f      	ldr	r2, [pc, #572]	; (8019b64 <hif_isr+0x334>)
 8019928:	6093      	str	r3, [r2, #8]
                gstrHifCxt.u32RxSize = size;
 801992a:	89bb      	ldrh	r3, [r7, #12]
 801992c:	4a8d      	ldr	r2, [pc, #564]	; (8019b64 <hif_isr+0x334>)
 801992e:	60d3      	str	r3, [r2, #12]
                ret = nm_read_block(address, (uint8 *)&strHif, sizeof(tstrHifHdr));
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	1d39      	adds	r1, r7, #4
 8019934:	2204      	movs	r2, #4
 8019936:	4618      	mov	r0, r3
 8019938:	f002 f830 	bl	801b99c <nm_read_block>
 801993c:	4603      	mov	r3, r0
 801993e:	73fb      	strb	r3, [r7, #15]
                strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8019940:	88fb      	ldrh	r3, [r7, #6]
 8019942:	b29b      	uxth	r3, r3
 8019944:	80fb      	strh	r3, [r7, #6]
                if(M2M_SUCCESS != ret)
 8019946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d00c      	beq.n	8019968 <hif_isr+0x138>
                {
                    M2M_ERR("(hif) address bus fail\n");
 801994e:	f240 2291 	movw	r2, #657	; 0x291
 8019952:	4981      	ldr	r1, [pc, #516]	; (8019b58 <hif_isr+0x328>)
 8019954:	4881      	ldr	r0, [pc, #516]	; (8019b5c <hif_isr+0x32c>)
 8019956:	f004 fd25 	bl	801e3a4 <iprintf>
 801995a:	4884      	ldr	r0, [pc, #528]	; (8019b6c <hif_isr+0x33c>)
 801995c:	f004 fd90 	bl	801e480 <puts>
 8019960:	200d      	movs	r0, #13
 8019962:	f004 fd31 	bl	801e3c8 <putchar>
                    goto ERR1;
 8019966:	e141      	b.n	8019bec <hif_isr+0x3bc>
                }
                if(strHif.u16Length != size)
 8019968:	88fb      	ldrh	r3, [r7, #6]
 801996a:	b29b      	uxth	r3, r3
 801996c:	89ba      	ldrh	r2, [r7, #12]
 801996e:	429a      	cmp	r2, r3
 8019970:	d01f      	beq.n	80199b2 <hif_isr+0x182>
                {
                    if((size - strHif.u16Length) > 4)
 8019972:	89bb      	ldrh	r3, [r7, #12]
 8019974:	88fa      	ldrh	r2, [r7, #6]
 8019976:	b292      	uxth	r2, r2
 8019978:	1a9b      	subs	r3, r3, r2
 801997a:	2b04      	cmp	r3, #4
 801997c:	dd19      	ble.n	80199b2 <hif_isr+0x182>
                    {
                        M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 801997e:	f44f 7226 	mov.w	r2, #664	; 0x298
 8019982:	4975      	ldr	r1, [pc, #468]	; (8019b58 <hif_isr+0x328>)
 8019984:	4875      	ldr	r0, [pc, #468]	; (8019b5c <hif_isr+0x32c>)
 8019986:	f004 fd0d 	bl	801e3a4 <iprintf>
 801998a:	89b9      	ldrh	r1, [r7, #12]
 801998c:	88fb      	ldrh	r3, [r7, #6]
 801998e:	b29b      	uxth	r3, r3
 8019990:	461a      	mov	r2, r3
 8019992:	793b      	ldrb	r3, [r7, #4]
 8019994:	b2db      	uxtb	r3, r3
 8019996:	4618      	mov	r0, r3
 8019998:	797b      	ldrb	r3, [r7, #5]
 801999a:	b2db      	uxtb	r3, r3
 801999c:	9300      	str	r3, [sp, #0]
 801999e:	4603      	mov	r3, r0
 80199a0:	4873      	ldr	r0, [pc, #460]	; (8019b70 <hif_isr+0x340>)
 80199a2:	f004 fcff 	bl	801e3a4 <iprintf>
 80199a6:	200d      	movs	r0, #13
 80199a8:	f004 fd0e 	bl	801e3c8 <putchar>
                                size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
                        ret = M2M_ERR_BUS_FAIL;
 80199ac:	23fa      	movs	r3, #250	; 0xfa
 80199ae:	73fb      	strb	r3, [r7, #15]
                        goto ERR1;
 80199b0:	e11c      	b.n	8019bec <hif_isr+0x3bc>
                    }
                }

                if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 80199b2:	793b      	ldrb	r3, [r7, #4]
 80199b4:	b2db      	uxtb	r3, r3
 80199b6:	2b01      	cmp	r3, #1
 80199b8:	d11c      	bne.n	80199f4 <hif_isr+0x1c4>
                {
                    if(gstrHifCxt.pfWifiCb)
 80199ba:	4b6a      	ldr	r3, [pc, #424]	; (8019b64 <hif_isr+0x334>)
 80199bc:	691b      	ldr	r3, [r3, #16]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d00b      	beq.n	80199da <hif_isr+0x1aa>
                        gstrHifCxt.pfWifiCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80199c2:	4b68      	ldr	r3, [pc, #416]	; (8019b64 <hif_isr+0x334>)
 80199c4:	691b      	ldr	r3, [r3, #16]
 80199c6:	797a      	ldrb	r2, [r7, #5]
 80199c8:	b2d0      	uxtb	r0, r2
 80199ca:	88fa      	ldrh	r2, [r7, #6]
 80199cc:	b292      	uxth	r2, r2
 80199ce:	3a08      	subs	r2, #8
 80199d0:	b291      	uxth	r1, r2
 80199d2:	683a      	ldr	r2, [r7, #0]
 80199d4:	3208      	adds	r2, #8
 80199d6:	4798      	blx	r3
 80199d8:	e09f      	b.n	8019b1a <hif_isr+0x2ea>
                    else
                        M2M_ERR("WIFI callback is not registered\n");
 80199da:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 80199de:	495e      	ldr	r1, [pc, #376]	; (8019b58 <hif_isr+0x328>)
 80199e0:	485e      	ldr	r0, [pc, #376]	; (8019b5c <hif_isr+0x32c>)
 80199e2:	f004 fcdf 	bl	801e3a4 <iprintf>
 80199e6:	4863      	ldr	r0, [pc, #396]	; (8019b74 <hif_isr+0x344>)
 80199e8:	f004 fd4a 	bl	801e480 <puts>
 80199ec:	200d      	movs	r0, #13
 80199ee:	f004 fceb 	bl	801e3c8 <putchar>
 80199f2:	e092      	b.n	8019b1a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 80199f4:	793b      	ldrb	r3, [r7, #4]
 80199f6:	b2db      	uxtb	r3, r3
 80199f8:	2b02      	cmp	r3, #2
 80199fa:	d11c      	bne.n	8019a36 <hif_isr+0x206>
                {
                    if(gstrHifCxt.pfIpCb)
 80199fc:	4b59      	ldr	r3, [pc, #356]	; (8019b64 <hif_isr+0x334>)
 80199fe:	695b      	ldr	r3, [r3, #20]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d00b      	beq.n	8019a1c <hif_isr+0x1ec>
                        gstrHifCxt.pfIpCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019a04:	4b57      	ldr	r3, [pc, #348]	; (8019b64 <hif_isr+0x334>)
 8019a06:	695b      	ldr	r3, [r3, #20]
 8019a08:	797a      	ldrb	r2, [r7, #5]
 8019a0a:	b2d0      	uxtb	r0, r2
 8019a0c:	88fa      	ldrh	r2, [r7, #6]
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	3a08      	subs	r2, #8
 8019a12:	b291      	uxth	r1, r2
 8019a14:	683a      	ldr	r2, [r7, #0]
 8019a16:	3208      	adds	r2, #8
 8019a18:	4798      	blx	r3
 8019a1a:	e07e      	b.n	8019b1a <hif_isr+0x2ea>
                    else
                        M2M_ERR("Socket callback is not registered\n");
 8019a1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019a20:	494d      	ldr	r1, [pc, #308]	; (8019b58 <hif_isr+0x328>)
 8019a22:	484e      	ldr	r0, [pc, #312]	; (8019b5c <hif_isr+0x32c>)
 8019a24:	f004 fcbe 	bl	801e3a4 <iprintf>
 8019a28:	4853      	ldr	r0, [pc, #332]	; (8019b78 <hif_isr+0x348>)
 8019a2a:	f004 fd29 	bl	801e480 <puts>
 8019a2e:	200d      	movs	r0, #13
 8019a30:	f004 fcca 	bl	801e3c8 <putchar>
 8019a34:	e071      	b.n	8019b1a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8019a36:	793b      	ldrb	r3, [r7, #4]
 8019a38:	b2db      	uxtb	r3, r3
 8019a3a:	2b04      	cmp	r3, #4
 8019a3c:	d11c      	bne.n	8019a78 <hif_isr+0x248>
                {
                    if(gstrHifCxt.pfOtaCb)
 8019a3e:	4b49      	ldr	r3, [pc, #292]	; (8019b64 <hif_isr+0x334>)
 8019a40:	699b      	ldr	r3, [r3, #24]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d00b      	beq.n	8019a5e <hif_isr+0x22e>
                        gstrHifCxt.pfOtaCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019a46:	4b47      	ldr	r3, [pc, #284]	; (8019b64 <hif_isr+0x334>)
 8019a48:	699b      	ldr	r3, [r3, #24]
 8019a4a:	797a      	ldrb	r2, [r7, #5]
 8019a4c:	b2d0      	uxtb	r0, r2
 8019a4e:	88fa      	ldrh	r2, [r7, #6]
 8019a50:	b292      	uxth	r2, r2
 8019a52:	3a08      	subs	r2, #8
 8019a54:	b291      	uxth	r1, r2
 8019a56:	683a      	ldr	r2, [r7, #0]
 8019a58:	3208      	adds	r2, #8
 8019a5a:	4798      	blx	r3
 8019a5c:	e05d      	b.n	8019b1a <hif_isr+0x2ea>
                    else
                        M2M_ERR("OTA callback is not registered\n");
 8019a5e:	f240 22b2 	movw	r2, #690	; 0x2b2
 8019a62:	493d      	ldr	r1, [pc, #244]	; (8019b58 <hif_isr+0x328>)
 8019a64:	483d      	ldr	r0, [pc, #244]	; (8019b5c <hif_isr+0x32c>)
 8019a66:	f004 fc9d 	bl	801e3a4 <iprintf>
 8019a6a:	4844      	ldr	r0, [pc, #272]	; (8019b7c <hif_isr+0x34c>)
 8019a6c:	f004 fd08 	bl	801e480 <puts>
 8019a70:	200d      	movs	r0, #13
 8019a72:	f004 fca9 	bl	801e3c8 <putchar>
 8019a76:	e050      	b.n	8019b1a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8019a78:	793b      	ldrb	r3, [r7, #4]
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	2b06      	cmp	r3, #6
 8019a7e:	d11c      	bne.n	8019aba <hif_isr+0x28a>
                {
                    if(gstrHifCxt.pfSigmaCb)
 8019a80:	4b38      	ldr	r3, [pc, #224]	; (8019b64 <hif_isr+0x334>)
 8019a82:	69db      	ldr	r3, [r3, #28]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d00b      	beq.n	8019aa0 <hif_isr+0x270>
                        gstrHifCxt.pfSigmaCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019a88:	4b36      	ldr	r3, [pc, #216]	; (8019b64 <hif_isr+0x334>)
 8019a8a:	69db      	ldr	r3, [r3, #28]
 8019a8c:	797a      	ldrb	r2, [r7, #5]
 8019a8e:	b2d0      	uxtb	r0, r2
 8019a90:	88fa      	ldrh	r2, [r7, #6]
 8019a92:	b292      	uxth	r2, r2
 8019a94:	3a08      	subs	r2, #8
 8019a96:	b291      	uxth	r1, r2
 8019a98:	683a      	ldr	r2, [r7, #0]
 8019a9a:	3208      	adds	r2, #8
 8019a9c:	4798      	blx	r3
 8019a9e:	e03c      	b.n	8019b1a <hif_isr+0x2ea>
                    else
                        M2M_ERR("Sigma callback is not registered\n");
 8019aa0:	f240 22b9 	movw	r2, #697	; 0x2b9
 8019aa4:	492c      	ldr	r1, [pc, #176]	; (8019b58 <hif_isr+0x328>)
 8019aa6:	482d      	ldr	r0, [pc, #180]	; (8019b5c <hif_isr+0x32c>)
 8019aa8:	f004 fc7c 	bl	801e3a4 <iprintf>
 8019aac:	4834      	ldr	r0, [pc, #208]	; (8019b80 <hif_isr+0x350>)
 8019aae:	f004 fce7 	bl	801e480 <puts>
 8019ab2:	200d      	movs	r0, #13
 8019ab4:	f004 fc88 	bl	801e3c8 <putchar>
 8019ab8:	e02f      	b.n	8019b1a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8019aba:	793b      	ldrb	r3, [r7, #4]
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	2b05      	cmp	r3, #5
 8019ac0:	d11c      	bne.n	8019afc <hif_isr+0x2cc>
                {
                    if(gstrHifCxt.pfSslCb)
 8019ac2:	4b28      	ldr	r3, [pc, #160]	; (8019b64 <hif_isr+0x334>)
 8019ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d00b      	beq.n	8019ae2 <hif_isr+0x2b2>
                        gstrHifCxt.pfSslCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019aca:	4b26      	ldr	r3, [pc, #152]	; (8019b64 <hif_isr+0x334>)
 8019acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ace:	797a      	ldrb	r2, [r7, #5]
 8019ad0:	b2d0      	uxtb	r0, r2
 8019ad2:	88fa      	ldrh	r2, [r7, #6]
 8019ad4:	b292      	uxth	r2, r2
 8019ad6:	3a08      	subs	r2, #8
 8019ad8:	b291      	uxth	r1, r2
 8019ada:	683a      	ldr	r2, [r7, #0]
 8019adc:	3208      	adds	r2, #8
 8019ade:	4798      	blx	r3
 8019ae0:	e01b      	b.n	8019b1a <hif_isr+0x2ea>
                    else
                        M2M_ERR("SSL callback is not registered\n");
 8019ae2:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8019ae6:	491c      	ldr	r1, [pc, #112]	; (8019b58 <hif_isr+0x328>)
 8019ae8:	481c      	ldr	r0, [pc, #112]	; (8019b5c <hif_isr+0x32c>)
 8019aea:	f004 fc5b 	bl	801e3a4 <iprintf>
 8019aee:	4825      	ldr	r0, [pc, #148]	; (8019b84 <hif_isr+0x354>)
 8019af0:	f004 fcc6 	bl	801e480 <puts>
 8019af4:	200d      	movs	r0, #13
 8019af6:	f004 fc67 	bl	801e3c8 <putchar>
 8019afa:	e00e      	b.n	8019b1a <hif_isr+0x2ea>
                }
                else
                {
                    M2M_ERR("(hif) invalid group ID\n");
 8019afc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019b00:	4915      	ldr	r1, [pc, #84]	; (8019b58 <hif_isr+0x328>)
 8019b02:	4816      	ldr	r0, [pc, #88]	; (8019b5c <hif_isr+0x32c>)
 8019b04:	f004 fc4e 	bl	801e3a4 <iprintf>
 8019b08:	481f      	ldr	r0, [pc, #124]	; (8019b88 <hif_isr+0x358>)
 8019b0a:	f004 fcb9 	bl	801e480 <puts>
 8019b0e:	200d      	movs	r0, #13
 8019b10:	f004 fc5a 	bl	801e3c8 <putchar>
                    ret = M2M_ERR_BUS_FAIL;
 8019b14:	23fa      	movs	r3, #250	; 0xfa
 8019b16:	73fb      	strb	r3, [r7, #15]
                    goto ERR1;
 8019b18:	e068      	b.n	8019bec <hif_isr+0x3bc>
                }
                if(gstrHifCxt.u8HifRXDone)
 8019b1a:	4b12      	ldr	r3, [pc, #72]	; (8019b64 <hif_isr+0x334>)
 8019b1c:	789b      	ldrb	r3, [r3, #2]
 8019b1e:	b2db      	uxtb	r3, r3
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d063      	beq.n	8019bec <hif_isr+0x3bc>
                {
                    M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 8019b24:	f240 22ca 	movw	r2, #714	; 0x2ca
 8019b28:	490b      	ldr	r1, [pc, #44]	; (8019b58 <hif_isr+0x328>)
 8019b2a:	480c      	ldr	r0, [pc, #48]	; (8019b5c <hif_isr+0x32c>)
 8019b2c:	f004 fc3a 	bl	801e3a4 <iprintf>
 8019b30:	793b      	ldrb	r3, [r7, #4]
 8019b32:	b2db      	uxtb	r3, r3
 8019b34:	4619      	mov	r1, r3
 8019b36:	797b      	ldrb	r3, [r7, #5]
 8019b38:	b2db      	uxtb	r3, r3
 8019b3a:	461a      	mov	r2, r3
 8019b3c:	4813      	ldr	r0, [pc, #76]	; (8019b8c <hif_isr+0x35c>)
 8019b3e:	f004 fc31 	bl	801e3a4 <iprintf>
 8019b42:	200d      	movs	r0, #13
 8019b44:	f004 fc40 	bl	801e3c8 <putchar>
                    ret = hif_set_rx_done();
 8019b48:	f7ff fa9e 	bl	8019088 <hif_set_rx_done>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	73fb      	strb	r3, [r7, #15]
                    if(ret != M2M_SUCCESS) goto ERR1;
 8019b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	e049      	b.n	8019bec <hif_isr+0x3bc>
 8019b58:	08028f04 	.word	0x08028f04
 8019b5c:	080205b8 	.word	0x080205b8
 8019b60:	08020704 	.word	0x08020704
 8019b64:	2001dea0 	.word	0x2001dea0
 8019b68:	08020728 	.word	0x08020728
 8019b6c:	0802074c 	.word	0x0802074c
 8019b70:	08020764 	.word	0x08020764
 8019b74:	080207a4 	.word	0x080207a4
 8019b78:	080207c4 	.word	0x080207c4
 8019b7c:	080207e8 	.word	0x080207e8
 8019b80:	08020808 	.word	0x08020808
 8019b84:	0802082c 	.word	0x0802082c
 8019b88:	0802084c 	.word	0x0802084c
 8019b8c:	08020864 	.word	0x08020864
                }
            }
            else
            {
                ret = M2M_ERR_RCV;
 8019b90:	23fe      	movs	r3, #254	; 0xfe
 8019b92:	73fb      	strb	r3, [r7, #15]
                M2M_ERR("(hif) Wrong Size\n");
 8019b94:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019b98:	4917      	ldr	r1, [pc, #92]	; (8019bf8 <hif_isr+0x3c8>)
 8019b9a:	4818      	ldr	r0, [pc, #96]	; (8019bfc <hif_isr+0x3cc>)
 8019b9c:	f004 fc02 	bl	801e3a4 <iprintf>
 8019ba0:	4817      	ldr	r0, [pc, #92]	; (8019c00 <hif_isr+0x3d0>)
 8019ba2:	f004 fc6d 	bl	801e480 <puts>
 8019ba6:	200d      	movs	r0, #13
 8019ba8:	f004 fc0e 	bl	801e3c8 <putchar>
                goto ERR1;
 8019bac:	e01e      	b.n	8019bec <hif_isr+0x3bc>
            }
        }
        else
        {
#ifndef WIN32
            M2M_ERR("(hif) False interrupt %lx", reg);
 8019bae:	f240 22d9 	movw	r2, #729	; 0x2d9
 8019bb2:	4911      	ldr	r1, [pc, #68]	; (8019bf8 <hif_isr+0x3c8>)
 8019bb4:	4811      	ldr	r0, [pc, #68]	; (8019bfc <hif_isr+0x3cc>)
 8019bb6:	f004 fbf5 	bl	801e3a4 <iprintf>
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	4811      	ldr	r0, [pc, #68]	; (8019c04 <hif_isr+0x3d4>)
 8019bc0:	f004 fbf0 	bl	801e3a4 <iprintf>
 8019bc4:	200d      	movs	r0, #13
 8019bc6:	f004 fbff 	bl	801e3c8 <putchar>
            goto ERR1;
 8019bca:	e00f      	b.n	8019bec <hif_isr+0x3bc>
#endif
        }
    }
    else
    {
        M2M_ERR("(hif) Failed to Read interrupt reg\n");
 8019bcc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019bd0:	4909      	ldr	r1, [pc, #36]	; (8019bf8 <hif_isr+0x3c8>)
 8019bd2:	480a      	ldr	r0, [pc, #40]	; (8019bfc <hif_isr+0x3cc>)
 8019bd4:	f004 fbe6 	bl	801e3a4 <iprintf>
 8019bd8:	480b      	ldr	r0, [pc, #44]	; (8019c08 <hif_isr+0x3d8>)
 8019bda:	f004 fc51 	bl	801e480 <puts>
 8019bde:	200d      	movs	r0, #13
 8019be0:	f004 fbf2 	bl	801e3c8 <putchar>
 8019be4:	e002      	b.n	8019bec <hif_isr+0x3bc>
            if(ret != M2M_SUCCESS)goto ERR1;
 8019be6:	bf00      	nop
 8019be8:	e000      	b.n	8019bec <hif_isr+0x3bc>
            if(ret != M2M_SUCCESS)goto ERR1;
 8019bea:	bf00      	nop
    }

ERR1:
    return ret;
 8019bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3710      	adds	r7, #16
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}
 8019bf8:	08028f04 	.word	0x08028f04
 8019bfc:	080205b8 	.word	0x080205b8
 8019c00:	08020890 	.word	0x08020890
 8019c04:	080208a4 	.word	0x080208a4
 8019c08:	080208c0 	.word	0x080208c0

08019c0c <hif_handle_isr>:
{
    gstrHifCxt.u8Yield = 1;
}

sint8 hif_handle_isr(void)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 8019c12:	2300      	movs	r3, #0
 8019c14:	71fb      	strb	r3, [r7, #7]

    gstrHifCxt.u8Yield = 0;
 8019c16:	4b29      	ldr	r3, [pc, #164]	; (8019cbc <hif_handle_isr+0xb0>)
 8019c18:	2200      	movs	r2, #0
 8019c1a:	711a      	strb	r2, [r3, #4]
    while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8019c1c:	e03e      	b.n	8019c9c <hif_handle_isr+0x90>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
        nm_bsp_interrupt_ctrl(0);
 8019c1e:	2000      	movs	r0, #0
 8019c20:	f7ff f88d 	bl	8018d3e <nm_bsp_interrupt_ctrl>
#endif
        gstrHifCxt.u8Interrupt--;
 8019c24:	4b25      	ldr	r3, [pc, #148]	; (8019cbc <hif_handle_isr+0xb0>)
 8019c26:	78db      	ldrb	r3, [r3, #3]
 8019c28:	b2db      	uxtb	r3, r3
 8019c2a:	3b01      	subs	r3, #1
 8019c2c:	b2da      	uxtb	r2, r3
 8019c2e:	4b23      	ldr	r3, [pc, #140]	; (8019cbc <hif_handle_isr+0xb0>)
 8019c30:	70da      	strb	r2, [r3, #3]
#ifndef NM_LEVEL_INTERRUPT
        nm_bsp_interrupt_ctrl(1);
 8019c32:	2001      	movs	r0, #1
 8019c34:	f7ff f883 	bl	8018d3e <nm_bsp_interrupt_ctrl>
#endif

        uint8 retries = 5;
 8019c38:	2305      	movs	r3, #5
 8019c3a:	71bb      	strb	r3, [r7, #6]
        while(1)
        {
            ret = hif_isr();
 8019c3c:	f7ff fdf8 	bl	8019830 <hif_isr>
 8019c40:	4603      	mov	r3, r0
 8019c42:	71fb      	strb	r3, [r7, #7]
            if(ret == M2M_SUCCESS) {
 8019c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d100      	bne.n	8019c4e <hif_handle_isr+0x42>
                /*we will try forever until we get that interrupt*/
                /*Fail return errors here due to bus errors (reading expected values)*/
                break;
 8019c4c:	e026      	b.n	8019c9c <hif_handle_isr+0x90>
            } else {
                retries--;
 8019c4e:	79bb      	ldrb	r3, [r7, #6]
 8019c50:	3b01      	subs	r3, #1
 8019c52:	71bb      	strb	r3, [r7, #6]
                if(!retries)
 8019c54:	79bb      	ldrb	r3, [r7, #6]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d10f      	bne.n	8019c7a <hif_handle_isr+0x6e>
                {
                    M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
 8019c5a:	f240 3211 	movw	r2, #785	; 0x311
 8019c5e:	4918      	ldr	r1, [pc, #96]	; (8019cc0 <hif_handle_isr+0xb4>)
 8019c60:	4818      	ldr	r0, [pc, #96]	; (8019cc4 <hif_handle_isr+0xb8>)
 8019c62:	f004 fb9f 	bl	801e3a4 <iprintf>
 8019c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c6a:	4619      	mov	r1, r3
 8019c6c:	4816      	ldr	r0, [pc, #88]	; (8019cc8 <hif_handle_isr+0xbc>)
 8019c6e:	f004 fb99 	bl	801e3a4 <iprintf>
 8019c72:	200d      	movs	r0, #13
 8019c74:	f004 fba8 	bl	801e3c8 <putchar>
                    break;
 8019c78:	e010      	b.n	8019c9c <hif_handle_isr+0x90>
                }
                else
                    M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
 8019c7a:	f240 3215 	movw	r2, #789	; 0x315
 8019c7e:	4910      	ldr	r1, [pc, #64]	; (8019cc0 <hif_handle_isr+0xb4>)
 8019c80:	4810      	ldr	r0, [pc, #64]	; (8019cc4 <hif_handle_isr+0xb8>)
 8019c82:	f004 fb8f 	bl	801e3a4 <iprintf>
 8019c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c8a:	79ba      	ldrb	r2, [r7, #6]
 8019c8c:	4619      	mov	r1, r3
 8019c8e:	480f      	ldr	r0, [pc, #60]	; (8019ccc <hif_handle_isr+0xc0>)
 8019c90:	f004 fb88 	bl	801e3a4 <iprintf>
 8019c94:	200d      	movs	r0, #13
 8019c96:	f004 fb97 	bl	801e3c8 <putchar>
            ret = hif_isr();
 8019c9a:	e7cf      	b.n	8019c3c <hif_handle_isr+0x30>
    while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8019c9c:	4b07      	ldr	r3, [pc, #28]	; (8019cbc <hif_handle_isr+0xb0>)
 8019c9e:	78db      	ldrb	r3, [r3, #3]
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d004      	beq.n	8019cb0 <hif_handle_isr+0xa4>
 8019ca6:	4b05      	ldr	r3, [pc, #20]	; (8019cbc <hif_handle_isr+0xb0>)
 8019ca8:	791b      	ldrb	r3, [r3, #4]
 8019caa:	b2db      	uxtb	r3, r3
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d0b6      	beq.n	8019c1e <hif_handle_isr+0x12>
            }
        }
    }

    return ret;
 8019cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	3708      	adds	r7, #8
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}
 8019cbc:	2001dea0 	.word	0x2001dea0
 8019cc0:	08028f0c 	.word	0x08028f0c
 8019cc4:	080205b8 	.word	0x080205b8
 8019cc8:	080208e4 	.word	0x080208e4
 8019ccc:	0802092c 	.word	0x0802092c

08019cd0 <hif_receive>:
 *  @param[in]  isDone
 *                  If you don't need any more packets send True otherwise send false
 *   @return    The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b086      	sub	sp, #24
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	4611      	mov	r1, r2
 8019cdc:	461a      	mov	r2, r3
 8019cde:	460b      	mov	r3, r1
 8019ce0:	80fb      	strh	r3, [r7, #6]
 8019ce2:	4613      	mov	r3, r2
 8019ce4:	717b      	strb	r3, [r7, #5]
    sint8 ret = M2M_SUCCESS;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	75fb      	strb	r3, [r7, #23]

    if((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0))
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d005      	beq.n	8019cfc <hif_receive+0x2c>
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d002      	beq.n	8019cfc <hif_receive+0x2c>
 8019cf6:	88fb      	ldrh	r3, [r7, #6]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d116      	bne.n	8019d2a <hif_receive+0x5a>
    {
        if(isDone)
 8019cfc:	797b      	ldrb	r3, [r7, #5]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d004      	beq.n	8019d0c <hif_receive+0x3c>
        {
            ret = hif_set_rx_done();
 8019d02:	f7ff f9c1 	bl	8019088 <hif_set_rx_done>
 8019d06:	4603      	mov	r3, r0
 8019d08:	75fb      	strb	r3, [r7, #23]
        else
        {
            ret = M2M_ERR_FAIL;
            M2M_ERR(" hif_receive: Invalid argument\n");
        }
        goto ERR1;
 8019d0a:	e077      	b.n	8019dfc <hif_receive+0x12c>
            ret = M2M_ERR_FAIL;
 8019d0c:	23f4      	movs	r3, #244	; 0xf4
 8019d0e:	75fb      	strb	r3, [r7, #23]
            M2M_ERR(" hif_receive: Invalid argument\n");
 8019d10:	f240 3237 	movw	r2, #823	; 0x337
 8019d14:	493c      	ldr	r1, [pc, #240]	; (8019e08 <hif_receive+0x138>)
 8019d16:	483d      	ldr	r0, [pc, #244]	; (8019e0c <hif_receive+0x13c>)
 8019d18:	f004 fb44 	bl	801e3a4 <iprintf>
 8019d1c:	483c      	ldr	r0, [pc, #240]	; (8019e10 <hif_receive+0x140>)
 8019d1e:	f004 fbaf 	bl	801e480 <puts>
 8019d22:	200d      	movs	r0, #13
 8019d24:	f004 fb50 	bl	801e3c8 <putchar>
        goto ERR1;
 8019d28:	e068      	b.n	8019dfc <hif_receive+0x12c>
    }

    if(u16Sz > gstrHifCxt.u32RxSize)
 8019d2a:	88fa      	ldrh	r2, [r7, #6]
 8019d2c:	4b39      	ldr	r3, [pc, #228]	; (8019e14 <hif_receive+0x144>)
 8019d2e:	68db      	ldr	r3, [r3, #12]
 8019d30:	429a      	cmp	r2, r3
 8019d32:	d912      	bls.n	8019d5a <hif_receive+0x8a>
    {
        ret = M2M_ERR_FAIL;
 8019d34:	23f4      	movs	r3, #244	; 0xf4
 8019d36:	75fb      	strb	r3, [r7, #23]
        M2M_ERR("APP Requested Size is larger than the received buffer size <%d> <%lu>\n", u16Sz, gstrHifCxt.u32RxSize);
 8019d38:	f240 323f 	movw	r2, #831	; 0x33f
 8019d3c:	4932      	ldr	r1, [pc, #200]	; (8019e08 <hif_receive+0x138>)
 8019d3e:	4833      	ldr	r0, [pc, #204]	; (8019e0c <hif_receive+0x13c>)
 8019d40:	f004 fb30 	bl	801e3a4 <iprintf>
 8019d44:	88fb      	ldrh	r3, [r7, #6]
 8019d46:	4a33      	ldr	r2, [pc, #204]	; (8019e14 <hif_receive+0x144>)
 8019d48:	68d2      	ldr	r2, [r2, #12]
 8019d4a:	4619      	mov	r1, r3
 8019d4c:	4832      	ldr	r0, [pc, #200]	; (8019e18 <hif_receive+0x148>)
 8019d4e:	f004 fb29 	bl	801e3a4 <iprintf>
 8019d52:	200d      	movs	r0, #13
 8019d54:	f004 fb38 	bl	801e3c8 <putchar>
        goto ERR1;
 8019d58:	e050      	b.n	8019dfc <hif_receive+0x12c>
    }
    if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize)))
 8019d5a:	4b2e      	ldr	r3, [pc, #184]	; (8019e14 <hif_receive+0x144>)
 8019d5c:	689b      	ldr	r3, [r3, #8]
 8019d5e:	68fa      	ldr	r2, [r7, #12]
 8019d60:	429a      	cmp	r2, r3
 8019d62:	d309      	bcc.n	8019d78 <hif_receive+0xa8>
 8019d64:	88fa      	ldrh	r2, [r7, #6]
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	441a      	add	r2, r3
 8019d6a:	4b2a      	ldr	r3, [pc, #168]	; (8019e14 <hif_receive+0x144>)
 8019d6c:	6899      	ldr	r1, [r3, #8]
 8019d6e:	4b29      	ldr	r3, [pc, #164]	; (8019e14 <hif_receive+0x144>)
 8019d70:	68db      	ldr	r3, [r3, #12]
 8019d72:	440b      	add	r3, r1
 8019d74:	429a      	cmp	r2, r3
 8019d76:	d90e      	bls.n	8019d96 <hif_receive+0xc6>
    {
        ret = M2M_ERR_FAIL;
 8019d78:	23f4      	movs	r3, #244	; 0xf4
 8019d7a:	75fb      	strb	r3, [r7, #23]
        M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 8019d7c:	f240 3245 	movw	r2, #837	; 0x345
 8019d80:	4921      	ldr	r1, [pc, #132]	; (8019e08 <hif_receive+0x138>)
 8019d82:	4822      	ldr	r0, [pc, #136]	; (8019e0c <hif_receive+0x13c>)
 8019d84:	f004 fb0e 	bl	801e3a4 <iprintf>
 8019d88:	4824      	ldr	r0, [pc, #144]	; (8019e1c <hif_receive+0x14c>)
 8019d8a:	f004 fb79 	bl	801e480 <puts>
 8019d8e:	200d      	movs	r0, #13
 8019d90:	f004 fb1a 	bl	801e3c8 <putchar>
        goto ERR1;
 8019d94:	e032      	b.n	8019dfc <hif_receive+0x12c>
    }

    /* Receive the payload */
    ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8019d96:	88fb      	ldrh	r3, [r7, #6]
 8019d98:	461a      	mov	r2, r3
 8019d9a:	68b9      	ldr	r1, [r7, #8]
 8019d9c:	68f8      	ldr	r0, [r7, #12]
 8019d9e:	f001 fdfd 	bl	801b99c <nm_read_block>
 8019da2:	4603      	mov	r3, r0
 8019da4:	75fb      	strb	r3, [r7, #23]
    if(ret != M2M_SUCCESS)goto ERR1;
 8019da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d123      	bne.n	8019df6 <hif_receive+0x126>

    /* check if this is the last packet */
    if(isDone || (((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz)) <= 0) ||
 8019dae:	797b      	ldrb	r3, [r7, #5]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d11b      	bne.n	8019dec <hif_receive+0x11c>
 8019db4:	4b17      	ldr	r3, [pc, #92]	; (8019e14 <hif_receive+0x144>)
 8019db6:	689a      	ldr	r2, [r3, #8]
 8019db8:	4b16      	ldr	r3, [pc, #88]	; (8019e14 <hif_receive+0x144>)
 8019dba:	68db      	ldr	r3, [r3, #12]
 8019dbc:	441a      	add	r2, r3
 8019dbe:	88f9      	ldrh	r1, [r7, #6]
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	440b      	add	r3, r1
 8019dc4:	429a      	cmp	r2, r3
 8019dc6:	d011      	beq.n	8019dec <hif_receive+0x11c>
            ((4 - ((u32Addr+u16Sz) & 3)) == ((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz))))   /* Length in the RCV CTRL 0 register is rounded off to 4 by the firmware,
 8019dc8:	88fa      	ldrh	r2, [r7, #6]
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	4413      	add	r3, r2
 8019dce:	f003 0303 	and.w	r3, r3, #3
 8019dd2:	f1c3 0204 	rsb	r2, r3, #4
 8019dd6:	4b0f      	ldr	r3, [pc, #60]	; (8019e14 <hif_receive+0x144>)
 8019dd8:	6899      	ldr	r1, [r3, #8]
 8019dda:	4b0e      	ldr	r3, [pc, #56]	; (8019e14 <hif_receive+0x144>)
 8019ddc:	68db      	ldr	r3, [r3, #12]
 8019dde:	4419      	add	r1, r3
 8019de0:	88f8      	ldrh	r0, [r7, #6]
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	4403      	add	r3, r0
 8019de6:	1acb      	subs	r3, r1, r3
    if(isDone || (((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz)) <= 0) ||
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d106      	bne.n	8019dfa <hif_receive+0x12a>
                                                                                   but length inside the HIF header is not, Hence consider done if number
                                                                                   of rounding bytes equal to length left to read */
    {
        /* set RX done */
        ret = hif_set_rx_done();
 8019dec:	f7ff f94c 	bl	8019088 <hif_set_rx_done>
 8019df0:	4603      	mov	r3, r0
 8019df2:	75fb      	strb	r3, [r7, #23]
 8019df4:	e002      	b.n	8019dfc <hif_receive+0x12c>
    if(ret != M2M_SUCCESS)goto ERR1;
 8019df6:	bf00      	nop
 8019df8:	e000      	b.n	8019dfc <hif_receive+0x12c>
    }
ERR1:
 8019dfa:	bf00      	nop
    return ret;
 8019dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3718      	adds	r7, #24
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}
 8019e08:	08028f1c 	.word	0x08028f1c
 8019e0c:	080205b8 	.word	0x080205b8
 8019e10:	08020964 	.word	0x08020964
 8019e14:	2001dea0 	.word	0x2001dea0
 8019e18:	08020984 	.word	0x08020984
 8019e1c:	080209cc 	.word	0x080209cc

08019e20 <hif_register_cb>:
 *                  function to be set
 *   @return    The function shall return ZERO for successful operation and a negative value otherwise.
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b084      	sub	sp, #16
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	4603      	mov	r3, r0
 8019e28:	6039      	str	r1, [r7, #0]
 8019e2a:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	73fb      	strb	r3, [r7, #15]
    switch(u8Grp)
 8019e30:	79fb      	ldrb	r3, [r7, #7]
 8019e32:	3b01      	subs	r3, #1
 8019e34:	2b05      	cmp	r3, #5
 8019e36:	d827      	bhi.n	8019e88 <hif_register_cb+0x68>
 8019e38:	a201      	add	r2, pc, #4	; (adr r2, 8019e40 <hif_register_cb+0x20>)
 8019e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e3e:	bf00      	nop
 8019e40:	08019e61 	.word	0x08019e61
 8019e44:	08019e59 	.word	0x08019e59
 8019e48:	08019e71 	.word	0x08019e71
 8019e4c:	08019e69 	.word	0x08019e69
 8019e50:	08019e81 	.word	0x08019e81
 8019e54:	08019e79 	.word	0x08019e79
    {
        case M2M_REQ_GROUP_IP:
            gstrHifCxt.pfIpCb = fn;
 8019e58:	4a17      	ldr	r2, [pc, #92]	; (8019eb8 <hif_register_cb+0x98>)
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	6153      	str	r3, [r2, #20]
            break;
 8019e5e:	e024      	b.n	8019eaa <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_WIFI:
            gstrHifCxt.pfWifiCb = fn;
 8019e60:	4a15      	ldr	r2, [pc, #84]	; (8019eb8 <hif_register_cb+0x98>)
 8019e62:	683b      	ldr	r3, [r7, #0]
 8019e64:	6113      	str	r3, [r2, #16]
            break;
 8019e66:	e020      	b.n	8019eaa <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_OTA:
            gstrHifCxt.pfOtaCb = fn;
 8019e68:	4a13      	ldr	r2, [pc, #76]	; (8019eb8 <hif_register_cb+0x98>)
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	6193      	str	r3, [r2, #24]
            break;
 8019e6e:	e01c      	b.n	8019eaa <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_HIF:
            gstrHifCxt.pfHifCb = fn;
 8019e70:	4a11      	ldr	r2, [pc, #68]	; (8019eb8 <hif_register_cb+0x98>)
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	6213      	str	r3, [r2, #32]
            break;
 8019e76:	e018      	b.n	8019eaa <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_SIGMA:
            gstrHifCxt.pfSigmaCb = fn;
 8019e78:	4a0f      	ldr	r2, [pc, #60]	; (8019eb8 <hif_register_cb+0x98>)
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	61d3      	str	r3, [r2, #28]
            break;
 8019e7e:	e014      	b.n	8019eaa <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_SSL:
            gstrHifCxt.pfSslCb = fn;
 8019e80:	4a0d      	ldr	r2, [pc, #52]	; (8019eb8 <hif_register_cb+0x98>)
 8019e82:	683b      	ldr	r3, [r7, #0]
 8019e84:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8019e86:	e010      	b.n	8019eaa <hif_register_cb+0x8a>
        default:
            M2M_ERR("GRp ? %d\n", u8Grp);
 8019e88:	f44f 725f 	mov.w	r2, #892	; 0x37c
 8019e8c:	490b      	ldr	r1, [pc, #44]	; (8019ebc <hif_register_cb+0x9c>)
 8019e8e:	480c      	ldr	r0, [pc, #48]	; (8019ec0 <hif_register_cb+0xa0>)
 8019e90:	f004 fa88 	bl	801e3a4 <iprintf>
 8019e94:	79fb      	ldrb	r3, [r7, #7]
 8019e96:	4619      	mov	r1, r3
 8019e98:	480a      	ldr	r0, [pc, #40]	; (8019ec4 <hif_register_cb+0xa4>)
 8019e9a:	f004 fa83 	bl	801e3a4 <iprintf>
 8019e9e:	200d      	movs	r0, #13
 8019ea0:	f004 fa92 	bl	801e3c8 <putchar>
            ret = M2M_ERR_FAIL;
 8019ea4:	23f4      	movs	r3, #244	; 0xf4
 8019ea6:	73fb      	strb	r3, [r7, #15]
            break;
 8019ea8:	bf00      	nop
    }
    return ret;
 8019eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019eae:	4618      	mov	r0, r3
 8019eb0:	3710      	adds	r7, #16
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}
 8019eb6:	bf00      	nop
 8019eb8:	2001dea0 	.word	0x2001dea0
 8019ebc:	08028f28 	.word	0x08028f28
 8019ec0:	080205b8 	.word	0x080205b8
 8019ec4:	08020a10 	.word	0x08020a10

08019ec8 <m2m_periph_pullup_ctrl>:
    return M2M_ERR_INVALID_REQ;
}
#endif

sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b082      	sub	sp, #8
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
 8019ed0:	460b      	mov	r3, r1
 8019ed2:	70fb      	strb	r3, [r7, #3]
    return pullup_ctrl(pinmask, enable);
 8019ed4:	78fb      	ldrb	r3, [r7, #3]
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f001 fc07 	bl	801b6ec <pullup_ctrl>
 8019ede:	4603      	mov	r3, r0
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3708      	adds	r7, #8
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}

08019ee8 <m2m_wifi_cb>:
*                   HIF address.
*   @param [in] grp
*                   HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b0b2      	sub	sp, #200	; 0xc8
 8019eec:	af02      	add	r7, sp, #8
 8019eee:	4603      	mov	r3, r0
 8019ef0:	603a      	str	r2, [r7, #0]
 8019ef2:	71fb      	strb	r3, [r7, #7]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8019ef8:	79fb      	ldrb	r3, [r7, #7]
 8019efa:	2b2c      	cmp	r3, #44	; 0x2c
 8019efc:	d117      	bne.n	8019f2e <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 8019efe:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8019f02:	2300      	movs	r3, #0
 8019f04:	2204      	movs	r2, #4
 8019f06:	6838      	ldr	r0, [r7, #0]
 8019f08:	f7ff fee2 	bl	8019cd0 <hif_receive>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	f040 8217 	bne.w	801a342 <m2m_wifi_cb+0x45a>
        {
            if(gpfAppWifiCb)
 8019f14:	4baf      	ldr	r3, [pc, #700]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 8212 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 8019f1e:	4bad      	ldr	r3, [pc, #692]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8019f26:	4611      	mov	r1, r2
 8019f28:	202c      	movs	r0, #44	; 0x2c
 8019f2a:	4798      	blx	r3
#endif
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 8019f2c:	e209      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 8019f2e:	79fb      	ldrb	r3, [r7, #7]
 8019f30:	2b1d      	cmp	r3, #29
 8019f32:	d117      	bne.n	8019f64 <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 8019f34:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8019f38:	2300      	movs	r3, #0
 8019f3a:	2208      	movs	r2, #8
 8019f3c:	6838      	ldr	r0, [r7, #0]
 8019f3e:	f7ff fec7 	bl	8019cd0 <hif_receive>
 8019f42:	4603      	mov	r3, r0
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	f040 81fc 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019f4a:	4ba2      	ldr	r3, [pc, #648]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	f000 81f7 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 8019f54:	4b9f      	ldr	r3, [pc, #636]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8019f5c:	4611      	mov	r1, r2
 8019f5e:	201d      	movs	r0, #29
 8019f60:	4798      	blx	r3
}
 8019f62:	e1ee      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 8019f64:	79fb      	ldrb	r3, [r7, #7]
 8019f66:	2b08      	cmp	r3, #8
 8019f68:	d117      	bne.n	8019f9a <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 8019f6a:	f107 010c 	add.w	r1, r7, #12
 8019f6e:	2301      	movs	r3, #1
 8019f70:	2230      	movs	r2, #48	; 0x30
 8019f72:	6838      	ldr	r0, [r7, #0]
 8019f74:	f7ff feac 	bl	8019cd0 <hif_receive>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	f040 81e1 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019f80:	4b94      	ldr	r3, [pc, #592]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	f000 81dc 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 8019f8a:	4b92      	ldr	r3, [pc, #584]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f107 020c 	add.w	r2, r7, #12
 8019f92:	4611      	mov	r1, r2
 8019f94:	2008      	movs	r0, #8
 8019f96:	4798      	blx	r3
}
 8019f98:	e1d3      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 8019f9a:	79fb      	ldrb	r3, [r7, #7]
 8019f9c:	2b10      	cmp	r3, #16
 8019f9e:	f000 81d0 	beq.w	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 8019fa2:	79fb      	ldrb	r3, [r7, #7]
 8019fa4:	2b32      	cmp	r3, #50	; 0x32
 8019fa6:	d117      	bne.n	8019fd8 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 8019fa8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8019fac:	2300      	movs	r3, #0
 8019fae:	2214      	movs	r2, #20
 8019fb0:	6838      	ldr	r0, [r7, #0]
 8019fb2:	f7ff fe8d 	bl	8019cd0 <hif_receive>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	f040 81c2 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019fbe:	4b85      	ldr	r3, [pc, #532]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	f000 81bd 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 8019fc8:	4b82      	ldr	r3, [pc, #520]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8019fd0:	4611      	mov	r1, r2
 8019fd2:	2032      	movs	r0, #50	; 0x32
 8019fd4:	4798      	blx	r3
}
 8019fd6:	e1b4      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 8019fd8:	79fb      	ldrb	r3, [r7, #7]
 8019fda:	2b2f      	cmp	r3, #47	; 0x2f
 8019fdc:	d11e      	bne.n	801a01c <m2m_wifi_cb+0x134>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 8019fde:	f107 030c 	add.w	r3, r7, #12
 8019fe2:	2268      	movs	r2, #104	; 0x68
 8019fe4:	2100      	movs	r1, #0
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f7fe ffa8 	bl	8018f3c <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8019fec:	f107 010c 	add.w	r1, r7, #12
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	2268      	movs	r2, #104	; 0x68
 8019ff4:	6838      	ldr	r0, [r7, #0]
 8019ff6:	f7ff fe6b 	bl	8019cd0 <hif_receive>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f040 81a0 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a002:	4b74      	ldr	r3, [pc, #464]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	2b00      	cmp	r3, #0
 801a008:	f000 819b 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 801a00c:	4b71      	ldr	r3, [pc, #452]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	f107 020c 	add.w	r2, r7, #12
 801a014:	4611      	mov	r1, r2
 801a016:	202f      	movs	r0, #47	; 0x2f
 801a018:	4798      	blx	r3
}
 801a01a:	e192      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 801a01c:	79fb      	ldrb	r3, [r7, #7]
 801a01e:	2b34      	cmp	r3, #52	; 0x34
 801a020:	d132      	bne.n	801a088 <m2m_wifi_cb+0x1a0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 801a022:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801a026:	2300      	movs	r3, #0
 801a028:	2204      	movs	r2, #4
 801a02a:	6838      	ldr	r0, [r7, #0]
 801a02c:	f7ff fe50 	bl	8019cd0 <hif_receive>
 801a030:	4603      	mov	r3, r0
 801a032:	2b00      	cmp	r3, #0
 801a034:	f040 8185 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 801a038:	4867      	ldr	r0, [pc, #412]	; (801a1d8 <m2m_wifi_cb+0x2f0>)
 801a03a:	f004 f9b3 	bl	801e3a4 <iprintf>
 801a03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a042:	b2db      	uxtb	r3, r3
 801a044:	4619      	mov	r1, r3
 801a046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a04a:	0a1b      	lsrs	r3, r3, #8
 801a04c:	b2db      	uxtb	r3, r3
 801a04e:	461a      	mov	r2, r3
 801a050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a054:	0c1b      	lsrs	r3, r3, #16
 801a056:	b2db      	uxtb	r3, r3
 801a058:	4618      	mov	r0, r3
 801a05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a05e:	0e1b      	lsrs	r3, r3, #24
 801a060:	b2db      	uxtb	r3, r3
 801a062:	9300      	str	r3, [sp, #0]
 801a064:	4603      	mov	r3, r0
 801a066:	485d      	ldr	r0, [pc, #372]	; (801a1dc <m2m_wifi_cb+0x2f4>)
 801a068:	f004 f99c 	bl	801e3a4 <iprintf>
 801a06c:	200d      	movs	r0, #13
 801a06e:	f004 f9ab 	bl	801e3c8 <putchar>
            if(gpfAppWifiCb)
 801a072:	4b58      	ldr	r3, [pc, #352]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	2b00      	cmp	r3, #0
 801a078:	f000 8163 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 801a07c:	4b55      	ldr	r3, [pc, #340]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	2100      	movs	r1, #0
 801a082:	2034      	movs	r0, #52	; 0x34
 801a084:	4798      	blx	r3
}
 801a086:	e15c      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 801a088:	79fb      	ldrb	r3, [r7, #7]
 801a08a:	2b13      	cmp	r3, #19
 801a08c:	d11b      	bne.n	801a0c6 <m2m_wifi_cb+0x1de>
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 801a08e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a092:	2300      	movs	r3, #0
 801a094:	2204      	movs	r2, #4
 801a096:	6838      	ldr	r0, [r7, #0]
 801a098:	f7ff fe1a 	bl	8019cd0 <hif_receive>
 801a09c:	4603      	mov	r3, r0
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	f040 814f 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            gu8ChNum = strState.u8NumofCh;
 801a0a4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801a0a8:	4b4d      	ldr	r3, [pc, #308]	; (801a1e0 <m2m_wifi_cb+0x2f8>)
 801a0aa:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 801a0ac:	4b49      	ldr	r3, [pc, #292]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	f000 8146 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 801a0b6:	4b47      	ldr	r3, [pc, #284]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a0be:	4611      	mov	r1, r2
 801a0c0:	2013      	movs	r0, #19
 801a0c2:	4798      	blx	r3
}
 801a0c4:	e13d      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 801a0c6:	79fb      	ldrb	r3, [r7, #7]
 801a0c8:	2b15      	cmp	r3, #21
 801a0ca:	d117      	bne.n	801a0fc <m2m_wifi_cb+0x214>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 801a0cc:	f107 010c 	add.w	r1, r7, #12
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	222c      	movs	r2, #44	; 0x2c
 801a0d4:	6838      	ldr	r0, [r7, #0]
 801a0d6:	f7ff fdfb 	bl	8019cd0 <hif_receive>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	f040 8130 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a0e2:	4b3c      	ldr	r3, [pc, #240]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f000 812b 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 801a0ec:	4b39      	ldr	r3, [pc, #228]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	f107 020c 	add.w	r2, r7, #12
 801a0f4:	4611      	mov	r1, r2
 801a0f6:	2015      	movs	r0, #21
 801a0f8:	4798      	blx	r3
}
 801a0fa:	e122      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 801a0fc:	79fb      	ldrb	r3, [r7, #7]
 801a0fe:	2b04      	cmp	r3, #4
 801a100:	d117      	bne.n	801a132 <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 801a102:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a106:	2300      	movs	r3, #0
 801a108:	2204      	movs	r2, #4
 801a10a:	6838      	ldr	r0, [r7, #0]
 801a10c:	f7ff fde0 	bl	8019cd0 <hif_receive>
 801a110:	4603      	mov	r3, r0
 801a112:	2b00      	cmp	r3, #0
 801a114:	f040 8115 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a118:	4b2e      	ldr	r3, [pc, #184]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	f000 8110 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 801a122:	4b2c      	ldr	r3, [pc, #176]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a12a:	4611      	mov	r1, r2
 801a12c:	2004      	movs	r0, #4
 801a12e:	4798      	blx	r3
}
 801a130:	e107      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 801a132:	79fb      	ldrb	r3, [r7, #7]
 801a134:	2b65      	cmp	r3, #101	; 0x65
 801a136:	d117      	bne.n	801a168 <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 801a138:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a13c:	2300      	movs	r3, #0
 801a13e:	2204      	movs	r2, #4
 801a140:	6838      	ldr	r0, [r7, #0]
 801a142:	f7ff fdc5 	bl	8019cd0 <hif_receive>
 801a146:	4603      	mov	r3, r0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	f040 80fa 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a14e:	4b21      	ldr	r3, [pc, #132]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	2b00      	cmp	r3, #0
 801a154:	f000 80f5 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 801a158:	4b1e      	ldr	r3, [pc, #120]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a160:	4611      	mov	r1, r2
 801a162:	2065      	movs	r0, #101	; 0x65
 801a164:	4798      	blx	r3
}
 801a166:	e0ec      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 801a168:	79fb      	ldrb	r3, [r7, #7]
 801a16a:	2b0b      	cmp	r3, #11
 801a16c:	d117      	bne.n	801a19e <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 801a16e:	f107 010c 	add.w	r1, r7, #12
 801a172:	2301      	movs	r3, #1
 801a174:	2264      	movs	r2, #100	; 0x64
 801a176:	6838      	ldr	r0, [r7, #0]
 801a178:	f7ff fdaa 	bl	8019cd0 <hif_receive>
 801a17c:	4603      	mov	r3, r0
 801a17e:	2b00      	cmp	r3, #0
 801a180:	f040 80df 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a184:	4b13      	ldr	r3, [pc, #76]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	f000 80da 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 801a18e:	4b11      	ldr	r3, [pc, #68]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	f107 020c 	add.w	r2, r7, #12
 801a196:	4611      	mov	r1, r2
 801a198:	200b      	movs	r0, #11
 801a19a:	4798      	blx	r3
}
 801a19c:	e0d1      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 801a19e:	79fb      	ldrb	r3, [r7, #7]
 801a1a0:	2b2a      	cmp	r3, #42	; 0x2a
 801a1a2:	d11f      	bne.n	801a1e4 <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 801a1a4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	2204      	movs	r2, #4
 801a1ac:	6838      	ldr	r0, [r7, #0]
 801a1ae:	f7ff fd8f 	bl	8019cd0 <hif_receive>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	f040 80c4 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a1ba:	4b06      	ldr	r3, [pc, #24]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	f000 80bf 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 801a1c4:	4b03      	ldr	r3, [pc, #12]	; (801a1d4 <m2m_wifi_cb+0x2ec>)
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801a1cc:	4611      	mov	r1, r2
 801a1ce:	202a      	movs	r0, #42	; 0x2a
 801a1d0:	4798      	blx	r3
}
 801a1d2:	e0b6      	b.n	801a342 <m2m_wifi_cb+0x45a>
 801a1d4:	2001decc 	.word	0x2001decc
 801a1d8:	08020a1c 	.word	0x08020a1c
 801a1dc:	08020a28 	.word	0x08020a28
 801a1e0:	2001dec9 	.word	0x2001dec9
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 801a1e4:	79fb      	ldrb	r3, [r7, #7]
 801a1e6:	2b69      	cmp	r3, #105	; 0x69
 801a1e8:	d117      	bne.n	801a21a <m2m_wifi_cb+0x332>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 801a1ea:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	2204      	movs	r2, #4
 801a1f2:	6838      	ldr	r0, [r7, #0]
 801a1f4:	f7ff fd6c 	bl	8019cd0 <hif_receive>
 801a1f8:	4603      	mov	r3, r0
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	f040 80a1 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a200:	4b52      	ldr	r3, [pc, #328]	; (801a34c <m2m_wifi_cb+0x464>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	2b00      	cmp	r3, #0
 801a206:	f000 809c 	beq.w	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 801a20a:	4b50      	ldr	r3, [pc, #320]	; (801a34c <m2m_wifi_cb+0x464>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a212:	4611      	mov	r1, r2
 801a214:	2069      	movs	r0, #105	; 0x69
 801a216:	4798      	blx	r3
}
 801a218:	e093      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_BLE_API_RECV)
 801a21a:	79fb      	ldrb	r3, [r7, #7]
 801a21c:	2b22      	cmp	r3, #34	; 0x22
 801a21e:	d144      	bne.n	801a2aa <m2m_wifi_cb+0x3c2>
        if(hif_receive(u32Addr, rx_buf, 2, 0) == M2M_SUCCESS)
 801a220:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a224:	2300      	movs	r3, #0
 801a226:	2202      	movs	r2, #2
 801a228:	6838      	ldr	r0, [r7, #0]
 801a22a:	f7ff fd51 	bl	8019cd0 <hif_receive>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b00      	cmp	r3, #0
 801a232:	f040 8086 	bne.w	801a342 <m2m_wifi_cb+0x45a>
            uint16 u16BleMsgLen = (rx_buf[1] << 8) + rx_buf[0];
 801a236:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	021b      	lsls	r3, r3, #8
 801a23e:	b29a      	uxth	r2, r3
 801a240:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a244:	b29b      	uxth	r3, r3
 801a246:	4413      	add	r3, r2
 801a248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            tstrM2mBleApiMsg *bleRx = (tstrM2mBleApiMsg *)malloc(u16BleMsgLen + sizeof(tstrM2mBleApiMsg));
 801a24c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801a250:	3302      	adds	r3, #2
 801a252:	4618      	mov	r0, r3
 801a254:	f003 ff3a 	bl	801e0cc <malloc>
 801a258:	4603      	mov	r3, r0
 801a25a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            if(bleRx != NULL)
 801a25e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a262:	2b00      	cmp	r3, #0
 801a264:	d06d      	beq.n	801a342 <m2m_wifi_cb+0x45a>
                bleRx->u16Len = u16BleMsgLen;
 801a266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a26a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a26e:	801a      	strh	r2, [r3, #0]
                if(hif_receive(u32Addr+2, bleRx->data, bleRx->u16Len, 1)== M2M_SUCCESS)
 801a270:	683b      	ldr	r3, [r7, #0]
 801a272:	1c98      	adds	r0, r3, #2
 801a274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a278:	1c99      	adds	r1, r3, #2
 801a27a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a27e:	881a      	ldrh	r2, [r3, #0]
 801a280:	2301      	movs	r3, #1
 801a282:	f7ff fd25 	bl	8019cd0 <hif_receive>
 801a286:	4603      	mov	r3, r0
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d109      	bne.n	801a2a0 <m2m_wifi_cb+0x3b8>
                    if(gpfAppWifiCb)
 801a28c:	4b2f      	ldr	r3, [pc, #188]	; (801a34c <m2m_wifi_cb+0x464>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d005      	beq.n	801a2a0 <m2m_wifi_cb+0x3b8>
                        gpfAppWifiCb(M2M_WIFI_RESP_BLE_API_RECV, bleRx);
 801a294:	4b2d      	ldr	r3, [pc, #180]	; (801a34c <m2m_wifi_cb+0x464>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801a29c:	2022      	movs	r0, #34	; 0x22
 801a29e:	4798      	blx	r3
                free(bleRx);
 801a2a0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801a2a4:	f003 ff1a 	bl	801e0dc <free>
}
 801a2a8:	e04b      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 801a2aa:	79fb      	ldrb	r3, [r7, #7]
 801a2ac:	2b3c      	cmp	r3, #60	; 0x3c
 801a2ae:	d121      	bne.n	801a2f4 <m2m_wifi_cb+0x40c>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 801a2b0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	2208      	movs	r2, #8
 801a2b8:	6838      	ldr	r0, [r7, #0]
 801a2ba:	f7ff fd09 	bl	8019cd0 <hif_receive>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d13e      	bne.n	801a342 <m2m_wifi_cb+0x45a>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	f103 0008 	add.w	r0, r3, #8
 801a2ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a2cc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	f7ff fcfd 	bl	8019cd0 <hif_receive>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d132      	bne.n	801a342 <m2m_wifi_cb+0x45a>
                if(gpfAppWifiCb) {
 801a2dc:	4b1b      	ldr	r3, [pc, #108]	; (801a34c <m2m_wifi_cb+0x464>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d02e      	beq.n	801a342 <m2m_wifi_cb+0x45a>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 801a2e4:	4b19      	ldr	r3, [pc, #100]	; (801a34c <m2m_wifi_cb+0x464>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801a2ec:	4611      	mov	r1, r2
 801a2ee:	203c      	movs	r0, #60	; 0x3c
 801a2f0:	4798      	blx	r3
}
 801a2f2:	e026      	b.n	801a342 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SET_GAIN_TABLE)
 801a2f4:	79fb      	ldrb	r3, [r7, #7]
 801a2f6:	2b24      	cmp	r3, #36	; 0x24
 801a2f8:	d115      	bne.n	801a326 <m2m_wifi_cb+0x43e>
        if(hif_receive(u32Addr, (uint8 *) &strGainRsp, sizeof(tstrM2MGainTableRsp), 0) == M2M_SUCCESS)
 801a2fa:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801a2fe:	2300      	movs	r3, #0
 801a300:	2204      	movs	r2, #4
 801a302:	6838      	ldr	r0, [r7, #0]
 801a304:	f7ff fce4 	bl	8019cd0 <hif_receive>
 801a308:	4603      	mov	r3, r0
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d119      	bne.n	801a342 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a30e:	4b0f      	ldr	r3, [pc, #60]	; (801a34c <m2m_wifi_cb+0x464>)
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d015      	beq.n	801a342 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SET_GAIN_TABLE, &strGainRsp);
 801a316:	4b0d      	ldr	r3, [pc, #52]	; (801a34c <m2m_wifi_cb+0x464>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801a31e:	4611      	mov	r1, r2
 801a320:	2024      	movs	r0, #36	; 0x24
 801a322:	4798      	blx	r3
}
 801a324:	e00d      	b.n	801a342 <m2m_wifi_cb+0x45a>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 801a326:	f240 122f 	movw	r2, #303	; 0x12f
 801a32a:	4909      	ldr	r1, [pc, #36]	; (801a350 <m2m_wifi_cb+0x468>)
 801a32c:	4809      	ldr	r0, [pc, #36]	; (801a354 <m2m_wifi_cb+0x46c>)
 801a32e:	f004 f839 	bl	801e3a4 <iprintf>
 801a332:	79fb      	ldrb	r3, [r7, #7]
 801a334:	4619      	mov	r1, r3
 801a336:	4808      	ldr	r0, [pc, #32]	; (801a358 <m2m_wifi_cb+0x470>)
 801a338:	f004 f834 	bl	801e3a4 <iprintf>
 801a33c:	200d      	movs	r0, #13
 801a33e:	f004 f843 	bl	801e3c8 <putchar>
}
 801a342:	bf00      	nop
 801a344:	37c0      	adds	r7, #192	; 0xc0
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	2001decc 	.word	0x2001decc
 801a350:	08028f38 	.word	0x08028f38
 801a354:	08020a48 	.word	0x08020a48
 801a358:	08020a5c 	.word	0x08020a5c

0801a35c <m2m_wifi_ble_set_gain_table>:
    }
    return s8Ret;
}

NMI_API sint8 m2m_wifi_ble_set_gain_table(uint8 table_idx)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b088      	sub	sp, #32
 801a360:	af04      	add	r7, sp, #16
 801a362:	4603      	mov	r3, r0
 801a364:	71fb      	strb	r3, [r7, #7]
    sint8 s8Ret = M2M_ERR_FAIL;
 801a366:	23f4      	movs	r3, #244	; 0xf4
 801a368:	73fb      	strb	r3, [r7, #15]
    tstrM2MGainTable strGainTable = {0};
 801a36a:	2300      	movs	r3, #0
 801a36c:	60bb      	str	r3, [r7, #8]

    strGainTable.u8GainTable = table_idx;
 801a36e:	79fb      	ldrb	r3, [r7, #7]
 801a370:	723b      	strb	r3, [r7, #8]

    s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_GAIN_TABLE, (uint8 *)&strGainTable, sizeof(tstrM2MGainTable), NULL, 0, 0);
 801a372:	f107 0208 	add.w	r2, r7, #8
 801a376:	2300      	movs	r3, #0
 801a378:	9302      	str	r3, [sp, #8]
 801a37a:	2300      	movs	r3, #0
 801a37c:	9301      	str	r3, [sp, #4]
 801a37e:	2300      	movs	r3, #0
 801a380:	9300      	str	r3, [sp, #0]
 801a382:	2304      	movs	r3, #4
 801a384:	2123      	movs	r1, #35	; 0x23
 801a386:	2001      	movs	r0, #1
 801a388:	f7ff f858 	bl	801943c <hif_send>
 801a38c:	4603      	mov	r3, r0
 801a38e:	73fb      	strb	r3, [r7, #15]
    return s8Ret;
 801a390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a394:	4618      	mov	r0, r3
 801a396:	3710      	adds	r7, #16
 801a398:	46bd      	mov	sp, r7
 801a39a:	bd80      	pop	{r7, pc}

0801a39c <m2m_wifi_init_hold>:

sint8 m2m_wifi_init_hold(void)
{
 801a39c:	b580      	push	{r7, lr}
 801a39e:	b082      	sub	sp, #8
 801a3a0:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 801a3a2:	23f4      	movs	r3, #244	; 0xf4
 801a3a4:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold(0);
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	f001 fd84 	bl	801beb4 <nm_drv_init_hold>
 801a3ac:	4603      	mov	r3, r0
 801a3ae:	71fb      	strb	r3, [r7, #7]

    return ret;
 801a3b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	3708      	adds	r7, #8
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}

0801a3bc <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *param)
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b08c      	sub	sp, #48	; 0x30
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	73fb      	strb	r3, [r7, #15]

    if(param == NULL) {
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d103      	bne.n	801a3dc <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 801a3d4:	23f4      	movs	r3, #244	; 0xf4
 801a3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto _EXIT0;
 801a3da:	e05d      	b.n	801a498 <m2m_wifi_init_start+0xdc>
    }

    gpfAppWifiCb = param->pfAppWifiCb;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	4a30      	ldr	r2, [pc, #192]	; (801a4a4 <m2m_wifi_init_start+0xe8>)
 801a3e2:	6013      	str	r3, [r2, #0]
    u8WifiMode          = param->strEthInitParam.u8EthernetEnable;
#endif

    /* Initialize host interface module */
    /* Do this before bringing up the WINC as it can send HIF messages very quickly from bootup and we need to be ready */
    ret = hif_init(NULL);
 801a3e4:	2000      	movs	r0, #0
 801a3e6:	f7fe ff21 	bl	801922c <hif_init>
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(ret != M2M_SUCCESS)  goto _EXIT1;
 801a3f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d147      	bne.n	801a488 <m2m_wifi_init_start+0xcc>
    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 801a3f8:	492b      	ldr	r1, [pc, #172]	; (801a4a8 <m2m_wifi_init_start+0xec>)
 801a3fa:	2001      	movs	r0, #1
 801a3fc:	f7ff fd10 	bl	8019e20 <hif_register_cb>

    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 801a400:	f107 030f 	add.w	r3, r7, #15
 801a404:	4618      	mov	r0, r3
 801a406:	f001 fd9b 	bl	801bf40 <nm_drv_init_start>
 801a40a:	4603      	mov	r3, r0
 801a40c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(ret != M2M_SUCCESS)  goto _EXIT0;
 801a410:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a414:	2b00      	cmp	r3, #0
 801a416:	d13c      	bne.n	801a492 <m2m_wifi_init_start+0xd6>

    M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
 801a418:	4824      	ldr	r0, [pc, #144]	; (801a4ac <m2m_wifi_init_start+0xf0>)
 801a41a:	f003 ffc3 	bl	801e3a4 <iprintf>
 801a41e:	2300      	movs	r3, #0
 801a420:	2201      	movs	r2, #1
 801a422:	2101      	movs	r1, #1
 801a424:	4822      	ldr	r0, [pc, #136]	; (801a4b0 <m2m_wifi_init_start+0xf4>)
 801a426:	f003 ffbd 	bl	801e3a4 <iprintf>
 801a42a:	200d      	movs	r0, #13
 801a42c:	f003 ffcc 	bl	801e3c8 <putchar>
    M2M_INFO("Curr driver HIF Level: (%u) %u.%u\n", M2M_HIF_BLOCK_VALUE, M2M_HIF_MAJOR_VALUE, M2M_HIF_MINOR_VALUE);
 801a430:	481e      	ldr	r0, [pc, #120]	; (801a4ac <m2m_wifi_init_start+0xf0>)
 801a432:	f003 ffb7 	bl	801e3a4 <iprintf>
 801a436:	2304      	movs	r3, #4
 801a438:	2201      	movs	r2, #1
 801a43a:	2102      	movs	r1, #2
 801a43c:	481d      	ldr	r0, [pc, #116]	; (801a4b4 <m2m_wifi_init_start+0xf8>)
 801a43e:	f003 ffb1 	bl	801e3a4 <iprintf>
 801a442:	200d      	movs	r0, #13
 801a444:	f003 ffc0 	bl	801e3c8 <putchar>
    ret = m2m_wifi_get_firmware_version(&strtmp);
 801a448:	f107 0310 	add.w	r3, r7, #16
 801a44c:	4618      	mov	r0, r3
 801a44e:	f000 fd02 	bl	801ae56 <m2m_wifi_get_firmware_version>
 801a452:	4603      	mov	r3, r0
 801a454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    m2m_ota_get_firmware_version(&strtmp);
 801a458:	f107 0310 	add.w	r3, r7, #16
 801a45c:	4618      	mov	r0, r3
 801a45e:	f000 fd15 	bl	801ae8c <m2m_ota_get_firmware_version>

    if(ret == M2M_SUCCESS)
 801a462:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a466:	2b00      	cmp	r3, #0
 801a468:	d115      	bne.n	801a496 <m2m_wifi_init_start+0xda>
    {
        ret = hif_enable_access();
 801a46a:	f7fe ff23 	bl	80192b4 <hif_enable_access>
 801a46e:	4603      	mov	r3, r0
 801a470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(ret == M2M_SUCCESS)
 801a474:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d10c      	bne.n	801a496 <m2m_wifi_init_start+0xda>
        {
            m2m_wifi_ble_set_gain_table(param->GainTableIndex);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	7e1b      	ldrb	r3, [r3, #24]
 801a480:	4618      	mov	r0, r3
 801a482:	f7ff ff6b 	bl	801a35c <m2m_wifi_ble_set_gain_table>
        }
    }
    goto _EXIT0;
 801a486:	e006      	b.n	801a496 <m2m_wifi_init_start+0xda>
    if(ret != M2M_SUCCESS)  goto _EXIT1;
 801a488:	bf00      	nop

_EXIT1:
    nm_drv_deinit(NULL);
 801a48a:	2000      	movs	r0, #0
 801a48c:	f001 fdc2 	bl	801c014 <nm_drv_deinit>
 801a490:	e002      	b.n	801a498 <m2m_wifi_init_start+0xdc>
    if(ret != M2M_SUCCESS)  goto _EXIT0;
 801a492:	bf00      	nop
 801a494:	e000      	b.n	801a498 <m2m_wifi_init_start+0xdc>
    goto _EXIT0;
 801a496:	bf00      	nop

_EXIT0:
    return ret;
 801a498:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	3730      	adds	r7, #48	; 0x30
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}
 801a4a4:	2001decc 	.word	0x2001decc
 801a4a8:	08019ee9 	.word	0x08019ee9
 801a4ac:	08020a1c 	.word	0x08020a1c
 801a4b0:	08020b84 	.word	0x08020b84
 801a4b4:	08020ba0 	.word	0x08020ba0

0801a4b8 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *param)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 801a4c4:	f7ff ff6a 	bl	801a39c <m2m_wifi_init_hold>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801a4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d104      	bne.n	801a4de <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(param);
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f7ff ff71 	bl	801a3bc <m2m_wifi_init_start>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 801a4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	3710      	adds	r7, #16
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	bd80      	pop	{r7, pc}

0801a4ea <m2m_wifi_get_state>:
    }
    return ret;
}

uint8 m2m_wifi_get_state(void)
{
 801a4ea:	b580      	push	{r7, lr}
 801a4ec:	af00      	add	r7, sp, #0
    switch(nm_get_state())
 801a4ee:	f001 fdd5 	bl	801c09c <nm_get_state>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	2b02      	cmp	r3, #2
 801a4f6:	d00a      	beq.n	801a50e <m2m_wifi_get_state+0x24>
 801a4f8:	2b02      	cmp	r3, #2
 801a4fa:	dc0a      	bgt.n	801a512 <m2m_wifi_get_state+0x28>
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d002      	beq.n	801a506 <m2m_wifi_get_state+0x1c>
 801a500:	2b01      	cmp	r3, #1
 801a502:	d002      	beq.n	801a50a <m2m_wifi_get_state+0x20>
 801a504:	e005      	b.n	801a512 <m2m_wifi_get_state+0x28>
    {
    case NM_STATE_DEINIT:
        return WIFI_STATE_DEINIT;
 801a506:	2300      	movs	r3, #0
 801a508:	e004      	b.n	801a514 <m2m_wifi_get_state+0x2a>
    case NM_STATE_INIT:
        return WIFI_STATE_INIT;
 801a50a:	2301      	movs	r3, #1
 801a50c:	e002      	b.n	801a514 <m2m_wifi_get_state+0x2a>
    case NM_STATE_START:
        return WIFI_STATE_START;
 801a50e:	2302      	movs	r3, #2
 801a510:	e000      	b.n	801a514 <m2m_wifi_get_state+0x2a>
    }
    return WIFI_STATE_DEINIT;
 801a512:	2300      	movs	r3, #0
}
 801a514:	4618      	mov	r0, r3
 801a516:	bd80      	pop	{r7, pc}

0801a518 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b084      	sub	sp, #16
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801a520:	2300      	movs	r3, #0
 801a522:	73fb      	strb	r3, [r7, #15]

    if(WIFI_STATE_START == m2m_wifi_get_state())
 801a524:	f7ff ffe1 	bl	801a4ea <m2m_wifi_get_state>
 801a528:	4603      	mov	r3, r0
 801a52a:	2b02      	cmp	r3, #2
 801a52c:	d103      	bne.n	801a536 <m2m_wifi_handle_events+0x1e>
        ret = hif_handle_isr();
 801a52e:	f7ff fb6d 	bl	8019c0c <hif_handle_isr>
 801a532:	4603      	mov	r3, r0
 801a534:	73fb      	strb	r3, [r7, #15]

    return ret;
 801a536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a53a:	4618      	mov	r0, r3
 801a53c:	3710      	adds	r7, #16
 801a53e:	46bd      	mov	sp, r7
 801a540:	bd80      	pop	{r7, pc}

0801a542 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 801a542:	b580      	push	{r7, lr}
 801a544:	b086      	sub	sp, #24
 801a546:	af00      	add	r7, sp, #0
 801a548:	603b      	str	r3, [r7, #0]
 801a54a:	4603      	mov	r3, r0
 801a54c:	71fb      	strb	r3, [r7, #7]
 801a54e:	460b      	mov	r3, r1
 801a550:	71bb      	strb	r3, [r7, #6]
 801a552:	4613      	mov	r3, r2
 801a554:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 801a556:	23f4      	movs	r3, #244	; 0xf4
 801a558:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 801a55a:	88bb      	ldrh	r3, [r7, #4]
 801a55c:	332c      	adds	r3, #44	; 0x2c
 801a55e:	82bb      	strh	r3, [r7, #20]
    /* Check application params. */
    if(
 801a560:	683b      	ldr	r3, [r7, #0]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d074      	beq.n	801a650 <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 801a566:	683b      	ldr	r3, [r7, #0]
 801a568:	685b      	ldr	r3, [r3, #4]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d070      	beq.n	801a650 <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	7a1b      	ldrb	r3, [r3, #8]
 801a572:	2b20      	cmp	r3, #32
 801a574:	d86c      	bhi.n	801a650 <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 801a576:	6a3b      	ldr	r3, [r7, #32]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d066      	beq.n	801a64a <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 801a57c:	6a3b      	ldr	r3, [r7, #32]
 801a57e:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 801a580:	6a3b      	ldr	r3, [r7, #32]
 801a582:	3304      	adds	r3, #4
 801a584:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 801a586:	2230      	movs	r2, #48	; 0x30
 801a588:	2100      	movs	r1, #0
 801a58a:	6a38      	ldr	r0, [r7, #32]
 801a58c:	f7fe fcd6 	bl	8018f3c <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	8aba      	ldrh	r2, [r7, #20]
 801a594:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 801a596:	79fb      	ldrb	r3, [r7, #7]
 801a598:	2b02      	cmp	r3, #2
 801a59a:	d006      	beq.n	801a5aa <m2m_wifi_connect_prepare_msg+0x68>
 801a59c:	2b02      	cmp	r3, #2
 801a59e:	dc59      	bgt.n	801a654 <m2m_wifi_connect_prepare_msg+0x112>
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d010      	beq.n	801a5c6 <m2m_wifi_connect_prepare_msg+0x84>
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d007      	beq.n	801a5b8 <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 801a5a8:	e054      	b.n	801a654 <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	789b      	ldrb	r3, [r3, #2]
 801a5ae:	f043 0302 	orr.w	r3, r3, #2
 801a5b2:	b2da      	uxtb	r2, r3
 801a5b4:	693b      	ldr	r3, [r7, #16]
 801a5b6:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	789b      	ldrb	r3, [r3, #2]
 801a5bc:	f043 0301 	orr.w	r3, r3, #1
 801a5c0:	b2da      	uxtb	r2, r3
 801a5c2:	693b      	ldr	r3, [r7, #16]
 801a5c4:	709a      	strb	r2, [r3, #2]
            break;
 801a5c6:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	7a5b      	ldrb	r3, [r3, #9]
 801a5cc:	2bff      	cmp	r3, #255	; 0xff
 801a5ce:	d104      	bne.n	801a5da <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 801a5d0:	683b      	ldr	r3, [r7, #0]
 801a5d2:	7a5a      	ldrb	r2, [r3, #9]
 801a5d4:	693b      	ldr	r3, [r7, #16]
 801a5d6:	70da      	strb	r2, [r3, #3]
 801a5d8:	e00d      	b.n	801a5f6 <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	7a5b      	ldrb	r3, [r3, #9]
 801a5de:	2b0e      	cmp	r3, #14
 801a5e0:	d83a      	bhi.n	801a658 <m2m_wifi_connect_prepare_msg+0x116>
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	7a5b      	ldrb	r3, [r3, #9]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d036      	beq.n	801a658 <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	7a5b      	ldrb	r3, [r3, #9]
 801a5ee:	3b01      	subs	r3, #1
 801a5f0:	b2da      	uxtb	r2, r3
 801a5f2:	693b      	ldr	r3, [r7, #16]
 801a5f4:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 801a5f6:	79bb      	ldrb	r3, [r7, #6]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d02f      	beq.n	801a65c <m2m_wifi_connect_prepare_msg+0x11a>
 801a5fc:	79bb      	ldrb	r3, [r7, #6]
 801a5fe:	2b04      	cmp	r3, #4
 801a600:	d82c      	bhi.n	801a65c <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	79ba      	ldrb	r2, [r7, #6]
 801a606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	7a1a      	ldrb	r2, [r3, #8]
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	1c58      	adds	r0, r3, #1
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	6859      	ldr	r1, [r3, #4]
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	7a1b      	ldrb	r3, [r3, #8]
 801a61e:	461a      	mov	r2, r3
 801a620:	f7fe fc6c 	bl	8018efc <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d00c      	beq.n	801a646 <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	2201      	movs	r2, #1
 801a630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	2206      	movs	r2, #6
 801a640:	4619      	mov	r1, r3
 801a642:	f7fe fc5b 	bl	8018efc <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 801a646:	2300      	movs	r3, #0
 801a648:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 801a64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a64e:	e008      	b.n	801a662 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 801a650:	bf00      	nop
 801a652:	e004      	b.n	801a65e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a654:	bf00      	nop
 801a656:	e002      	b.n	801a65e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a658:	bf00      	nop
 801a65a:	e000      	b.n	801a65e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a65c:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 801a65e:	f06f 030e 	mvn.w	r3, #14
}
 801a662:	4618      	mov	r0, r3
 801a664:	3718      	adds	r7, #24
 801a666:	46bd      	mov	sp, r7
 801a668:	bd80      	pop	{r7, pc}

0801a66a <legacy_connect_prepare_msg>:

static sint8 legacy_connect_prepare_msg(tstrM2mWifiConnHdr *pstrConnHdr, tstrM2mWifiConnectLegacy_1_2 *pstrConnect)
{
 801a66a:	b580      	push	{r7, lr}
 801a66c:	b084      	sub	sp, #16
 801a66e:	af00      	add	r7, sp, #0
 801a670:	6078      	str	r0, [r7, #4]
 801a672:	6039      	str	r1, [r7, #0]
    sint8 s8Ret = M2M_ERR_FAIL;
 801a674:	23f4      	movs	r3, #244	; 0xf4
 801a676:	73fb      	strb	r3, [r7, #15]

    if(
        !(pstrConnHdr->strConnCredHdr.u8CredStoreFlags & M2M_CRED_ENCRYPT_FLAG)
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	789b      	ldrb	r3, [r3, #2]
 801a67c:	f003 0302 	and.w	r3, r3, #2
    if(
 801a680:	2b00      	cmp	r3, #0
 801a682:	d138      	bne.n	801a6f6 <legacy_connect_prepare_msg+0x8c>
        &&  !(pstrConnHdr->strConnCredCmn.u8Options & M2M_WIFI_CONN_BSSID_FLAG)
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a68a:	f003 0301 	and.w	r3, r3, #1
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d131      	bne.n	801a6f6 <legacy_connect_prepare_msg+0x8c>
    )
    {
        m2m_memset((uint8 *)pstrConnect, 0, sizeof(tstrM2mWifiConnectLegacy_1_2));
 801a692:	2268      	movs	r2, #104	; 0x68
 801a694:	2100      	movs	r1, #0
 801a696:	6838      	ldr	r0, [r7, #0]
 801a698:	f7fe fc50 	bl	8018f3c <m2m_memset>
        m2m_memcpy(pstrConnect->au8SSID, pstrConnHdr->strConnCredCmn.au8Ssid, pstrConnHdr->strConnCredCmn.u8SsidLen);
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	f103 0046 	add.w	r0, r3, #70	; 0x46
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	1d59      	adds	r1, r3, #5
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	791b      	ldrb	r3, [r3, #4]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	f7fe fc26 	bl	8018efc <m2m_memcpy>
        pstrConnect->au8SSID[pstrConnHdr->strConnCredCmn.u8SsidLen] = 0;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	791b      	ldrb	r3, [r3, #4]
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	4413      	add	r3, r2
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        pstrConnect->u16Ch = pstrConnHdr->strConnCredHdr.u8Channel;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	78db      	ldrb	r3, [r3, #3]
 801a6c4:	b29a      	uxth	r2, r3
 801a6c6:	683b      	ldr	r3, [r7, #0]
 801a6c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pstrConnect->u8NoSaveCred = !(pstrConnHdr->strConnCredHdr.u8CredStoreFlags & M2M_CRED_STORE_FLAG);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	789b      	ldrb	r3, [r3, #2]
 801a6d0:	f003 0301 	and.w	r3, r3, #1
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	bf0c      	ite	eq
 801a6d8:	2301      	moveq	r3, #1
 801a6da:	2300      	movne	r3, #0
 801a6dc:	b2db      	uxtb	r3, r3
 801a6de:	461a      	mov	r2, r3
 801a6e0:	683b      	ldr	r3, [r7, #0]
 801a6e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        pstrConnect->strSec.u8SecType = pstrConnHdr->strConnCredCmn.u8AuthType;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        s8Ret = M2M_SUCCESS;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	73fb      	strb	r3, [r7, #15]
    }
    return s8Ret;
 801a6f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	3710      	adds	r7, #16
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd80      	pop	{r7, pc}

0801a702 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId
)
{
 801a702:	b580      	push	{r7, lr}
 801a704:	b0ae      	sub	sp, #184	; 0xb8
 801a706:	af04      	add	r7, sp, #16
 801a708:	4603      	mov	r3, r0
 801a70a:	6039      	str	r1, [r7, #0]
 801a70c:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 801a70e:	23f1      	movs	r3, #241	; 0xf1
 801a710:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 801a714:	79f8      	ldrb	r0, [r7, #7]
 801a716:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a71a:	9300      	str	r3, [sp, #0]
 801a71c:	683b      	ldr	r3, [r7, #0]
 801a71e:	2200      	movs	r2, #0
 801a720:	2101      	movs	r1, #1
 801a722:	f7ff ff0e 	bl	801a542 <m2m_wifi_connect_prepare_msg>
 801a726:	4603      	mov	r3, r0
 801a728:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if(ret == M2M_SUCCESS)
 801a72c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a730:	2b00      	cmp	r3, #0
 801a732:	d132      	bne.n	801a79a <m2m_wifi_connect_open+0x98>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 801a734:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801a738:	2300      	movs	r3, #0
 801a73a:	9302      	str	r3, [sp, #8]
 801a73c:	2300      	movs	r3, #0
 801a73e:	9301      	str	r3, [sp, #4]
 801a740:	2300      	movs	r3, #0
 801a742:	9300      	str	r3, [sp, #0]
 801a744:	2330      	movs	r3, #48	; 0x30
 801a746:	213d      	movs	r1, #61	; 0x3d
 801a748:	2001      	movs	r0, #1
 801a74a:	f7fe fe77 	bl	801943c <hif_send>
 801a74e:	4603      	mov	r3, r0
 801a750:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
        if(ret != M2M_SUCCESS)
 801a754:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d01e      	beq.n	801a79a <m2m_wifi_connect_open+0x98>
        {
            /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
            tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
            ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801a75c:	f107 020c 	add.w	r2, r7, #12
 801a760:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a764:	4611      	mov	r1, r2
 801a766:	4618      	mov	r0, r3
 801a768:	f7ff ff7f 	bl	801a66a <legacy_connect_prepare_msg>
 801a76c:	4603      	mov	r3, r0
 801a76e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            if(ret ==  M2M_SUCCESS)
 801a772:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a776:	2b00      	cmp	r3, #0
 801a778:	d10f      	bne.n	801a79a <m2m_wifi_connect_open+0x98>
            {
                ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801a77a:	f107 020c 	add.w	r2, r7, #12
 801a77e:	2300      	movs	r3, #0
 801a780:	9302      	str	r3, [sp, #8]
 801a782:	2300      	movs	r3, #0
 801a784:	9301      	str	r3, [sp, #4]
 801a786:	2300      	movs	r3, #0
 801a788:	9300      	str	r3, [sp, #0]
 801a78a:	2368      	movs	r3, #104	; 0x68
 801a78c:	2128      	movs	r1, #40	; 0x28
 801a78e:	2001      	movs	r0, #1
 801a790:	f7fe fe54 	bl	801943c <hif_send>
 801a794:	4603      	mov	r3, r0
 801a796:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                               (uint8 *)&strConnectLegacy, sizeof(tstrM2mWifiConnectLegacy_1_2),
                               NULL, 0, 0);
            }
        }
    }
    return ret;
 801a79a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	37a8      	adds	r7, #168	; 0xa8
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd80      	pop	{r7, pc}

0801a7a6 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 801a7a6:	b580      	push	{r7, lr}
 801a7a8:	b0b2      	sub	sp, #200	; 0xc8
 801a7aa:	af04      	add	r7, sp, #16
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	60b9      	str	r1, [r7, #8]
 801a7b0:	607a      	str	r2, [r7, #4]
 801a7b2:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 801a7b4:	23f1      	movs	r3, #241	; 0xf1
 801a7b6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if(
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f000 80a1 	beq.w	801a904 <m2m_wifi_connect_wep+0x15e>
        (pstrAuthWep != NULL) && (pstrAuthWep->pu8WepKey != NULL)
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f000 809c 	beq.w	801a904 <m2m_wifi_connect_wep+0x15e>
        && (pstrAuthWep->u8KeyIndx > 0) && (pstrAuthWep->u8KeyIndx <= WEP_KEY_MAX_INDEX)
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	795b      	ldrb	r3, [r3, #5]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	f000 8097 	beq.w	801a904 <m2m_wifi_connect_wep+0x15e>
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	795b      	ldrb	r3, [r3, #5]
 801a7da:	2b04      	cmp	r3, #4
 801a7dc:	f200 8092 	bhi.w	801a904 <m2m_wifi_connect_wep+0x15e>
        && ((pstrAuthWep->u8KeySz == WEP_104_KEY_STRING_SIZE) || (pstrAuthWep->u8KeySz == WEP_40_KEY_STRING_SIZE))
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	791b      	ldrb	r3, [r3, #4]
 801a7e4:	2b1a      	cmp	r3, #26
 801a7e6:	d004      	beq.n	801a7f2 <m2m_wifi_connect_wep+0x4c>
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	791b      	ldrb	r3, [r3, #4]
 801a7ec:	2b0a      	cmp	r3, #10
 801a7ee:	f040 8089 	bne.w	801a904 <m2m_wifi_connect_wep+0x15e>
    )
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 801a7f2:	7bf8      	ldrb	r0, [r7, #15]
 801a7f4:	f107 0314 	add.w	r3, r7, #20
 801a7f8:	9300      	str	r3, [sp, #0]
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	2210      	movs	r2, #16
 801a7fe:	2103      	movs	r1, #3
 801a800:	f7ff fe9f 	bl	801a542 <m2m_wifi_connect_prepare_msg>
 801a804:	4603      	mov	r3, r0
 801a806:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                           M2M_WIFI_SEC_WEP,
                                           sizeof(tstrM2mWifiWep),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 801a80a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d178      	bne.n	801a904 <m2m_wifi_connect_wep+0x15e>
        {
            tstrM2mWifiWep  *pstrWep = (tstrM2mWifiWep *)malloc(sizeof(tstrM2mWifiWep));
 801a812:	2010      	movs	r0, #16
 801a814:	f003 fc5a 	bl	801e0cc <malloc>
 801a818:	4603      	mov	r3, r0
 801a81a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            if(pstrWep == NULL)
 801a81e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a822:	2b00      	cmp	r3, #0
 801a824:	d103      	bne.n	801a82e <m2m_wifi_connect_wep+0x88>
                ret = M2M_ERR_FAIL;
 801a826:	23f4      	movs	r3, #244	; 0xf4
 801a828:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a82c:	e02d      	b.n	801a88a <m2m_wifi_connect_wep+0xe4>
            else
            {
                pstrWep->u8KeyIndex = pstrAuthWep->u8KeyIndx - 1;
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	795b      	ldrb	r3, [r3, #5]
 801a832:	3b01      	subs	r3, #1
 801a834:	b2da      	uxtb	r2, r3
 801a836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a83a:	701a      	strb	r2, [r3, #0]
                pstrWep->u8KeyLen = pstrAuthWep->u8KeySz/2;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	791b      	ldrb	r3, [r3, #4]
 801a840:	085b      	lsrs	r3, r3, #1
 801a842:	b2da      	uxtb	r2, r3
 801a844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a848:	705a      	strb	r2, [r3, #1]
                hexstr_2_bytes(pstrWep->au8WepKey, (pstrAuthWep->pu8WepKey), pstrWep->u8KeyLen);
 801a84a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a84e:	1c98      	adds	r0, r3, #2
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	6819      	ldr	r1, [r3, #0]
 801a854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a858:	785b      	ldrb	r3, [r3, #1]
 801a85a:	461a      	mov	r2, r3
 801a85c:	f7fe fbc5 	bl	8018fea <hexstr_2_bytes>

                ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 801a860:	f107 0214 	add.w	r2, r7, #20
 801a864:	2330      	movs	r3, #48	; 0x30
 801a866:	9302      	str	r3, [sp, #8]
 801a868:	2310      	movs	r3, #16
 801a86a:	9301      	str	r3, [sp, #4]
 801a86c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a870:	9300      	str	r3, [sp, #0]
 801a872:	2330      	movs	r3, #48	; 0x30
 801a874:	21bd      	movs	r1, #189	; 0xbd
 801a876:	2001      	movs	r0, #1
 801a878:	f7fe fde0 	bl	801943c <hif_send>
 801a87c:	4603      	mov	r3, r0
 801a87e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                               (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                               (uint8 *)pstrWep, sizeof(tstrM2mWifiWep), sizeof(tstrM2mWifiConnHdr));
                free(pstrWep);
 801a882:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801a886:	f003 fc29 	bl	801e0dc <free>
            }
            if(ret != M2M_SUCCESS)
 801a88a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d038      	beq.n	801a904 <m2m_wifi_connect_wep+0x15e>
            {
                /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
                tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
                ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801a892:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801a896:	f107 0314 	add.w	r3, r7, #20
 801a89a:	4611      	mov	r1, r2
 801a89c:	4618      	mov	r0, r3
 801a89e:	f7ff fee4 	bl	801a66a <legacy_connect_prepare_msg>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret ==  M2M_SUCCESS)
 801a8a8:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d129      	bne.n	801a904 <m2m_wifi_connect_wep+0x15e>
                {
                    tstrM2mWifiWepParamsLegacy_1_2  *pstrWepLegacy = &strConnectLegacy.strSec.uniAuth.strWepInfo;
 801a8b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a8b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    pstrWepLegacy->u8KeyIndx = pstrAuthWep->u8KeyIndx - 1;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	795b      	ldrb	r3, [r3, #5]
 801a8bc:	3b01      	subs	r3, #1
 801a8be:	b2da      	uxtb	r2, r3
 801a8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8c4:	701a      	strb	r2, [r3, #0]
                    pstrWepLegacy->u8KeySz = pstrAuthWep->u8KeySz;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	791a      	ldrb	r2, [r3, #4]
 801a8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8ce:	705a      	strb	r2, [r3, #1]
                    m2m_memcpy(pstrWepLegacy->au8WepKey, pstrAuthWep->pu8WepKey, pstrAuthWep->u8KeySz);
 801a8d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8d4:	1c98      	adds	r0, r3, #2
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	6819      	ldr	r1, [r3, #0]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	791b      	ldrb	r3, [r3, #4]
 801a8de:	461a      	mov	r2, r3
 801a8e0:	f7fe fb0c 	bl	8018efc <m2m_memcpy>
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801a8e4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	9302      	str	r3, [sp, #8]
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	9301      	str	r3, [sp, #4]
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	9300      	str	r3, [sp, #0]
 801a8f4:	2368      	movs	r3, #104	; 0x68
 801a8f6:	2128      	movs	r1, #40	; 0x28
 801a8f8:	2001      	movs	r0, #1
 801a8fa:	f7fe fd9f 	bl	801943c <hif_send>
 801a8fe:	4603      	mov	r3, r0
 801a900:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   NULL, 0, 0);
                }
            }
        }
    }
    return ret;
 801a904:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 801a908:	4618      	mov	r0, r3
 801a90a:	37b8      	adds	r7, #184	; 0xb8
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b0b2      	sub	sp, #200	; 0xc8
 801a914:	af04      	add	r7, sp, #16
 801a916:	4603      	mov	r3, r0
 801a918:	60b9      	str	r1, [r7, #8]
 801a91a:	607a      	str	r2, [r7, #4]
 801a91c:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 801a91e:	23f1      	movs	r3, #241	; 0xf1
 801a920:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if(pstrAuthPsk != NULL)
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2b00      	cmp	r3, #0
 801a928:	f000 80bf 	beq.w	801aaaa <m2m_wifi_connect_psk+0x19a>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 801a92c:	7bf8      	ldrb	r0, [r7, #15]
 801a92e:	f107 0314 	add.w	r3, r7, #20
 801a932:	9300      	str	r3, [sp, #0]
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	226c      	movs	r2, #108	; 0x6c
 801a938:	2102      	movs	r1, #2
 801a93a:	f7ff fe02 	bl	801a542 <m2m_wifi_connect_prepare_msg>
 801a93e:	4603      	mov	r3, r0
 801a940:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 801a944:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a948:	2b00      	cmp	r3, #0
 801a94a:	f040 80ae 	bne.w	801aaaa <m2m_wifi_connect_psk+0x19a>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 801a94e:	206c      	movs	r0, #108	; 0x6c
 801a950:	f003 fbbc 	bl	801e0cc <malloc>
 801a954:	4603      	mov	r3, r0
 801a956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            if(pstrPsk == NULL)
 801a95a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d103      	bne.n	801a96a <m2m_wifi_connect_psk+0x5a>
                ret = M2M_ERR_FAIL;
 801a962:	23f4      	movs	r3, #244	; 0xf4
 801a964:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a968:	e06d      	b.n	801aa46 <m2m_wifi_connect_psk+0x136>
            else
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 801a96a:	226c      	movs	r2, #108	; 0x6c
 801a96c:	2100      	movs	r1, #0
 801a96e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801a972:	f7fe fae3 	bl	8018f3c <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d02a      	beq.n	801a9d4 <m2m_wifi_connect_psk+0xc4>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d003      	beq.n	801a98e <m2m_wifi_connect_psk+0x7e>
                        ret = M2M_ERR_INVALID_ARG;
 801a986:	23f1      	movs	r3, #241	; 0xf1
 801a988:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a98c:	e042      	b.n	801aa14 <m2m_wifi_connect_psk+0x104>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 801a98e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a992:	2240      	movs	r2, #64	; 0x40
 801a994:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 801a996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a99a:	1c58      	adds	r0, r3, #1
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	6819      	ldr	r1, [r3, #0]
 801a9a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9a4:	781b      	ldrb	r3, [r3, #0]
 801a9a6:	085b      	lsrs	r3, r3, #1
 801a9a8:	b2db      	uxtb	r3, r3
 801a9aa:	461a      	mov	r2, r3
 801a9ac:	f7fe fb1d 	bl	8018fea <hexstr_2_bytes>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d002      	beq.n	801a9bc <m2m_wifi_connect_psk+0xac>
                            ret = M2M_ERR_INVALID_ARG;
 801a9b6:	23f1      	movs	r3, #241	; 0xf1
 801a9b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 801a9bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9c0:	1c58      	adds	r0, r3, #1
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	6819      	ldr	r1, [r3, #0]
 801a9c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9ca:	781b      	ldrb	r3, [r3, #0]
 801a9cc:	461a      	mov	r2, r3
 801a9ce:	f7fe fa95 	bl	8018efc <m2m_memcpy>
 801a9d2:	e01f      	b.n	801aa14 <m2m_wifi_connect_psk+0x104>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	685b      	ldr	r3, [r3, #4]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d018      	beq.n	801aa0e <m2m_wifi_connect_psk+0xfe>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	7a1b      	ldrb	r3, [r3, #8]
 801a9e0:	2b40      	cmp	r3, #64	; 0x40
 801a9e2:	d903      	bls.n	801a9ec <m2m_wifi_connect_psk+0xdc>
                        ret = M2M_ERR_INVALID_ARG;
 801a9e4:	23f1      	movs	r3, #241	; 0xf1
 801a9e6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a9ea:	e013      	b.n	801aa14 <m2m_wifi_connect_psk+0x104>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	7a1a      	ldrb	r2, [r3, #8]
 801a9f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9f4:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 801a9f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9fa:	1c58      	adds	r0, r3, #1
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	6859      	ldr	r1, [r3, #4]
 801aa00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa04:	781b      	ldrb	r3, [r3, #0]
 801aa06:	461a      	mov	r2, r3
 801aa08:	f7fe fa78 	bl	8018efc <m2m_memcpy>
 801aa0c:	e002      	b.n	801aa14 <m2m_wifi_connect_psk+0x104>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 801aa0e:	23f1      	movs	r3, #241	; 0xf1
 801aa10:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret == M2M_SUCCESS)
 801aa14:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d110      	bne.n	801aa3e <m2m_wifi_connect_psk+0x12e>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 801aa1c:	f107 0214 	add.w	r2, r7, #20
 801aa20:	2330      	movs	r3, #48	; 0x30
 801aa22:	9302      	str	r3, [sp, #8]
 801aa24:	236c      	movs	r3, #108	; 0x6c
 801aa26:	9301      	str	r3, [sp, #4]
 801aa28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa2c:	9300      	str	r3, [sp, #0]
 801aa2e:	2330      	movs	r3, #48	; 0x30
 801aa30:	21bd      	movs	r1, #189	; 0xbd
 801aa32:	2001      	movs	r0, #1
 801aa34:	f7fe fd02 	bl	801943c <hif_send>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 801aa3e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801aa42:	f003 fb4b 	bl	801e0dc <free>
            }
            if(ret != M2M_SUCCESS)
 801aa46:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d02d      	beq.n	801aaaa <m2m_wifi_connect_psk+0x19a>
            {
                /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
                tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
                ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801aa4e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801aa52:	f107 0314 	add.w	r3, r7, #20
 801aa56:	4611      	mov	r1, r2
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7ff fe06 	bl	801a66a <legacy_connect_prepare_msg>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret ==  M2M_SUCCESS)
 801aa64:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d11e      	bne.n	801aaaa <m2m_wifi_connect_psk+0x19a>
                {
                    uint8   *pu8PskLegacy = strConnectLegacy.strSec.uniAuth.au8PSK;
 801aa6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801aa70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    m2m_memcpy(pu8PskLegacy, pstrPsk->au8Passphrase, pstrPsk->u8PassphraseLen);
 801aa74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa78:	1c59      	adds	r1, r3, #1
 801aa7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	461a      	mov	r2, r3
 801aa82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801aa86:	f7fe fa39 	bl	8018efc <m2m_memcpy>
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801aa8a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801aa8e:	2300      	movs	r3, #0
 801aa90:	9302      	str	r3, [sp, #8]
 801aa92:	2300      	movs	r3, #0
 801aa94:	9301      	str	r3, [sp, #4]
 801aa96:	2300      	movs	r3, #0
 801aa98:	9300      	str	r3, [sp, #0]
 801aa9a:	2368      	movs	r3, #104	; 0x68
 801aa9c:	2128      	movs	r1, #40	; 0x28
 801aa9e:	2001      	movs	r0, #1
 801aaa0:	f7fe fccc 	bl	801943c <hif_send>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   NULL, 0, 0);
                }
            }
        }
    }
    return ret;
 801aaaa:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	37b8      	adds	r7, #184	; 0xb8
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}

0801aab6 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 801aab6:	b580      	push	{r7, lr}
 801aab8:	b086      	sub	sp, #24
 801aaba:	af02      	add	r7, sp, #8
 801aabc:	60f8      	str	r0, [r7, #12]
 801aabe:	607b      	str	r3, [r7, #4]
 801aac0:	460b      	mov	r3, r1
 801aac2:	72fb      	strb	r3, [r7, #11]
 801aac4:	4613      	mov	r3, r2
 801aac6:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 801aac8:	7aba      	ldrb	r2, [r7, #10]
 801aaca:	7af9      	ldrb	r1, [r7, #11]
 801aacc:	2300      	movs	r3, #0
 801aace:	9301      	str	r3, [sp, #4]
 801aad0:	8b3b      	ldrh	r3, [r7, #24]
 801aad2:	9300      	str	r3, [sp, #0]
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	68f8      	ldr	r0, [r7, #12]
 801aad8:	f000 f805 	bl	801aae6 <m2m_wifi_connect_sc>
 801aadc:	4603      	mov	r3, r0
}
 801aade:	4618      	mov	r0, r3
 801aae0:	3710      	adds	r7, #16
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}

0801aae6 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 801aae6:	b580      	push	{r7, lr}
 801aae8:	b090      	sub	sp, #64	; 0x40
 801aaea:	af00      	add	r7, sp, #0
 801aaec:	60f8      	str	r0, [r7, #12]
 801aaee:	607b      	str	r3, [r7, #4]
 801aaf0:	460b      	mov	r3, r1
 801aaf2:	72fb      	strb	r3, [r7, #11]
 801aaf4:	4613      	mov	r3, r2
 801aaf6:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 801aaf8:	23f1      	movs	r3, #241	; 0xf1
 801aafa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 801aafe:	2300      	movs	r3, #0
 801ab00:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab06:	7afb      	ldrb	r3, [r7, #11]
 801ab08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 801ab0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ab10:	b2db      	uxtb	r3, r3
 801ab12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 801ab16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d001      	beq.n	801ab22 <m2m_wifi_connect_sc+0x3c>
 801ab1e:	2300      	movs	r3, #0
 801ab20:	e000      	b.n	801ab24 <m2m_wifi_connect_sc+0x3e>
 801ab22:	2302      	movs	r3, #2
 801ab24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 801ab28:	7afb      	ldrb	r3, [r7, #11]
 801ab2a:	2b20      	cmp	r3, #32
 801ab2c:	d80e      	bhi.n	801ab4c <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 801ab2e:	e008      	b.n	801ab42 <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 801ab30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab32:	7afb      	ldrb	r3, [r7, #11]
 801ab34:	4413      	add	r3, r2
 801ab36:	781b      	ldrb	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d102      	bne.n	801ab42 <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 801ab3c:	7afb      	ldrb	r3, [r7, #11]
 801ab3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        while(u8SsidLen--)
 801ab42:	7afb      	ldrb	r3, [r7, #11]
 801ab44:	1e5a      	subs	r2, r3, #1
 801ab46:	72fa      	strb	r2, [r7, #11]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d1f1      	bne.n	801ab30 <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 801ab4c:	7abb      	ldrb	r3, [r7, #10]
 801ab4e:	2b03      	cmp	r3, #3
 801ab50:	d03a      	beq.n	801abc8 <m2m_wifi_connect_sc+0xe2>
 801ab52:	2b03      	cmp	r3, #3
 801ab54:	dc55      	bgt.n	801ac02 <m2m_wifi_connect_sc+0x11c>
 801ab56:	2b01      	cmp	r3, #1
 801ab58:	d002      	beq.n	801ab60 <m2m_wifi_connect_sc+0x7a>
 801ab5a:	2b02      	cmp	r3, #2
 801ab5c:	d00c      	beq.n	801ab78 <m2m_wifi_connect_sc+0x92>

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
        }
        break;
    default:
        break;
 801ab5e:	e050      	b.n	801ac02 <m2m_wifi_connect_sc+0x11c>
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 801ab60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ab64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801ab68:	4611      	mov	r1, r2
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7ff fdc9 	bl	801a702 <m2m_wifi_connect_open>
 801ab70:	4603      	mov	r3, r0
 801ab72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801ab76:	e049      	b.n	801ac0c <m2m_wifi_connect_sc+0x126>
        if(pvAuthInfo != NULL)
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d043      	beq.n	801ac06 <m2m_wifi_connect_sc+0x120>
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 801ab7e:	2300      	movs	r3, #0
 801ab80:	61fb      	str	r3, [r7, #28]
 801ab82:	2300      	movs	r3, #0
 801ab84:	623b      	str	r3, [r7, #32]
 801ab86:	2300      	movs	r3, #0
 801ab88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f7fe f9f2 	bl	8018f76 <m2m_strlen>
 801ab92:	4603      	mov	r3, r0
 801ab94:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(len == M2M_MAX_PSK_LEN-1)
 801ab96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ab98:	2b40      	cmp	r3, #64	; 0x40
 801ab9a:	d102      	bne.n	801aba2 <m2m_wifi_connect_sc+0xbc>
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	61fb      	str	r3, [r7, #28]
 801aba0:	e005      	b.n	801abae <m2m_wifi_connect_sc+0xc8>
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	623b      	str	r3, [r7, #32]
                strAuthPsk.u8PassphraseLen = len;
 801aba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801aba8:	b2db      	uxtb	r3, r3
 801abaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 801abae:	f107 021c 	add.w	r2, r7, #28
 801abb2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801abb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801abba:	4618      	mov	r0, r3
 801abbc:	f7ff fea8 	bl	801a910 <m2m_wifi_connect_psk>
 801abc0:	4603      	mov	r3, r0
 801abc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801abc6:	e01e      	b.n	801ac06 <m2m_wifi_connect_sc+0x120>
        if(pvAuthInfo != NULL)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d01d      	beq.n	801ac0a <m2m_wifi_connect_sc+0x124>
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	63bb      	str	r3, [r7, #56]	; 0x38
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 801abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd4:	3302      	adds	r3, #2
 801abd6:	617b      	str	r3, [r7, #20]
 801abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abda:	785b      	ldrb	r3, [r3, #1]
 801abdc:	3b01      	subs	r3, #1
 801abde:	b2db      	uxtb	r3, r3
 801abe0:	763b      	strb	r3, [r7, #24]
 801abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	767b      	strb	r3, [r7, #25]
            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 801abe8:	f107 0214 	add.w	r2, r7, #20
 801abec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801abf0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7ff fdd6 	bl	801a7a6 <m2m_wifi_connect_wep>
 801abfa:	4603      	mov	r3, r0
 801abfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801ac00:	e003      	b.n	801ac0a <m2m_wifi_connect_sc+0x124>
        break;
 801ac02:	bf00      	nop
 801ac04:	e002      	b.n	801ac0c <m2m_wifi_connect_sc+0x126>
        break;
 801ac06:	bf00      	nop
 801ac08:	e000      	b.n	801ac0c <m2m_wifi_connect_sc+0x126>
        break;
 801ac0a:	bf00      	nop
    }
    return s8Ret;
 801ac0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801ac10:	4618      	mov	r0, r3
 801ac12:	3740      	adds	r7, #64	; 0x40
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}

0801ac18 <m2m_wifi_disconnect>:

sint8 m2m_wifi_disconnect(void)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b084      	sub	sp, #16
 801ac1c:	af04      	add	r7, sp, #16
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0, 0);
 801ac1e:	2300      	movs	r3, #0
 801ac20:	9302      	str	r3, [sp, #8]
 801ac22:	2300      	movs	r3, #0
 801ac24:	9301      	str	r3, [sp, #4]
 801ac26:	2300      	movs	r3, #0
 801ac28:	9300      	str	r3, [sp, #0]
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	212b      	movs	r1, #43	; 0x2b
 801ac30:	2001      	movs	r0, #1
 801ac32:	f7fe fc03 	bl	801943c <hif_send>
 801ac36:	4603      	mov	r3, r0
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bd80      	pop	{r7, pc}

0801ac3e <m2m_wifi_set_mac_address>:

sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
 801ac3e:	b580      	push	{r7, lr}
 801ac40:	b088      	sub	sp, #32
 801ac42:	af04      	add	r7, sp, #16
 801ac44:	6078      	str	r0, [r7, #4]
    tstrM2mSetMacAddress strTmp;
    m2m_memcpy((uint8 *) strTmp.au8Mac, (uint8 *) au8MacAddress, 6);
 801ac46:	f107 0308 	add.w	r3, r7, #8
 801ac4a:	2206      	movs	r2, #6
 801ac4c:	6879      	ldr	r1, [r7, #4]
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f7fe f954 	bl	8018efc <m2m_memcpy>
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
 801ac54:	f107 0208 	add.w	r2, r7, #8
 801ac58:	2300      	movs	r3, #0
 801ac5a:	9302      	str	r3, [sp, #8]
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	9301      	str	r3, [sp, #4]
 801ac60:	2300      	movs	r3, #0
 801ac62:	9300      	str	r3, [sp, #0]
 801ac64:	2308      	movs	r3, #8
 801ac66:	2102      	movs	r1, #2
 801ac68:	2001      	movs	r0, #1
 801ac6a:	f7fe fbe7 	bl	801943c <hif_send>
 801ac6e:	4603      	mov	r3, r0
                    (uint8 *) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0, 0);
}
 801ac70:	4618      	mov	r0, r3
 801ac72:	3710      	adds	r7, #16
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}

0801ac78 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8 *pu8IsValid)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801ac82:	2300      	movs	r3, #0
 801ac84:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ac86:	f7fe fa53 	bl	8019130 <hif_chip_wake>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801ac8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d107      	bne.n	801aca6 <m2m_wifi_get_otp_mac_address+0x2e>
    {
        ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
 801ac96:	6839      	ldr	r1, [r7, #0]
 801ac98:	6878      	ldr	r0, [r7, #4]
 801ac9a:	f000 fd7d 	bl	801b798 <nmi_get_otp_mac_address>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801aca2:	f7fe fa9b 	bl	80191dc <hif_chip_sleep>
    }
    return ret;
 801aca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801acaa:	4618      	mov	r0, r3
 801acac:	3710      	adds	r7, #16
 801acae:	46bd      	mov	sp, r7
 801acb0:	bd80      	pop	{r7, pc}

0801acb2 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
 801acb2:	b580      	push	{r7, lr}
 801acb4:	b084      	sub	sp, #16
 801acb6:	af00      	add	r7, sp, #0
 801acb8:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801acba:	2300      	movs	r3, #0
 801acbc:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801acbe:	f7fe fa37 	bl	8019130 <hif_chip_wake>
 801acc2:	4603      	mov	r3, r0
 801acc4:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801acc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d106      	bne.n	801acdc <m2m_wifi_get_mac_address+0x2a>
    {
        ret = nmi_get_mac_address(pu8MacAddr);
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f000 fdc2 	bl	801b858 <nmi_get_mac_address>
 801acd4:	4603      	mov	r3, r0
 801acd6:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801acd8:	f7fe fa80 	bl	80191dc <hif_chip_sleep>
    }

    return ret;
 801acdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3710      	adds	r7, #16
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <m2m_wifi_req_scan_result>:
             which mean if large delay occur between the scan request and the scan result request,
             the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b088      	sub	sp, #32
 801acec:	af04      	add	r7, sp, #16
 801acee:	4603      	mov	r3, r0
 801acf0:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801acf2:	2300      	movs	r3, #0
 801acf4:	73fb      	strb	r3, [r7, #15]
    tstrM2mReqScanResult strReqScanRlt;
    strReqScanRlt.u8Index = index;
 801acf6:	79fb      	ldrb	r3, [r7, #7]
 801acf8:	723b      	strb	r3, [r7, #8]
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8 *) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 801acfa:	f107 0208 	add.w	r2, r7, #8
 801acfe:	2300      	movs	r3, #0
 801ad00:	9302      	str	r3, [sp, #8]
 801ad02:	2300      	movs	r3, #0
 801ad04:	9301      	str	r3, [sp, #4]
 801ad06:	2300      	movs	r3, #0
 801ad08:	9300      	str	r3, [sp, #0]
 801ad0a:	2304      	movs	r3, #4
 801ad0c:	2114      	movs	r1, #20
 801ad0e:	2001      	movs	r0, #1
 801ad10:	f7fe fb94 	bl	801943c <hif_send>
 801ad14:	4603      	mov	r3, r0
 801ad16:	73fb      	strb	r3, [r7, #15]
    return ret;
 801ad18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	3710      	adds	r7, #16
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bd80      	pop	{r7, pc}

0801ad24 <m2m_wifi_get_num_ap_found>:
@warning     That function need to be called in the wifi_cb in M2M_WIFI_RESP_SCAN_DONE,
             calling that function in any other place will return undefined/undated numbers.
             Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
 801ad24:	b480      	push	{r7}
 801ad26:	af00      	add	r7, sp, #0
    return gu8ChNum;
 801ad28:	4b03      	ldr	r3, [pc, #12]	; (801ad38 <m2m_wifi_get_num_ap_found+0x14>)
 801ad2a:	781b      	ldrb	r3, [r3, #0]
 801ad2c:	b2db      	uxtb	r3, r3
}
 801ad2e:	4618      	mov	r0, r3
 801ad30:	46bd      	mov	sp, r7
 801ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad36:	4770      	bx	lr
 801ad38:	2001dec9 	.word	0x2001dec9

0801ad3c <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa         tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b088      	sub	sp, #32
 801ad40:	af04      	add	r7, sp, #16
 801ad42:	4603      	mov	r3, r0
 801ad44:	460a      	mov	r2, r1
 801ad46:	71fb      	strb	r3, [r7, #7]
 801ad48:	4613      	mov	r3, r2
 801ad4a:	71bb      	strb	r3, [r7, #6]
    sint8 ret = M2M_SUCCESS;
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	73fb      	strb	r3, [r7, #15]
    tstrM2mPsType strPs;
    strPs.u8PsType = PsTyp;
 801ad50:	79fb      	ldrb	r3, [r7, #7]
 801ad52:	723b      	strb	r3, [r7, #8]
    strPs.u8BcastEn = BcastEn;
 801ad54:	79bb      	ldrb	r3, [r7, #6]
 801ad56:	727b      	strb	r3, [r7, #9]
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8 *) &strPs, sizeof(tstrM2mPsType), NULL, 0, 0);
 801ad58:	f107 0208 	add.w	r2, r7, #8
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9302      	str	r3, [sp, #8]
 801ad60:	2300      	movs	r3, #0
 801ad62:	9301      	str	r3, [sp, #4]
 801ad64:	2300      	movs	r3, #0
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	2304      	movs	r3, #4
 801ad6a:	212d      	movs	r1, #45	; 0x2d
 801ad6c:	2001      	movs	r0, #1
 801ad6e:	f7fe fb65 	bl	801943c <hif_send>
 801ad72:	4603      	mov	r3, r0
 801ad74:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("POWER SAVE %d\n", PsTyp);
 801ad76:	480a      	ldr	r0, [pc, #40]	; (801ada0 <m2m_wifi_set_sleep_mode+0x64>)
 801ad78:	f003 fb14 	bl	801e3a4 <iprintf>
 801ad7c:	79fb      	ldrb	r3, [r7, #7]
 801ad7e:	4619      	mov	r1, r3
 801ad80:	4808      	ldr	r0, [pc, #32]	; (801ada4 <m2m_wifi_set_sleep_mode+0x68>)
 801ad82:	f003 fb0f 	bl	801e3a4 <iprintf>
 801ad86:	200d      	movs	r0, #13
 801ad88:	f003 fb1e 	bl	801e3c8 <putchar>
    hif_set_sleep_mode(PsTyp);
 801ad8c:	79fb      	ldrb	r3, [r7, #7]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7fe f9fe 	bl	8019190 <hif_set_sleep_mode>
    return ret;
 801ad94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad98:	4618      	mov	r0, r3
 801ad9a:	3710      	adds	r7, #16
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}
 801ada0:	08020a1c 	.word	0x08020a1c
 801ada4:	08020bf0 	.word	0x08020bf0

0801ada8 <m2m_wifi_set_device_name>:
            Length of the device name.
@return     The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning    The Function called once after initialization.
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b092      	sub	sp, #72	; 0x48
 801adac:	af04      	add	r7, sp, #16
 801adae:	6078      	str	r0, [r7, #4]
 801adb0:	460b      	mov	r3, r1
 801adb2:	70fb      	strb	r3, [r7, #3]
    tstrM2MDeviceNameConfig strDeviceName;
    if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
 801adb4:	78fb      	ldrb	r3, [r7, #3]
 801adb6:	2b2f      	cmp	r3, #47	; 0x2f
 801adb8:	d901      	bls.n	801adbe <m2m_wifi_set_device_name+0x16>
    {
        u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
 801adba:	2330      	movs	r3, #48	; 0x30
 801adbc:	70fb      	strb	r3, [r7, #3]
    }
    //pu8DeviceName[u8DeviceNameLength] = '\0';
    u8DeviceNameLength ++;
 801adbe:	78fb      	ldrb	r3, [r7, #3]
 801adc0:	3301      	adds	r3, #1
 801adc2:	70fb      	strb	r3, [r7, #3]
    m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
 801adc4:	78fa      	ldrb	r2, [r7, #3]
 801adc6:	f107 0308 	add.w	r3, r7, #8
 801adca:	6879      	ldr	r1, [r7, #4]
 801adcc:	4618      	mov	r0, r3
 801adce:	f7fe f895 	bl	8018efc <m2m_memcpy>
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
 801add2:	f107 0208 	add.w	r2, r7, #8
 801add6:	2300      	movs	r3, #0
 801add8:	9302      	str	r3, [sp, #8]
 801adda:	2300      	movs	r3, #0
 801addc:	9301      	str	r3, [sp, #4]
 801adde:	2300      	movs	r3, #0
 801ade0:	9300      	str	r3, [sp, #0]
 801ade2:	2330      	movs	r3, #48	; 0x30
 801ade4:	2109      	movs	r1, #9
 801ade6:	2001      	movs	r0, #1
 801ade8:	f7fe fb28 	bl	801943c <hif_send>
 801adec:	4603      	mov	r3, r0
                    (uint8 *)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0, 0);
}
 801adee:	4618      	mov	r0, r3
 801adf0:	3738      	adds	r7, #56	; 0x38
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}

0801adf6 <m2m_wifi_configure_sntp>:
@param [in] useDHCP
            Should the NTP server provided by the DHCP server be used.
@return     The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_configure_sntp(uint8 *pu8NTPServerName, uint8 u8NTPServerNameLength, tenuSNTPUseDHCP useDHCP)
{
 801adf6:	b580      	push	{r7, lr}
 801adf8:	b090      	sub	sp, #64	; 0x40
 801adfa:	af04      	add	r7, sp, #16
 801adfc:	6078      	str	r0, [r7, #4]
 801adfe:	460b      	mov	r3, r1
 801ae00:	70fb      	strb	r3, [r7, #3]
 801ae02:	4613      	mov	r3, r2
 801ae04:	70bb      	strb	r3, [r7, #2]
    tstrM2MSNTPConfig strSNTPConfig;
    if(u8NTPServerNameLength > M2M_NTP_MAX_SERVER_NAME_LENGTH)
 801ae06:	78fb      	ldrb	r3, [r7, #3]
 801ae08:	2b20      	cmp	r3, #32
 801ae0a:	d902      	bls.n	801ae12 <m2m_wifi_configure_sntp+0x1c>
        return M2M_ERR_FAIL;
 801ae0c:	f06f 030b 	mvn.w	r3, #11
 801ae10:	e01d      	b.n	801ae4e <m2m_wifi_configure_sntp+0x58>

    m2m_memcpy((uint8 *)strSNTPConfig.acNTPServer, pu8NTPServerName, u8NTPServerNameLength);
 801ae12:	78fa      	ldrb	r2, [r7, #3]
 801ae14:	f107 030c 	add.w	r3, r7, #12
 801ae18:	6879      	ldr	r1, [r7, #4]
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f7fe f86e 	bl	8018efc <m2m_memcpy>
    strSNTPConfig.acNTPServer[u8NTPServerNameLength] = '\0';
 801ae20:	78fb      	ldrb	r3, [r7, #3]
 801ae22:	3330      	adds	r3, #48	; 0x30
 801ae24:	443b      	add	r3, r7
 801ae26:	2200      	movs	r2, #0
 801ae28:	f803 2c24 	strb.w	r2, [r3, #-36]

    strSNTPConfig.enuUseDHCP = useDHCP;
 801ae2c:	78bb      	ldrb	r3, [r7, #2]
 801ae2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONFIG_SNTP,
 801ae32:	f107 020c 	add.w	r2, r7, #12
 801ae36:	2300      	movs	r3, #0
 801ae38:	9302      	str	r3, [sp, #8]
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	9301      	str	r3, [sp, #4]
 801ae3e:	2300      	movs	r3, #0
 801ae40:	9300      	str	r3, [sp, #0]
 801ae42:	2324      	movs	r3, #36	; 0x24
 801ae44:	2126      	movs	r1, #38	; 0x26
 801ae46:	2001      	movs	r0, #1
 801ae48:	f7fe faf8 	bl	801943c <hif_send>
 801ae4c:	4603      	mov	r3, r0
                    (uint8 *)&strSNTPConfig, sizeof(tstrM2MSNTPConfig), NULL, 0, 0);
}
 801ae4e:	4618      	mov	r0, r3
 801ae50:	3730      	adds	r7, #48	; 0x30
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}

0801ae56 <m2m_wifi_get_firmware_version>:

@return
    The function SHALL return @ref M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
 801ae56:	b580      	push	{r7, lr}
 801ae58:	b084      	sub	sp, #16
 801ae5a:	af00      	add	r7, sp, #0
 801ae5c:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801ae5e:	2300      	movs	r3, #0
 801ae60:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ae62:	f7fe f965 	bl	8019130 <hif_chip_wake>
 801ae66:	4603      	mov	r3, r0
 801ae68:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d106      	bne.n	801ae80 <m2m_wifi_get_firmware_version+0x2a>
    {
        ret = nm_get_firmware_full_info(pstrRev);
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f000 fe64 	bl	801bb40 <nm_get_firmware_full_info>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801ae7c:	f7fe f9ae 	bl	80191dc <hif_chip_sleep>
    }
    return ret;
 801ae80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ae84:	4618      	mov	r0, r3
 801ae86:	3710      	adds	r7, #16
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd80      	pop	{r7, pc}

0801ae8c <m2m_ota_get_firmware_version>:

@return
    The function SHALL return @ref M2M_SUCCESS for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_get_firmware_version(tstrM2mRev *pstrRev)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801ae94:	2300      	movs	r3, #0
 801ae96:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ae98:	f7fe f94a 	bl	8019130 <hif_chip_wake>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801aea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d106      	bne.n	801aeb6 <m2m_ota_get_firmware_version+0x2a>
    {
        ret = nm_get_ota_firmware_info(pstrRev);
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f000 ff27 	bl	801bcfc <nm_get_ota_firmware_info>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801aeb2:	f7fe f993 	bl	80191dc <hif_chip_sleep>
    }
    return ret;
 801aeb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aeba:	4618      	mov	r0, r3
 801aebc:	3710      	adds	r7, #16
 801aebe:	46bd      	mov	sp, r7
 801aec0:	bd80      	pop	{r7, pc}

0801aec2 <chip_apply_conf>:

#define TIMEOUT                     (2000)
#define WAKEUP_TRIALS               (4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 801aec2:	b580      	push	{r7, lr}
 801aec4:	b086      	sub	sp, #24
 801aec6:	af00      	add	r7, sp, #0
 801aec8:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801aeca:	2300      	movs	r3, #0
 801aecc:	75fb      	strb	r3, [r7, #23]
    uint32 val32 = u32Conf;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
    val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
    do {
        nm_write_reg(rNMI_GP_REG_1, val32);
 801aed2:	6939      	ldr	r1, [r7, #16]
 801aed4:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 801aed8:	f000 fd40 	bl	801b95c <nm_write_reg>
        if(val32 != 0) {
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d013      	beq.n	801af0a <chip_apply_conf+0x48>
            uint32 reg = 0;
 801aee2:	2300      	movs	r3, #0
 801aee4:	60fb      	str	r3, [r7, #12]
            ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 801aee6:	f107 030c 	add.w	r3, r7, #12
 801aeea:	4619      	mov	r1, r3
 801aeec:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 801aef0:	f000 fd26 	bl	801b940 <nm_read_reg_with_ret>
 801aef4:	4603      	mov	r3, r0
 801aef6:	75fb      	strb	r3, [r7, #23]
            if(ret == M2M_SUCCESS) {
 801aef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d1e8      	bne.n	801aed2 <chip_apply_conf+0x10>
                if(reg == val32)
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	693a      	ldr	r2, [r7, #16]
 801af04:	429a      	cmp	r2, r3
 801af06:	d002      	beq.n	801af0e <chip_apply_conf+0x4c>
        nm_write_reg(rNMI_GP_REG_1, val32);
 801af08:	e7e3      	b.n	801aed2 <chip_apply_conf+0x10>
                    break;
            }
        } else {
            break;
 801af0a:	bf00      	nop
 801af0c:	e000      	b.n	801af10 <chip_apply_conf+0x4e>
                    break;
 801af0e:	bf00      	nop
        }
    } while(1);

    return M2M_SUCCESS;
 801af10:	2300      	movs	r3, #0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3718      	adds	r7, #24
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}

0801af1a <chip_idle>:

void chip_idle(void)
{
 801af1a:	b580      	push	{r7, lr}
 801af1c:	b082      	sub	sp, #8
 801af1e:	af00      	add	r7, sp, #0
    uint32 reg =0;
 801af20:	2300      	movs	r3, #0
 801af22:	607b      	str	r3, [r7, #4]
    nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801af24:	1d3b      	adds	r3, r7, #4
 801af26:	4619      	mov	r1, r3
 801af28:	2001      	movs	r0, #1
 801af2a:	f000 fd09 	bl	801b940 <nm_read_reg_with_ret>
    if(reg&NBIT1)
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	f003 0302 	and.w	r3, r3, #2
 801af34:	2b00      	cmp	r3, #0
 801af36:	d008      	beq.n	801af4a <chip_idle+0x30>
    {
        reg &=~NBIT1;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	f023 0302 	bic.w	r3, r3, #2
 801af3e:	607b      	str	r3, [r7, #4]
        nm_write_reg(WAKE_CLK_REG, reg);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	4619      	mov	r1, r3
 801af44:	2001      	movs	r0, #1
 801af46:	f000 fd09 	bl	801b95c <nm_write_reg>
    }
}
 801af4a:	bf00      	nop
 801af4c:	3708      	adds	r7, #8
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}

0801af52 <enable_interrupts>:
    nm_write_reg(0x6, 0x0);
    nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
 801af52:	b580      	push	{r7, lr}
 801af54:	b082      	sub	sp, #8
 801af56:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801af58:	2300      	movs	r3, #0
 801af5a:	603b      	str	r3, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801af5c:	2300      	movs	r3, #0
 801af5e:	71fb      	strb	r3, [r7, #7]
    /**
    interrupt pin mux select
    **/
    ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 801af60:	463b      	mov	r3, r7
 801af62:	4619      	mov	r1, r3
 801af64:	f241 4008 	movw	r0, #5128	; 0x1408
 801af68:	f000 fcea 	bl	801b940 <nm_read_reg_with_ret>
 801af6c:	4603      	mov	r3, r0
 801af6e:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801af70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d002      	beq.n	801af7e <enable_interrupts+0x2c>
        return M2M_ERR_BUS_FAIL;
 801af78:	f06f 0305 	mvn.w	r3, #5
 801af7c:	e035      	b.n	801afea <enable_interrupts+0x98>
    }
    reg |= ((uint32) 1 << 8);
 801af7e:	683b      	ldr	r3, [r7, #0]
 801af80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af84:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	4619      	mov	r1, r3
 801af8a:	f241 4008 	movw	r0, #5128	; 0x1408
 801af8e:	f000 fce5 	bl	801b95c <nm_write_reg>
 801af92:	4603      	mov	r3, r0
 801af94:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801af96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d002      	beq.n	801afa4 <enable_interrupts+0x52>
        return M2M_ERR_BUS_FAIL;
 801af9e:	f06f 0305 	mvn.w	r3, #5
 801afa2:	e022      	b.n	801afea <enable_interrupts+0x98>
    }
    /**
    interrupt enable
    **/
    ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 801afa4:	463b      	mov	r3, r7
 801afa6:	4619      	mov	r1, r3
 801afa8:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801afac:	f000 fcc8 	bl	801b940 <nm_read_reg_with_ret>
 801afb0:	4603      	mov	r3, r0
 801afb2:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801afb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d002      	beq.n	801afc2 <enable_interrupts+0x70>
        return M2M_ERR_BUS_FAIL;
 801afbc:	f06f 0305 	mvn.w	r3, #5
 801afc0:	e013      	b.n	801afea <enable_interrupts+0x98>
    }
    reg |= ((uint32) 1 << 16);
 801afc2:	683b      	ldr	r3, [r7, #0]
 801afc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afc8:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 801afca:	683b      	ldr	r3, [r7, #0]
 801afcc:	4619      	mov	r1, r3
 801afce:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801afd2:	f000 fcc3 	bl	801b95c <nm_write_reg>
 801afd6:	4603      	mov	r3, r0
 801afd8:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801afda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d002      	beq.n	801afe8 <enable_interrupts+0x96>
        return M2M_ERR_BUS_FAIL;
 801afe2:	f06f 0305 	mvn.w	r3, #5
 801afe6:	e000      	b.n	801afea <enable_interrupts+0x98>
    }
    return M2M_SUCCESS;
 801afe8:	2300      	movs	r3, #0
}
 801afea:	4618      	mov	r0, r3
 801afec:	3708      	adds	r7, #8
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
	...

0801aff4 <cpu_start>:

sint8 cpu_start(void) {
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b082      	sub	sp, #8
 801aff8:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801affa:	2300      	movs	r3, #0
 801affc:	603b      	str	r3, [r7, #0]
    sint8 ret;

    /**
    reset regs
    */
    ret = nm_write_reg(BOOTROM_REG, 0);
 801affe:	2100      	movs	r1, #0
 801b000:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801b004:	f000 fcaa 	bl	801b95c <nm_write_reg>
 801b008:	4603      	mov	r3, r0
 801b00a:	71fb      	strb	r3, [r7, #7]
    ret += nm_write_reg(NMI_STATE_REG, 0);
 801b00c:	2100      	movs	r1, #0
 801b00e:	f241 008c 	movw	r0, #4236	; 0x108c
 801b012:	f000 fca3 	bl	801b95c <nm_write_reg>
 801b016:	4603      	mov	r3, r0
 801b018:	b2da      	uxtb	r2, r3
 801b01a:	79fb      	ldrb	r3, [r7, #7]
 801b01c:	4413      	add	r3, r2
 801b01e:	b2db      	uxtb	r3, r3
 801b020:	71fb      	strb	r3, [r7, #7]
    ret += nm_write_reg(NMI_REV_REG, 0);
 801b022:	2100      	movs	r1, #0
 801b024:	483a      	ldr	r0, [pc, #232]	; (801b110 <cpu_start+0x11c>)
 801b026:	f000 fc99 	bl	801b95c <nm_write_reg>
 801b02a:	4603      	mov	r3, r0
 801b02c:	b2da      	uxtb	r2, r3
 801b02e:	79fb      	ldrb	r3, [r7, #7]
 801b030:	4413      	add	r3, r2
 801b032:	b2db      	uxtb	r3, r3
 801b034:	71fb      	strb	r3, [r7, #7]

    /**
    Go...
    **/
    ret += nm_read_reg_with_ret(0x1118, &reg);
 801b036:	463b      	mov	r3, r7
 801b038:	4619      	mov	r1, r3
 801b03a:	f241 1018 	movw	r0, #4376	; 0x1118
 801b03e:	f000 fc7f 	bl	801b940 <nm_read_reg_with_ret>
 801b042:	4603      	mov	r3, r0
 801b044:	b2da      	uxtb	r2, r3
 801b046:	79fb      	ldrb	r3, [r7, #7]
 801b048:	4413      	add	r3, r2
 801b04a:	b2db      	uxtb	r3, r3
 801b04c:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801b04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d00c      	beq.n	801b070 <cpu_start+0x7c>
        ret = M2M_ERR_BUS_FAIL;
 801b056:	23fa      	movs	r3, #250	; 0xfa
 801b058:	71fb      	strb	r3, [r7, #7]
        M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
 801b05a:	22a7      	movs	r2, #167	; 0xa7
 801b05c:	492d      	ldr	r1, [pc, #180]	; (801b114 <cpu_start+0x120>)
 801b05e:	482e      	ldr	r0, [pc, #184]	; (801b118 <cpu_start+0x124>)
 801b060:	f003 f9a0 	bl	801e3a4 <iprintf>
 801b064:	482d      	ldr	r0, [pc, #180]	; (801b11c <cpu_start+0x128>)
 801b066:	f003 fa0b 	bl	801e480 <puts>
 801b06a:	200d      	movs	r0, #13
 801b06c:	f003 f9ac 	bl	801e3c8 <putchar>
    }
    reg |= NBIT0;
 801b070:	683b      	ldr	r3, [r7, #0]
 801b072:	f043 0301 	orr.w	r3, r3, #1
 801b076:	603b      	str	r3, [r7, #0]
    ret += nm_write_reg(0x1118, reg);
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	4619      	mov	r1, r3
 801b07c:	f241 1018 	movw	r0, #4376	; 0x1118
 801b080:	f000 fc6c 	bl	801b95c <nm_write_reg>
 801b084:	4603      	mov	r3, r0
 801b086:	b2da      	uxtb	r2, r3
 801b088:	79fb      	ldrb	r3, [r7, #7]
 801b08a:	4413      	add	r3, r2
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	71fb      	strb	r3, [r7, #7]
    ret = nm_write_reg(0x150014, 0x1); //DTODO WHY IS THIS HERE??
 801b090:	2101      	movs	r1, #1
 801b092:	4823      	ldr	r0, [pc, #140]	; (801b120 <cpu_start+0x12c>)
 801b094:	f000 fc62 	bl	801b95c <nm_write_reg>
 801b098:	4603      	mov	r3, r0
 801b09a:	71fb      	strb	r3, [r7, #7]
    ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b09c:	463b      	mov	r3, r7
 801b09e:	4619      	mov	r1, r3
 801b0a0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b0a4:	f000 fc4c 	bl	801b940 <nm_read_reg_with_ret>
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	b2da      	uxtb	r2, r3
 801b0ac:	79fb      	ldrb	r3, [r7, #7]
 801b0ae:	4413      	add	r3, r2
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	71fb      	strb	r3, [r7, #7]
    if((reg & (1ul << 10)) == (1ul << 10)) {
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d00f      	beq.n	801b0de <cpu_start+0xea>
        reg &= ~(1ul << 10);
 801b0be:	683b      	ldr	r3, [r7, #0]
 801b0c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b0c4:	603b      	str	r3, [r7, #0]
        ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	4619      	mov	r1, r3
 801b0ca:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b0ce:	f000 fc45 	bl	801b95c <nm_write_reg>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	b2da      	uxtb	r2, r3
 801b0d6:	79fb      	ldrb	r3, [r7, #7]
 801b0d8:	4413      	add	r3, r2
 801b0da:	b2db      	uxtb	r3, r3
 801b0dc:	71fb      	strb	r3, [r7, #7]
    }

    reg |= (1ul << 10);
 801b0de:	683b      	ldr	r3, [r7, #0]
 801b0e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b0e4:	603b      	str	r3, [r7, #0]
    ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 801b0e6:	683b      	ldr	r3, [r7, #0]
 801b0e8:	4619      	mov	r1, r3
 801b0ea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b0ee:	f000 fc35 	bl	801b95c <nm_write_reg>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	b2da      	uxtb	r2, r3
 801b0f6:	79fb      	ldrb	r3, [r7, #7]
 801b0f8:	4413      	add	r3, r2
 801b0fa:	b2db      	uxtb	r3, r3
 801b0fc:	71fb      	strb	r3, [r7, #7]
    nm_bsp_sleep(1); /* Removing this can cause a bus error. */
 801b0fe:	2001      	movs	r0, #1
 801b100:	f7fd fe08 	bl	8018d14 <nm_bsp_sleep>
    return ret;
 801b104:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b108:	4618      	mov	r0, r3
 801b10a:	3708      	adds	r7, #8
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}
 801b110:	000207ac 	.word	0x000207ac
 801b114:	08028f44 	.word	0x08028f44
 801b118:	08020c4c 	.word	0x08020c4c
 801b11c:	08020c60 	.word	0x08020c60
 801b120:	00150014 	.word	0x00150014

0801b124 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b082      	sub	sp, #8
 801b128:	af00      	add	r7, sp, #0
    static uint32 chipid = 0;

    if(chipid == 0) {
 801b12a:	4b44      	ldr	r3, [pc, #272]	; (801b23c <nmi_get_chipid+0x118>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d17d      	bne.n	801b22e <nmi_get_chipid+0x10a>
        uint32 rfrevid;

        if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 801b132:	4942      	ldr	r1, [pc, #264]	; (801b23c <nmi_get_chipid+0x118>)
 801b134:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801b138:	f000 fc02 	bl	801b940 <nm_read_reg_with_ret>
 801b13c:	4603      	mov	r3, r0
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d004      	beq.n	801b14c <nmi_get_chipid+0x28>
            chipid = 0;
 801b142:	4b3e      	ldr	r3, [pc, #248]	; (801b23c <nmi_get_chipid+0x118>)
 801b144:	2200      	movs	r2, #0
 801b146:	601a      	str	r2, [r3, #0]
            return 0;
 801b148:	2300      	movs	r3, #0
 801b14a:	e072      	b.n	801b232 <nmi_get_chipid+0x10e>
        }
        if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 801b14c:	1d3b      	adds	r3, r7, #4
 801b14e:	4619      	mov	r1, r3
 801b150:	f241 30f4 	movw	r0, #5108	; 0x13f4
 801b154:	f000 fbf4 	bl	801b940 <nm_read_reg_with_ret>
 801b158:	4603      	mov	r3, r0
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d004      	beq.n	801b168 <nmi_get_chipid+0x44>
            chipid = 0;
 801b15e:	4b37      	ldr	r3, [pc, #220]	; (801b23c <nmi_get_chipid+0x118>)
 801b160:	2200      	movs	r2, #0
 801b162:	601a      	str	r2, [r3, #0]
            return 0;
 801b164:	2300      	movs	r3, #0
 801b166:	e064      	b.n	801b232 <nmi_get_chipid+0x10e>
        }

        if(chipid == 0x1002a0)  {
 801b168:	4b34      	ldr	r3, [pc, #208]	; (801b23c <nmi_get_chipid+0x118>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	4a34      	ldr	r2, [pc, #208]	; (801b240 <nmi_get_chipid+0x11c>)
 801b16e:	4293      	cmp	r3, r2
 801b170:	d106      	bne.n	801b180 <nmi_get_chipid+0x5c>
            if(rfrevid == 0x1) { /* 1002A0 */
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2b01      	cmp	r3, #1
 801b176:	d03a      	beq.n	801b1ee <nmi_get_chipid+0xca>
            } else /* if (rfrevid == 0x2) */ { /* 1002A1 */
                chipid = 0x1002a1;
 801b178:	4b30      	ldr	r3, [pc, #192]	; (801b23c <nmi_get_chipid+0x118>)
 801b17a:	4a32      	ldr	r2, [pc, #200]	; (801b244 <nmi_get_chipid+0x120>)
 801b17c:	601a      	str	r2, [r3, #0]
 801b17e:	e036      	b.n	801b1ee <nmi_get_chipid+0xca>
            }
        } else if(chipid == 0x1002b0) {
 801b180:	4b2e      	ldr	r3, [pc, #184]	; (801b23c <nmi_get_chipid+0x118>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	4a30      	ldr	r2, [pc, #192]	; (801b248 <nmi_get_chipid+0x124>)
 801b186:	4293      	cmp	r3, r2
 801b188:	d10d      	bne.n	801b1a6 <nmi_get_chipid+0x82>
            if(rfrevid == 3) { /* 1002B0 */
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	2b03      	cmp	r3, #3
 801b18e:	d02e      	beq.n	801b1ee <nmi_get_chipid+0xca>
            } else if(rfrevid == 4) { /* 1002B1 */
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	2b04      	cmp	r3, #4
 801b194:	d103      	bne.n	801b19e <nmi_get_chipid+0x7a>
                chipid = 0x1002b1;
 801b196:	4b29      	ldr	r3, [pc, #164]	; (801b23c <nmi_get_chipid+0x118>)
 801b198:	4a2c      	ldr	r2, [pc, #176]	; (801b24c <nmi_get_chipid+0x128>)
 801b19a:	601a      	str	r2, [r3, #0]
 801b19c:	e027      	b.n	801b1ee <nmi_get_chipid+0xca>
            } else /* if(rfrevid == 5) */ { /* 1002B2 */
                chipid = 0x1002b2;
 801b19e:	4b27      	ldr	r3, [pc, #156]	; (801b23c <nmi_get_chipid+0x118>)
 801b1a0:	4a2b      	ldr	r2, [pc, #172]	; (801b250 <nmi_get_chipid+0x12c>)
 801b1a2:	601a      	str	r2, [r3, #0]
 801b1a4:	e023      	b.n	801b1ee <nmi_get_chipid+0xca>
            }
        } else if(chipid == 0x1000f0) {
 801b1a6:	4b25      	ldr	r3, [pc, #148]	; (801b23c <nmi_get_chipid+0x118>)
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	4a2a      	ldr	r2, [pc, #168]	; (801b254 <nmi_get_chipid+0x130>)
 801b1ac:	4293      	cmp	r3, r2
 801b1ae:	d11e      	bne.n	801b1ee <nmi_get_chipid+0xca>
            /* For 3400, the WiFi chip ID register reads 0x1000f0.
             * Therefore using BT chip ID register here which should read 0x3000D0
             */
#define rBT_CHIP_ID_REG  (0x3b0000)
            if((nm_read_reg_with_ret(rBT_CHIP_ID_REG, &chipid)) != M2M_SUCCESS) {
 801b1b0:	4922      	ldr	r1, [pc, #136]	; (801b23c <nmi_get_chipid+0x118>)
 801b1b2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 801b1b6:	f000 fbc3 	bl	801b940 <nm_read_reg_with_ret>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d004      	beq.n	801b1ca <nmi_get_chipid+0xa6>
                chipid = 0;
 801b1c0:	4b1e      	ldr	r3, [pc, #120]	; (801b23c <nmi_get_chipid+0x118>)
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	601a      	str	r2, [r3, #0]
                return 0;
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	e033      	b.n	801b232 <nmi_get_chipid+0x10e>
            }
            if(chipid == 0x3000d0) {
 801b1ca:	4b1c      	ldr	r3, [pc, #112]	; (801b23c <nmi_get_chipid+0x118>)
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	4a22      	ldr	r2, [pc, #136]	; (801b258 <nmi_get_chipid+0x134>)
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	d10c      	bne.n	801b1ee <nmi_get_chipid+0xca>
                if(rfrevid == 6) {
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	2b06      	cmp	r3, #6
 801b1d8:	d103      	bne.n	801b1e2 <nmi_get_chipid+0xbe>
                    chipid = 0x3000d1;
 801b1da:	4b18      	ldr	r3, [pc, #96]	; (801b23c <nmi_get_chipid+0x118>)
 801b1dc:	4a1f      	ldr	r2, [pc, #124]	; (801b25c <nmi_get_chipid+0x138>)
 801b1de:	601a      	str	r2, [r3, #0]
 801b1e0:	e005      	b.n	801b1ee <nmi_get_chipid+0xca>
                }
                else if(rfrevid == 2) {
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2b02      	cmp	r3, #2
 801b1e6:	d102      	bne.n	801b1ee <nmi_get_chipid+0xca>
                    chipid = 0x3000d2;
 801b1e8:	4b14      	ldr	r3, [pc, #80]	; (801b23c <nmi_get_chipid+0x118>)
 801b1ea:	4a1d      	ldr	r2, [pc, #116]	; (801b260 <nmi_get_chipid+0x13c>)
 801b1ec:	601a      	str	r2, [r3, #0]
                }
            }
        }
#else
        /*M2M is by default have SPI flash*/
        if((chipid & 0xf00000) == 0x300000) {
 801b1ee:	4b13      	ldr	r3, [pc, #76]	; (801b23c <nmi_get_chipid+0x118>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 801b1f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801b1fa:	d10c      	bne.n	801b216 <nmi_get_chipid+0xf2>
            chipid &= ~(0x0f0000);
 801b1fc:	4b0f      	ldr	r3, [pc, #60]	; (801b23c <nmi_get_chipid+0x118>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 801b204:	4a0d      	ldr	r2, [pc, #52]	; (801b23c <nmi_get_chipid+0x118>)
 801b206:	6013      	str	r3, [r2, #0]
            chipid |= 0x040000;
 801b208:	4b0c      	ldr	r3, [pc, #48]	; (801b23c <nmi_get_chipid+0x118>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b210:	4a0a      	ldr	r2, [pc, #40]	; (801b23c <nmi_get_chipid+0x118>)
 801b212:	6013      	str	r3, [r2, #0]
 801b214:	e00b      	b.n	801b22e <nmi_get_chipid+0x10a>
        } else {
            chipid &= ~(0x0f0000);
 801b216:	4b09      	ldr	r3, [pc, #36]	; (801b23c <nmi_get_chipid+0x118>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 801b21e:	4a07      	ldr	r2, [pc, #28]	; (801b23c <nmi_get_chipid+0x118>)
 801b220:	6013      	str	r3, [r2, #0]
            chipid |= 0x050000;
 801b222:	4b06      	ldr	r3, [pc, #24]	; (801b23c <nmi_get_chipid+0x118>)
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 801b22a:	4a04      	ldr	r2, [pc, #16]	; (801b23c <nmi_get_chipid+0x118>)
 801b22c:	6013      	str	r3, [r2, #0]
        }
#endif /* PROBE_FLASH */
    }
    return chipid;
 801b22e:	4b03      	ldr	r3, [pc, #12]	; (801b23c <nmi_get_chipid+0x118>)
 801b230:	681b      	ldr	r3, [r3, #0]
}
 801b232:	4618      	mov	r0, r3
 801b234:	3708      	adds	r7, #8
 801b236:	46bd      	mov	sp, r7
 801b238:	bd80      	pop	{r7, pc}
 801b23a:	bf00      	nop
 801b23c:	2001ded0 	.word	0x2001ded0
 801b240:	001002a0 	.word	0x001002a0
 801b244:	001002a1 	.word	0x001002a1
 801b248:	001002b0 	.word	0x001002b0
 801b24c:	001002b1 	.word	0x001002b1
 801b250:	001002b2 	.word	0x001002b2
 801b254:	001000f0 	.word	0x001000f0
 801b258:	003000d0 	.word	0x003000d0
 801b25c:	003000d1 	.word	0x003000d1
 801b260:	003000d2 	.word	0x003000d2

0801b264 <chip_sleep>:
    /* Do PLL update */
    nmi_update_pll();
}

sint8 chip_sleep(void)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
    uint32 reg;
    sint8 ret = M2M_SUCCESS;
 801b26a:	2300      	movs	r3, #0
 801b26c:	71fb      	strb	r3, [r7, #7]

    while(1)
    {
        ret = nm_read_reg_with_ret(CORT_HOST_COMM, &reg);
 801b26e:	463b      	mov	r3, r7
 801b270:	4619      	mov	r1, r3
 801b272:	2014      	movs	r0, #20
 801b274:	f000 fb64 	bl	801b940 <nm_read_reg_with_ret>
 801b278:	4603      	mov	r3, r0
 801b27a:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS) goto ERR1;
 801b27c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d144      	bne.n	801b30e <chip_sleep+0xaa>
        if((reg & NBIT0) == 0) break;
 801b284:	683b      	ldr	r3, [r7, #0]
 801b286:	f003 0301 	and.w	r3, r3, #1
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d000      	beq.n	801b290 <chip_sleep+0x2c>
        ret = nm_read_reg_with_ret(CORT_HOST_COMM, &reg);
 801b28e:	e7ee      	b.n	801b26e <chip_sleep+0xa>
        if((reg & NBIT0) == 0) break;
 801b290:	bf00      	nop
    }

    /* Clear bit 1 */
    ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801b292:	463b      	mov	r3, r7
 801b294:	4619      	mov	r1, r3
 801b296:	2001      	movs	r0, #1
 801b298:	f000 fb52 	bl	801b940 <nm_read_reg_with_ret>
 801b29c:	4603      	mov	r3, r0
 801b29e:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS)goto ERR1;
 801b2a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d134      	bne.n	801b312 <chip_sleep+0xae>
    if(reg & NBIT1)
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	f003 0302 	and.w	r3, r3, #2
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d00e      	beq.n	801b2d0 <chip_sleep+0x6c>
    {
        reg &=~NBIT1;
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	f023 0302 	bic.w	r3, r3, #2
 801b2b8:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(WAKE_CLK_REG, reg);
 801b2ba:	683b      	ldr	r3, [r7, #0]
 801b2bc:	4619      	mov	r1, r3
 801b2be:	2001      	movs	r0, #1
 801b2c0:	f000 fb4c 	bl	801b95c <nm_write_reg>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 801b2c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d122      	bne.n	801b316 <chip_sleep+0xb2>
    }

    ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801b2d0:	463b      	mov	r3, r7
 801b2d2:	4619      	mov	r1, r3
 801b2d4:	200e      	movs	r0, #14
 801b2d6:	f000 fb33 	bl	801b940 <nm_read_reg_with_ret>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS)goto ERR1;
 801b2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d119      	bne.n	801b31a <chip_sleep+0xb6>
    if(reg & NBIT0)
 801b2e6:	683b      	ldr	r3, [r7, #0]
 801b2e8:	f003 0301 	and.w	r3, r3, #1
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d016      	beq.n	801b31e <chip_sleep+0xba>
    {
        reg &= ~NBIT0;
 801b2f0:	683b      	ldr	r3, [r7, #0]
 801b2f2:	f023 0301 	bic.w	r3, r3, #1
 801b2f6:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(HOST_CORT_COMM, reg);
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	4619      	mov	r1, r3
 801b2fc:	200e      	movs	r0, #14
 801b2fe:	f000 fb2d 	bl	801b95c <nm_write_reg>
 801b302:	4603      	mov	r3, r0
 801b304:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 801b306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b30a:	2b00      	cmp	r3, #0
    }

ERR1:
 801b30c:	e007      	b.n	801b31e <chip_sleep+0xba>
        if(ret != M2M_SUCCESS) goto ERR1;
 801b30e:	bf00      	nop
 801b310:	e006      	b.n	801b320 <chip_sleep+0xbc>
    if(ret != M2M_SUCCESS)goto ERR1;
 801b312:	bf00      	nop
 801b314:	e004      	b.n	801b320 <chip_sleep+0xbc>
        if(ret != M2M_SUCCESS)goto ERR1;
 801b316:	bf00      	nop
 801b318:	e002      	b.n	801b320 <chip_sleep+0xbc>
    if(ret != M2M_SUCCESS)goto ERR1;
 801b31a:	bf00      	nop
 801b31c:	e000      	b.n	801b320 <chip_sleep+0xbc>
ERR1:
 801b31e:	bf00      	nop
    return ret;
 801b320:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b324:	4618      	mov	r0, r3
 801b326:	3708      	adds	r7, #8
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}

0801b32c <chip_wake>:

sint8 chip_wake(void)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b084      	sub	sp, #16
 801b330:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 801b332:	2300      	movs	r3, #0
 801b334:	73fb      	strb	r3, [r7, #15]
    uint32 reg = 0, clk_status_reg = 0, trials = 0;
 801b336:	2300      	movs	r3, #0
 801b338:	607b      	str	r3, [r7, #4]
 801b33a:	2300      	movs	r3, #0
 801b33c:	603b      	str	r3, [r7, #0]
 801b33e:	2300      	movs	r3, #0
 801b340:	60bb      	str	r3, [r7, #8]

    nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 801b342:	463b      	mov	r3, r7
 801b344:	4619      	mov	r1, r3
 801b346:	2013      	movs	r0, #19
 801b348:	f000 fafa 	bl	801b940 <nm_read_reg_with_ret>

    ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801b34c:	1d3b      	adds	r3, r7, #4
 801b34e:	4619      	mov	r1, r3
 801b350:	200e      	movs	r0, #14
 801b352:	f000 faf5 	bl	801b940 <nm_read_reg_with_ret>
 801b356:	4603      	mov	r3, r0
 801b358:	73fb      	strb	r3, [r7, #15]
    if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d167      	bne.n	801b432 <chip_wake+0x106>

    if(!(reg & NBIT0))
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	f003 0301 	and.w	r3, r3, #1
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d10c      	bne.n	801b386 <chip_wake+0x5a>
    {
        /*USE bit 0 to indicate host wakeup*/
        ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f043 0301 	orr.w	r3, r3, #1
 801b372:	4619      	mov	r1, r3
 801b374:	200e      	movs	r0, #14
 801b376:	f000 faf1 	bl	801b95c <nm_write_reg>
 801b37a:	4603      	mov	r3, r0
 801b37c:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d157      	bne.n	801b436 <chip_wake+0x10a>
    }

    ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801b386:	1d3b      	adds	r3, r7, #4
 801b388:	4619      	mov	r1, r3
 801b38a:	2001      	movs	r0, #1
 801b38c:	f000 fad8 	bl	801b940 <nm_read_reg_with_ret>
 801b390:	4603      	mov	r3, r0
 801b392:	73fb      	strb	r3, [r7, #15]
    if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d14e      	bne.n	801b43a <chip_wake+0x10e>

    /* Set bit 1 */
    if(!(reg & NBIT1))
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	f003 0302 	and.w	r3, r3, #2
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d10c      	bne.n	801b3c0 <chip_wake+0x94>
    {
        ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	f043 0302 	orr.w	r3, r3, #2
 801b3ac:	4619      	mov	r1, r3
 801b3ae:	2001      	movs	r0, #1
 801b3b0:	f000 fad4 	bl	801b95c <nm_write_reg>
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d13e      	bne.n	801b43e <chip_wake+0x112>
    }

    do
    {
        ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 801b3c0:	463b      	mov	r3, r7
 801b3c2:	4619      	mov	r1, r3
 801b3c4:	2013      	movs	r0, #19
 801b3c6:	f000 fabb 	bl	801b940 <nm_read_reg_with_ret>
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS) {
 801b3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d010      	beq.n	801b3f8 <chip_wake+0xcc>
            M2M_ERR("Bus error (5).%d %lx\n", ret, clk_status_reg);
 801b3d6:	f240 1279 	movw	r2, #377	; 0x179
 801b3da:	491d      	ldr	r1, [pc, #116]	; (801b450 <chip_wake+0x124>)
 801b3dc:	481d      	ldr	r0, [pc, #116]	; (801b454 <chip_wake+0x128>)
 801b3de:	f002 ffe1 	bl	801e3a4 <iprintf>
 801b3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3e6:	683a      	ldr	r2, [r7, #0]
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	481b      	ldr	r0, [pc, #108]	; (801b458 <chip_wake+0x12c>)
 801b3ec:	f002 ffda 	bl	801e3a4 <iprintf>
 801b3f0:	200d      	movs	r0, #13
 801b3f2:	f002 ffe9 	bl	801e3c8 <putchar>
            goto _WAKE_EXIT;
 801b3f6:	e025      	b.n	801b444 <chip_wake+0x118>
        }
        if(clk_status_reg & NBIT2) {
 801b3f8:	683b      	ldr	r3, [r7, #0]
 801b3fa:	f003 0304 	and.w	r3, r3, #4
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d11f      	bne.n	801b442 <chip_wake+0x116>
            break;
        }
        nm_bsp_sleep(2);
 801b402:	2002      	movs	r0, #2
 801b404:	f7fd fc86 	bl	8018d14 <nm_bsp_sleep>
        trials++;
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	3301      	adds	r3, #1
 801b40c:	60bb      	str	r3, [r7, #8]
        if(trials > WAKEUP_TRIALS)
 801b40e:	68bb      	ldr	r3, [r7, #8]
 801b410:	2b04      	cmp	r3, #4
 801b412:	d9d5      	bls.n	801b3c0 <chip_wake+0x94>
        {
            M2M_ERR("Failed to wakeup the chip\n");
 801b414:	f240 1283 	movw	r2, #387	; 0x183
 801b418:	490d      	ldr	r1, [pc, #52]	; (801b450 <chip_wake+0x124>)
 801b41a:	480e      	ldr	r0, [pc, #56]	; (801b454 <chip_wake+0x128>)
 801b41c:	f002 ffc2 	bl	801e3a4 <iprintf>
 801b420:	480e      	ldr	r0, [pc, #56]	; (801b45c <chip_wake+0x130>)
 801b422:	f003 f82d 	bl	801e480 <puts>
 801b426:	200d      	movs	r0, #13
 801b428:	f002 ffce 	bl	801e3c8 <putchar>
            ret = M2M_ERR_TIME_OUT;
 801b42c:	23fc      	movs	r3, #252	; 0xfc
 801b42e:	73fb      	strb	r3, [r7, #15]
            goto _WAKE_EXIT;
 801b430:	e008      	b.n	801b444 <chip_wake+0x118>
    if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b432:	bf00      	nop
 801b434:	e006      	b.n	801b444 <chip_wake+0x118>
        if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b436:	bf00      	nop
 801b438:	e004      	b.n	801b444 <chip_wake+0x118>
    if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b43a:	bf00      	nop
 801b43c:	e002      	b.n	801b444 <chip_wake+0x118>
        if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b43e:	bf00      	nop
 801b440:	e000      	b.n	801b444 <chip_wake+0x118>
            break;
 801b442:	bf00      	nop
        }
    } while(1);
    /* Workaround sometimes spi fail to read clock regs after reading/writing clockless registers */
    //nm_bus_reset();
_WAKE_EXIT:
    return ret;
 801b444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b448:	4618      	mov	r0, r3
 801b44a:	3710      	adds	r7, #16
 801b44c:	46bd      	mov	sp, r7
 801b44e:	bd80      	pop	{r7, pc}
 801b450:	08028f50 	.word	0x08028f50
 801b454:	08020c4c 	.word	0x08020c4c
 801b458:	08020c88 	.word	0x08020c88
 801b45c:	08020ca0 	.word	0x08020ca0

0801b460 <wait_for_bootrom>:
#endif
    return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b086      	sub	sp, #24
 801b464:	af00      	add	r7, sp, #0
 801b466:	4603      	mov	r3, r0
 801b468:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801b46a:	2300      	movs	r3, #0
 801b46c:	75fb      	strb	r3, [r7, #23]
    uint32 reg = 0, cnt = 0;
 801b46e:	2300      	movs	r3, #0
 801b470:	613b      	str	r3, [r7, #16]
 801b472:	2300      	movs	r3, #0
 801b474:	60fb      	str	r3, [r7, #12]
    uint32 u32GpReg1 = 0;
 801b476:	2300      	movs	r3, #0
 801b478:	60bb      	str	r3, [r7, #8]

    reg = 0;
 801b47a:	2300      	movs	r3, #0
 801b47c:	613b      	str	r3, [r7, #16]
    while(1) {
        reg = nm_read_reg(0x1014);  /* wait for efuse loading done */
 801b47e:	f241 0014 	movw	r0, #4116	; 0x1014
 801b482:	f000 fa51 	bl	801b928 <nm_read_reg>
 801b486:	6138      	str	r0, [r7, #16]
        if(reg & 0x80000000) {
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	db03      	blt.n	801b496 <wait_for_bootrom+0x36>
            break;
        }
        nm_bsp_sleep(1); /* Removing this can cause a bus error. */
 801b48e:	2001      	movs	r0, #1
 801b490:	f7fd fc40 	bl	8018d14 <nm_bsp_sleep>
        reg = nm_read_reg(0x1014);  /* wait for efuse loading done */
 801b494:	e7f3      	b.n	801b47e <wait_for_bootrom+0x1e>
            break;
 801b496:	bf00      	nop
    }
    reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 801b498:	4825      	ldr	r0, [pc, #148]	; (801b530 <wait_for_bootrom+0xd0>)
 801b49a:	f000 fa45 	bl	801b928 <nm_read_reg>
 801b49e:	6138      	str	r0, [r7, #16]
    reg &= 0x1;
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	f003 0301 	and.w	r3, r3, #1
 801b4a6:	613b      	str	r3, [r7, #16]

    /* check if waiting for the host will be skipped or not */
    if(reg == 0)
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d116      	bne.n	801b4dc <wait_for_bootrom+0x7c>
    {
        while(reg != M2M_FINISH_BOOT_ROM)
 801b4ae:	e011      	b.n	801b4d4 <wait_for_bootrom+0x74>
        {
            nm_bsp_sleep(1);
 801b4b0:	2001      	movs	r0, #1
 801b4b2:	f7fd fc2f 	bl	8018d14 <nm_bsp_sleep>
            reg = nm_read_reg(BOOTROM_REG);
 801b4b6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801b4ba:	f000 fa35 	bl	801b928 <nm_read_reg>
 801b4be:	6138      	str	r0, [r7, #16]

            if(++cnt > TIMEOUT)
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	3301      	adds	r3, #1
 801b4c4:	60fb      	str	r3, [r7, #12]
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801b4cc:	d902      	bls.n	801b4d4 <wait_for_bootrom+0x74>
            {
                M2M_DBG("failed to load firmware from flash.\n");
                ret = M2M_ERR_INIT;
 801b4ce:	23fb      	movs	r3, #251	; 0xfb
 801b4d0:	75fb      	strb	r3, [r7, #23]
                goto ERR2;
 801b4d2:	e027      	b.n	801b524 <wait_for_bootrom+0xc4>
        while(reg != M2M_FINISH_BOOT_ROM)
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	4a17      	ldr	r2, [pc, #92]	; (801b534 <wait_for_bootrom+0xd4>)
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	d1e9      	bne.n	801b4b0 <wait_for_bootrom+0x50>
            }
        }
    }

    if(M2M_WIFI_MODE_CONFIG == arg) {
 801b4dc:	79fb      	ldrb	r3, [r7, #7]
 801b4de:	2b02      	cmp	r3, #2
 801b4e0:	d104      	bne.n	801b4ec <wait_for_bootrom+0x8c>
        nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 801b4e2:	4915      	ldr	r1, [pc, #84]	; (801b538 <wait_for_bootrom+0xd8>)
 801b4e4:	4815      	ldr	r0, [pc, #84]	; (801b53c <wait_for_bootrom+0xdc>)
 801b4e6:	f000 fa39 	bl	801b95c <nm_write_reg>
 801b4ea:	e004      	b.n	801b4f6 <wait_for_bootrom+0x96>
    } else if(M2M_WIFI_MODE_ETHERNET == arg) {
 801b4ec:	79fb      	ldrb	r3, [r7, #7]
 801b4ee:	2b03      	cmp	r3, #3
 801b4f0:	d101      	bne.n	801b4f6 <wait_for_bootrom+0x96>
        u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 801b4f2:	2380      	movs	r3, #128	; 0x80
 801b4f4:	60bb      	str	r3, [r7, #8]
    } else {
        /*bypass this step*/
    }

    if(REV(nmi_get_chipid()) == REV_3A0)
 801b4f6:	f7ff fe15 	bl	801b124 <nmi_get_chipid>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b500:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 801b504:	d106      	bne.n	801b514 <wait_for_bootrom+0xb4>
    {
        chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	f043 0302 	orr.w	r3, r3, #2
 801b50c:	4618      	mov	r0, r3
 801b50e:	f7ff fcd8 	bl	801aec2 <chip_apply_conf>
 801b512:	e002      	b.n	801b51a <wait_for_bootrom+0xba>
    }
    else
    {
        chip_apply_conf(u32GpReg1);
 801b514:	68b8      	ldr	r0, [r7, #8]
 801b516:	f7ff fcd4 	bl	801aec2 <chip_apply_conf>
    }

    nm_write_reg(BOOTROM_REG, M2M_START_FIRMWARE);
 801b51a:	4909      	ldr	r1, [pc, #36]	; (801b540 <wait_for_bootrom+0xe0>)
 801b51c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801b520:	f000 fa1c 	bl	801b95c <nm_write_reg>
#ifdef __ROM_TEST__
    rom_test();
#endif /* __ROM_TEST__ */

ERR2:
    return ret;
 801b524:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b528:	4618      	mov	r0, r3
 801b52a:	3718      	adds	r7, #24
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd80      	pop	{r7, pc}
 801b530:	000207bc 	.word	0x000207bc
 801b534:	10add09e 	.word	0x10add09e
 801b538:	3c1cd57d 	.word	0x3c1cd57d
 801b53c:	000207ac 	.word	0x000207ac
 801b540:	ef522f61 	.word	0xef522f61

0801b544 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 801b544:	b580      	push	{r7, lr}
 801b546:	b088      	sub	sp, #32
 801b548:	af00      	add	r7, sp, #0
 801b54a:	4603      	mov	r3, r0
 801b54c:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801b54e:	2300      	movs	r3, #0
 801b550:	77fb      	strb	r3, [r7, #31]
    uint32 reg = 0, cnt = 0;
 801b552:	2300      	movs	r3, #0
 801b554:	617b      	str	r3, [r7, #20]
 801b556:	2300      	movs	r3, #0
 801b558:	61bb      	str	r3, [r7, #24]
    volatile uint32 regAddress = NMI_STATE_REG;
 801b55a:	f241 038c 	movw	r3, #4236	; 0x108c
 801b55e:	613b      	str	r3, [r7, #16]
    volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 801b560:	4b1e      	ldr	r3, [pc, #120]	; (801b5dc <wait_for_firmware_start+0x98>)
 801b562:	60fb      	str	r3, [r7, #12]

    if(M2M_WIFI_MODE_CONFIG == arg) {
 801b564:	79fb      	ldrb	r3, [r7, #7]
 801b566:	2b02      	cmp	r3, #2
 801b568:	d122      	bne.n	801b5b0 <wait_for_firmware_start+0x6c>
        regAddress = NMI_REV_REG;
 801b56a:	4b1d      	ldr	r3, [pc, #116]	; (801b5e0 <wait_for_firmware_start+0x9c>)
 801b56c:	613b      	str	r3, [r7, #16]
        checkValue = M2M_ATE_FW_START_VALUE;//M2M_ATE_FW_IS_UP_VALUE;
 801b56e:	4b1d      	ldr	r3, [pc, #116]	; (801b5e4 <wait_for_firmware_start+0xa0>)
 801b570:	60fb      	str	r3, [r7, #12]
    } else {
        /*bypass this step*/
    }

    while(checkValue != reg)
 801b572:	e01d      	b.n	801b5b0 <wait_for_firmware_start+0x6c>
    {
        nm_bsp_sleep(2); /* Removing this can cause a bus error. */
 801b574:	2002      	movs	r0, #2
 801b576:	f7fd fbcd 	bl	8018d14 <nm_bsp_sleep>
        M2M_DBG("%x %x %x\n", (unsigned int)nm_read_reg(0x108c), (unsigned int)nm_read_reg(0x108c), (unsigned int)nm_read_reg(0x14A0));
        if(nm_read_reg_with_ret(regAddress, &reg) != M2M_SUCCESS)
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	f107 0214 	add.w	r2, r7, #20
 801b580:	4611      	mov	r1, r2
 801b582:	4618      	mov	r0, r3
 801b584:	f000 f9dc 	bl	801b940 <nm_read_reg_with_ret>
 801b588:	4603      	mov	r3, r0
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d006      	beq.n	801b59c <wait_for_firmware_start+0x58>
        {
            // ensure reg != checkValue
            reg = !checkValue;
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	2b00      	cmp	r3, #0
 801b592:	bf0c      	ite	eq
 801b594:	2301      	moveq	r3, #1
 801b596:	2300      	movne	r3, #0
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	617b      	str	r3, [r7, #20]
        }
        if(++cnt > TIMEOUT)
 801b59c:	69bb      	ldr	r3, [r7, #24]
 801b59e:	3301      	adds	r3, #1
 801b5a0:	61bb      	str	r3, [r7, #24]
 801b5a2:	69bb      	ldr	r3, [r7, #24]
 801b5a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801b5a8:	d902      	bls.n	801b5b0 <wait_for_firmware_start+0x6c>
        {
            M2M_DBG("Time out for wait firmware Run\n");
            ret = M2M_ERR_INIT;
 801b5aa:	23fb      	movs	r3, #251	; 0xfb
 801b5ac:	77fb      	strb	r3, [r7, #31]
            goto ERR;
 801b5ae:	e00e      	b.n	801b5ce <wait_for_firmware_start+0x8a>
    while(checkValue != reg)
 801b5b0:	68fa      	ldr	r2, [r7, #12]
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	429a      	cmp	r2, r3
 801b5b6:	d1dd      	bne.n	801b574 <wait_for_firmware_start+0x30>
        }
    }
    if(M2M_FINISH_INIT_STATE == checkValue)
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	4a08      	ldr	r2, [pc, #32]	; (801b5dc <wait_for_firmware_start+0x98>)
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d105      	bne.n	801b5cc <wait_for_firmware_start+0x88>
    {
        nm_write_reg(NMI_STATE_REG, 0);
 801b5c0:	2100      	movs	r1, #0
 801b5c2:	f241 008c 	movw	r0, #4236	; 0x108c
 801b5c6:	f000 f9c9 	bl	801b95c <nm_write_reg>
 801b5ca:	e000      	b.n	801b5ce <wait_for_firmware_start+0x8a>
    }
ERR:
 801b5cc:	bf00      	nop
    return ret;
 801b5ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	3720      	adds	r7, #32
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
 801b5da:	bf00      	nop
 801b5dc:	02532636 	.word	0x02532636
 801b5e0:	000207ac 	.word	0x000207ac
 801b5e4:	3c1cd57d 	.word	0x3c1cd57d

0801b5e8 <chip_deinit>:

sint8 chip_deinit(void)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b082      	sub	sp, #8
 801b5ec:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	603b      	str	r3, [r7, #0]
    sint8 ret;
    uint8 timeout = 10;
 801b5f2:	230a      	movs	r3, #10
 801b5f4:	71bb      	strb	r3, [r7, #6]

    /**
    stop the firmware, need a re-download
    **/
    ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b5f6:	463b      	mov	r3, r7
 801b5f8:	4619      	mov	r1, r3
 801b5fa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b5fe:	f000 f99f 	bl	801b940 <nm_read_reg_with_ret>
 801b602:	4603      	mov	r3, r0
 801b604:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS) {
 801b606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d00b      	beq.n	801b626 <chip_deinit+0x3e>
        M2M_ERR("failed to de-initialize\n");
 801b60e:	f240 2225 	movw	r2, #549	; 0x225
 801b612:	4931      	ldr	r1, [pc, #196]	; (801b6d8 <chip_deinit+0xf0>)
 801b614:	4831      	ldr	r0, [pc, #196]	; (801b6dc <chip_deinit+0xf4>)
 801b616:	f002 fec5 	bl	801e3a4 <iprintf>
 801b61a:	4831      	ldr	r0, [pc, #196]	; (801b6e0 <chip_deinit+0xf8>)
 801b61c:	f002 ff30 	bl	801e480 <puts>
 801b620:	200d      	movs	r0, #13
 801b622:	f002 fed1 	bl	801e3c8 <putchar>
    }
    reg &= ~(1 << 10);
 801b626:	683b      	ldr	r3, [r7, #0]
 801b628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b62c:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	4619      	mov	r1, r3
 801b632:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b636:	f000 f991 	bl	801b95c <nm_write_reg>
 801b63a:	4603      	mov	r3, r0
 801b63c:	71fb      	strb	r3, [r7, #7]

    if(ret != M2M_SUCCESS) {
 801b63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d00e      	beq.n	801b664 <chip_deinit+0x7c>
        M2M_ERR("Error while writing reg\n");
 801b646:	f240 222b 	movw	r2, #555	; 0x22b
 801b64a:	4923      	ldr	r1, [pc, #140]	; (801b6d8 <chip_deinit+0xf0>)
 801b64c:	4823      	ldr	r0, [pc, #140]	; (801b6dc <chip_deinit+0xf4>)
 801b64e:	f002 fea9 	bl	801e3a4 <iprintf>
 801b652:	4824      	ldr	r0, [pc, #144]	; (801b6e4 <chip_deinit+0xfc>)
 801b654:	f002 ff14 	bl	801e480 <puts>
 801b658:	200d      	movs	r0, #13
 801b65a:	f002 feb5 	bl	801e3c8 <putchar>
        return ret;
 801b65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b662:	e035      	b.n	801b6d0 <chip_deinit+0xe8>
    }

    do {
        ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b664:	463b      	mov	r3, r7
 801b666:	4619      	mov	r1, r3
 801b668:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b66c:	f000 f968 	bl	801b940 <nm_read_reg_with_ret>
 801b670:	4603      	mov	r3, r0
 801b672:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS) {
 801b674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d00e      	beq.n	801b69a <chip_deinit+0xb2>
            M2M_ERR("Error while reading reg\n");
 801b67c:	f240 2232 	movw	r2, #562	; 0x232
 801b680:	4915      	ldr	r1, [pc, #84]	; (801b6d8 <chip_deinit+0xf0>)
 801b682:	4816      	ldr	r0, [pc, #88]	; (801b6dc <chip_deinit+0xf4>)
 801b684:	f002 fe8e 	bl	801e3a4 <iprintf>
 801b688:	4817      	ldr	r0, [pc, #92]	; (801b6e8 <chip_deinit+0x100>)
 801b68a:	f002 fef9 	bl	801e480 <puts>
 801b68e:	200d      	movs	r0, #13
 801b690:	f002 fe9a 	bl	801e3c8 <putchar>
            return ret;
 801b694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b698:	e01a      	b.n	801b6d0 <chip_deinit+0xe8>
        }
        /*Workaround to ensure that the chip is actually reset*/
        if((reg & (1 << 10))) {
 801b69a:	683b      	ldr	r3, [r7, #0]
 801b69c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d012      	beq.n	801b6ca <chip_deinit+0xe2>
            M2M_DBG("Bit 10 not reset retry %d\n", timeout);
            reg &= ~(1 << 10);
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6aa:	603b      	str	r3, [r7, #0]
            ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	4619      	mov	r1, r3
 801b6b0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b6b4:	f000 f952 	bl	801b95c <nm_write_reg>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	71fb      	strb	r3, [r7, #7]
            timeout--;
 801b6bc:	79bb      	ldrb	r3, [r7, #6]
 801b6be:	3b01      	subs	r3, #1
 801b6c0:	71bb      	strb	r3, [r7, #6]
        } else {
            break;
        }
    } while(timeout);
 801b6c2:	79bb      	ldrb	r3, [r7, #6]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d1cd      	bne.n	801b664 <chip_deinit+0x7c>
 801b6c8:	e000      	b.n	801b6cc <chip_deinit+0xe4>
            break;
 801b6ca:	bf00      	nop

    return ret;
 801b6cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3708      	adds	r7, #8
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	08028f5c 	.word	0x08028f5c
 801b6dc:	08020c4c 	.word	0x08020c4c
 801b6e0:	08020cbc 	.word	0x08020cbc
 801b6e4:	08020cd4 	.word	0x08020cd4
 801b6e8:	08020cec 	.word	0x08020cec

0801b6ec <pullup_ctrl>:
_EXIT:
    return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
 801b6ec:	b580      	push	{r7, lr}
 801b6ee:	b084      	sub	sp, #16
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	6078      	str	r0, [r7, #4]
 801b6f4:	460b      	mov	r3, r1
 801b6f6:	70fb      	strb	r3, [r7, #3]
    sint8 s8Ret;
    uint32 val32;
    s8Ret = nm_read_reg_with_ret(0x142c, &val32);
 801b6f8:	f107 0308 	add.w	r3, r7, #8
 801b6fc:	4619      	mov	r1, r3
 801b6fe:	f241 402c 	movw	r0, #5164	; 0x142c
 801b702:	f000 f91d 	bl	801b940 <nm_read_reg_with_ret>
 801b706:	4603      	mov	r3, r0
 801b708:	73fb      	strb	r3, [r7, #15]
    if(s8Ret != M2M_SUCCESS) {
 801b70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d00c      	beq.n	801b72c <pullup_ctrl+0x40>
        M2M_ERR("[pullup_ctrl]: failed to read\n");
 801b712:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b716:	491c      	ldr	r1, [pc, #112]	; (801b788 <pullup_ctrl+0x9c>)
 801b718:	481c      	ldr	r0, [pc, #112]	; (801b78c <pullup_ctrl+0xa0>)
 801b71a:	f002 fe43 	bl	801e3a4 <iprintf>
 801b71e:	481c      	ldr	r0, [pc, #112]	; (801b790 <pullup_ctrl+0xa4>)
 801b720:	f002 feae 	bl	801e480 <puts>
 801b724:	200d      	movs	r0, #13
 801b726:	f002 fe4f 	bl	801e3c8 <putchar>
        goto _EXIT;
 801b72a:	e026      	b.n	801b77a <pullup_ctrl+0x8e>
    }
    if(enable) {
 801b72c:	78fb      	ldrb	r3, [r7, #3]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d005      	beq.n	801b73e <pullup_ctrl+0x52>
        val32 &= ~pinmask;
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	43da      	mvns	r2, r3
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	4013      	ands	r3, r2
 801b73a:	60bb      	str	r3, [r7, #8]
 801b73c:	e003      	b.n	801b746 <pullup_ctrl+0x5a>
    } else {
        val32 |= pinmask;
 801b73e:	68ba      	ldr	r2, [r7, #8]
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	4313      	orrs	r3, r2
 801b744:	60bb      	str	r3, [r7, #8]
    }
    s8Ret = nm_write_reg(0x142c, val32);
 801b746:	68bb      	ldr	r3, [r7, #8]
 801b748:	4619      	mov	r1, r3
 801b74a:	f241 402c 	movw	r0, #5164	; 0x142c
 801b74e:	f000 f905 	bl	801b95c <nm_write_reg>
 801b752:	4603      	mov	r3, r0
 801b754:	73fb      	strb	r3, [r7, #15]
    if(s8Ret  != M2M_SUCCESS) {
 801b756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d00c      	beq.n	801b778 <pullup_ctrl+0x8c>
        M2M_ERR("[pullup_ctrl]: failed to write\n");
 801b75e:	f240 228a 	movw	r2, #650	; 0x28a
 801b762:	4909      	ldr	r1, [pc, #36]	; (801b788 <pullup_ctrl+0x9c>)
 801b764:	4809      	ldr	r0, [pc, #36]	; (801b78c <pullup_ctrl+0xa0>)
 801b766:	f002 fe1d 	bl	801e3a4 <iprintf>
 801b76a:	480a      	ldr	r0, [pc, #40]	; (801b794 <pullup_ctrl+0xa8>)
 801b76c:	f002 fe88 	bl	801e480 <puts>
 801b770:	200d      	movs	r0, #13
 801b772:	f002 fe29 	bl	801e3c8 <putchar>
        goto _EXIT;
 801b776:	e000      	b.n	801b77a <pullup_ctrl+0x8e>
    }
_EXIT:
 801b778:	bf00      	nop
    return s8Ret;
 801b77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b77e:	4618      	mov	r0, r3
 801b780:	3710      	adds	r7, #16
 801b782:	46bd      	mov	sp, r7
 801b784:	bd80      	pop	{r7, pc}
 801b786:	bf00      	nop
 801b788:	08028f68 	.word	0x08028f68
 801b78c:	08020c4c 	.word	0x08020c4c
 801b790:	08020d04 	.word	0x08020d04
 801b794:	08020d24 	.word	0x08020d24

0801b798 <nmi_get_otp_mac_address>:
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 *pu8IsValid)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b088      	sub	sp, #32
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
 801b7a0:	6039      	str	r1, [r7, #0]
    sint8 ret;
    uint32  u32RegValue;
    uint8   mac[6];
    tstrGpRegs strgp = {0};
 801b7a2:	f107 0308 	add.w	r3, r7, #8
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	601a      	str	r2, [r3, #0]
 801b7aa:	605a      	str	r2, [r3, #4]

    ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
 801b7ac:	f107 0318 	add.w	r3, r7, #24
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	f241 409c 	movw	r0, #5276	; 0x149c
 801b7b6:	f000 f8c3 	bl	801b940 <nm_read_reg_with_ret>
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b7be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d139      	bne.n	801b83a <nmi_get_otp_mac_address+0xa2>

    ret = nm_read_block(u32RegValue|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b7cc:	f107 0108 	add.w	r1, r7, #8
 801b7d0:	2208      	movs	r2, #8
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f000 f8e2 	bl	801b99c <nm_read_block>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b7dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d12c      	bne.n	801b83e <nmi_get_otp_mac_address+0xa6>
    u32RegValue = strgp.u32Mac_efuse_mib;
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	61bb      	str	r3, [r7, #24]

    if(!EFUSED_MAC(u32RegValue)) {
 801b7e8:	69bb      	ldr	r3, [r7, #24]
 801b7ea:	0c1b      	lsrs	r3, r3, #16
 801b7ec:	041b      	lsls	r3, r3, #16
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d105      	bne.n	801b7fe <nmi_get_otp_mac_address+0x66>
        M2M_DBG("Default MAC\n");
        m2m_memset(pu8MacAddr, 0, 6);
 801b7f2:	2206      	movs	r2, #6
 801b7f4:	2100      	movs	r1, #0
 801b7f6:	6878      	ldr	r0, [r7, #4]
 801b7f8:	f7fd fba0 	bl	8018f3c <m2m_memset>
        goto _EXIT_ERR;
 801b7fc:	e020      	b.n	801b840 <nmi_get_otp_mac_address+0xa8>
    }

    M2M_DBG("OTP MAC\n");
    u32RegValue >>=16;
 801b7fe:	69bb      	ldr	r3, [r7, #24]
 801b800:	0c1b      	lsrs	r3, r3, #16
 801b802:	61bb      	str	r3, [r7, #24]
    ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 801b804:	69bb      	ldr	r3, [r7, #24]
 801b806:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b80a:	f107 0110 	add.w	r1, r7, #16
 801b80e:	2206      	movs	r2, #6
 801b810:	4618      	mov	r0, r3
 801b812:	f000 f8c3 	bl	801b99c <nm_read_block>
 801b816:	4603      	mov	r3, r0
 801b818:	77fb      	strb	r3, [r7, #31]
    m2m_memcpy(pu8MacAddr, mac, 6);
 801b81a:	f107 0310 	add.w	r3, r7, #16
 801b81e:	2206      	movs	r2, #6
 801b820:	4619      	mov	r1, r3
 801b822:	6878      	ldr	r0, [r7, #4]
 801b824:	f7fd fb6a 	bl	8018efc <m2m_memcpy>
    if(pu8IsValid) *pu8IsValid = 1;
 801b828:	683b      	ldr	r3, [r7, #0]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d002      	beq.n	801b834 <nmi_get_otp_mac_address+0x9c>
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	2201      	movs	r2, #1
 801b832:	701a      	strb	r2, [r3, #0]
    return ret;
 801b834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b838:	e00a      	b.n	801b850 <nmi_get_otp_mac_address+0xb8>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b83a:	bf00      	nop
 801b83c:	e000      	b.n	801b840 <nmi_get_otp_mac_address+0xa8>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b83e:	bf00      	nop

_EXIT_ERR:
    if(pu8IsValid) *pu8IsValid = 0;
 801b840:	683b      	ldr	r3, [r7, #0]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d002      	beq.n	801b84c <nmi_get_otp_mac_address+0xb4>
 801b846:	683b      	ldr	r3, [r7, #0]
 801b848:	2200      	movs	r2, #0
 801b84a:	701a      	strb	r2, [r3, #0]
    return ret;
 801b84c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b850:	4618      	mov	r0, r3
 801b852:	3720      	adds	r7, #32
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}

0801b858 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b088      	sub	sp, #32
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	6078      	str	r0, [r7, #4]
    sint8 ret;
    uint32  u32RegValue;
    uint8   mac[6];
    tstrGpRegs strgp = {0};
 801b860:	f107 0308 	add.w	r3, r7, #8
 801b864:	2200      	movs	r2, #0
 801b866:	601a      	str	r2, [r3, #0]
 801b868:	605a      	str	r2, [r3, #4]

    ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
 801b86a:	f107 0318 	add.w	r3, r7, #24
 801b86e:	4619      	mov	r1, r3
 801b870:	f241 409c 	movw	r0, #5276	; 0x149c
 801b874:	f000 f864 	bl	801b940 <nm_read_reg_with_ret>
 801b878:	4603      	mov	r3, r0
 801b87a:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b87c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d126      	bne.n	801b8d2 <nmi_get_mac_address+0x7a>

    ret = nm_read_block(u32RegValue|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801b884:	69bb      	ldr	r3, [r7, #24]
 801b886:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b88a:	f107 0108 	add.w	r1, r7, #8
 801b88e:	2208      	movs	r2, #8
 801b890:	4618      	mov	r0, r3
 801b892:	f000 f883 	bl	801b99c <nm_read_block>
 801b896:	4603      	mov	r3, r0
 801b898:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b89a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d119      	bne.n	801b8d6 <nmi_get_mac_address+0x7e>
    u32RegValue = strgp.u32Mac_efuse_mib;
 801b8a2:	68bb      	ldr	r3, [r7, #8]
 801b8a4:	61bb      	str	r3, [r7, #24]

    u32RegValue &=0x0000ffff;
 801b8a6:	69bb      	ldr	r3, [r7, #24]
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	61bb      	str	r3, [r7, #24]
    ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 801b8ac:	69bb      	ldr	r3, [r7, #24]
 801b8ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b8b2:	f107 0110 	add.w	r1, r7, #16
 801b8b6:	2206      	movs	r2, #6
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f000 f86f 	bl	801b99c <nm_read_block>
 801b8be:	4603      	mov	r3, r0
 801b8c0:	77fb      	strb	r3, [r7, #31]
    m2m_memcpy(pu8MacAddr, mac, 6);
 801b8c2:	f107 0310 	add.w	r3, r7, #16
 801b8c6:	2206      	movs	r2, #6
 801b8c8:	4619      	mov	r1, r3
 801b8ca:	6878      	ldr	r0, [r7, #4]
 801b8cc:	f7fd fb16 	bl	8018efc <m2m_memcpy>
 801b8d0:	e002      	b.n	801b8d8 <nmi_get_mac_address+0x80>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b8d2:	bf00      	nop
 801b8d4:	e000      	b.n	801b8d8 <nmi_get_mac_address+0x80>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b8d6:	bf00      	nop

_EXIT_ERR:
    return ret;
 801b8d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	3720      	adds	r7, #32
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd80      	pop	{r7, pc}

0801b8e4 <nm_bus_iface_init>:
 *  @fn         nm_bus_iface_init
 *  @brief      Initialize bus interface
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_iface_init(uint8 *pvInitVal, uint32 req_serial_number)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b084      	sub	sp, #16
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
 801b8ec:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	73fb      	strb	r3, [r7, #15]
    ret = nm_bus_init(pvInitVal, req_serial_number);
 801b8f2:	6839      	ldr	r1, [r7, #0]
 801b8f4:	6878      	ldr	r0, [r7, #4]
 801b8f6:	f7fd fab5 	bl	8018e64 <nm_bus_init>
 801b8fa:	4603      	mov	r3, r0
 801b8fc:	73fb      	strb	r3, [r7, #15]

    return ret;
 801b8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b902:	4618      	mov	r0, r3
 801b904:	3710      	adds	r7, #16
 801b906:	46bd      	mov	sp, r7
 801b908:	bd80      	pop	{r7, pc}

0801b90a <nm_bus_iface_deinit>:
 *  @fn         nm_bus_iface_deinit
 *  @brief      Deinitialize bus interface
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_iface_deinit(void)
{
 801b90a:	b580      	push	{r7, lr}
 801b90c:	b082      	sub	sp, #8
 801b90e:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 801b910:	2300      	movs	r3, #0
 801b912:	71fb      	strb	r3, [r7, #7]
    ret = nm_bus_deinit();
 801b914:	f7fd faea 	bl	8018eec <nm_bus_deinit>
 801b918:	4603      	mov	r3, r0
 801b91a:	71fb      	strb	r3, [r7, #7]

    return ret;
 801b91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b920:	4618      	mov	r0, r3
 801b922:	3708      	adds	r7, #8
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}

0801b928 <nm_read_reg>:
 *  @param[in]  u32Addr
 *                  Register address
 *  @return     Register value
 */
uint32 nm_read_reg(uint32 u32Addr)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b082      	sub	sp, #8
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_reg(u32Addr);
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	f001 fa31 	bl	801cd98 <nm_spi_read_reg>
 801b936:	4603      	mov	r3, r0
    return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 801b938:	4618      	mov	r0, r3
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}

0801b940 <nm_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b082      	sub	sp, #8
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_reg_with_ret(u32Addr, pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_reg_with_ret(u32Addr, pu32RetVal);
 801b94a:	6839      	ldr	r1, [r7, #0]
 801b94c:	6878      	ldr	r0, [r7, #4]
 801b94e:	f001 f80f 	bl	801c970 <nm_spi_read_reg_with_ret>
 801b952:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
    return nm_i2c_read_reg_with_ret(u32Addr, pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 801b954:	4618      	mov	r0, r3
 801b956:	3708      	adds	r7, #8
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}

0801b95c <nm_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b082      	sub	sp, #8
 801b960:	af00      	add	r7, sp, #0
 801b962:	6078      	str	r0, [r7, #4]
 801b964:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
    return nm_uart_write_reg(u32Addr, u32Val);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_write_reg(u32Addr, u32Val);
 801b966:	6839      	ldr	r1, [r7, #0]
 801b968:	6878      	ldr	r0, [r7, #4]
 801b96a:	f000 fee3 	bl	801c734 <nm_spi_write_reg>
 801b96e:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
    return nm_i2c_write_reg(u32Addr, u32Val);
#else
#error "Please define bus usage"
#endif
}
 801b970:	4618      	mov	r0, r3
 801b972:	3708      	adds	r7, #8
 801b974:	46bd      	mov	sp, r7
 801b976:	bd80      	pop	{r7, pc}

0801b978 <p_nm_read_block>:

static inline sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b084      	sub	sp, #16
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	60f8      	str	r0, [r7, #12]
 801b980:	60b9      	str	r1, [r7, #8]
 801b982:	4613      	mov	r3, r2
 801b984:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_block(u32Addr, puBuf, u16Sz);
 801b986:	88fb      	ldrh	r3, [r7, #6]
 801b988:	461a      	mov	r2, r3
 801b98a:	68b9      	ldr	r1, [r7, #8]
 801b98c:	68f8      	ldr	r0, [r7, #12]
 801b98e:	f001 f89b 	bl	801cac8 <nm_spi_read_block>
 801b992:	4603      	mov	r3, r0
    return nm_i2c_read_block(u32Addr, puBuf, u16Sz);
#else
#error "Please define bus usage"
#endif

}
 801b994:	4618      	mov	r0, r3
 801b996:	3710      	adds	r7, #16
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd80      	pop	{r7, pc}

0801b99c <nm_read_block>:
 *  @param[in]  u32Sz
 *                  Number of bytes to read. The buffer size must be >= u32Sz
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b086      	sub	sp, #24
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	60f8      	str	r0, [r7, #12]
 801b9a4:	60b9      	str	r1, [r7, #8]
 801b9a6:	607a      	str	r2, [r7, #4]
    uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 801b9a8:	4b20      	ldr	r3, [pc, #128]	; (801ba2c <nm_read_block+0x90>)
 801b9aa:	881b      	ldrh	r3, [r3, #0]
 801b9ac:	3b08      	subs	r3, #8
 801b9ae:	823b      	strh	r3, [r7, #16]
    uint32 off = 0;
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	617b      	str	r3, [r7, #20]
    sint8 s8Ret = M2M_SUCCESS;
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	74fb      	strb	r3, [r7, #19]

    for(;;)
    {
        if(u32Sz <= u16MaxTrxSz)
 801b9b8:	8a3b      	ldrh	r3, [r7, #16]
 801b9ba:	687a      	ldr	r2, [r7, #4]
 801b9bc:	429a      	cmp	r2, r3
 801b9be:	d80f      	bhi.n	801b9e0 <nm_read_block+0x44>
        {
            s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 801b9c0:	68ba      	ldr	r2, [r7, #8]
 801b9c2:	697b      	ldr	r3, [r7, #20]
 801b9c4:	4413      	add	r3, r2
 801b9c6:	687a      	ldr	r2, [r7, #4]
 801b9c8:	b292      	uxth	r2, r2
 801b9ca:	4619      	mov	r1, r3
 801b9cc:	68f8      	ldr	r0, [r7, #12]
 801b9ce:	f7ff ffd3 	bl	801b978 <p_nm_read_block>
 801b9d2:	4603      	mov	r3, r0
 801b9d4:	b2da      	uxtb	r2, r3
 801b9d6:	7cfb      	ldrb	r3, [r7, #19]
 801b9d8:	4413      	add	r3, r2
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	74fb      	strb	r3, [r7, #19]
            break;
 801b9de:	e01f      	b.n	801ba20 <nm_read_block+0x84>
        }
        else
        {
            s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 801b9e0:	68ba      	ldr	r2, [r7, #8]
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	4413      	add	r3, r2
 801b9e6:	8a3a      	ldrh	r2, [r7, #16]
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	68f8      	ldr	r0, [r7, #12]
 801b9ec:	f7ff ffc4 	bl	801b978 <p_nm_read_block>
 801b9f0:	4603      	mov	r3, r0
 801b9f2:	b2da      	uxtb	r2, r3
 801b9f4:	7cfb      	ldrb	r3, [r7, #19]
 801b9f6:	4413      	add	r3, r2
 801b9f8:	b2db      	uxtb	r3, r3
 801b9fa:	74fb      	strb	r3, [r7, #19]
            if(M2M_SUCCESS != s8Ret) break;
 801b9fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d10c      	bne.n	801ba1e <nm_read_block+0x82>
            u32Sz -= u16MaxTrxSz;
 801ba04:	8a3b      	ldrh	r3, [r7, #16]
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	1ad3      	subs	r3, r2, r3
 801ba0a:	607b      	str	r3, [r7, #4]
            off += u16MaxTrxSz;
 801ba0c:	8a3b      	ldrh	r3, [r7, #16]
 801ba0e:	697a      	ldr	r2, [r7, #20]
 801ba10:	4413      	add	r3, r2
 801ba12:	617b      	str	r3, [r7, #20]
            u32Addr += u16MaxTrxSz;
 801ba14:	8a3b      	ldrh	r3, [r7, #16]
 801ba16:	68fa      	ldr	r2, [r7, #12]
 801ba18:	4413      	add	r3, r2
 801ba1a:	60fb      	str	r3, [r7, #12]
        if(u32Sz <= u16MaxTrxSz)
 801ba1c:	e7cc      	b.n	801b9b8 <nm_read_block+0x1c>
            if(M2M_SUCCESS != s8Ret) break;
 801ba1e:	bf00      	nop
        }
    }

    return s8Ret;
 801ba20:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801ba24:	4618      	mov	r0, r3
 801ba26:	3718      	adds	r7, #24
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}
 801ba2c:	20000030 	.word	0x20000030

0801ba30 <p_nm_write_block>:

static inline sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b084      	sub	sp, #16
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	60f8      	str	r0, [r7, #12]
 801ba38:	60b9      	str	r1, [r7, #8]
 801ba3a:	4613      	mov	r3, r2
 801ba3c:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
    return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_write_block(u32Addr, puBuf, u16Sz);
 801ba3e:	88fb      	ldrh	r3, [r7, #6]
 801ba40:	461a      	mov	r2, r3
 801ba42:	68b9      	ldr	r1, [r7, #8]
 801ba44:	68f8      	ldr	r0, [r7, #12]
 801ba46:	f000 fef9 	bl	801c83c <nm_spi_write_block>
 801ba4a:	4603      	mov	r3, r0
    return nm_i2c_write_block(u32Addr, puBuf, u16Sz);
#else
#error "Please define bus usage"
#endif

}
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	3710      	adds	r7, #16
 801ba50:	46bd      	mov	sp, r7
 801ba52:	bd80      	pop	{r7, pc}

0801ba54 <nm_write_block>:
 *  @param[in]  u32Sz
 *                  Number of bytes to write. The buffer size must be >= u32Sz
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b086      	sub	sp, #24
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	60f8      	str	r0, [r7, #12]
 801ba5c:	60b9      	str	r1, [r7, #8]
 801ba5e:	607a      	str	r2, [r7, #4]
    uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 801ba60:	4b20      	ldr	r3, [pc, #128]	; (801bae4 <nm_write_block+0x90>)
 801ba62:	881b      	ldrh	r3, [r3, #0]
 801ba64:	3b08      	subs	r3, #8
 801ba66:	823b      	strh	r3, [r7, #16]
    uint32 off = 0;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	617b      	str	r3, [r7, #20]
    sint8 s8Ret = M2M_SUCCESS;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	74fb      	strb	r3, [r7, #19]

    for(;;)
    {
        if(u32Sz <= u16MaxTrxSz)
 801ba70:	8a3b      	ldrh	r3, [r7, #16]
 801ba72:	687a      	ldr	r2, [r7, #4]
 801ba74:	429a      	cmp	r2, r3
 801ba76:	d80f      	bhi.n	801ba98 <nm_write_block+0x44>
        {
            s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 801ba78:	68ba      	ldr	r2, [r7, #8]
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	4413      	add	r3, r2
 801ba7e:	687a      	ldr	r2, [r7, #4]
 801ba80:	b292      	uxth	r2, r2
 801ba82:	4619      	mov	r1, r3
 801ba84:	68f8      	ldr	r0, [r7, #12]
 801ba86:	f7ff ffd3 	bl	801ba30 <p_nm_write_block>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	b2da      	uxtb	r2, r3
 801ba8e:	7cfb      	ldrb	r3, [r7, #19]
 801ba90:	4413      	add	r3, r2
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	74fb      	strb	r3, [r7, #19]
            break;
 801ba96:	e01f      	b.n	801bad8 <nm_write_block+0x84>
        }
        else
        {
            s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 801ba98:	68ba      	ldr	r2, [r7, #8]
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	4413      	add	r3, r2
 801ba9e:	8a3a      	ldrh	r2, [r7, #16]
 801baa0:	4619      	mov	r1, r3
 801baa2:	68f8      	ldr	r0, [r7, #12]
 801baa4:	f7ff ffc4 	bl	801ba30 <p_nm_write_block>
 801baa8:	4603      	mov	r3, r0
 801baaa:	b2da      	uxtb	r2, r3
 801baac:	7cfb      	ldrb	r3, [r7, #19]
 801baae:	4413      	add	r3, r2
 801bab0:	b2db      	uxtb	r3, r3
 801bab2:	74fb      	strb	r3, [r7, #19]
            if(M2M_SUCCESS != s8Ret) break;
 801bab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d10c      	bne.n	801bad6 <nm_write_block+0x82>
            u32Sz -= u16MaxTrxSz;
 801babc:	8a3b      	ldrh	r3, [r7, #16]
 801babe:	687a      	ldr	r2, [r7, #4]
 801bac0:	1ad3      	subs	r3, r2, r3
 801bac2:	607b      	str	r3, [r7, #4]
            off += u16MaxTrxSz;
 801bac4:	8a3b      	ldrh	r3, [r7, #16]
 801bac6:	697a      	ldr	r2, [r7, #20]
 801bac8:	4413      	add	r3, r2
 801baca:	617b      	str	r3, [r7, #20]
            u32Addr += u16MaxTrxSz;
 801bacc:	8a3b      	ldrh	r3, [r7, #16]
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	4413      	add	r3, r2
 801bad2:	60fb      	str	r3, [r7, #12]
        if(u32Sz <= u16MaxTrxSz)
 801bad4:	e7cc      	b.n	801ba70 <nm_write_block+0x1c>
            if(M2M_SUCCESS != s8Ret) break;
 801bad6:	bf00      	nop
        }
    }

    return s8Ret;
 801bad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801badc:	4618      	mov	r0, r3
 801bade:	3718      	adds	r7, #24
 801bae0:	46bd      	mov	sp, r7
 801bae2:	bd80      	pop	{r7, pc}
 801bae4:	20000030 	.word	0x20000030

0801bae8 <nm_get_hif_info>:
 *  @param[out] pu16OtaHifInfo
 *                  Pointer holding Hif info of image in the inactive partition.
 *  @return     @ref M2M_SUCCESS in case of success and Negative error code in case of failure
 */
sint8 nm_get_hif_info(uint16 *pu16FwHifInfo, uint16 *pu16OtaHifInfo)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b084      	sub	sp, #16
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
 801baf0:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801baf2:	2300      	movs	r3, #0
 801baf4:	73fb      	strb	r3, [r7, #15]
    uint32 reg = 0;
 801baf6:	2300      	movs	r3, #0
 801baf8:	60bb      	str	r3, [r7, #8]

    ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
 801bafa:	f107 0308 	add.w	r3, r7, #8
 801bafe:	4619      	mov	r1, r3
 801bb00:	480e      	ldr	r0, [pc, #56]	; (801bb3c <nm_get_hif_info+0x54>)
 801bb02:	f7ff ff1d 	bl	801b940 <nm_read_reg_with_ret>
 801bb06:	4603      	mov	r3, r0
 801bb08:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801bb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d10e      	bne.n	801bb30 <nm_get_hif_info+0x48>
    {
        if(pu16FwHifInfo != NULL)
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d003      	beq.n	801bb20 <nm_get_hif_info+0x38>
        {
            *pu16FwHifInfo = (uint16)reg;
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	b29a      	uxth	r2, r3
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	801a      	strh	r2, [r3, #0]
        }
        if(pu16OtaHifInfo)
 801bb20:	683b      	ldr	r3, [r7, #0]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d004      	beq.n	801bb30 <nm_get_hif_info+0x48>
        {
            *pu16OtaHifInfo = (uint16)(reg>>16);
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	0c1b      	lsrs	r3, r3, #16
 801bb2a:	b29a      	uxth	r2, r3
 801bb2c:	683b      	ldr	r3, [r7, #0]
 801bb2e:	801a      	strh	r2, [r3, #0]
        }
    }
    return ret;
 801bb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	3710      	adds	r7, #16
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}
 801bb3c:	000207ac 	.word	0x000207ac

0801bb40 <nm_get_firmware_full_info>:
 *  @brief      Get Firmware version info
 *  @param[out] M2mRev
 *                  Pointer holds address of structure @ref tstrM2mRev that contains the firmware version parameters
 */
sint8 nm_get_firmware_full_info(tstrM2mRev *pstrRev)
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b086      	sub	sp, #24
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
    uint16  fw_hif_info = 0;
 801bb48:	2300      	movs	r3, #0
 801bb4a:	82bb      	strh	r3, [r7, #20]
    uint32  reg = 0;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	613b      	str	r3, [r7, #16]
    sint8   ret = M2M_SUCCESS;
 801bb50:	2300      	movs	r3, #0
 801bb52:	75fb      	strb	r3, [r7, #23]
    tstrGpRegs strgp = {0};
 801bb54:	f107 0308 	add.w	r3, r7, #8
 801bb58:	2200      	movs	r2, #0
 801bb5a:	601a      	str	r2, [r3, #0]
 801bb5c:	605a      	str	r2, [r3, #4]

    m2m_memset((uint8*)pstrRev, 0, sizeof(tstrM2mRev));
 801bb5e:	221c      	movs	r2, #28
 801bb60:	2100      	movs	r1, #0
 801bb62:	6878      	ldr	r0, [r7, #4]
 801bb64:	f7fd f9ea 	bl	8018f3c <m2m_memset>
    nm_get_hif_info(&fw_hif_info, NULL);
 801bb68:	f107 0314 	add.w	r3, r7, #20
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	4618      	mov	r0, r3
 801bb70:	f7ff ffba 	bl	801bae8 <nm_get_hif_info>

    M2M_INFO("Fw HIF: %04x\n", fw_hif_info);
 801bb74:	4858      	ldr	r0, [pc, #352]	; (801bcd8 <nm_get_firmware_full_info+0x198>)
 801bb76:	f002 fc15 	bl	801e3a4 <iprintf>
 801bb7a:	8abb      	ldrh	r3, [r7, #20]
 801bb7c:	4619      	mov	r1, r3
 801bb7e:	4857      	ldr	r0, [pc, #348]	; (801bcdc <nm_get_firmware_full_info+0x19c>)
 801bb80:	f002 fc10 	bl	801e3a4 <iprintf>
 801bb84:	200d      	movs	r0, #13
 801bb86:	f002 fc1f 	bl	801e3c8 <putchar>
    if(M2M_GET_HIF_BLOCK(fw_hif_info) == M2M_HIF_BLOCK_VALUE)
 801bb8a:	8abb      	ldrh	r3, [r7, #20]
 801bb8c:	0b9b      	lsrs	r3, r3, #14
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	b2db      	uxtb	r3, r3
 801bb92:	f003 0303 	and.w	r3, r3, #3
 801bb96:	2b02      	cmp	r3, #2
 801bb98:	f040 8087 	bne.w	801bcaa <nm_get_firmware_full_info+0x16a>
    {
        ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &reg);
 801bb9c:	f107 0310 	add.w	r3, r7, #16
 801bba0:	4619      	mov	r1, r3
 801bba2:	f241 409c 	movw	r0, #5276	; 0x149c
 801bba6:	f7ff fecb 	bl	801b940 <nm_read_reg_with_ret>
 801bbaa:	4603      	mov	r3, r0
 801bbac:	75fb      	strb	r3, [r7, #23]
        if(ret == M2M_SUCCESS)
 801bbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d17b      	bne.n	801bcae <nm_get_firmware_full_info+0x16e>
        {
            if(reg != 0)
 801bbb6:	693b      	ldr	r3, [r7, #16]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d073      	beq.n	801bca4 <nm_get_firmware_full_info+0x164>
            {
                ret = nm_read_block(reg|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801bbbc:	693b      	ldr	r3, [r7, #16]
 801bbbe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bbc2:	f107 0108 	add.w	r1, r7, #8
 801bbc6:	2208      	movs	r2, #8
 801bbc8:	4618      	mov	r0, r3
 801bbca:	f7ff fee7 	bl	801b99c <nm_read_block>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	75fb      	strb	r3, [r7, #23]
                if(ret == M2M_SUCCESS)
 801bbd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d169      	bne.n	801bcae <nm_get_firmware_full_info+0x16e>
                {
                    reg = strgp.u32Firmware_Ota_rev;
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	613b      	str	r3, [r7, #16]
                    reg &= 0x0000ffff;
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	b29b      	uxth	r3, r3
 801bbe2:	613b      	str	r3, [r7, #16]
                    if(reg != 0)
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d059      	beq.n	801bc9e <nm_get_firmware_full_info+0x15e>
                    {
                        ret = nm_read_block(reg|0x30000, (uint8*)pstrRev, sizeof(tstrM2mRev));
 801bbea:	693b      	ldr	r3, [r7, #16]
 801bbec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bbf0:	221c      	movs	r2, #28
 801bbf2:	6879      	ldr	r1, [r7, #4]
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f7ff fed1 	bl	801b99c <nm_read_block>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	75fb      	strb	r3, [r7, #23]
                        if(ret == M2M_SUCCESS)
 801bbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d153      	bne.n	801bcae <nm_get_firmware_full_info+0x16e>
                        {
                            M2M_INFO("Firmware HIF (%u) : %u.%u \n", M2M_GET_HIF_BLOCK(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MAJOR(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MINOR(pstrRev->u16FirmwareHifInfo));
 801bc06:	4834      	ldr	r0, [pc, #208]	; (801bcd8 <nm_get_firmware_full_info+0x198>)
 801bc08:	f002 fbcc 	bl	801e3a4 <iprintf>
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	881b      	ldrh	r3, [r3, #0]
 801bc10:	0b9b      	lsrs	r3, r3, #14
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	b2db      	uxtb	r3, r3
 801bc16:	f003 0103 	and.w	r1, r3, #3
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	881b      	ldrh	r3, [r3, #0]
 801bc1e:	0a1b      	lsrs	r3, r3, #8
 801bc20:	b29b      	uxth	r3, r3
 801bc22:	b2db      	uxtb	r3, r3
 801bc24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	881b      	ldrh	r3, [r3, #0]
 801bc2c:	b2db      	uxtb	r3, r3
 801bc2e:	482c      	ldr	r0, [pc, #176]	; (801bce0 <nm_get_firmware_full_info+0x1a0>)
 801bc30:	f002 fbb8 	bl	801e3a4 <iprintf>
 801bc34:	200d      	movs	r0, #13
 801bc36:	f002 fbc7 	bl	801e3c8 <putchar>
                            M2M_INFO("Firmware ver   : %u.%u.%u \n", pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor, pstrRev->u8FirmwarePatch);
 801bc3a:	4827      	ldr	r0, [pc, #156]	; (801bcd8 <nm_get_firmware_full_info+0x198>)
 801bc3c:	f002 fbb2 	bl	801e3a4 <iprintf>
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	789b      	ldrb	r3, [r3, #2]
 801bc44:	4619      	mov	r1, r3
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	791b      	ldrb	r3, [r3, #4]
 801bc4a:	461a      	mov	r2, r3
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	795b      	ldrb	r3, [r3, #5]
 801bc50:	4824      	ldr	r0, [pc, #144]	; (801bce4 <nm_get_firmware_full_info+0x1a4>)
 801bc52:	f002 fba7 	bl	801e3a4 <iprintf>
 801bc56:	200d      	movs	r0, #13
 801bc58:	f002 fbb6 	bl	801e3c8 <putchar>
                            M2M_INFO("Firmware Build %s Time %s\n", pstrRev->BuildDate, pstrRev->BuildTime);
 801bc5c:	481e      	ldr	r0, [pc, #120]	; (801bcd8 <nm_get_firmware_full_info+0x198>)
 801bc5e:	f002 fba1 	bl	801e3a4 <iprintf>
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	1d99      	adds	r1, r3, #6
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	3312      	adds	r3, #18
 801bc6a:	461a      	mov	r2, r3
 801bc6c:	481e      	ldr	r0, [pc, #120]	; (801bce8 <nm_get_firmware_full_info+0x1a8>)
 801bc6e:	f002 fb99 	bl	801e3a4 <iprintf>
 801bc72:	200d      	movs	r0, #13
 801bc74:	f002 fba8 	bl	801e3c8 <putchar>

                            /* Check Hif info is consistent */
                            if(fw_hif_info != pstrRev->u16FirmwareHifInfo)
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	881a      	ldrh	r2, [r3, #0]
 801bc7c:	8abb      	ldrh	r3, [r7, #20]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	d015      	beq.n	801bcae <nm_get_firmware_full_info+0x16e>
                            {
                                ret = M2M_ERR_FAIL;
 801bc82:	23f4      	movs	r3, #244	; 0xf4
 801bc84:	75fb      	strb	r3, [r7, #23]
                                M2M_ERR("Inconsistent Firmware Version\n");
 801bc86:	2276      	movs	r2, #118	; 0x76
 801bc88:	4918      	ldr	r1, [pc, #96]	; (801bcec <nm_get_firmware_full_info+0x1ac>)
 801bc8a:	4819      	ldr	r0, [pc, #100]	; (801bcf0 <nm_get_firmware_full_info+0x1b0>)
 801bc8c:	f002 fb8a 	bl	801e3a4 <iprintf>
 801bc90:	4818      	ldr	r0, [pc, #96]	; (801bcf4 <nm_get_firmware_full_info+0x1b4>)
 801bc92:	f002 fbf5 	bl	801e480 <puts>
 801bc96:	200d      	movs	r0, #13
 801bc98:	f002 fb96 	bl	801e3c8 <putchar>
 801bc9c:	e007      	b.n	801bcae <nm_get_firmware_full_info+0x16e>
                            }
                        }
                    }
                    else
                    {
                        ret = M2M_ERR_FAIL;
 801bc9e:	23f4      	movs	r3, #244	; 0xf4
 801bca0:	75fb      	strb	r3, [r7, #23]
 801bca2:	e004      	b.n	801bcae <nm_get_firmware_full_info+0x16e>
                    }
                }
            }
            else
            {
                ret = M2M_ERR_FAIL;
 801bca4:	23f4      	movs	r3, #244	; 0xf4
 801bca6:	75fb      	strb	r3, [r7, #23]
 801bca8:	e001      	b.n	801bcae <nm_get_firmware_full_info+0x16e>
            }
        }
    }
    else
    {
        ret = M2M_ERR_FAIL;
 801bcaa:	23f4      	movs	r3, #244	; 0xf4
 801bcac:	75fb      	strb	r3, [r7, #23]
    }
    if(ret != M2M_SUCCESS)
 801bcae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d00a      	beq.n	801bccc <nm_get_firmware_full_info+0x18c>
    {
        M2M_ERR("Unknown Firmware Version\n");
 801bcb6:	228c      	movs	r2, #140	; 0x8c
 801bcb8:	490c      	ldr	r1, [pc, #48]	; (801bcec <nm_get_firmware_full_info+0x1ac>)
 801bcba:	480d      	ldr	r0, [pc, #52]	; (801bcf0 <nm_get_firmware_full_info+0x1b0>)
 801bcbc:	f002 fb72 	bl	801e3a4 <iprintf>
 801bcc0:	480d      	ldr	r0, [pc, #52]	; (801bcf8 <nm_get_firmware_full_info+0x1b8>)
 801bcc2:	f002 fbdd 	bl	801e480 <puts>
 801bcc6:	200d      	movs	r0, #13
 801bcc8:	f002 fb7e 	bl	801e3c8 <putchar>
    }
    return ret;
 801bccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3718      	adds	r7, #24
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}
 801bcd8:	08020d44 	.word	0x08020d44
 801bcdc:	08020d50 	.word	0x08020d50
 801bce0:	08020d60 	.word	0x08020d60
 801bce4:	08020d7c 	.word	0x08020d7c
 801bce8:	08020d98 	.word	0x08020d98
 801bcec:	08028f74 	.word	0x08028f74
 801bcf0:	08020db4 	.word	0x08020db4
 801bcf4:	08020dc8 	.word	0x08020dc8
 801bcf8:	08020de8 	.word	0x08020de8

0801bcfc <nm_get_ota_firmware_info>:
 *  @brief      Get Firmware version info
 *  @param[out] M2mRev
 *  Pointer holds address of structure @ref tstrM2mRev that contains the firmware version parameters
 */
sint8 nm_get_ota_firmware_info(tstrM2mRev *pstrRev)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b086      	sub	sp, #24
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
    uint16  ota_hif_info = 0;
 801bd04:	2300      	movs	r3, #0
 801bd06:	82bb      	strh	r3, [r7, #20]
    uint32  reg = 0;
 801bd08:	2300      	movs	r3, #0
 801bd0a:	613b      	str	r3, [r7, #16]
    sint8   ret = M2M_SUCCESS;
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	75fb      	strb	r3, [r7, #23]
    tstrGpRegs strgp = {0};
 801bd10:	f107 0308 	add.w	r3, r7, #8
 801bd14:	2200      	movs	r2, #0
 801bd16:	601a      	str	r2, [r3, #0]
 801bd18:	605a      	str	r2, [r3, #4]

    m2m_memset((uint8*)pstrRev, 0, sizeof(tstrM2mRev));
 801bd1a:	221c      	movs	r2, #28
 801bd1c:	2100      	movs	r1, #0
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	f7fd f90c 	bl	8018f3c <m2m_memset>
    nm_get_hif_info(NULL, &ota_hif_info);
 801bd24:	f107 0314 	add.w	r3, r7, #20
 801bd28:	4619      	mov	r1, r3
 801bd2a:	2000      	movs	r0, #0
 801bd2c:	f7ff fedc 	bl	801bae8 <nm_get_hif_info>

    M2M_INFO("Ota HIF: %04x\n", ota_hif_info);
 801bd30:	4857      	ldr	r0, [pc, #348]	; (801be90 <nm_get_ota_firmware_info+0x194>)
 801bd32:	f002 fb37 	bl	801e3a4 <iprintf>
 801bd36:	8abb      	ldrh	r3, [r7, #20]
 801bd38:	4619      	mov	r1, r3
 801bd3a:	4856      	ldr	r0, [pc, #344]	; (801be94 <nm_get_ota_firmware_info+0x198>)
 801bd3c:	f002 fb32 	bl	801e3a4 <iprintf>
 801bd40:	200d      	movs	r0, #13
 801bd42:	f002 fb41 	bl	801e3c8 <putchar>
    if(M2M_GET_HIF_BLOCK(ota_hif_info) == M2M_HIF_BLOCK_VALUE)
 801bd46:	8abb      	ldrh	r3, [r7, #20]
 801bd48:	0b9b      	lsrs	r3, r3, #14
 801bd4a:	b29b      	uxth	r3, r3
 801bd4c:	b2db      	uxtb	r3, r3
 801bd4e:	f003 0303 	and.w	r3, r3, #3
 801bd52:	2b02      	cmp	r3, #2
 801bd54:	f040 8087 	bne.w	801be66 <nm_get_ota_firmware_info+0x16a>
    {
        ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &reg);
 801bd58:	f107 0310 	add.w	r3, r7, #16
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	f241 409c 	movw	r0, #5276	; 0x149c
 801bd62:	f7ff fded 	bl	801b940 <nm_read_reg_with_ret>
 801bd66:	4603      	mov	r3, r0
 801bd68:	75fb      	strb	r3, [r7, #23]
        if(ret == M2M_SUCCESS)
 801bd6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d17b      	bne.n	801be6a <nm_get_ota_firmware_info+0x16e>
        {
            if(reg != 0)
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d073      	beq.n	801be60 <nm_get_ota_firmware_info+0x164>
            {
                ret = nm_read_block(reg|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801bd78:	693b      	ldr	r3, [r7, #16]
 801bd7a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bd7e:	f107 0108 	add.w	r1, r7, #8
 801bd82:	2208      	movs	r2, #8
 801bd84:	4618      	mov	r0, r3
 801bd86:	f7ff fe09 	bl	801b99c <nm_read_block>
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	75fb      	strb	r3, [r7, #23]
                if(ret == M2M_SUCCESS)
 801bd8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d169      	bne.n	801be6a <nm_get_ota_firmware_info+0x16e>
                {
                    reg = strgp.u32Firmware_Ota_rev;
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	613b      	str	r3, [r7, #16]
                    reg >>= 16;
 801bd9a:	693b      	ldr	r3, [r7, #16]
 801bd9c:	0c1b      	lsrs	r3, r3, #16
 801bd9e:	613b      	str	r3, [r7, #16]
                    if(reg != 0)
 801bda0:	693b      	ldr	r3, [r7, #16]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d059      	beq.n	801be5a <nm_get_ota_firmware_info+0x15e>
                    {
                        ret = nm_read_block(reg|0x30000, (uint8*)pstrRev, sizeof(tstrM2mRev));
 801bda6:	693b      	ldr	r3, [r7, #16]
 801bda8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bdac:	221c      	movs	r2, #28
 801bdae:	6879      	ldr	r1, [r7, #4]
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	f7ff fdf3 	bl	801b99c <nm_read_block>
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	75fb      	strb	r3, [r7, #23]
                        if(ret == M2M_SUCCESS)
 801bdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d153      	bne.n	801be6a <nm_get_ota_firmware_info+0x16e>
                        {
                            M2M_INFO("OTA HIF (%u) : %u.%u \n", M2M_GET_HIF_BLOCK(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MAJOR(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MINOR(pstrRev->u16FirmwareHifInfo));
 801bdc2:	4833      	ldr	r0, [pc, #204]	; (801be90 <nm_get_ota_firmware_info+0x194>)
 801bdc4:	f002 faee 	bl	801e3a4 <iprintf>
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	881b      	ldrh	r3, [r3, #0]
 801bdcc:	0b9b      	lsrs	r3, r3, #14
 801bdce:	b29b      	uxth	r3, r3
 801bdd0:	b2db      	uxtb	r3, r3
 801bdd2:	f003 0103 	and.w	r1, r3, #3
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	881b      	ldrh	r3, [r3, #0]
 801bdda:	0a1b      	lsrs	r3, r3, #8
 801bddc:	b29b      	uxth	r3, r3
 801bdde:	b2db      	uxtb	r3, r3
 801bde0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	881b      	ldrh	r3, [r3, #0]
 801bde8:	b2db      	uxtb	r3, r3
 801bdea:	482b      	ldr	r0, [pc, #172]	; (801be98 <nm_get_ota_firmware_info+0x19c>)
 801bdec:	f002 fada 	bl	801e3a4 <iprintf>
 801bdf0:	200d      	movs	r0, #13
 801bdf2:	f002 fae9 	bl	801e3c8 <putchar>
                            M2M_INFO("OTA ver   : %u.%u.%u \n", pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor, pstrRev->u8FirmwarePatch);
 801bdf6:	4826      	ldr	r0, [pc, #152]	; (801be90 <nm_get_ota_firmware_info+0x194>)
 801bdf8:	f002 fad4 	bl	801e3a4 <iprintf>
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	789b      	ldrb	r3, [r3, #2]
 801be00:	4619      	mov	r1, r3
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	791b      	ldrb	r3, [r3, #4]
 801be06:	461a      	mov	r2, r3
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	795b      	ldrb	r3, [r3, #5]
 801be0c:	4823      	ldr	r0, [pc, #140]	; (801be9c <nm_get_ota_firmware_info+0x1a0>)
 801be0e:	f002 fac9 	bl	801e3a4 <iprintf>
 801be12:	200d      	movs	r0, #13
 801be14:	f002 fad8 	bl	801e3c8 <putchar>
                            M2M_INFO("OTA Build %s Time %s\n", pstrRev->BuildDate, pstrRev->BuildTime);
 801be18:	481d      	ldr	r0, [pc, #116]	; (801be90 <nm_get_ota_firmware_info+0x194>)
 801be1a:	f002 fac3 	bl	801e3a4 <iprintf>
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	1d99      	adds	r1, r3, #6
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	3312      	adds	r3, #18
 801be26:	461a      	mov	r2, r3
 801be28:	481d      	ldr	r0, [pc, #116]	; (801bea0 <nm_get_ota_firmware_info+0x1a4>)
 801be2a:	f002 fabb 	bl	801e3a4 <iprintf>
 801be2e:	200d      	movs	r0, #13
 801be30:	f002 faca 	bl	801e3c8 <putchar>

                            /* Check Hif info is consistent */
                            if(ota_hif_info != pstrRev->u16FirmwareHifInfo)
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	881a      	ldrh	r2, [r3, #0]
 801be38:	8abb      	ldrh	r3, [r7, #20]
 801be3a:	429a      	cmp	r2, r3
 801be3c:	d015      	beq.n	801be6a <nm_get_ota_firmware_info+0x16e>
                            {
                                ret = M2M_ERR_FAIL;
 801be3e:	23f4      	movs	r3, #244	; 0xf4
 801be40:	75fb      	strb	r3, [r7, #23]
                                M2M_ERR("Inconsistent OTA Version\n");
 801be42:	22ba      	movs	r2, #186	; 0xba
 801be44:	4917      	ldr	r1, [pc, #92]	; (801bea4 <nm_get_ota_firmware_info+0x1a8>)
 801be46:	4818      	ldr	r0, [pc, #96]	; (801bea8 <nm_get_ota_firmware_info+0x1ac>)
 801be48:	f002 faac 	bl	801e3a4 <iprintf>
 801be4c:	4817      	ldr	r0, [pc, #92]	; (801beac <nm_get_ota_firmware_info+0x1b0>)
 801be4e:	f002 fb17 	bl	801e480 <puts>
 801be52:	200d      	movs	r0, #13
 801be54:	f002 fab8 	bl	801e3c8 <putchar>
 801be58:	e007      	b.n	801be6a <nm_get_ota_firmware_info+0x16e>
                            }
                        }
                    }
                    else
                    {
                        ret = M2M_ERR_FAIL;
 801be5a:	23f4      	movs	r3, #244	; 0xf4
 801be5c:	75fb      	strb	r3, [r7, #23]
 801be5e:	e004      	b.n	801be6a <nm_get_ota_firmware_info+0x16e>
                    }
                }
            }
            else
            {
                ret = M2M_ERR_FAIL;
 801be60:	23f4      	movs	r3, #244	; 0xf4
 801be62:	75fb      	strb	r3, [r7, #23]
 801be64:	e001      	b.n	801be6a <nm_get_ota_firmware_info+0x16e>
            }
        }
    }
    else
    {
        ret = M2M_ERR_FAIL;
 801be66:	23f4      	movs	r3, #244	; 0xf4
 801be68:	75fb      	strb	r3, [r7, #23]
    }
    if(ret != M2M_SUCCESS)
 801be6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d008      	beq.n	801be84 <nm_get_ota_firmware_info+0x188>
    {
        M2M_INFO("No valid Ota image\n");
 801be72:	4807      	ldr	r0, [pc, #28]	; (801be90 <nm_get_ota_firmware_info+0x194>)
 801be74:	f002 fa96 	bl	801e3a4 <iprintf>
 801be78:	480d      	ldr	r0, [pc, #52]	; (801beb0 <nm_get_ota_firmware_info+0x1b4>)
 801be7a:	f002 fb01 	bl	801e480 <puts>
 801be7e:	200d      	movs	r0, #13
 801be80:	f002 faa2 	bl	801e3c8 <putchar>
    }
    return ret;
 801be84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801be88:	4618      	mov	r0, r3
 801be8a:	3718      	adds	r7, #24
 801be8c:	46bd      	mov	sp, r7
 801be8e:	bd80      	pop	{r7, pc}
 801be90:	08020d44 	.word	0x08020d44
 801be94:	08020e04 	.word	0x08020e04
 801be98:	08020e14 	.word	0x08020e14
 801be9c:	08020e2c 	.word	0x08020e2c
 801bea0:	08020e44 	.word	0x08020e44
 801bea4:	08028f90 	.word	0x08028f90
 801bea8:	08020db4 	.word	0x08020db4
 801beac:	08020e5c 	.word	0x08020e5c
 801beb0:	08020e78 	.word	0x08020e78

0801beb4 <nm_drv_init_hold>:
ERR1:
    return ret;
}

sint8 nm_drv_init_hold(uint32 req_serial_number)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b084      	sub	sp, #16
 801beb8:	af00      	add	r7, sp, #0
 801beba:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801bebc:	2300      	movs	r3, #0
 801bebe:	73fb      	strb	r3, [r7, #15]

    ret = nm_bus_iface_init(NULL, req_serial_number);
 801bec0:	6879      	ldr	r1, [r7, #4]
 801bec2:	2000      	movs	r0, #0
 801bec4:	f7ff fd0e 	bl	801b8e4 <nm_bus_iface_init>
 801bec8:	4603      	mov	r3, r0
 801beca:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801becc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d00e      	beq.n	801bef2 <nm_drv_init_hold+0x3e>
        M2M_ERR("[nmi start]: fail init bus\n");
 801bed4:	22fc      	movs	r2, #252	; 0xfc
 801bed6:	4914      	ldr	r1, [pc, #80]	; (801bf28 <nm_drv_init_hold+0x74>)
 801bed8:	4814      	ldr	r0, [pc, #80]	; (801bf2c <nm_drv_init_hold+0x78>)
 801beda:	f002 fa63 	bl	801e3a4 <iprintf>
 801bede:	4814      	ldr	r0, [pc, #80]	; (801bf30 <nm_drv_init_hold+0x7c>)
 801bee0:	f002 face 	bl	801e480 <puts>
 801bee4:	200d      	movs	r0, #13
 801bee6:	f002 fa6f 	bl	801e3c8 <putchar>
        goto ERR1;
 801beea:	bf00      	nop
#ifdef NO_HW_CHIP_EN
ERR2:
    nm_bus_iface_deinit();
#endif
ERR1:
    return ret;
 801beec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bef0:	e015      	b.n	801bf1e <nm_drv_init_hold+0x6a>
    M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 801bef2:	4810      	ldr	r0, [pc, #64]	; (801bf34 <nm_drv_init_hold+0x80>)
 801bef4:	f002 fa56 	bl	801e3a4 <iprintf>
 801bef8:	f7ff f914 	bl	801b124 <nmi_get_chipid>
 801befc:	4603      	mov	r3, r0
 801befe:	4619      	mov	r1, r3
 801bf00:	480d      	ldr	r0, [pc, #52]	; (801bf38 <nm_drv_init_hold+0x84>)
 801bf02:	f002 fa4f 	bl	801e3a4 <iprintf>
 801bf06:	200d      	movs	r0, #13
 801bf08:	f002 fa5e 	bl	801e3c8 <putchar>
    nm_spi_init();
 801bf0c:	f000 fea6 	bl	801cc5c <nm_spi_init>
    chip_idle();
 801bf10:	f7ff f803 	bl	801af1a <chip_idle>
    genuNmState = NM_STATE_INIT;
 801bf14:	4b09      	ldr	r3, [pc, #36]	; (801bf3c <nm_drv_init_hold+0x88>)
 801bf16:	2201      	movs	r2, #1
 801bf18:	701a      	strb	r2, [r3, #0]
    return ret;
 801bf1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bf1e:	4618      	mov	r0, r3
 801bf20:	3710      	adds	r7, #16
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	bf00      	nop
 801bf28:	08028fac 	.word	0x08028fac
 801bf2c:	08020db4 	.word	0x08020db4
 801bf30:	08020e8c 	.word	0x08020e8c
 801bf34:	08020d44 	.word	0x08020d44
 801bf38:	08020ea8 	.word	0x08020ea8
 801bf3c:	2001ded4 	.word	0x2001ded4

0801bf40 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b084      	sub	sp, #16
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801bf48:	2300      	movs	r3, #0
 801bf4a:	73fb      	strb	r3, [r7, #15]
    uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	73bb      	strb	r3, [r7, #14]

    if(NULL != arg)
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d00a      	beq.n	801bf6c <nm_drv_init_start+0x2c>
    {
        u8Mode = *((uint8 *)arg);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	781b      	ldrb	r3, [r3, #0]
 801bf5a:	73bb      	strb	r3, [r7, #14]
        if(u8Mode < M2M_WIFI_MODE_NORMAL || u8Mode >= M2M_WIFI_MODE_MAX)
 801bf5c:	7bbb      	ldrb	r3, [r7, #14]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d002      	beq.n	801bf68 <nm_drv_init_start+0x28>
 801bf62:	7bbb      	ldrb	r3, [r7, #14]
 801bf64:	2b03      	cmp	r3, #3
 801bf66:	d901      	bls.n	801bf6c <nm_drv_init_start+0x2c>
            u8Mode = M2M_WIFI_MODE_NORMAL;
 801bf68:	2301      	movs	r3, #1
 801bf6a:	73bb      	strb	r3, [r7, #14]
    }

    ret = cpu_start();
 801bf6c:	f7ff f842 	bl	801aff4 <cpu_start>
 801bf70:	4603      	mov	r3, r0
 801bf72:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d131      	bne.n	801bfe0 <nm_drv_init_start+0xa0>
        goto ERR2;
    }
    ret = wait_for_bootrom(u8Mode);
 801bf7c:	7bbb      	ldrb	r3, [r7, #14]
 801bf7e:	4618      	mov	r0, r3
 801bf80:	f7ff fa6e 	bl	801b460 <wait_for_bootrom>
 801bf84:	4603      	mov	r3, r0
 801bf86:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d129      	bne.n	801bfe4 <nm_drv_init_start+0xa4>
        goto ERR2;
    }

    ret = wait_for_firmware_start(u8Mode);
 801bf90:	7bbb      	ldrb	r3, [r7, #14]
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7ff fad6 	bl	801b544 <wait_for_firmware_start>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d121      	bne.n	801bfe8 <nm_drv_init_start+0xa8>
        goto ERR2;
    }

    if(M2M_WIFI_MODE_CONFIG == u8Mode) {
 801bfa4:	7bbb      	ldrb	r3, [r7, #14]
 801bfa6:	2b02      	cmp	r3, #2
 801bfa8:	d024      	beq.n	801bff4 <nm_drv_init_start+0xb4>
        goto ERR1;
    } else {
        /*continue running*/
    }

    ret = enable_interrupts();
 801bfaa:	f7fe ffd2 	bl	801af52 <enable_interrupts>
 801bfae:	4603      	mov	r3, r0
 801bfb0:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bfb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d00c      	beq.n	801bfd4 <nm_drv_init_start+0x94>
        M2M_ERR("failed to enable interrupts..\n");
 801bfba:	f240 1249 	movw	r2, #329	; 0x149
 801bfbe:	4911      	ldr	r1, [pc, #68]	; (801c004 <nm_drv_init_start+0xc4>)
 801bfc0:	4811      	ldr	r0, [pc, #68]	; (801c008 <nm_drv_init_start+0xc8>)
 801bfc2:	f002 f9ef 	bl	801e3a4 <iprintf>
 801bfc6:	4811      	ldr	r0, [pc, #68]	; (801c00c <nm_drv_init_start+0xcc>)
 801bfc8:	f002 fa5a 	bl	801e480 <puts>
 801bfcc:	200d      	movs	r0, #13
 801bfce:	f002 f9fb 	bl	801e3c8 <putchar>
        goto ERR2;
 801bfd2:	e00a      	b.n	801bfea <nm_drv_init_start+0xaa>
    }

    genuNmState = NM_STATE_START;
 801bfd4:	4b0e      	ldr	r3, [pc, #56]	; (801c010 <nm_drv_init_start+0xd0>)
 801bfd6:	2202      	movs	r2, #2
 801bfd8:	701a      	strb	r2, [r3, #0]

    return ret;
 801bfda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfde:	e00c      	b.n	801bffa <nm_drv_init_start+0xba>
        goto ERR2;
 801bfe0:	bf00      	nop
 801bfe2:	e002      	b.n	801bfea <nm_drv_init_start+0xaa>
        goto ERR2;
 801bfe4:	bf00      	nop
 801bfe6:	e000      	b.n	801bfea <nm_drv_init_start+0xaa>
        goto ERR2;
 801bfe8:	bf00      	nop
ERR2:
    nm_bus_iface_deinit();
 801bfea:	f7ff fc8e 	bl	801b90a <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
    nm_spi_deinit();
 801bfee:	f000 fec5 	bl	801cd7c <nm_spi_deinit>
 801bff2:	e000      	b.n	801bff6 <nm_drv_init_start+0xb6>
        goto ERR1;
 801bff4:	bf00      	nop
#endif
ERR1:
    return ret;
 801bff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bffa:	4618      	mov	r0, r3
 801bffc:	3710      	adds	r7, #16
 801bffe:	46bd      	mov	sp, r7
 801c000:	bd80      	pop	{r7, pc}
 801c002:	bf00      	nop
 801c004:	08028fc0 	.word	0x08028fc0
 801c008:	08020db4 	.word	0x08020db4
 801c00c:	08020eb8 	.word	0x08020eb8
 801c010:	2001ded4 	.word	0x2001ded4

0801c014 <nm_drv_deinit>:
/**
 *  @fn         nm_drv_deinit
 *  @brief      Deinitialize NMC1000 driver
 */
sint8 nm_drv_deinit(void* arg)
{
 801c014:	b580      	push	{r7, lr}
 801c016:	b084      	sub	sp, #16
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
    sint8 ret;

    ret = chip_deinit();
 801c01c:	f7ff fae4 	bl	801b5e8 <chip_deinit>
 801c020:	4603      	mov	r3, r0
 801c022:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801c024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d00c      	beq.n	801c046 <nm_drv_deinit+0x32>
        M2M_ERR("[nmi stop]: chip_deinit fail\n");
 801c02c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801c030:	4915      	ldr	r1, [pc, #84]	; (801c088 <nm_drv_deinit+0x74>)
 801c032:	4816      	ldr	r0, [pc, #88]	; (801c08c <nm_drv_deinit+0x78>)
 801c034:	f002 f9b6 	bl	801e3a4 <iprintf>
 801c038:	4815      	ldr	r0, [pc, #84]	; (801c090 <nm_drv_deinit+0x7c>)
 801c03a:	f002 fa21 	bl	801e480 <puts>
 801c03e:	200d      	movs	r0, #13
 801c040:	f002 f9c2 	bl	801e3c8 <putchar>
        goto ERR1;
 801c044:	e016      	b.n	801c074 <nm_drv_deinit+0x60>
    }

    ret = nm_bus_iface_deinit();
 801c046:	f7ff fc60 	bl	801b90a <nm_bus_iface_deinit>
 801c04a:	4603      	mov	r3, r0
 801c04c:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801c04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d00c      	beq.n	801c070 <nm_drv_deinit+0x5c>
        M2M_ERR("[nmi stop]: fail init bus\n");
 801c056:	f44f 72be 	mov.w	r2, #380	; 0x17c
 801c05a:	490b      	ldr	r1, [pc, #44]	; (801c088 <nm_drv_deinit+0x74>)
 801c05c:	480b      	ldr	r0, [pc, #44]	; (801c08c <nm_drv_deinit+0x78>)
 801c05e:	f002 f9a1 	bl	801e3a4 <iprintf>
 801c062:	480c      	ldr	r0, [pc, #48]	; (801c094 <nm_drv_deinit+0x80>)
 801c064:	f002 fa0c 	bl	801e480 <puts>
 801c068:	200d      	movs	r0, #13
 801c06a:	f002 f9ad 	bl	801e3c8 <putchar>
        goto ERR1;
 801c06e:	e001      	b.n	801c074 <nm_drv_deinit+0x60>
    }
#ifdef CONF_WINC_USE_SPI
    /* Must do this after global reset to set SPI data packet size. */
    nm_spi_deinit();
 801c070:	f000 fe84 	bl	801cd7c <nm_spi_deinit>
#endif

ERR1:
    genuNmState = NM_STATE_DEINIT;
 801c074:	4b08      	ldr	r3, [pc, #32]	; (801c098 <nm_drv_deinit+0x84>)
 801c076:	2200      	movs	r2, #0
 801c078:	701a      	strb	r2, [r3, #0]

    return ret;
 801c07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c07e:	4618      	mov	r0, r3
 801c080:	3710      	adds	r7, #16
 801c082:	46bd      	mov	sp, r7
 801c084:	bd80      	pop	{r7, pc}
 801c086:	bf00      	nop
 801c088:	08028fd4 	.word	0x08028fd4
 801c08c:	08020db4 	.word	0x08020db4
 801c090:	08020ed8 	.word	0x08020ed8
 801c094:	08020ef8 	.word	0x08020ef8
 801c098:	2001ded4 	.word	0x2001ded4

0801c09c <nm_get_state>:
 *  @fn         nm_get_state(void)
 *  @brief      Get the current state of the WINC module
 *  @return     The current state of the WINC module
 */
tenuNmState nm_get_state(void)
{
 801c09c:	b480      	push	{r7}
 801c09e:	af00      	add	r7, sp, #0
    return genuNmState;
 801c0a0:	4b03      	ldr	r3, [pc, #12]	; (801c0b0 <nm_get_state+0x14>)
 801c0a2:	781b      	ldrb	r3, [r3, #0]
}
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	46bd      	mov	sp, r7
 801c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ac:	4770      	bx	lr
 801c0ae:	bf00      	nop
 801c0b0:	2001ded4 	.word	0x2001ded4

0801c0b4 <nmi_spi_read>:
#define DATA_PKT_SZ             DATA_PKT_SZ_8K

static uint8    gu8Crc_off  =   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b086      	sub	sp, #24
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	460b      	mov	r3, r1
 801c0be:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 801c0c8:	887b      	ldrh	r3, [r7, #2]
 801c0ca:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 801c0cc:	f107 030c 	add.w	r3, r7, #12
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	2003      	movs	r0, #3
 801c0d4:	f7fc fed6 	bl	8018e84 <nm_bus_ioctl>
 801c0d8:	4603      	mov	r3, r0
}
 801c0da:	4618      	mov	r0, r3
 801c0dc:	3718      	adds	r7, #24
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}

0801c0e2 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 801c0e2:	b580      	push	{r7, lr}
 801c0e4:	b086      	sub	sp, #24
 801c0e6:	af00      	add	r7, sp, #0
 801c0e8:	6078      	str	r0, [r7, #4]
 801c0ea:	460b      	mov	r3, r1
 801c0ec:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 801c0f6:	887b      	ldrh	r3, [r7, #2]
 801c0f8:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 801c0fa:	f107 030c 	add.w	r3, r7, #12
 801c0fe:	4619      	mov	r1, r3
 801c100:	2003      	movs	r0, #3
 801c102:	f7fc febf 	bl	8018e84 <nm_bus_ioctl>
 801c106:	4603      	mov	r3, r0
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3718      	adds	r7, #24
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <crc7_byte>:
    0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 801c110:	b480      	push	{r7}
 801c112:	b083      	sub	sp, #12
 801c114:	af00      	add	r7, sp, #0
 801c116:	4603      	mov	r3, r0
 801c118:	460a      	mov	r2, r1
 801c11a:	71fb      	strb	r3, [r7, #7]
 801c11c:	4613      	mov	r3, r2
 801c11e:	71bb      	strb	r3, [r7, #6]
    return crc7_syndrome_table[(crc << 1) ^ data];
 801c120:	79fb      	ldrb	r3, [r7, #7]
 801c122:	005a      	lsls	r2, r3, #1
 801c124:	79bb      	ldrb	r3, [r7, #6]
 801c126:	4053      	eors	r3, r2
 801c128:	4a03      	ldr	r2, [pc, #12]	; (801c138 <crc7_byte+0x28>)
 801c12a:	5cd3      	ldrb	r3, [r2, r3]
}
 801c12c:	4618      	mov	r0, r3
 801c12e:	370c      	adds	r7, #12
 801c130:	46bd      	mov	sp, r7
 801c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c136:	4770      	bx	lr
 801c138:	08028fe4 	.word	0x08028fe4

0801c13c <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b084      	sub	sp, #16
 801c140:	af00      	add	r7, sp, #0
 801c142:	4603      	mov	r3, r0
 801c144:	60b9      	str	r1, [r7, #8]
 801c146:	607a      	str	r2, [r7, #4]
 801c148:	73fb      	strb	r3, [r7, #15]
    while(len--)
 801c14a:	e00a      	b.n	801c162 <crc7+0x26>
        crc = crc7_byte(crc, *buffer++);
 801c14c:	68bb      	ldr	r3, [r7, #8]
 801c14e:	1c5a      	adds	r2, r3, #1
 801c150:	60ba      	str	r2, [r7, #8]
 801c152:	781a      	ldrb	r2, [r3, #0]
 801c154:	7bfb      	ldrb	r3, [r7, #15]
 801c156:	4611      	mov	r1, r2
 801c158:	4618      	mov	r0, r3
 801c15a:	f7ff ffd9 	bl	801c110 <crc7_byte>
 801c15e:	4603      	mov	r3, r0
 801c160:	73fb      	strb	r3, [r7, #15]
    while(len--)
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	1e5a      	subs	r2, r3, #1
 801c166:	607a      	str	r2, [r7, #4]
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d1ef      	bne.n	801c14c <crc7+0x10>
    return crc;
 801c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c16e:	4618      	mov	r0, r3
 801c170:	3710      	adds	r7, #16
 801c172:	46bd      	mov	sp, r7
 801c174:	bd80      	pop	{r7, pc}
	...

0801c178 <spi_cmd>:
    Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz, uint8 clockless)
{
 801c178:	b580      	push	{r7, lr}
 801c17a:	b088      	sub	sp, #32
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	60b9      	str	r1, [r7, #8]
 801c180:	607a      	str	r2, [r7, #4]
 801c182:	603b      	str	r3, [r7, #0]
 801c184:	4603      	mov	r3, r0
 801c186:	73fb      	strb	r3, [r7, #15]
    uint8 bc[9];
    uint8 len = 5;
 801c188:	2305      	movs	r3, #5
 801c18a:	77fb      	strb	r3, [r7, #31]
    sint8 result = N_OK;
 801c18c:	2300      	movs	r3, #0
 801c18e:	77bb      	strb	r3, [r7, #30]

    bc[0] = cmd;
 801c190:	7bfb      	ldrb	r3, [r7, #15]
 801c192:	753b      	strb	r3, [r7, #20]
    switch(cmd) {
 801c194:	7bfb      	ldrb	r3, [r7, #15]
 801c196:	3bc3      	subs	r3, #195	; 0xc3
 801c198:	2b0c      	cmp	r3, #12
 801c19a:	f200 80a1 	bhi.w	801c2e0 <spi_cmd+0x168>
 801c19e:	a201      	add	r2, pc, #4	; (adr r2, 801c1a4 <spi_cmd+0x2c>)
 801c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1a4:	0801c263 	.word	0x0801c263
 801c1a8:	0801c1f5 	.word	0x0801c1f5
 801c1ac:	0801c2e1 	.word	0x0801c2e1
 801c1b0:	0801c2e1 	.word	0x0801c2e1
 801c1b4:	0801c231 	.word	0x0801c231
 801c1b8:	0801c231 	.word	0x0801c231
 801c1bc:	0801c2a7 	.word	0x0801c2a7
 801c1c0:	0801c1d9 	.word	0x0801c1d9
 801c1c4:	0801c2e1 	.word	0x0801c2e1
 801c1c8:	0801c2e1 	.word	0x0801c2e1
 801c1cc:	0801c2e1 	.word	0x0801c2e1
 801c1d0:	0801c2e1 	.word	0x0801c2e1
 801c1d4:	0801c21f 	.word	0x0801c21f
        case CMD_SINGLE_READ:               /* single word (4 bytes) read */
            bc[1] = (uint8)(adr >> 16);
 801c1d8:	68bb      	ldr	r3, [r7, #8]
 801c1da:	0c1b      	lsrs	r3, r3, #16
 801c1dc:	b2db      	uxtb	r3, r3
 801c1de:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	0a1b      	lsrs	r3, r3, #8
 801c1e4:	b2db      	uxtb	r3, r3
 801c1e6:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)adr;
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c1ee:	2305      	movs	r3, #5
 801c1f0:	77fb      	strb	r3, [r7, #31]
            break;
 801c1f2:	e078      	b.n	801c2e6 <spi_cmd+0x16e>
        case CMD_INTERNAL_READ:         /* internal register read */
            bc[1] = (uint8)(adr >> 8);
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	0a1b      	lsrs	r3, r3, #8
 801c1f8:	b2db      	uxtb	r3, r3
 801c1fa:	757b      	strb	r3, [r7, #21]
            if(clockless)  bc[1] |= (1 << 7);
 801c1fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c200:	2b00      	cmp	r3, #0
 801c202:	d004      	beq.n	801c20e <spi_cmd+0x96>
 801c204:	7d7b      	ldrb	r3, [r7, #21]
 801c206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)adr;
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	b2db      	uxtb	r3, r3
 801c212:	75bb      	strb	r3, [r7, #22]
            bc[3] = 0x00;
 801c214:	2300      	movs	r3, #0
 801c216:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c218:	2305      	movs	r3, #5
 801c21a:	77fb      	strb	r3, [r7, #31]
            break;
 801c21c:	e063      	b.n	801c2e6 <spi_cmd+0x16e>
            bc[3] = 0x00;
            len = 5;
            break;
#endif
        case CMD_RESET:                         /* reset */
            bc[1] = 0xff;
 801c21e:	23ff      	movs	r3, #255	; 0xff
 801c220:	757b      	strb	r3, [r7, #21]
            bc[2] = 0xff;
 801c222:	23ff      	movs	r3, #255	; 0xff
 801c224:	75bb      	strb	r3, [r7, #22]
            bc[3] = 0xff;
 801c226:	23ff      	movs	r3, #255	; 0xff
 801c228:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c22a:	2305      	movs	r3, #5
 801c22c:	77fb      	strb	r3, [r7, #31]
            break;
 801c22e:	e05a      	b.n	801c2e6 <spi_cmd+0x16e>
            len = 7;
            break;
#endif
        case CMD_DMA_EXT_WRITE:     /* dma extended write */
        case CMD_DMA_EXT_READ:          /* dma extended read */
            bc[1] = (uint8)(adr >> 16);
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	0c1b      	lsrs	r3, r3, #16
 801c234:	b2db      	uxtb	r3, r3
 801c236:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	0a1b      	lsrs	r3, r3, #8
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)adr;
 801c240:	68bb      	ldr	r3, [r7, #8]
 801c242:	b2db      	uxtb	r3, r3
 801c244:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(sz >> 16);
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	0c1b      	lsrs	r3, r3, #16
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(sz >> 8);
 801c24e:	683b      	ldr	r3, [r7, #0]
 801c250:	0a1b      	lsrs	r3, r3, #8
 801c252:	b2db      	uxtb	r3, r3
 801c254:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(sz);
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	b2db      	uxtb	r3, r3
 801c25a:	76bb      	strb	r3, [r7, #26]
            len = 8;
 801c25c:	2308      	movs	r3, #8
 801c25e:	77fb      	strb	r3, [r7, #31]
            break;
 801c260:	e041      	b.n	801c2e6 <spi_cmd+0x16e>
        case CMD_INTERNAL_WRITE:        /* internal register write */
            bc[1] = (uint8)(adr >> 8);
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	0a1b      	lsrs	r3, r3, #8
 801c266:	b2db      	uxtb	r3, r3
 801c268:	757b      	strb	r3, [r7, #21]
            if(clockless)  bc[1] |= (1 << 7);
 801c26a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d004      	beq.n	801c27c <spi_cmd+0x104>
 801c272:	7d7b      	ldrb	r3, [r7, #21]
 801c274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c278:	b2db      	uxtb	r3, r3
 801c27a:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr);
 801c27c:	68bb      	ldr	r3, [r7, #8]
 801c27e:	b2db      	uxtb	r3, r3
 801c280:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)(u32data >> 24);
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	0e1b      	lsrs	r3, r3, #24
 801c286:	b2db      	uxtb	r3, r3
 801c288:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(u32data >> 16);
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	0c1b      	lsrs	r3, r3, #16
 801c28e:	b2db      	uxtb	r3, r3
 801c290:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(u32data >> 8);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	0a1b      	lsrs	r3, r3, #8
 801c296:	b2db      	uxtb	r3, r3
 801c298:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(u32data);
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	b2db      	uxtb	r3, r3
 801c29e:	76bb      	strb	r3, [r7, #26]
            len = 8;
 801c2a0:	2308      	movs	r3, #8
 801c2a2:	77fb      	strb	r3, [r7, #31]
            break;
 801c2a4:	e01f      	b.n	801c2e6 <spi_cmd+0x16e>
        case CMD_SINGLE_WRITE:          /* single word write */
            bc[1] = (uint8)(adr >> 16);
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	0c1b      	lsrs	r3, r3, #16
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c2ae:	68bb      	ldr	r3, [r7, #8]
 801c2b0:	0a1b      	lsrs	r3, r3, #8
 801c2b2:	b2db      	uxtb	r3, r3
 801c2b4:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)(adr);
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(u32data >> 24);
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	0e1b      	lsrs	r3, r3, #24
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(u32data >> 16);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	0c1b      	lsrs	r3, r3, #16
 801c2c8:	b2db      	uxtb	r3, r3
 801c2ca:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(u32data >> 8);
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	0a1b      	lsrs	r3, r3, #8
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	76bb      	strb	r3, [r7, #26]
            bc[7] = (uint8)(u32data);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	b2db      	uxtb	r3, r3
 801c2d8:	76fb      	strb	r3, [r7, #27]
            len = 9;
 801c2da:	2309      	movs	r3, #9
 801c2dc:	77fb      	strb	r3, [r7, #31]
            break;
 801c2de:	e002      	b.n	801c2e6 <spi_cmd+0x16e>
        default:
            result = N_FAIL;
 801c2e0:	23ff      	movs	r3, #255	; 0xff
 801c2e2:	77bb      	strb	r3, [r7, #30]
            break;
 801c2e4:	bf00      	nop
    }

    if(result == N_OK) {
 801c2e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d133      	bne.n	801c356 <spi_cmd+0x1de>
        if(!gu8Crc_off)
 801c2ee:	4b1d      	ldr	r3, [pc, #116]	; (801c364 <spi_cmd+0x1ec>)
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d113      	bne.n	801c31e <spi_cmd+0x1a6>
            bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 801c2f6:	7ffb      	ldrb	r3, [r7, #31]
 801c2f8:	3b01      	subs	r3, #1
 801c2fa:	461a      	mov	r2, r3
 801c2fc:	f107 0314 	add.w	r3, r7, #20
 801c300:	4619      	mov	r1, r3
 801c302:	207f      	movs	r0, #127	; 0x7f
 801c304:	f7ff ff1a 	bl	801c13c <crc7>
 801c308:	4603      	mov	r3, r0
 801c30a:	461a      	mov	r2, r3
 801c30c:	7ffb      	ldrb	r3, [r7, #31]
 801c30e:	3b01      	subs	r3, #1
 801c310:	0052      	lsls	r2, r2, #1
 801c312:	b2d2      	uxtb	r2, r2
 801c314:	3320      	adds	r3, #32
 801c316:	443b      	add	r3, r7
 801c318:	f803 2c0c 	strb.w	r2, [r3, #-12]
 801c31c:	e002      	b.n	801c324 <spi_cmd+0x1ac>
        else
            len-=1;
 801c31e:	7ffb      	ldrb	r3, [r7, #31]
 801c320:	3b01      	subs	r3, #1
 801c322:	77fb      	strb	r3, [r7, #31]

        if(M2M_SUCCESS != nmi_spi_write(bc, len)) {
 801c324:	7ffb      	ldrb	r3, [r7, #31]
 801c326:	b29a      	uxth	r2, r3
 801c328:	f107 0314 	add.w	r3, r7, #20
 801c32c:	4611      	mov	r1, r2
 801c32e:	4618      	mov	r0, r3
 801c330:	f7ff fed7 	bl	801c0e2 <nmi_spi_write>
 801c334:	4603      	mov	r3, r0
 801c336:	2b00      	cmp	r3, #0
 801c338:	d00d      	beq.n	801c356 <spi_cmd+0x1de>
            M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 801c33a:	f240 1217 	movw	r2, #279	; 0x117
 801c33e:	490a      	ldr	r1, [pc, #40]	; (801c368 <spi_cmd+0x1f0>)
 801c340:	480a      	ldr	r0, [pc, #40]	; (801c36c <spi_cmd+0x1f4>)
 801c342:	f002 f82f 	bl	801e3a4 <iprintf>
 801c346:	480a      	ldr	r0, [pc, #40]	; (801c370 <spi_cmd+0x1f8>)
 801c348:	f002 f89a 	bl	801e480 <puts>
 801c34c:	200d      	movs	r0, #13
 801c34e:	f002 f83b 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c352:	23ff      	movs	r3, #255	; 0xff
 801c354:	77bb      	strb	r3, [r7, #30]
        }
    }

    return result;
 801c356:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801c35a:	4618      	mov	r0, r3
 801c35c:	3720      	adds	r7, #32
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop
 801c364:	2001ded5 	.word	0x2001ded5
 801c368:	080290e4 	.word	0x080290e4
 801c36c:	08020f14 	.word	0x08020f14
 801c370:	08020f28 	.word	0x08020f28

0801c374 <spi_cmd_rsp>:

    return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	b084      	sub	sp, #16
 801c378:	af00      	add	r7, sp, #0
 801c37a:	4603      	mov	r3, r0
 801c37c:	71fb      	strb	r3, [r7, #7]
    uint8 rsp;
    sint8 result = N_OK;
 801c37e:	2300      	movs	r3, #0
 801c380:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif

    /* wait for response */
    s8RetryCnt = 10;
 801c382:	230a      	movs	r3, #10
 801c384:	73bb      	strb	r3, [r7, #14]
    do
    {
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c386:	f107 030d 	add.w	r3, r7, #13
 801c38a:	2101      	movs	r1, #1
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7ff fe91 	bl	801c0b4 <nmi_spi_read>
 801c392:	4603      	mov	r3, r0
 801c394:	2b00      	cmp	r3, #0
 801c396:	d00e      	beq.n	801c3b6 <spi_cmd_rsp+0x42>
            M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 801c398:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801c39c:	4935      	ldr	r1, [pc, #212]	; (801c474 <spi_cmd_rsp+0x100>)
 801c39e:	4836      	ldr	r0, [pc, #216]	; (801c478 <spi_cmd_rsp+0x104>)
 801c3a0:	f002 f800 	bl	801e3a4 <iprintf>
 801c3a4:	4835      	ldr	r0, [pc, #212]	; (801c47c <spi_cmd_rsp+0x108>)
 801c3a6:	f002 f86b 	bl	801e480 <puts>
 801c3aa:	200d      	movs	r0, #13
 801c3ac:	f002 f80c 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c3b0:	23ff      	movs	r3, #255	; 0xff
 801c3b2:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 801c3b4:	e057      	b.n	801c466 <spi_cmd_rsp+0xf2>
        }
    } while((rsp != cmd) && (s8RetryCnt-- >0));
 801c3b6:	7b7b      	ldrb	r3, [r7, #13]
 801c3b8:	79fa      	ldrb	r2, [r7, #7]
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d007      	beq.n	801c3ce <spi_cmd_rsp+0x5a>
 801c3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c3c2:	b2da      	uxtb	r2, r3
 801c3c4:	3a01      	subs	r2, #1
 801c3c6:	b2d2      	uxtb	r2, r2
 801c3c8:	73ba      	strb	r2, [r7, #14]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	dcdb      	bgt.n	801c386 <spi_cmd_rsp+0x12>
    if(s8RetryCnt < 0)
 801c3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	da0e      	bge.n	801c3f4 <spi_cmd_rsp+0x80>
    {
        M2M_ERR("[nmi spi]: Failed cmd response read\n");
 801c3d6:	f240 1261 	movw	r2, #353	; 0x161
 801c3da:	4926      	ldr	r1, [pc, #152]	; (801c474 <spi_cmd_rsp+0x100>)
 801c3dc:	4826      	ldr	r0, [pc, #152]	; (801c478 <spi_cmd_rsp+0x104>)
 801c3de:	f001 ffe1 	bl	801e3a4 <iprintf>
 801c3e2:	4827      	ldr	r0, [pc, #156]	; (801c480 <spi_cmd_rsp+0x10c>)
 801c3e4:	f002 f84c 	bl	801e480 <puts>
 801c3e8:	200d      	movs	r0, #13
 801c3ea:	f001 ffed 	bl	801e3c8 <putchar>
        result = N_FAIL;
 801c3ee:	23ff      	movs	r3, #255	; 0xff
 801c3f0:	73fb      	strb	r3, [r7, #15]
        goto _fail_;
 801c3f2:	e038      	b.n	801c466 <spi_cmd_rsp+0xf2>
    }
    /**
        State response
    **/
    /* wait for response */
    s8RetryCnt = 10;
 801c3f4:	230a      	movs	r3, #10
 801c3f6:	73bb      	strb	r3, [r7, #14]
    do
    {
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c3f8:	f107 030d 	add.w	r3, r7, #13
 801c3fc:	2101      	movs	r1, #1
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7ff fe58 	bl	801c0b4 <nmi_spi_read>
 801c404:	4603      	mov	r3, r0
 801c406:	2b00      	cmp	r3, #0
 801c408:	d00e      	beq.n	801c428 <spi_cmd_rsp+0xb4>
            M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 801c40a:	f240 126d 	movw	r2, #365	; 0x16d
 801c40e:	4919      	ldr	r1, [pc, #100]	; (801c474 <spi_cmd_rsp+0x100>)
 801c410:	4819      	ldr	r0, [pc, #100]	; (801c478 <spi_cmd_rsp+0x104>)
 801c412:	f001 ffc7 	bl	801e3a4 <iprintf>
 801c416:	4819      	ldr	r0, [pc, #100]	; (801c47c <spi_cmd_rsp+0x108>)
 801c418:	f002 f832 	bl	801e480 <puts>
 801c41c:	200d      	movs	r0, #13
 801c41e:	f001 ffd3 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c422:	23ff      	movs	r3, #255	; 0xff
 801c424:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 801c426:	e01e      	b.n	801c466 <spi_cmd_rsp+0xf2>
        }
    } while((rsp != 0x00) && (s8RetryCnt-- >0));
 801c428:	7b7b      	ldrb	r3, [r7, #13]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d007      	beq.n	801c43e <spi_cmd_rsp+0xca>
 801c42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c432:	b2da      	uxtb	r2, r3
 801c434:	3a01      	subs	r2, #1
 801c436:	b2d2      	uxtb	r2, r2
 801c438:	73ba      	strb	r2, [r7, #14]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	dcdc      	bgt.n	801c3f8 <spi_cmd_rsp+0x84>
    if(s8RetryCnt < 0)
 801c43e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c442:	2b00      	cmp	r3, #0
 801c444:	da0e      	bge.n	801c464 <spi_cmd_rsp+0xf0>
    {
        M2M_ERR("[nmi spi]: Failed cmd response read\n");
 801c446:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801c44a:	490a      	ldr	r1, [pc, #40]	; (801c474 <spi_cmd_rsp+0x100>)
 801c44c:	480a      	ldr	r0, [pc, #40]	; (801c478 <spi_cmd_rsp+0x104>)
 801c44e:	f001 ffa9 	bl	801e3a4 <iprintf>
 801c452:	480b      	ldr	r0, [pc, #44]	; (801c480 <spi_cmd_rsp+0x10c>)
 801c454:	f002 f814 	bl	801e480 <puts>
 801c458:	200d      	movs	r0, #13
 801c45a:	f001 ffb5 	bl	801e3c8 <putchar>
        result = N_FAIL;
 801c45e:	23ff      	movs	r3, #255	; 0xff
 801c460:	73fb      	strb	r3, [r7, #15]
        goto _fail_;
 801c462:	e000      	b.n	801c466 <spi_cmd_rsp+0xf2>
    }
_fail_:
 801c464:	bf00      	nop

    return result;
 801c466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c46a:	4618      	mov	r0, r3
 801c46c:	3710      	adds	r7, #16
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}
 801c472:	bf00      	nop
 801c474:	080290ec 	.word	0x080290ec
 801c478:	08020f14 	.word	0x08020f14
 801c47c:	08020fa4 	.word	0x08020fa4
 801c480:	08020fd8 	.word	0x08020fd8

0801c484 <spi_data_read>:
    }
    return N_OK;
}

static sint8 spi_data_read(uint8 *b, uint16 sz, uint8 clockless)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b086      	sub	sp, #24
 801c488:	af00      	add	r7, sp, #0
 801c48a:	6078      	str	r0, [r7, #4]
 801c48c:	460b      	mov	r3, r1
 801c48e:	807b      	strh	r3, [r7, #2]
 801c490:	4613      	mov	r3, r2
 801c492:	707b      	strb	r3, [r7, #1]
    sint16 retry, ix, nbytes;
    sint8 result = N_OK;
 801c494:	2300      	movs	r3, #0
 801c496:	747b      	strb	r3, [r7, #17]
    uint8 rsp;

    /**
        Data
    **/
    ix = 0;
 801c498:	2300      	movs	r3, #0
 801c49a:	82bb      	strh	r3, [r7, #20]
    do {
        if(sz <= DATA_PKT_SZ)
 801c49c:	887b      	ldrh	r3, [r7, #2]
 801c49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c4a2:	d802      	bhi.n	801c4aa <spi_data_read+0x26>
            nbytes = sz;
 801c4a4:	887b      	ldrh	r3, [r7, #2]
 801c4a6:	827b      	strh	r3, [r7, #18]
 801c4a8:	e002      	b.n	801c4b0 <spi_data_read+0x2c>
        else
            nbytes = DATA_PKT_SZ;
 801c4aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c4ae:	827b      	strh	r3, [r7, #18]

        /**
            Data Response header
        **/
        retry = 10;
 801c4b0:	230a      	movs	r3, #10
 801c4b2:	82fb      	strh	r3, [r7, #22]
        do {
            if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c4b4:	f107 030b 	add.w	r3, r7, #11
 801c4b8:	2101      	movs	r1, #1
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7ff fdfa 	bl	801c0b4 <nmi_spi_read>
 801c4c0:	4603      	mov	r3, r0
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d00e      	beq.n	801c4e4 <spi_data_read+0x60>
                M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 801c4c6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 801c4ca:	4942      	ldr	r1, [pc, #264]	; (801c5d4 <spi_data_read+0x150>)
 801c4cc:	4842      	ldr	r0, [pc, #264]	; (801c5d8 <spi_data_read+0x154>)
 801c4ce:	f001 ff69 	bl	801e3a4 <iprintf>
 801c4d2:	4842      	ldr	r0, [pc, #264]	; (801c5dc <spi_data_read+0x158>)
 801c4d4:	f001 ffd4 	bl	801e480 <puts>
 801c4d8:	200d      	movs	r0, #13
 801c4da:	f001 ff75 	bl	801e3c8 <putchar>
                result = N_FAIL;
 801c4de:	23ff      	movs	r3, #255	; 0xff
 801c4e0:	747b      	strb	r3, [r7, #17]
                break;
 801c4e2:	e00e      	b.n	801c502 <spi_data_read+0x7e>
            }
            //if (((rsp >> 4) & 0xf) == 0xf)
            if((rsp & 0xf0) == 0xf0)
 801c4e4:	7afb      	ldrb	r3, [r7, #11]
 801c4e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c4ea:	2bf0      	cmp	r3, #240	; 0xf0
 801c4ec:	d008      	beq.n	801c500 <spi_data_read+0x7c>
                break;
        } while(retry--);
 801c4ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c4f2:	b29a      	uxth	r2, r3
 801c4f4:	3a01      	subs	r2, #1
 801c4f6:	b292      	uxth	r2, r2
 801c4f8:	82fa      	strh	r2, [r7, #22]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d1da      	bne.n	801c4b4 <spi_data_read+0x30>
 801c4fe:	e000      	b.n	801c502 <spi_data_read+0x7e>
                break;
 801c500:	bf00      	nop

        if(result == N_FAIL)
 801c502:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801c506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c50a:	d05c      	beq.n	801c5c6 <spi_data_read+0x142>
            break;

        if(retry <= 0) {
 801c50c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c510:	2b00      	cmp	r3, #0
 801c512:	dc10      	bgt.n	801c536 <spi_data_read+0xb2>
            M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 801c514:	f240 12b5 	movw	r2, #437	; 0x1b5
 801c518:	492e      	ldr	r1, [pc, #184]	; (801c5d4 <spi_data_read+0x150>)
 801c51a:	482f      	ldr	r0, [pc, #188]	; (801c5d8 <spi_data_read+0x154>)
 801c51c:	f001 ff42 	bl	801e3a4 <iprintf>
 801c520:	7afb      	ldrb	r3, [r7, #11]
 801c522:	4619      	mov	r1, r3
 801c524:	482e      	ldr	r0, [pc, #184]	; (801c5e0 <spi_data_read+0x15c>)
 801c526:	f001 ff3d 	bl	801e3a4 <iprintf>
 801c52a:	200d      	movs	r0, #13
 801c52c:	f001 ff4c 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c530:	23ff      	movs	r3, #255	; 0xff
 801c532:	747b      	strb	r3, [r7, #17]
            break;
 801c534:	e048      	b.n	801c5c8 <spi_data_read+0x144>
        }

        /**
            Read bytes
        **/
        if(M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 801c536:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c53a:	687a      	ldr	r2, [r7, #4]
 801c53c:	4413      	add	r3, r2
 801c53e:	8a7a      	ldrh	r2, [r7, #18]
 801c540:	4611      	mov	r1, r2
 801c542:	4618      	mov	r0, r3
 801c544:	f7ff fdb6 	bl	801c0b4 <nmi_spi_read>
 801c548:	4603      	mov	r3, r0
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d00e      	beq.n	801c56c <spi_data_read+0xe8>
            M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 801c54e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801c552:	4920      	ldr	r1, [pc, #128]	; (801c5d4 <spi_data_read+0x150>)
 801c554:	4820      	ldr	r0, [pc, #128]	; (801c5d8 <spi_data_read+0x154>)
 801c556:	f001 ff25 	bl	801e3a4 <iprintf>
 801c55a:	4822      	ldr	r0, [pc, #136]	; (801c5e4 <spi_data_read+0x160>)
 801c55c:	f001 ff90 	bl	801e480 <puts>
 801c560:	200d      	movs	r0, #13
 801c562:	f001 ff31 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c566:	23ff      	movs	r3, #255	; 0xff
 801c568:	747b      	strb	r3, [r7, #17]
            break;
 801c56a:	e02d      	b.n	801c5c8 <spi_data_read+0x144>
        }
        if(!clockless)
 801c56c:	787b      	ldrb	r3, [r7, #1]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d11b      	bne.n	801c5aa <spi_data_read+0x126>
        {
            /**
            Read Crc
            **/
            if(!gu8Crc_off) {
 801c572:	4b1d      	ldr	r3, [pc, #116]	; (801c5e8 <spi_data_read+0x164>)
 801c574:	781b      	ldrb	r3, [r3, #0]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d117      	bne.n	801c5aa <spi_data_read+0x126>
                if(M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 801c57a:	f107 030c 	add.w	r3, r7, #12
 801c57e:	2102      	movs	r1, #2
 801c580:	4618      	mov	r0, r3
 801c582:	f7ff fd97 	bl	801c0b4 <nmi_spi_read>
 801c586:	4603      	mov	r3, r0
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d00e      	beq.n	801c5aa <spi_data_read+0x126>
                    M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 801c58c:	f240 12c9 	movw	r2, #457	; 0x1c9
 801c590:	4910      	ldr	r1, [pc, #64]	; (801c5d4 <spi_data_read+0x150>)
 801c592:	4811      	ldr	r0, [pc, #68]	; (801c5d8 <spi_data_read+0x154>)
 801c594:	f001 ff06 	bl	801e3a4 <iprintf>
 801c598:	4814      	ldr	r0, [pc, #80]	; (801c5ec <spi_data_read+0x168>)
 801c59a:	f001 ff71 	bl	801e480 <puts>
 801c59e:	200d      	movs	r0, #13
 801c5a0:	f001 ff12 	bl	801e3c8 <putchar>
                    result = N_FAIL;
 801c5a4:	23ff      	movs	r3, #255	; 0xff
 801c5a6:	747b      	strb	r3, [r7, #17]
                    break;
 801c5a8:	e00e      	b.n	801c5c8 <spi_data_read+0x144>
                }
            }
        }
        ix += nbytes;
 801c5aa:	8aba      	ldrh	r2, [r7, #20]
 801c5ac:	8a7b      	ldrh	r3, [r7, #18]
 801c5ae:	4413      	add	r3, r2
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	82bb      	strh	r3, [r7, #20]
        sz -= nbytes;
 801c5b4:	8a7b      	ldrh	r3, [r7, #18]
 801c5b6:	887a      	ldrh	r2, [r7, #2]
 801c5b8:	1ad3      	subs	r3, r2, r3
 801c5ba:	807b      	strh	r3, [r7, #2]

    } while(sz);
 801c5bc:	887b      	ldrh	r3, [r7, #2]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	f47f af6c 	bne.w	801c49c <spi_data_read+0x18>
 801c5c4:	e000      	b.n	801c5c8 <spi_data_read+0x144>
            break;
 801c5c6:	bf00      	nop

    return result;
 801c5c8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	3718      	adds	r7, #24
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}
 801c5d4:	080290f8 	.word	0x080290f8
 801c5d8:	08020f14 	.word	0x08020f14
 801c5dc:	0802105c 	.word	0x0802105c
 801c5e0:	08021090 	.word	0x08021090
 801c5e4:	080210c0 	.word	0x080210c0
 801c5e8:	2001ded5 	.word	0x2001ded5
 801c5ec:	080210f0 	.word	0x080210f0

0801c5f0 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b086      	sub	sp, #24
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
 801c5f8:	460b      	mov	r3, r1
 801c5fa:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	82fb      	strh	r3, [r7, #22]
    uint16 nbytes;
    sint8 result = N_OK;
 801c600:	2300      	movs	r3, #0
 801c602:	74fb      	strb	r3, [r7, #19]
    uint8 cmd, order, crc[2] = {0};
 801c604:	2300      	movs	r3, #0
 801c606:	81bb      	strh	r3, [r7, #12]

    /**
        Data
    **/
    do {
        if(sz <= DATA_PKT_SZ)
 801c608:	887b      	ldrh	r3, [r7, #2]
 801c60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c60e:	d802      	bhi.n	801c616 <spi_data_write+0x26>
            nbytes = sz;
 801c610:	887b      	ldrh	r3, [r7, #2]
 801c612:	82bb      	strh	r3, [r7, #20]
 801c614:	e002      	b.n	801c61c <spi_data_write+0x2c>
        else
            nbytes = DATA_PKT_SZ;
 801c616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c61a:	82bb      	strh	r3, [r7, #20]

        /**
            Write command
        **/
        cmd = 0xf0;
 801c61c:	23f0      	movs	r3, #240	; 0xf0
 801c61e:	747b      	strb	r3, [r7, #17]
        if(ix == 0)  {
 801c620:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d109      	bne.n	801c63c <spi_data_write+0x4c>
            if(sz <= DATA_PKT_SZ)
 801c628:	887b      	ldrh	r3, [r7, #2]
 801c62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c62e:	d802      	bhi.n	801c636 <spi_data_write+0x46>
                order = 0x3;
 801c630:	2303      	movs	r3, #3
 801c632:	74bb      	strb	r3, [r7, #18]
 801c634:	e00b      	b.n	801c64e <spi_data_write+0x5e>
            else
                order = 0x1;
 801c636:	2301      	movs	r3, #1
 801c638:	74bb      	strb	r3, [r7, #18]
 801c63a:	e008      	b.n	801c64e <spi_data_write+0x5e>
        } else {
            if(sz <= DATA_PKT_SZ)
 801c63c:	887b      	ldrh	r3, [r7, #2]
 801c63e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c642:	d802      	bhi.n	801c64a <spi_data_write+0x5a>
                order = 0x3;
 801c644:	2303      	movs	r3, #3
 801c646:	74bb      	strb	r3, [r7, #18]
 801c648:	e001      	b.n	801c64e <spi_data_write+0x5e>
            else
                order = 0x2;
 801c64a:	2302      	movs	r3, #2
 801c64c:	74bb      	strb	r3, [r7, #18]
        }
        cmd |= order;
 801c64e:	7c7a      	ldrb	r2, [r7, #17]
 801c650:	7cbb      	ldrb	r3, [r7, #18]
 801c652:	4313      	orrs	r3, r2
 801c654:	b2db      	uxtb	r3, r3
 801c656:	747b      	strb	r3, [r7, #17]
        if(M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 801c658:	f107 0311 	add.w	r3, r7, #17
 801c65c:	2101      	movs	r1, #1
 801c65e:	4618      	mov	r0, r3
 801c660:	f7ff fd3f 	bl	801c0e2 <nmi_spi_write>
 801c664:	4603      	mov	r3, r0
 801c666:	2b00      	cmp	r3, #0
 801c668:	d00e      	beq.n	801c688 <spi_data_write+0x98>
            M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 801c66a:	f240 12f9 	movw	r2, #505	; 0x1f9
 801c66e:	492b      	ldr	r1, [pc, #172]	; (801c71c <spi_data_write+0x12c>)
 801c670:	482b      	ldr	r0, [pc, #172]	; (801c720 <spi_data_write+0x130>)
 801c672:	f001 fe97 	bl	801e3a4 <iprintf>
 801c676:	482b      	ldr	r0, [pc, #172]	; (801c724 <spi_data_write+0x134>)
 801c678:	f001 ff02 	bl	801e480 <puts>
 801c67c:	200d      	movs	r0, #13
 801c67e:	f001 fea3 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c682:	23ff      	movs	r3, #255	; 0xff
 801c684:	74fb      	strb	r3, [r7, #19]
            break;
 801c686:	e043      	b.n	801c710 <spi_data_write+0x120>
        }

        /**
            Write data
        **/
        if(M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 801c688:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c68c:	687a      	ldr	r2, [r7, #4]
 801c68e:	4413      	add	r3, r2
 801c690:	8aba      	ldrh	r2, [r7, #20]
 801c692:	4611      	mov	r1, r2
 801c694:	4618      	mov	r0, r3
 801c696:	f7ff fd24 	bl	801c0e2 <nmi_spi_write>
 801c69a:	4603      	mov	r3, r0
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d00e      	beq.n	801c6be <spi_data_write+0xce>
            M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 801c6a0:	f240 2202 	movw	r2, #514	; 0x202
 801c6a4:	491d      	ldr	r1, [pc, #116]	; (801c71c <spi_data_write+0x12c>)
 801c6a6:	481e      	ldr	r0, [pc, #120]	; (801c720 <spi_data_write+0x130>)
 801c6a8:	f001 fe7c 	bl	801e3a4 <iprintf>
 801c6ac:	481e      	ldr	r0, [pc, #120]	; (801c728 <spi_data_write+0x138>)
 801c6ae:	f001 fee7 	bl	801e480 <puts>
 801c6b2:	200d      	movs	r0, #13
 801c6b4:	f001 fe88 	bl	801e3c8 <putchar>
            result = N_FAIL;
 801c6b8:	23ff      	movs	r3, #255	; 0xff
 801c6ba:	74fb      	strb	r3, [r7, #19]
            break;
 801c6bc:	e028      	b.n	801c710 <spi_data_write+0x120>
        }

        /**
            Write Crc
        **/
        if(!gu8Crc_off) {
 801c6be:	4b1b      	ldr	r3, [pc, #108]	; (801c72c <spi_data_write+0x13c>)
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d117      	bne.n	801c6f6 <spi_data_write+0x106>
            if(M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 801c6c6:	f107 030c 	add.w	r3, r7, #12
 801c6ca:	2102      	movs	r1, #2
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	f7ff fd08 	bl	801c0e2 <nmi_spi_write>
 801c6d2:	4603      	mov	r3, r0
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d00e      	beq.n	801c6f6 <spi_data_write+0x106>
                M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 801c6d8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801c6dc:	490f      	ldr	r1, [pc, #60]	; (801c71c <spi_data_write+0x12c>)
 801c6de:	4810      	ldr	r0, [pc, #64]	; (801c720 <spi_data_write+0x130>)
 801c6e0:	f001 fe60 	bl	801e3a4 <iprintf>
 801c6e4:	4812      	ldr	r0, [pc, #72]	; (801c730 <spi_data_write+0x140>)
 801c6e6:	f001 fecb 	bl	801e480 <puts>
 801c6ea:	200d      	movs	r0, #13
 801c6ec:	f001 fe6c 	bl	801e3c8 <putchar>
                result = N_FAIL;
 801c6f0:	23ff      	movs	r3, #255	; 0xff
 801c6f2:	74fb      	strb	r3, [r7, #19]
                break;
 801c6f4:	e00c      	b.n	801c710 <spi_data_write+0x120>
            }
        }

        ix += nbytes;
 801c6f6:	8afa      	ldrh	r2, [r7, #22]
 801c6f8:	8abb      	ldrh	r3, [r7, #20]
 801c6fa:	4413      	add	r3, r2
 801c6fc:	b29b      	uxth	r3, r3
 801c6fe:	82fb      	strh	r3, [r7, #22]
        sz -= nbytes;
 801c700:	887a      	ldrh	r2, [r7, #2]
 801c702:	8abb      	ldrh	r3, [r7, #20]
 801c704:	1ad3      	subs	r3, r2, r3
 801c706:	807b      	strh	r3, [r7, #2]
    } while(sz);
 801c708:	887b      	ldrh	r3, [r7, #2]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	f47f af7c 	bne.w	801c608 <spi_data_write+0x18>


    return result;
 801c710:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801c714:	4618      	mov	r0, r3
 801c716:	3718      	adds	r7, #24
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}
 801c71c:	08029108 	.word	0x08029108
 801c720:	08020f14 	.word	0x08020f14
 801c724:	08021124 	.word	0x08021124
 801c728:	0802115c 	.word	0x0802115c
 801c72c:	2001ded5 	.word	0x2001ded5
 801c730:	08021190 	.word	0x08021190

0801c734 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b086      	sub	sp, #24
 801c738:	af02      	add	r7, sp, #8
 801c73a:	6078      	str	r0, [r7, #4]
 801c73c:	6039      	str	r1, [r7, #0]
    uint8 retry = SPI_RETRY_COUNT;
 801c73e:	230a      	movs	r3, #10
 801c740:	73fb      	strb	r3, [r7, #15]
    sint8 result = N_OK;
 801c742:	2300      	movs	r3, #0
 801c744:	73bb      	strb	r3, [r7, #14]
    uint8 cmd = CMD_SINGLE_WRITE;
 801c746:	23c9      	movs	r3, #201	; 0xc9
 801c748:	737b      	strb	r3, [r7, #13]
    uint8 clockless = 0;
 801c74a:	2300      	movs	r3, #0
 801c74c:	733b      	strb	r3, [r7, #12]

_RETRY_:
    if(addr <= 0x30)
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	2b30      	cmp	r3, #48	; 0x30
 801c752:	d803      	bhi.n	801c75c <nm_spi_write_reg+0x28>
    {
        /**
        NMC1000 clockless registers.
        **/
        cmd = CMD_INTERNAL_WRITE;
 801c754:	23c3      	movs	r3, #195	; 0xc3
 801c756:	737b      	strb	r3, [r7, #13]
        clockless = 1;
 801c758:	2301      	movs	r3, #1
 801c75a:	733b      	strb	r3, [r7, #12]
    //  cmd = CMD_SINGLE_WRITE;
    //  clockless = 0;
    //}

#if defined USE_OLD_SPI_SW
    result = spi_cmd(cmd, addr, u32data, 4, clockless);
 801c75c:	7b78      	ldrb	r0, [r7, #13]
 801c75e:	7b3b      	ldrb	r3, [r7, #12]
 801c760:	9300      	str	r3, [sp, #0]
 801c762:	2304      	movs	r3, #4
 801c764:	683a      	ldr	r2, [r7, #0]
 801c766:	6879      	ldr	r1, [r7, #4]
 801c768:	f7ff fd06 	bl	801c178 <spi_cmd>
 801c76c:	4603      	mov	r3, r0
 801c76e:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d00d      	beq.n	801c794 <nm_spi_write_reg+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 801c778:	f44f 7212 	mov.w	r2, #584	; 0x248
 801c77c:	492a      	ldr	r1, [pc, #168]	; (801c828 <nm_spi_write_reg+0xf4>)
 801c77e:	482b      	ldr	r0, [pc, #172]	; (801c82c <nm_spi_write_reg+0xf8>)
 801c780:	f001 fe10 	bl	801e3a4 <iprintf>
 801c784:	6879      	ldr	r1, [r7, #4]
 801c786:	482a      	ldr	r0, [pc, #168]	; (801c830 <nm_spi_write_reg+0xfc>)
 801c788:	f001 fe0c 	bl	801e3a4 <iprintf>
 801c78c:	200d      	movs	r0, #13
 801c78e:	f001 fe1b 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c792:	e018      	b.n	801c7c6 <nm_spi_write_reg+0x92>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c794:	7b7b      	ldrb	r3, [r7, #13]
 801c796:	4618      	mov	r0, r3
 801c798:	f7ff fdec 	bl	801c374 <spi_cmd_rsp>
 801c79c:	4603      	mov	r3, r0
 801c79e:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c7a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d00d      	beq.n	801c7c4 <nm_spi_write_reg+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 801c7a8:	f240 2252 	movw	r2, #594	; 0x252
 801c7ac:	491e      	ldr	r1, [pc, #120]	; (801c828 <nm_spi_write_reg+0xf4>)
 801c7ae:	481f      	ldr	r0, [pc, #124]	; (801c82c <nm_spi_write_reg+0xf8>)
 801c7b0:	f001 fdf8 	bl	801e3a4 <iprintf>
 801c7b4:	6879      	ldr	r1, [r7, #4]
 801c7b6:	481f      	ldr	r0, [pc, #124]	; (801c834 <nm_spi_write_reg+0x100>)
 801c7b8:	f001 fdf4 	bl	801e3a4 <iprintf>
 801c7bc:	200d      	movs	r0, #13
 801c7be:	f001 fe03 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c7c2:	e000      	b.n	801c7c6 <nm_spi_write_reg+0x92>
		goto _FAIL_;
#endif
    }

#endif
_FAIL_:
 801c7c4:	bf00      	nop
    if(result != N_OK)
 801c7c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d026      	beq.n	801c81c <nm_spi_write_reg+0xe8>
    {
        nm_bsp_sleep(1);
 801c7ce:	2001      	movs	r0, #1
 801c7d0:	f7fc faa0 	bl	8018d14 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	9300      	str	r3, [sp, #0]
 801c7d8:	2300      	movs	r3, #0
 801c7da:	2200      	movs	r2, #0
 801c7dc:	2100      	movs	r1, #0
 801c7de:	20cf      	movs	r0, #207	; 0xcf
 801c7e0:	f7ff fcca 	bl	801c178 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801c7e4:	20cf      	movs	r0, #207	; 0xcf
 801c7e6:	f7ff fdc5 	bl	801c374 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %lx\n", retry, addr, u32data);
 801c7ea:	f240 226d 	movw	r2, #621	; 0x26d
 801c7ee:	490e      	ldr	r1, [pc, #56]	; (801c828 <nm_spi_write_reg+0xf4>)
 801c7f0:	480e      	ldr	r0, [pc, #56]	; (801c82c <nm_spi_write_reg+0xf8>)
 801c7f2:	f001 fdd7 	bl	801e3a4 <iprintf>
 801c7f6:	7bf9      	ldrb	r1, [r7, #15]
 801c7f8:	683b      	ldr	r3, [r7, #0]
 801c7fa:	687a      	ldr	r2, [r7, #4]
 801c7fc:	480e      	ldr	r0, [pc, #56]	; (801c838 <nm_spi_write_reg+0x104>)
 801c7fe:	f001 fdd1 	bl	801e3a4 <iprintf>
 801c802:	200d      	movs	r0, #13
 801c804:	f001 fde0 	bl	801e3c8 <putchar>
        nm_bsp_sleep(1);
 801c808:	2001      	movs	r0, #1
 801c80a:	f7fc fa83 	bl	8018d14 <nm_bsp_sleep>
        retry--;
 801c80e:	7bfb      	ldrb	r3, [r7, #15]
 801c810:	3b01      	subs	r3, #1
 801c812:	73fb      	strb	r3, [r7, #15]
        if(retry) goto _RETRY_;
 801c814:	7bfb      	ldrb	r3, [r7, #15]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d000      	beq.n	801c81c <nm_spi_write_reg+0xe8>
 801c81a:	e798      	b.n	801c74e <nm_spi_write_reg+0x1a>
    }

    return result;
 801c81c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801c820:	4618      	mov	r0, r3
 801c822:	3710      	adds	r7, #16
 801c824:	46bd      	mov	sp, r7
 801c826:	bd80      	pop	{r7, pc}
 801c828:	08029118 	.word	0x08029118
 801c82c:	08020f14 	.word	0x08020f14
 801c830:	080211c8 	.word	0x080211c8
 801c834:	080211f4 	.word	0x080211f4
 801c838:	0802122c 	.word	0x0802122c

0801c83c <nm_spi_write_block>:
 *  @param[in]  u16Sz
 *                  Number of bytes to write. The buffer size must be >= u16Sz
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_block(uint32 addr, uint8 *buf, uint16 size)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b088      	sub	sp, #32
 801c840:	af02      	add	r7, sp, #8
 801c842:	60f8      	str	r0, [r7, #12]
 801c844:	60b9      	str	r1, [r7, #8]
 801c846:	4613      	mov	r3, r2
 801c848:	80fb      	strh	r3, [r7, #6]
    sint8 result;
    uint8 retry = SPI_RETRY_COUNT;
 801c84a:	230a      	movs	r3, #10
 801c84c:	75bb      	strb	r3, [r7, #22]
    uint8 cmd = CMD_DMA_EXT_WRITE;
 801c84e:	23c7      	movs	r3, #199	; 0xc7
 801c850:	757b      	strb	r3, [r7, #21]
    /**
        Command
    **/
#if defined USE_OLD_SPI_SW
    //Workaround hardware problem with single byte transfers over SPI bus
    if(size == 1)
 801c852:	88fb      	ldrh	r3, [r7, #6]
 801c854:	2b01      	cmp	r3, #1
 801c856:	d101      	bne.n	801c85c <nm_spi_write_block+0x20>
        size = 2;
 801c858:	2302      	movs	r3, #2
 801c85a:	80fb      	strh	r3, [r7, #6]

    result = spi_cmd(cmd, addr, 0, size, 0);
 801c85c:	88fb      	ldrh	r3, [r7, #6]
 801c85e:	7d78      	ldrb	r0, [r7, #21]
 801c860:	2200      	movs	r2, #0
 801c862:	9200      	str	r2, [sp, #0]
 801c864:	2200      	movs	r2, #0
 801c866:	68f9      	ldr	r1, [r7, #12]
 801c868:	f7ff fc86 	bl	801c178 <spi_cmd>
 801c86c:	4603      	mov	r3, r0
 801c86e:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d00d      	beq.n	801c894 <nm_spi_write_block+0x58>
        M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 801c878:	f240 2293 	movw	r2, #659	; 0x293
 801c87c:	4936      	ldr	r1, [pc, #216]	; (801c958 <nm_spi_write_block+0x11c>)
 801c87e:	4837      	ldr	r0, [pc, #220]	; (801c95c <nm_spi_write_block+0x120>)
 801c880:	f001 fd90 	bl	801e3a4 <iprintf>
 801c884:	68f9      	ldr	r1, [r7, #12]
 801c886:	4836      	ldr	r0, [pc, #216]	; (801c960 <nm_spi_write_block+0x124>)
 801c888:	f001 fd8c 	bl	801e3a4 <iprintf>
 801c88c:	200d      	movs	r0, #13
 801c88e:	f001 fd9b 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c892:	e030      	b.n	801c8f6 <nm_spi_write_block+0xba>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c894:	7d7b      	ldrb	r3, [r7, #21]
 801c896:	4618      	mov	r0, r3
 801c898:	f7ff fd6c 	bl	801c374 <spi_cmd_rsp>
 801c89c:	4603      	mov	r3, r0
 801c89e:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d00d      	beq.n	801c8c4 <nm_spi_write_block+0x88>
        M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 801c8a8:	f240 229d 	movw	r2, #669	; 0x29d
 801c8ac:	492a      	ldr	r1, [pc, #168]	; (801c958 <nm_spi_write_block+0x11c>)
 801c8ae:	482b      	ldr	r0, [pc, #172]	; (801c95c <nm_spi_write_block+0x120>)
 801c8b0:	f001 fd78 	bl	801e3a4 <iprintf>
 801c8b4:	68f9      	ldr	r1, [r7, #12]
 801c8b6:	482b      	ldr	r0, [pc, #172]	; (801c964 <nm_spi_write_block+0x128>)
 801c8b8:	f001 fd74 	bl	801e3a4 <iprintf>
 801c8bc:	200d      	movs	r0, #13
 801c8be:	f001 fd83 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c8c2:	e018      	b.n	801c8f6 <nm_spi_write_block+0xba>
#endif

    /**
        Data
    **/
    result = spi_data_write(buf, size);
 801c8c4:	88fb      	ldrh	r3, [r7, #6]
 801c8c6:	4619      	mov	r1, r3
 801c8c8:	68b8      	ldr	r0, [r7, #8]
 801c8ca:	f7ff fe91 	bl	801c5f0 <spi_data_write>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d00c      	beq.n	801c8f4 <nm_spi_write_block+0xb8>
        M2M_ERR("[nmi spi]: Failed block data write...\n");
 801c8da:	f240 22b5 	movw	r2, #693	; 0x2b5
 801c8de:	491e      	ldr	r1, [pc, #120]	; (801c958 <nm_spi_write_block+0x11c>)
 801c8e0:	481e      	ldr	r0, [pc, #120]	; (801c95c <nm_spi_write_block+0x120>)
 801c8e2:	f001 fd5f 	bl	801e3a4 <iprintf>
 801c8e6:	4820      	ldr	r0, [pc, #128]	; (801c968 <nm_spi_write_block+0x12c>)
 801c8e8:	f001 fdca 	bl	801e480 <puts>
 801c8ec:	200d      	movs	r0, #13
 801c8ee:	f001 fd6b 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c8f2:	e000      	b.n	801c8f6 <nm_spi_write_block+0xba>
        M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    }
#endif

_FAIL_:
 801c8f4:	bf00      	nop
    if(result != N_OK)
 801c8f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d026      	beq.n	801c94c <nm_spi_write_block+0x110>
    {
        nm_bsp_sleep(1);
 801c8fe:	2001      	movs	r0, #1
 801c900:	f7fc fa08 	bl	8018d14 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801c904:	2300      	movs	r3, #0
 801c906:	9300      	str	r3, [sp, #0]
 801c908:	2300      	movs	r3, #0
 801c90a:	2200      	movs	r2, #0
 801c90c:	2100      	movs	r1, #0
 801c90e:	20cf      	movs	r0, #207	; 0xcf
 801c910:	f7ff fc32 	bl	801c178 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801c914:	20cf      	movs	r0, #207	; 0xcf
 801c916:	f7ff fd2d 	bl	801c374 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
 801c91a:	f240 22cd 	movw	r2, #717	; 0x2cd
 801c91e:	490e      	ldr	r1, [pc, #56]	; (801c958 <nm_spi_write_block+0x11c>)
 801c920:	480e      	ldr	r0, [pc, #56]	; (801c95c <nm_spi_write_block+0x120>)
 801c922:	f001 fd3f 	bl	801e3a4 <iprintf>
 801c926:	7db9      	ldrb	r1, [r7, #22]
 801c928:	88fb      	ldrh	r3, [r7, #6]
 801c92a:	68fa      	ldr	r2, [r7, #12]
 801c92c:	480f      	ldr	r0, [pc, #60]	; (801c96c <nm_spi_write_block+0x130>)
 801c92e:	f001 fd39 	bl	801e3a4 <iprintf>
 801c932:	200d      	movs	r0, #13
 801c934:	f001 fd48 	bl	801e3c8 <putchar>
        nm_bsp_sleep(1);
 801c938:	2001      	movs	r0, #1
 801c93a:	f7fc f9eb 	bl	8018d14 <nm_bsp_sleep>
        retry--;
 801c93e:	7dbb      	ldrb	r3, [r7, #22]
 801c940:	3b01      	subs	r3, #1
 801c942:	75bb      	strb	r3, [r7, #22]
        if(retry) goto _RETRY_;
 801c944:	7dbb      	ldrb	r3, [r7, #22]
 801c946:	2b00      	cmp	r3, #0
 801c948:	d000      	beq.n	801c94c <nm_spi_write_block+0x110>
 801c94a:	e782      	b.n	801c852 <nm_spi_write_block+0x16>
    }


    return result;
 801c94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c950:	4618      	mov	r0, r3
 801c952:	3718      	adds	r7, #24
 801c954:	46bd      	mov	sp, r7
 801c956:	bd80      	pop	{r7, pc}
 801c958:	0802912c 	.word	0x0802912c
 801c95c:	08020f14 	.word	0x08020f14
 801c960:	08021248 	.word	0x08021248
 801c964:	08021278 	.word	0x08021278
 801c968:	080212b0 	.word	0x080212b0
 801c96c:	080212d8 	.word	0x080212d8

0801c970 <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b086      	sub	sp, #24
 801c974:	af02      	add	r7, sp, #8
 801c976:	6078      	str	r0, [r7, #4]
 801c978:	6039      	str	r1, [r7, #0]
    uint8 retry = SPI_RETRY_COUNT;
 801c97a:	230a      	movs	r3, #10
 801c97c:	73fb      	strb	r3, [r7, #15]
    sint8 result = N_OK;
 801c97e:	2300      	movs	r3, #0
 801c980:	73bb      	strb	r3, [r7, #14]
    uint8 cmd = CMD_SINGLE_READ;
 801c982:	23ca      	movs	r3, #202	; 0xca
 801c984:	737b      	strb	r3, [r7, #13]
    uint8 tmp[4];
    uint8 clockless = 0;
 801c986:	2300      	movs	r3, #0
 801c988:	733b      	strb	r3, [r7, #12]

_RETRY_:

    if(addr <= 0xff)
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	2bff      	cmp	r3, #255	; 0xff
 801c98e:	d803      	bhi.n	801c998 <nm_spi_read_reg_with_ret+0x28>
    {
        /**
        NMC1000 clockless registers.
        **/
        cmd = CMD_INTERNAL_READ;
 801c990:	23c4      	movs	r3, #196	; 0xc4
 801c992:	737b      	strb	r3, [r7, #13]
        clockless = 1;
 801c994:	2301      	movs	r3, #1
 801c996:	733b      	strb	r3, [r7, #12]
    }

#if defined USE_OLD_SPI_SW
    result = spi_cmd(cmd, addr, 0, 4, clockless);
 801c998:	7b78      	ldrb	r0, [r7, #13]
 801c99a:	7b3b      	ldrb	r3, [r7, #12]
 801c99c:	9300      	str	r3, [sp, #0]
 801c99e:	2304      	movs	r3, #4
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	6879      	ldr	r1, [r7, #4]
 801c9a4:	f7ff fbe8 	bl	801c178 <spi_cmd>
 801c9a8:	4603      	mov	r3, r0
 801c9aa:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c9ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d00d      	beq.n	801c9d0 <nm_spi_read_reg_with_ret+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 801c9b4:	f240 22f6 	movw	r2, #758	; 0x2f6
 801c9b8:	493d      	ldr	r1, [pc, #244]	; (801cab0 <nm_spi_read_reg_with_ret+0x140>)
 801c9ba:	483e      	ldr	r0, [pc, #248]	; (801cab4 <nm_spi_read_reg_with_ret+0x144>)
 801c9bc:	f001 fcf2 	bl	801e3a4 <iprintf>
 801c9c0:	6879      	ldr	r1, [r7, #4]
 801c9c2:	483d      	ldr	r0, [pc, #244]	; (801cab8 <nm_spi_read_reg_with_ret+0x148>)
 801c9c4:	f001 fcee 	bl	801e3a4 <iprintf>
 801c9c8:	200d      	movs	r0, #13
 801c9ca:	f001 fcfd 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c9ce:	e03e      	b.n	801ca4e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c9d0:	7b7b      	ldrb	r3, [r7, #13]
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7ff fcce 	bl	801c374 <spi_cmd_rsp>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c9dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d00d      	beq.n	801ca00 <nm_spi_read_reg_with_ret+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 801c9e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 801c9e8:	4931      	ldr	r1, [pc, #196]	; (801cab0 <nm_spi_read_reg_with_ret+0x140>)
 801c9ea:	4832      	ldr	r0, [pc, #200]	; (801cab4 <nm_spi_read_reg_with_ret+0x144>)
 801c9ec:	f001 fcda 	bl	801e3a4 <iprintf>
 801c9f0:	6879      	ldr	r1, [r7, #4]
 801c9f2:	4832      	ldr	r0, [pc, #200]	; (801cabc <nm_spi_read_reg_with_ret+0x14c>)
 801c9f4:	f001 fcd6 	bl	801e3a4 <iprintf>
 801c9f8:	200d      	movs	r0, #13
 801c9fa:	f001 fce5 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c9fe:	e026      	b.n	801ca4e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

    /* to avoid endianess issues */
    result = spi_data_read(tmp, 4, clockless);
 801ca00:	7b3a      	ldrb	r2, [r7, #12]
 801ca02:	f107 0308 	add.w	r3, r7, #8
 801ca06:	2104      	movs	r1, #4
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7ff fd3b 	bl	801c484 <spi_data_read>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801ca12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d00c      	beq.n	801ca34 <nm_spi_read_reg_with_ret+0xc4>
        M2M_ERR("[nmi spi]: Failed data read...\n");
 801ca1a:	f240 320b 	movw	r2, #779	; 0x30b
 801ca1e:	4924      	ldr	r1, [pc, #144]	; (801cab0 <nm_spi_read_reg_with_ret+0x140>)
 801ca20:	4824      	ldr	r0, [pc, #144]	; (801cab4 <nm_spi_read_reg_with_ret+0x144>)
 801ca22:	f001 fcbf 	bl	801e3a4 <iprintf>
 801ca26:	4826      	ldr	r0, [pc, #152]	; (801cac0 <nm_spi_read_reg_with_ret+0x150>)
 801ca28:	f001 fd2a 	bl	801e480 <puts>
 801ca2c:	200d      	movs	r0, #13
 801ca2e:	f001 fccb 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801ca32:	e00c      	b.n	801ca4e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

#endif

    *u32data = tmp[0] |
 801ca34:	7a3b      	ldrb	r3, [r7, #8]
 801ca36:	461a      	mov	r2, r3
               ((uint32)tmp[1] << 8) |
 801ca38:	7a7b      	ldrb	r3, [r7, #9]
 801ca3a:	021b      	lsls	r3, r3, #8
    *u32data = tmp[0] |
 801ca3c:	431a      	orrs	r2, r3
               ((uint32)tmp[2] << 16) |
 801ca3e:	7abb      	ldrb	r3, [r7, #10]
 801ca40:	041b      	lsls	r3, r3, #16
               ((uint32)tmp[1] << 8) |
 801ca42:	431a      	orrs	r2, r3
               ((uint32)tmp[3] << 24);
 801ca44:	7afb      	ldrb	r3, [r7, #11]
 801ca46:	061b      	lsls	r3, r3, #24
               ((uint32)tmp[2] << 16) |
 801ca48:	431a      	orrs	r2, r3
    *u32data = tmp[0] |
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	601a      	str	r2, [r3, #0]

_FAIL_:
    if(result != N_OK)
 801ca4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d026      	beq.n	801caa4 <nm_spi_read_reg_with_ret+0x134>
    {
        nm_bsp_sleep(1);
 801ca56:	2001      	movs	r0, #1
 801ca58:	f7fc f95c 	bl	8018d14 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	9300      	str	r3, [sp, #0]
 801ca60:	2300      	movs	r3, #0
 801ca62:	2200      	movs	r2, #0
 801ca64:	2100      	movs	r1, #0
 801ca66:	20cf      	movs	r0, #207	; 0xcf
 801ca68:	f7ff fb86 	bl	801c178 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801ca6c:	20cf      	movs	r0, #207	; 0xcf
 801ca6e:	f7ff fc81 	bl	801c374 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx\n", retry, addr);
 801ca72:	f240 322a 	movw	r2, #810	; 0x32a
 801ca76:	490e      	ldr	r1, [pc, #56]	; (801cab0 <nm_spi_read_reg_with_ret+0x140>)
 801ca78:	480e      	ldr	r0, [pc, #56]	; (801cab4 <nm_spi_read_reg_with_ret+0x144>)
 801ca7a:	f001 fc93 	bl	801e3a4 <iprintf>
 801ca7e:	7bfb      	ldrb	r3, [r7, #15]
 801ca80:	687a      	ldr	r2, [r7, #4]
 801ca82:	4619      	mov	r1, r3
 801ca84:	480f      	ldr	r0, [pc, #60]	; (801cac4 <nm_spi_read_reg_with_ret+0x154>)
 801ca86:	f001 fc8d 	bl	801e3a4 <iprintf>
 801ca8a:	200d      	movs	r0, #13
 801ca8c:	f001 fc9c 	bl	801e3c8 <putchar>
        nm_bsp_sleep(1);
 801ca90:	2001      	movs	r0, #1
 801ca92:	f7fc f93f 	bl	8018d14 <nm_bsp_sleep>
        retry--;
 801ca96:	7bfb      	ldrb	r3, [r7, #15]
 801ca98:	3b01      	subs	r3, #1
 801ca9a:	73fb      	strb	r3, [r7, #15]
        if(retry) goto _RETRY_;
 801ca9c:	7bfb      	ldrb	r3, [r7, #15]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d000      	beq.n	801caa4 <nm_spi_read_reg_with_ret+0x134>
 801caa2:	e772      	b.n	801c98a <nm_spi_read_reg_with_ret+0x1a>
    }

    return result;
 801caa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801caa8:	4618      	mov	r0, r3
 801caaa:	3710      	adds	r7, #16
 801caac:	46bd      	mov	sp, r7
 801caae:	bd80      	pop	{r7, pc}
 801cab0:	08029140 	.word	0x08029140
 801cab4:	08020f14 	.word	0x08020f14
 801cab8:	080212f4 	.word	0x080212f4
 801cabc:	08021320 	.word	0x08021320
 801cac0:	08021354 	.word	0x08021354
 801cac4:	08021374 	.word	0x08021374

0801cac8 <nm_spi_read_block>:
 *  @param[in]  u16Sz
 *                  Number of bytes to read. The buffer size must be >= u16Sz
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_block(uint32 addr, uint8 *buf, uint16 size)
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b088      	sub	sp, #32
 801cacc:	af02      	add	r7, sp, #8
 801cace:	60f8      	str	r0, [r7, #12]
 801cad0:	60b9      	str	r1, [r7, #8]
 801cad2:	4613      	mov	r3, r2
 801cad4:	80fb      	strh	r3, [r7, #6]
    uint8 cmd = CMD_DMA_EXT_READ;
 801cad6:	23c8      	movs	r3, #200	; 0xc8
 801cad8:	753b      	strb	r3, [r7, #20]
    sint8 result;
    uint8 retry = SPI_RETRY_COUNT;
 801cada:	230a      	movs	r3, #10
 801cadc:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
    uint8 tmp[2];
    uint8 single_byte_workaround = 0;
 801cade:	2300      	movs	r3, #0
 801cae0:	757b      	strb	r3, [r7, #21]

    /**
        Command
    **/
#if defined USE_OLD_SPI_SW
    if(size == 1)
 801cae2:	88fb      	ldrh	r3, [r7, #6]
 801cae4:	2b01      	cmp	r3, #1
 801cae6:	d103      	bne.n	801caf0 <nm_spi_read_block+0x28>
    {
        //Workaround hardware problem with single byte transfers over SPI bus
        size = 2;
 801cae8:	2302      	movs	r3, #2
 801caea:	80fb      	strh	r3, [r7, #6]
        single_byte_workaround = 1;
 801caec:	2301      	movs	r3, #1
 801caee:	757b      	strb	r3, [r7, #21]
    }
    result = spi_cmd(cmd, addr, 0, size, 0);
 801caf0:	88fb      	ldrh	r3, [r7, #6]
 801caf2:	7d38      	ldrb	r0, [r7, #20]
 801caf4:	2200      	movs	r2, #0
 801caf6:	9200      	str	r2, [sp, #0]
 801caf8:	2200      	movs	r2, #0
 801cafa:	68f9      	ldr	r1, [r7, #12]
 801cafc:	f7ff fb3c 	bl	801c178 <spi_cmd>
 801cb00:	4603      	mov	r3, r0
 801cb02:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801cb04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d00d      	beq.n	801cb28 <nm_spi_read_block+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 801cb0c:	f240 3256 	movw	r2, #854	; 0x356
 801cb10:	493f      	ldr	r1, [pc, #252]	; (801cc10 <nm_spi_read_block+0x148>)
 801cb12:	4840      	ldr	r0, [pc, #256]	; (801cc14 <nm_spi_read_block+0x14c>)
 801cb14:	f001 fc46 	bl	801e3a4 <iprintf>
 801cb18:	68f9      	ldr	r1, [r7, #12]
 801cb1a:	483f      	ldr	r0, [pc, #252]	; (801cc18 <nm_spi_read_block+0x150>)
 801cb1c:	f001 fc42 	bl	801e3a4 <iprintf>
 801cb20:	200d      	movs	r0, #13
 801cb22:	f001 fc51 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801cb26:	e041      	b.n	801cbac <nm_spi_read_block+0xe4>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801cb28:	7d3b      	ldrb	r3, [r7, #20]
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	f7ff fc22 	bl	801c374 <spi_cmd_rsp>
 801cb30:	4603      	mov	r3, r0
 801cb32:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801cb34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d00d      	beq.n	801cb58 <nm_spi_read_block+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 801cb3c:	f44f 7258 	mov.w	r2, #864	; 0x360
 801cb40:	4933      	ldr	r1, [pc, #204]	; (801cc10 <nm_spi_read_block+0x148>)
 801cb42:	4834      	ldr	r0, [pc, #208]	; (801cc14 <nm_spi_read_block+0x14c>)
 801cb44:	f001 fc2e 	bl	801e3a4 <iprintf>
 801cb48:	68f9      	ldr	r1, [r7, #12]
 801cb4a:	4834      	ldr	r0, [pc, #208]	; (801cc1c <nm_spi_read_block+0x154>)
 801cb4c:	f001 fc2a 	bl	801e3a4 <iprintf>
 801cb50:	200d      	movs	r0, #13
 801cb52:	f001 fc39 	bl	801e3c8 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801cb56:	e029      	b.n	801cbac <nm_spi_read_block+0xe4>
    }

    /**
        Data
    **/
    if(single_byte_workaround)
 801cb58:	7d7b      	ldrb	r3, [r7, #21]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d00c      	beq.n	801cb78 <nm_spi_read_block+0xb0>
    {
        result = spi_data_read(tmp, size, 0);
 801cb5e:	88f9      	ldrh	r1, [r7, #6]
 801cb60:	f107 0310 	add.w	r3, r7, #16
 801cb64:	2200      	movs	r2, #0
 801cb66:	4618      	mov	r0, r3
 801cb68:	f7ff fc8c 	bl	801c484 <spi_data_read>
 801cb6c:	4603      	mov	r3, r0
 801cb6e:	75fb      	strb	r3, [r7, #23]
        buf[0] = tmp[0];
 801cb70:	7c3a      	ldrb	r2, [r7, #16]
 801cb72:	68bb      	ldr	r3, [r7, #8]
 801cb74:	701a      	strb	r2, [r3, #0]
 801cb76:	e007      	b.n	801cb88 <nm_spi_read_block+0xc0>
    }
    else
        result = spi_data_read(buf, size, 0);
 801cb78:	88fb      	ldrh	r3, [r7, #6]
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	4619      	mov	r1, r3
 801cb7e:	68b8      	ldr	r0, [r7, #8]
 801cb80:	f7ff fc80 	bl	801c484 <spi_data_read>
 801cb84:	4603      	mov	r3, r0
 801cb86:	75fb      	strb	r3, [r7, #23]

    if(result != N_OK) {
 801cb88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d00c      	beq.n	801cbaa <nm_spi_read_block+0xe2>
        M2M_ERR("[nmi spi]: Failed block data read...\n");
 801cb90:	f44f 725d 	mov.w	r2, #884	; 0x374
 801cb94:	491e      	ldr	r1, [pc, #120]	; (801cc10 <nm_spi_read_block+0x148>)
 801cb96:	481f      	ldr	r0, [pc, #124]	; (801cc14 <nm_spi_read_block+0x14c>)
 801cb98:	f001 fc04 	bl	801e3a4 <iprintf>
 801cb9c:	4820      	ldr	r0, [pc, #128]	; (801cc20 <nm_spi_read_block+0x158>)
 801cb9e:	f001 fc6f 	bl	801e480 <puts>
 801cba2:	200d      	movs	r0, #13
 801cba4:	f001 fc10 	bl	801e3c8 <putchar>
        goto _FAIL_;
 801cba8:	e000      	b.n	801cbac <nm_spi_read_block+0xe4>
		goto _FAIL_;
#endif
    }
#endif

_FAIL_:
 801cbaa:	bf00      	nop
    if(result != N_OK)
 801cbac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d026      	beq.n	801cc02 <nm_spi_read_block+0x13a>
    {
        nm_bsp_sleep(1);
 801cbb4:	2001      	movs	r0, #1
 801cbb6:	f7fc f8ad 	bl	8018d14 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801cbba:	2300      	movs	r3, #0
 801cbbc:	9300      	str	r3, [sp, #0]
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	20cf      	movs	r0, #207	; 0xcf
 801cbc6:	f7ff fad7 	bl	801c178 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801cbca:	20cf      	movs	r0, #207	; 0xcf
 801cbcc:	f7ff fbd2 	bl	801c374 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
 801cbd0:	f240 3289 	movw	r2, #905	; 0x389
 801cbd4:	490e      	ldr	r1, [pc, #56]	; (801cc10 <nm_spi_read_block+0x148>)
 801cbd6:	480f      	ldr	r0, [pc, #60]	; (801cc14 <nm_spi_read_block+0x14c>)
 801cbd8:	f001 fbe4 	bl	801e3a4 <iprintf>
 801cbdc:	7db9      	ldrb	r1, [r7, #22]
 801cbde:	88fb      	ldrh	r3, [r7, #6]
 801cbe0:	68fa      	ldr	r2, [r7, #12]
 801cbe2:	4810      	ldr	r0, [pc, #64]	; (801cc24 <nm_spi_read_block+0x15c>)
 801cbe4:	f001 fbde 	bl	801e3a4 <iprintf>
 801cbe8:	200d      	movs	r0, #13
 801cbea:	f001 fbed 	bl	801e3c8 <putchar>
        nm_bsp_sleep(1);
 801cbee:	2001      	movs	r0, #1
 801cbf0:	f7fc f890 	bl	8018d14 <nm_bsp_sleep>
        retry--;
 801cbf4:	7dbb      	ldrb	r3, [r7, #22]
 801cbf6:	3b01      	subs	r3, #1
 801cbf8:	75bb      	strb	r3, [r7, #22]
        if(retry) goto _RETRY_;
 801cbfa:	7dbb      	ldrb	r3, [r7, #22]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d000      	beq.n	801cc02 <nm_spi_read_block+0x13a>
 801cc00:	e76f      	b.n	801cae2 <nm_spi_read_block+0x1a>
    }

    return result;
 801cc02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3718      	adds	r7, #24
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	0802915c 	.word	0x0802915c
 801cc14:	08020f14 	.word	0x08020f14
 801cc18:	0802138c 	.word	0x0802138c
 801cc1c:	080213bc 	.word	0x080213bc
 801cc20:	080213f4 	.word	0x080213f4
 801cc24:	080212d8 	.word	0x080212d8

0801cc28 <spi_init_pkt_sz>:
    Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b082      	sub	sp, #8
 801cc2c:	af00      	add	r7, sp, #0
    uint32 val32;

    /* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
    val32 = nm_spi_read_reg(SPI_BASE+0x24);
 801cc2e:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc32:	f000 f8b1 	bl	801cd98 <nm_spi_read_reg>
 801cc36:	6078      	str	r0, [r7, #4]
    val32 &= ~(0x7 << 4);
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801cc3e:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801cc46:	607b      	str	r3, [r7, #4]
            break;
 801cc48:	bf00      	nop
    }
    nm_spi_write_reg(SPI_BASE+0x24, val32);
 801cc4a:	6879      	ldr	r1, [r7, #4]
 801cc4c:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc50:	f7ff fd70 	bl	801c734 <nm_spi_write_reg>
}
 801cc54:	bf00      	nop
 801cc56:	3708      	adds	r7, #8
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}

0801cc5c <nm_spi_init>:
 *  @fn         nm_spi_init
 *  @brief      Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_init(void)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b082      	sub	sp, #8
 801cc60:	af00      	add	r7, sp, #0
    uint32 chipid;
    uint32 reg =0;
 801cc62:	2300      	movs	r3, #0
 801cc64:	603b      	str	r3, [r7, #0]

    /**
        configure protocol
    **/
    gu8Crc_off = 0;
 801cc66:	4b3e      	ldr	r3, [pc, #248]	; (801cd60 <nm_spi_init+0x104>)
 801cc68:	2200      	movs	r2, #0
 801cc6a:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 801cc6c:	463b      	mov	r3, r7
 801cc6e:	4619      	mov	r1, r3
 801cc70:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc74:	f7ff fe7c 	bl	801c970 <nm_spi_read_reg_with_ret>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d026      	beq.n	801cccc <nm_spi_init+0x70>
        /* Read failed. Try with CRC off. This might happen when module
        is removed but chip isn't reset*/
        gu8Crc_off = 1;
 801cc7e:	4b38      	ldr	r3, [pc, #224]	; (801cd60 <nm_spi_init+0x104>)
 801cc80:	2201      	movs	r2, #1
 801cc82:	701a      	strb	r2, [r3, #0]
        M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 801cc84:	f240 32ca 	movw	r2, #970	; 0x3ca
 801cc88:	4936      	ldr	r1, [pc, #216]	; (801cd64 <nm_spi_init+0x108>)
 801cc8a:	4837      	ldr	r0, [pc, #220]	; (801cd68 <nm_spi_init+0x10c>)
 801cc8c:	f001 fb8a 	bl	801e3a4 <iprintf>
 801cc90:	4836      	ldr	r0, [pc, #216]	; (801cd6c <nm_spi_init+0x110>)
 801cc92:	f001 fbf5 	bl	801e480 <puts>
 801cc96:	200d      	movs	r0, #13
 801cc98:	f001 fb96 	bl	801e3c8 <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 801cc9c:	463b      	mov	r3, r7
 801cc9e:	4619      	mov	r1, r3
 801cca0:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cca4:	f7ff fe64 	bl	801c970 <nm_spi_read_reg_with_ret>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d00e      	beq.n	801cccc <nm_spi_init+0x70>
            // Read failed with both CRC on and off, something went bad
            M2M_ERR("[nmi spi]: Failed internal read protocol...\n");
 801ccae:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ccb2:	492c      	ldr	r1, [pc, #176]	; (801cd64 <nm_spi_init+0x108>)
 801ccb4:	482c      	ldr	r0, [pc, #176]	; (801cd68 <nm_spi_init+0x10c>)
 801ccb6:	f001 fb75 	bl	801e3a4 <iprintf>
 801ccba:	482d      	ldr	r0, [pc, #180]	; (801cd70 <nm_spi_init+0x114>)
 801ccbc:	f001 fbe0 	bl	801e480 <puts>
 801ccc0:	200d      	movs	r0, #13
 801ccc2:	f001 fb81 	bl	801e3c8 <putchar>
            return M2M_ERR_BUS_FAIL;
 801ccc6:	f06f 0305 	mvn.w	r3, #5
 801ccca:	e045      	b.n	801cd58 <nm_spi_init+0xfc>
        }
    }
    if(gu8Crc_off == 0)
 801cccc:	4b24      	ldr	r3, [pc, #144]	; (801cd60 <nm_spi_init+0x104>)
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d126      	bne.n	801cd22 <nm_spi_init+0xc6>
    {
        reg &= ~0xc;    /* disable crc checking */
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	f023 030c 	bic.w	r3, r3, #12
 801ccda:	603b      	str	r3, [r7, #0]
        reg &= ~0x70;
 801ccdc:	683b      	ldr	r3, [r7, #0]
 801ccde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801cce2:	603b      	str	r3, [r7, #0]
        reg |= (0x5 << 4);
 801cce4:	683b      	ldr	r3, [r7, #0]
 801cce6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801ccea:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 801ccec:	683b      	ldr	r3, [r7, #0]
 801ccee:	4619      	mov	r1, r3
 801ccf0:	f64e 0024 	movw	r0, #59428	; 0xe824
 801ccf4:	f7ff fd1e 	bl	801c734 <nm_spi_write_reg>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d00e      	beq.n	801cd1c <nm_spi_init+0xc0>
            M2M_ERR("[nmi spi]: Failed internal write protocol reg...\n");
 801ccfe:	f240 32d7 	movw	r2, #983	; 0x3d7
 801cd02:	4918      	ldr	r1, [pc, #96]	; (801cd64 <nm_spi_init+0x108>)
 801cd04:	4818      	ldr	r0, [pc, #96]	; (801cd68 <nm_spi_init+0x10c>)
 801cd06:	f001 fb4d 	bl	801e3a4 <iprintf>
 801cd0a:	481a      	ldr	r0, [pc, #104]	; (801cd74 <nm_spi_init+0x118>)
 801cd0c:	f001 fbb8 	bl	801e480 <puts>
 801cd10:	200d      	movs	r0, #13
 801cd12:	f001 fb59 	bl	801e3c8 <putchar>
            return M2M_ERR_BUS_FAIL;
 801cd16:	f06f 0305 	mvn.w	r3, #5
 801cd1a:	e01d      	b.n	801cd58 <nm_spi_init+0xfc>
        }
        gu8Crc_off = 1;
 801cd1c:	4b10      	ldr	r3, [pc, #64]	; (801cd60 <nm_spi_init+0x104>)
 801cd1e:	2201      	movs	r2, #1
 801cd20:	701a      	strb	r2, [r3, #0]
    }

    /**
        make sure can read back chip id correctly
    **/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 801cd22:	1d3b      	adds	r3, r7, #4
 801cd24:	4619      	mov	r1, r3
 801cd26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801cd2a:	f7ff fe21 	bl	801c970 <nm_spi_read_reg_with_ret>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d00e      	beq.n	801cd52 <nm_spi_init+0xf6>
        M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 801cd34:	f240 32e1 	movw	r2, #993	; 0x3e1
 801cd38:	490a      	ldr	r1, [pc, #40]	; (801cd64 <nm_spi_init+0x108>)
 801cd3a:	480b      	ldr	r0, [pc, #44]	; (801cd68 <nm_spi_init+0x10c>)
 801cd3c:	f001 fb32 	bl	801e3a4 <iprintf>
 801cd40:	480d      	ldr	r0, [pc, #52]	; (801cd78 <nm_spi_init+0x11c>)
 801cd42:	f001 fb9d 	bl	801e480 <puts>
 801cd46:	200d      	movs	r0, #13
 801cd48:	f001 fb3e 	bl	801e3c8 <putchar>
        return M2M_ERR_BUS_FAIL;
 801cd4c:	f06f 0305 	mvn.w	r3, #5
 801cd50:	e002      	b.n	801cd58 <nm_spi_init+0xfc>
    }

    M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
    spi_init_pkt_sz();
 801cd52:	f7ff ff69 	bl	801cc28 <spi_init_pkt_sz>

    return M2M_SUCCESS;
 801cd56:	2300      	movs	r3, #0
}
 801cd58:	4618      	mov	r0, r3
 801cd5a:	3708      	adds	r7, #8
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bd80      	pop	{r7, pc}
 801cd60:	2001ded5 	.word	0x2001ded5
 801cd64:	08029170 	.word	0x08029170
 801cd68:	08020f14 	.word	0x08020f14
 801cd6c:	0802141c 	.word	0x0802141c
 801cd70:	0802146c 	.word	0x0802146c
 801cd74:	08021498 	.word	0x08021498
 801cd78:	080214cc 	.word	0x080214cc

0801cd7c <nm_spi_deinit>:
 *  @fn         nm_spi_init
 *  @brief      DeInitialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_deinit(void)
{
 801cd7c:	b480      	push	{r7}
 801cd7e:	af00      	add	r7, sp, #0
    gu8Crc_off = 0;
 801cd80:	4b04      	ldr	r3, [pc, #16]	; (801cd94 <nm_spi_deinit+0x18>)
 801cd82:	2200      	movs	r2, #0
 801cd84:	701a      	strb	r2, [r3, #0]
    return M2M_SUCCESS;
 801cd86:	2300      	movs	r3, #0
}
 801cd88:	4618      	mov	r0, r3
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd90:	4770      	bx	lr
 801cd92:	bf00      	nop
 801cd94:	2001ded5 	.word	0x2001ded5

0801cd98 <nm_spi_read_reg>:
*   @param [in] u32Addr
*               Register address
*   @return Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b084      	sub	sp, #16
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	6078      	str	r0, [r7, #4]
    uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 801cda0:	f107 030c 	add.w	r3, r7, #12
 801cda4:	4619      	mov	r1, r3
 801cda6:	6878      	ldr	r0, [r7, #4]
 801cda8:	f7ff fde2 	bl	801c970 <nm_spi_read_reg_with_ret>

    return u32Val;
 801cdac:	68fb      	ldr	r3, [r7, #12]
}
 801cdae:	4618      	mov	r0, r3
 801cdb0:	3710      	adds	r7, #16
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bd80      	pop	{r7, pc}
	...

0801cdb8 <Socket_ReadSocketData>:
Return
        None.
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv, uint8 u8SocketMsg,
                                   uint32 u32StartAddress, uint16 u16ReadCount)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b088      	sub	sp, #32
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	60b9      	str	r1, [r7, #8]
 801cdc0:	607b      	str	r3, [r7, #4]
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	73fb      	strb	r3, [r7, #15]
 801cdc6:	4613      	mov	r3, r2
 801cdc8:	73bb      	strb	r3, [r7, #14]
    uint32  u32Address = u32StartAddress;
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	61bb      	str	r3, [r7, #24]
    uint16  u16Read;
    sint16  s16Diff;

    pstrRecv->u16RemainingSize = u16ReadCount;
 801cdce:	68bb      	ldr	r3, [r7, #8]
 801cdd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801cdd2:	80da      	strh	r2, [r3, #6]
    if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 801cdd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	f000 8093 	beq.w	801cf02 <Socket_ReadSocketData+0x14a>
 801cddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cde0:	4a4a      	ldr	r2, [pc, #296]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801cde2:	011b      	lsls	r3, r3, #4
 801cde4:	4413      	add	r3, r2
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	f000 808a 	beq.w	801cf02 <Socket_ReadSocketData+0x14a>
 801cdee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdf2:	4a46      	ldr	r2, [pc, #280]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801cdf4:	011b      	lsls	r3, r3, #4
 801cdf6:	4413      	add	r3, r2
 801cdf8:	3304      	adds	r3, #4
 801cdfa:	881b      	ldrh	r3, [r3, #0]
 801cdfc:	b29b      	uxth	r3, r3
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d07f      	beq.n	801cf02 <Socket_ReadSocketData+0x14a>
 801ce02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce06:	4a41      	ldr	r2, [pc, #260]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce08:	011b      	lsls	r3, r3, #4
 801ce0a:	4413      	add	r3, r2
 801ce0c:	330a      	adds	r3, #10
 801ce0e:	781b      	ldrb	r3, [r3, #0]
 801ce10:	b2db      	uxtb	r3, r3
 801ce12:	2b01      	cmp	r3, #1
 801ce14:	d175      	bne.n	801cf02 <Socket_ReadSocketData+0x14a>
    {
        u16Read = u16ReadCount;
 801ce16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ce18:	83fb      	strh	r3, [r7, #30]
        s16Diff = u16Read - gastrSockets[sock].u16UserBufferSize;
 801ce1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce1e:	4a3b      	ldr	r2, [pc, #236]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce20:	011b      	lsls	r3, r3, #4
 801ce22:	4413      	add	r3, r2
 801ce24:	3304      	adds	r3, #4
 801ce26:	881b      	ldrh	r3, [r3, #0]
 801ce28:	b29b      	uxth	r3, r3
 801ce2a:	8bfa      	ldrh	r2, [r7, #30]
 801ce2c:	1ad3      	subs	r3, r2, r3
 801ce2e:	b29b      	uxth	r3, r3
 801ce30:	82fb      	strh	r3, [r7, #22]
        if(s16Diff > 0)
 801ce32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	dd07      	ble.n	801ce4a <Socket_ReadSocketData+0x92>
            u16Read = gastrSockets[sock].u16UserBufferSize;
 801ce3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce3e:	4a33      	ldr	r2, [pc, #204]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce40:	011b      	lsls	r3, r3, #4
 801ce42:	4413      	add	r3, r2
 801ce44:	3304      	adds	r3, #4
 801ce46:	881b      	ldrh	r3, [r3, #0]
 801ce48:	83fb      	strh	r3, [r7, #30]

        if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, 1) == M2M_SUCCESS)
 801ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce4e:	4a2f      	ldr	r2, [pc, #188]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce50:	011b      	lsls	r3, r3, #4
 801ce52:	4413      	add	r3, r2
 801ce54:	6819      	ldr	r1, [r3, #0]
 801ce56:	8bfa      	ldrh	r2, [r7, #30]
 801ce58:	2301      	movs	r3, #1
 801ce5a:	69b8      	ldr	r0, [r7, #24]
 801ce5c:	f7fc ff38 	bl	8019cd0 <hif_receive>
 801ce60:	4603      	mov	r3, r0
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d142      	bne.n	801ceec <Socket_ReadSocketData+0x134>
        {
            pstrRecv->pu8Buffer         = gastrSockets[sock].pu8UserBuffer;
 801ce66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce6a:	4a28      	ldr	r2, [pc, #160]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce6c:	011b      	lsls	r3, r3, #4
 801ce6e:	4413      	add	r3, r2
 801ce70:	681a      	ldr	r2, [r3, #0]
 801ce72:	68bb      	ldr	r3, [r7, #8]
 801ce74:	601a      	str	r2, [r3, #0]
            pstrRecv->s16BufferSize     = u16Read;
 801ce76:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801ce7a:	68bb      	ldr	r3, [r7, #8]
 801ce7c:	809a      	strh	r2, [r3, #4]
            pstrRecv->u16RemainingSize  -= u16Read;
 801ce7e:	68bb      	ldr	r3, [r7, #8]
 801ce80:	88da      	ldrh	r2, [r3, #6]
 801ce82:	8bfb      	ldrh	r3, [r7, #30]
 801ce84:	1ad3      	subs	r3, r2, r3
 801ce86:	b29a      	uxth	r2, r3
 801ce88:	68bb      	ldr	r3, [r7, #8]
 801ce8a:	80da      	strh	r2, [r3, #6]

            gastrSockets[sock].u16UserBufferSize -= u16Read;
 801ce8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce90:	4a1e      	ldr	r2, [pc, #120]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ce92:	011b      	lsls	r3, r3, #4
 801ce94:	4413      	add	r3, r2
 801ce96:	3304      	adds	r3, #4
 801ce98:	881b      	ldrh	r3, [r3, #0]
 801ce9a:	b299      	uxth	r1, r3
 801ce9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cea0:	8bfa      	ldrh	r2, [r7, #30]
 801cea2:	1a8a      	subs	r2, r1, r2
 801cea4:	b291      	uxth	r1, r2
 801cea6:	4a19      	ldr	r2, [pc, #100]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801cea8:	011b      	lsls	r3, r3, #4
 801ceaa:	4413      	add	r3, r2
 801ceac:	3304      	adds	r3, #4
 801ceae:	460a      	mov	r2, r1
 801ceb0:	801a      	strh	r2, [r3, #0]
            if(gastrSockets[sock].u16UserBufferSize == 0)
 801ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ceb6:	4a15      	ldr	r2, [pc, #84]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801ceb8:	011b      	lsls	r3, r3, #4
 801ceba:	4413      	add	r3, r2
 801cebc:	3304      	adds	r3, #4
 801cebe:	881b      	ldrh	r3, [r3, #0]
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d106      	bne.n	801ced4 <Socket_ReadSocketData+0x11c>
                gastrSockets[sock].pu8UserBuffer = NULL;
 801cec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ceca:	4a10      	ldr	r2, [pc, #64]	; (801cf0c <Socket_ReadSocketData+0x154>)
 801cecc:	011b      	lsls	r3, r3, #4
 801cece:	4413      	add	r3, r2
 801ced0:	2200      	movs	r2, #0
 801ced2:	601a      	str	r2, [r3, #0]

            if(gpfAppSocketCb)
 801ced4:	4b0e      	ldr	r3, [pc, #56]	; (801cf10 <Socket_ReadSocketData+0x158>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d012      	beq.n	801cf02 <Socket_ReadSocketData+0x14a>
                gpfAppSocketCb(sock, u8SocketMsg, pstrRecv);
 801cedc:	4b0c      	ldr	r3, [pc, #48]	; (801cf10 <Socket_ReadSocketData+0x158>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	7bb9      	ldrb	r1, [r7, #14]
 801cee2:	f997 000f 	ldrsb.w	r0, [r7, #15]
 801cee6:	68ba      	ldr	r2, [r7, #8]
 801cee8:	4798      	blx	r3
        else
        {
            M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
        }
    }
}
 801ceea:	e00a      	b.n	801cf02 <Socket_ReadSocketData+0x14a>
            M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
 801ceec:	4809      	ldr	r0, [pc, #36]	; (801cf14 <Socket_ReadSocketData+0x15c>)
 801ceee:	f001 fa59 	bl	801e3a4 <iprintf>
 801cef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cef4:	4619      	mov	r1, r3
 801cef6:	4808      	ldr	r0, [pc, #32]	; (801cf18 <Socket_ReadSocketData+0x160>)
 801cef8:	f001 fa54 	bl	801e3a4 <iprintf>
 801cefc:	200d      	movs	r0, #13
 801cefe:	f001 fa63 	bl	801e3c8 <putchar>
}
 801cf02:	bf00      	nop
 801cf04:	3720      	adds	r7, #32
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}
 801cf0a:	bf00      	nop
 801cf0c:	2001ded8 	.word	0x2001ded8
 801cf10:	2001df9c 	.word	0x2001df9c
 801cf14:	080214f0 	.word	0x080214f0
 801cf18:	080214fc 	.word	0x080214fc

0801cf1c <m2m_ip_cb>:

Return
        None.
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize, uint32 u32Address)
{
 801cf1c:	b590      	push	{r4, r7, lr}
 801cf1e:	b0c5      	sub	sp, #276	; 0x114
 801cf20:	af02      	add	r7, sp, #8
 801cf22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801cf2a:	601a      	str	r2, [r3, #0]
 801cf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf30:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf34:	4602      	mov	r2, r0
 801cf36:	701a      	strb	r2, [r3, #0]
 801cf38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801cf40:	460a      	mov	r2, r1
 801cf42:	801a      	strh	r2, [r3, #0]
    if(u8OpCode == SOCKET_CMD_BIND)
 801cf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf48:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf4c:	781b      	ldrb	r3, [r3, #0]
 801cf4e:	2b41      	cmp	r3, #65	; 0x41
 801cf50:	d120      	bne.n	801cf94 <m2m_ip_cb+0x78>
    {
        tstrBindReply       strBindReply;
        tstrSocketBindMsg   strBind;

        if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 801cf52:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801cf56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf5a:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cf5e:	2300      	movs	r3, #0
 801cf60:	2204      	movs	r2, #4
 801cf62:	6800      	ldr	r0, [r0, #0]
 801cf64:	f7fc feb4 	bl	8019cd0 <hif_receive>
 801cf68:	4603      	mov	r3, r0
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	f040 8296 	bne.w	801d49c <m2m_ip_cb+0x580>
        {
            strBind.status = strBindReply.s8Status;
 801cf70:	f997 30f1 	ldrsb.w	r3, [r7, #241]	; 0xf1
 801cf74:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
            if(gpfAppSocketCb)
 801cf78:	4ba4      	ldr	r3, [pc, #656]	; (801d20c <m2m_ip_cb+0x2f0>)
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	f000 828d 	beq.w	801d49c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strBindReply.sock, SOCKET_MSG_BIND, &strBind);
 801cf82:	4ba2      	ldr	r3, [pc, #648]	; (801d20c <m2m_ip_cb+0x2f0>)
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	f997 00f0 	ldrsb.w	r0, [r7, #240]	; 0xf0
 801cf8a:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 801cf8e:	2101      	movs	r1, #1
 801cf90:	4798      	blx	r3
            {
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
            }
        }
    }
}
 801cf92:	e283      	b.n	801d49c <m2m_ip_cb+0x580>
    else if(u8OpCode == SOCKET_CMD_LISTEN)
 801cf94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf98:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	2b42      	cmp	r3, #66	; 0x42
 801cfa0:	d120      	bne.n	801cfe4 <m2m_ip_cb+0xc8>
        if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 801cfa2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801cfa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cfaa:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cfae:	2300      	movs	r3, #0
 801cfb0:	2204      	movs	r2, #4
 801cfb2:	6800      	ldr	r0, [r0, #0]
 801cfb4:	f7fc fe8c 	bl	8019cd0 <hif_receive>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	f040 826e 	bne.w	801d49c <m2m_ip_cb+0x580>
            strListen.status = strListenReply.s8Status;
 801cfc0:	f997 30e9 	ldrsb.w	r3, [r7, #233]	; 0xe9
 801cfc4:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
            if(gpfAppSocketCb)
 801cfc8:	4b90      	ldr	r3, [pc, #576]	; (801d20c <m2m_ip_cb+0x2f0>)
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f000 8265 	beq.w	801d49c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strListenReply.sock, SOCKET_MSG_LISTEN, &strListen);
 801cfd2:	4b8e      	ldr	r3, [pc, #568]	; (801d20c <m2m_ip_cb+0x2f0>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	f997 00e8 	ldrsb.w	r0, [r7, #232]	; 0xe8
 801cfda:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801cfde:	2102      	movs	r1, #2
 801cfe0:	4798      	blx	r3
}
 801cfe2:	e25b      	b.n	801d49c <m2m_ip_cb+0x580>
    else if(u8OpCode == SOCKET_CMD_ACCEPT)
 801cfe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cfe8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cfec:	781b      	ldrb	r3, [r3, #0]
 801cfee:	2b43      	cmp	r3, #67	; 0x43
 801cff0:	d15e      	bne.n	801d0b0 <m2m_ip_cb+0x194>
        if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 801cff2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 801cff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cffa:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cffe:	2300      	movs	r3, #0
 801d000:	220c      	movs	r2, #12
 801d002:	6800      	ldr	r0, [r0, #0]
 801d004:	f7fc fe64 	bl	8019cd0 <hif_receive>
 801d008:	4603      	mov	r3, r0
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f040 8246 	bne.w	801d49c <m2m_ip_cb+0x580>
            if(strAcceptReply.sConnectedSock >= 0)
 801d010:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d014:	2b00      	cmp	r3, #0
 801d016:	db2e      	blt.n	801d076 <m2m_ip_cb+0x15a>
                gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags  = 0;
 801d018:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d01c:	4a7c      	ldr	r2, [pc, #496]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d01e:	011b      	lsls	r3, r3, #4
 801d020:	4413      	add	r3, r2
 801d022:	330b      	adds	r3, #11
 801d024:	2200      	movs	r2, #0
 801d026:	701a      	strb	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].bIsUsed     = 1;
 801d028:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d02c:	4a78      	ldr	r2, [pc, #480]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d02e:	011b      	lsls	r3, r3, #4
 801d030:	4413      	add	r3, r2
 801d032:	330a      	adds	r3, #10
 801d034:	2201      	movs	r2, #1
 801d036:	701a      	strb	r2, [r3, #0]
                ++gu16SessionID;
 801d038:	4b76      	ldr	r3, [pc, #472]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d03a:	881b      	ldrh	r3, [r3, #0]
 801d03c:	b29b      	uxth	r3, r3
 801d03e:	3301      	adds	r3, #1
 801d040:	b29a      	uxth	r2, r3
 801d042:	4b74      	ldr	r3, [pc, #464]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d044:	801a      	strh	r2, [r3, #0]
                if(gu16SessionID == 0)
 801d046:	4b73      	ldr	r3, [pc, #460]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d048:	881b      	ldrh	r3, [r3, #0]
 801d04a:	b29b      	uxth	r3, r3
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d106      	bne.n	801d05e <m2m_ip_cb+0x142>
                    ++gu16SessionID;
 801d050:	4b70      	ldr	r3, [pc, #448]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d052:	881b      	ldrh	r3, [r3, #0]
 801d054:	b29b      	uxth	r3, r3
 801d056:	3301      	adds	r3, #1
 801d058:	b29a      	uxth	r2, r3
 801d05a:	4b6e      	ldr	r3, [pc, #440]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d05c:	801a      	strh	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 801d05e:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d062:	4618      	mov	r0, r3
 801d064:	4b6b      	ldr	r3, [pc, #428]	; (801d214 <m2m_ip_cb+0x2f8>)
 801d066:	881b      	ldrh	r3, [r3, #0]
 801d068:	b299      	uxth	r1, r3
 801d06a:	4a69      	ldr	r2, [pc, #420]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d06c:	0103      	lsls	r3, r0, #4
 801d06e:	4413      	add	r3, r2
 801d070:	3306      	adds	r3, #6
 801d072:	460a      	mov	r2, r1
 801d074:	801a      	strh	r2, [r3, #0]
            strAccept.sock = strAcceptReply.sConnectedSock;
 801d076:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d07a:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
            strAccept.strAddr.sin_family        = AF_INET;
 801d07e:	2302      	movs	r3, #2
 801d080:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 801d084:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 801d088:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 801d08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            if(gpfAppSocketCb)
 801d094:	4b5d      	ldr	r3, [pc, #372]	; (801d20c <m2m_ip_cb+0x2f0>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	f000 81ff 	beq.w	801d49c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 801d09e:	4b5b      	ldr	r3, [pc, #364]	; (801d20c <m2m_ip_cb+0x2f0>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	f997 00e0 	ldrsb.w	r0, [r7, #224]	; 0xe0
 801d0a6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801d0aa:	2104      	movs	r1, #4
 801d0ac:	4798      	blx	r3
}
 801d0ae:	e1f5      	b.n	801d49c <m2m_ip_cb+0x580>
    else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT_ALPN))
 801d0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0b4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0b8:	781b      	ldrb	r3, [r3, #0]
 801d0ba:	2b44      	cmp	r3, #68	; 0x44
 801d0bc:	d00d      	beq.n	801d0da <m2m_ip_cb+0x1be>
 801d0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0c2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0c6:	781b      	ldrb	r3, [r3, #0]
 801d0c8:	2b4b      	cmp	r3, #75	; 0x4b
 801d0ca:	d006      	beq.n	801d0da <m2m_ip_cb+0x1be>
 801d0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0d0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0d4:	781b      	ldrb	r3, [r3, #0]
 801d0d6:	2b53      	cmp	r3, #83	; 0x53
 801d0d8:	d167      	bne.n	801d1aa <m2m_ip_cb+0x28e>
        tstrConnectAlpnReply    strConnectAlpnReply = {{0}};
 801d0da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d0de:	2200      	movs	r2, #0
 801d0e0:	601a      	str	r2, [r3, #0]
 801d0e2:	605a      	str	r2, [r3, #4]
        uint16                  u16HifSz = sizeof(tstrConnectAlpnReply);
 801d0e4:	2308      	movs	r3, #8
 801d0e6:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
        if(u8OpCode != SOCKET_CMD_SSL_CONNECT_ALPN)
 801d0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0ee:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0f2:	781b      	ldrb	r3, [r3, #0]
 801d0f4:	2b53      	cmp	r3, #83	; 0x53
 801d0f6:	d002      	beq.n	801d0fe <m2m_ip_cb+0x1e2>
            u16HifSz = sizeof(tstrConnectReply);
 801d0f8:	2304      	movs	r3, #4
 801d0fa:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
        if(hif_receive(u32Address, (uint8*)&strConnectAlpnReply, u16HifSz, 0) == M2M_SUCCESS)
 801d0fe:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 801d102:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801d106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d10a:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d10e:	2300      	movs	r3, #0
 801d110:	6800      	ldr	r0, [r0, #0]
 801d112:	f7fc fddd 	bl	8019cd0 <hif_receive>
 801d116:	4603      	mov	r3, r0
 801d118:	2b00      	cmp	r3, #0
 801d11a:	f040 81ba 	bne.w	801d492 <m2m_ip_cb+0x576>
            strConnMsg.sock     = strConnectAlpnReply.strConnReply.sock;
 801d11e:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 801d122:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
            strConnMsg.s8Error  = strConnectAlpnReply.strConnReply.s8Error;
 801d126:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 801d12a:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
            if(strConnectAlpnReply.strConnReply.s8Error == SOCK_ERR_NO_ERROR)
 801d12e:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 801d132:	2b00      	cmp	r3, #0
 801d134:	d117      	bne.n	801d166 <m2m_ip_cb+0x24a>
                gastrSockets[strConnMsg.sock].u16DataOffset = strConnectAlpnReply.strConnReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 801d136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801d13a:	f997 20b8 	ldrsb.w	r2, [r7, #184]	; 0xb8
 801d13e:	4610      	mov	r0, r2
 801d140:	3b08      	subs	r3, #8
 801d142:	b299      	uxth	r1, r3
 801d144:	4a32      	ldr	r2, [pc, #200]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d146:	0103      	lsls	r3, r0, #4
 801d148:	4413      	add	r3, r2
 801d14a:	3308      	adds	r3, #8
 801d14c:	460a      	mov	r2, r1
 801d14e:	801a      	strh	r2, [r3, #0]
                gastrSockets[strConnMsg.sock].u8AlpnStatus = strConnectAlpnReply.u8AppProtocolIdx;
 801d150:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d154:	f897 10c0 	ldrb.w	r1, [r7, #192]	; 0xc0
 801d158:	4a2d      	ldr	r2, [pc, #180]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d15a:	011b      	lsls	r3, r3, #4
 801d15c:	4413      	add	r3, r2
 801d15e:	330d      	adds	r3, #13
 801d160:	460a      	mov	r2, r1
 801d162:	701a      	strb	r2, [r3, #0]
 801d164:	e013      	b.n	801d18e <m2m_ip_cb+0x272>
                gastrSockets[strConnMsg.sock].u8ErrSource = strConnectAlpnReply.strConnReply.u8ErrSource;
 801d166:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d16a:	f897 10be 	ldrb.w	r1, [r7, #190]	; 0xbe
 801d16e:	4a28      	ldr	r2, [pc, #160]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d170:	011b      	lsls	r3, r3, #4
 801d172:	4413      	add	r3, r2
 801d174:	330e      	adds	r3, #14
 801d176:	460a      	mov	r2, r1
 801d178:	701a      	strb	r2, [r3, #0]
                gastrSockets[strConnMsg.sock].u8ErrCode = strConnectAlpnReply.strConnReply.u8ErrCode;
 801d17a:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d17e:	f897 10bf 	ldrb.w	r1, [r7, #191]	; 0xbf
 801d182:	4a23      	ldr	r2, [pc, #140]	; (801d210 <m2m_ip_cb+0x2f4>)
 801d184:	011b      	lsls	r3, r3, #4
 801d186:	4413      	add	r3, r2
 801d188:	330f      	adds	r3, #15
 801d18a:	460a      	mov	r2, r1
 801d18c:	701a      	strb	r2, [r3, #0]
            if(gpfAppSocketCb)
 801d18e:	4b1f      	ldr	r3, [pc, #124]	; (801d20c <m2m_ip_cb+0x2f0>)
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	2b00      	cmp	r3, #0
 801d194:	f000 817d 	beq.w	801d492 <m2m_ip_cb+0x576>
                gpfAppSocketCb(strConnMsg.sock, SOCKET_MSG_CONNECT, &strConnMsg);
 801d198:	4b1c      	ldr	r3, [pc, #112]	; (801d20c <m2m_ip_cb+0x2f0>)
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	f997 00b8 	ldrsb.w	r0, [r7, #184]	; 0xb8
 801d1a0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801d1a4:	2105      	movs	r1, #5
 801d1a6:	4798      	blx	r3
    {
 801d1a8:	e173      	b.n	801d492 <m2m_ip_cb+0x576>
    else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 801d1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1ae:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d1b2:	781b      	ldrb	r3, [r3, #0]
 801d1b4:	2b4a      	cmp	r3, #74	; 0x4a
 801d1b6:	d131      	bne.n	801d21c <m2m_ip_cb+0x300>
        if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 801d1b8:	f107 0108 	add.w	r1, r7, #8
 801d1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1c0:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	2268      	movs	r2, #104	; 0x68
 801d1c8:	6800      	ldr	r0, [r0, #0]
 801d1ca:	f7fc fd81 	bl	8019cd0 <hif_receive>
 801d1ce:	4603      	mov	r3, r0
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	f040 8163 	bne.w	801d49c <m2m_ip_cb+0x580>
            strDnsReply.u32HostIP = strDnsReply.u32HostIP;
 801d1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801d1de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801d1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801d1e8:	665a      	str	r2, [r3, #100]	; 0x64
            if(gpfAppResolveCb)
 801d1ea:	4b0b      	ldr	r3, [pc, #44]	; (801d218 <m2m_ip_cb+0x2fc>)
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	f000 8154 	beq.w	801d49c <m2m_ip_cb+0x580>
                gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 801d1f4:	4b08      	ldr	r3, [pc, #32]	; (801d218 <m2m_ip_cb+0x2fc>)
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d1fc:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 801d200:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801d202:	f107 0208 	add.w	r2, r7, #8
 801d206:	4610      	mov	r0, r2
 801d208:	4798      	blx	r3
}
 801d20a:	e147      	b.n	801d49c <m2m_ip_cb+0x580>
 801d20c:	2001df9c 	.word	0x2001df9c
 801d210:	2001ded8 	.word	0x2001ded8
 801d214:	2001df98 	.word	0x2001df98
 801d218:	2001dfa0 	.word	0x2001dfa0
    else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 801d21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d220:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d224:	781b      	ldrb	r3, [r3, #0]
 801d226:	2b46      	cmp	r3, #70	; 0x46
 801d228:	d00e      	beq.n	801d248 <m2m_ip_cb+0x32c>
 801d22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d22e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d232:	781b      	ldrb	r3, [r3, #0]
 801d234:	2b48      	cmp	r3, #72	; 0x48
 801d236:	d007      	beq.n	801d248 <m2m_ip_cb+0x32c>
 801d238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d23c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d240:	781b      	ldrb	r3, [r3, #0]
 801d242:	2b4d      	cmp	r3, #77	; 0x4d
 801d244:	f040 80a6 	bne.w	801d394 <m2m_ip_cb+0x478>
        uint8               u8CallbackMsgID = SOCKET_MSG_RECV;
 801d248:	2306      	movs	r3, #6
 801d24a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
        if(u8OpCode == SOCKET_CMD_RECVFROM)
 801d24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d252:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d256:	781b      	ldrb	r3, [r3, #0]
 801d258:	2b48      	cmp	r3, #72	; 0x48
 801d25a:	d102      	bne.n	801d262 <m2m_ip_cb+0x346>
            u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 801d25c:	2309      	movs	r3, #9
 801d25e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
        u16ReadSize = sizeof(tstrRecvReply);
 801d262:	2310      	movs	r3, #16
 801d264:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 801d268:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d26c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 801d270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d274:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d278:	2300      	movs	r3, #0
 801d27a:	6800      	ldr	r0, [r0, #0]
 801d27c:	f7fc fd28 	bl	8019cd0 <hif_receive>
 801d280:	4603      	mov	r3, r0
 801d282:	2b00      	cmp	r3, #0
 801d284:	f040 8107 	bne.w	801d496 <m2m_ip_cb+0x57a>
            uint16 u16SessionID = 0;
 801d288:	2300      	movs	r3, #0
 801d28a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
            sock            = strRecvReply.sock;
 801d28e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801d292:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
            u16SessionID = strRecvReply.u16SessionID;
 801d296:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 801d29a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
            gastrSockets[sock].bIsRecvPending = 0;
 801d29e:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 801d2a2:	4a81      	ldr	r2, [pc, #516]	; (801d4a8 <m2m_ip_cb+0x58c>)
 801d2a4:	011b      	lsls	r3, r3, #4
 801d2a6:	4413      	add	r3, r2
 801d2a8:	330c      	adds	r3, #12
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
            s16RecvStatus   = NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 801d2ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801d2b2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
            u16DataOffset   = NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 801d2b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d2ba:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
            strRecvMsg.strRemoteAddr.sin_port           = strRecvReply.strRemoteAddr.u16Port;
 801d2be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801d2c2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            strRecvMsg.strRemoteAddr.sin_addr.s_addr    = strRecvReply.strRemoteAddr.u32IPAddr;
 801d2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d2ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            if(u16SessionID == gastrSockets[sock].u16SessionID)
 801d2ce:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 801d2d2:	4a75      	ldr	r2, [pc, #468]	; (801d4a8 <m2m_ip_cb+0x58c>)
 801d2d4:	011b      	lsls	r3, r3, #4
 801d2d6:	4413      	add	r3, r2
 801d2d8:	3306      	adds	r3, #6
 801d2da:	881b      	ldrh	r3, [r3, #0]
 801d2dc:	b29b      	uxth	r3, r3
 801d2de:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 801d2e2:	429a      	cmp	r2, r3
 801d2e4:	d145      	bne.n	801d372 <m2m_ip_cb+0x456>
                if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 801d2e6:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	dd2b      	ble.n	801d346 <m2m_ip_cb+0x42a>
 801d2ee:	f9b7 20f8 	ldrsh.w	r2, [r7, #248]	; 0xf8
 801d2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d2f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801d2fa:	881b      	ldrh	r3, [r3, #0]
 801d2fc:	429a      	cmp	r2, r3
 801d2fe:	da22      	bge.n	801d346 <m2m_ip_cb+0x42a>
                    u32Address += u16DataOffset;
 801d300:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 801d304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801d30c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 801d310:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 801d314:	6809      	ldr	r1, [r1, #0]
 801d316:	440a      	add	r2, r1
 801d318:	601a      	str	r2, [r3, #0]
                    u16ReadSize = (uint16)s16RecvStatus;
 801d31a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801d31e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
                    Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 801d322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801d32a:	f897 4105 	ldrb.w	r4, [r7, #261]	; 0x105
 801d32e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801d332:	f997 00fb 	ldrsb.w	r0, [r7, #251]	; 0xfb
 801d336:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d33a:	9200      	str	r2, [sp, #0]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	4622      	mov	r2, r4
 801d340:	f7ff fd3a 	bl	801cdb8 <Socket_ReadSocketData>
    {
 801d344:	e0a7      	b.n	801d496 <m2m_ip_cb+0x57a>
                    strRecvMsg.s16BufferSize    = s16RecvStatus;
 801d346:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801d34a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
                    strRecvMsg.pu8Buffer        = NULL;
 801d34e:	2300      	movs	r3, #0
 801d350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    if(gpfAppSocketCb)
 801d354:	4b55      	ldr	r3, [pc, #340]	; (801d4ac <m2m_ip_cb+0x590>)
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f000 809c 	beq.w	801d496 <m2m_ip_cb+0x57a>
                        gpfAppSocketCb(sock, u8CallbackMsgID, &strRecvMsg);
 801d35e:	4b53      	ldr	r3, [pc, #332]	; (801d4ac <m2m_ip_cb+0x590>)
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801d366:	f897 1105 	ldrb.w	r1, [r7, #261]	; 0x105
 801d36a:	f997 00fb 	ldrsb.w	r0, [r7, #251]	; 0xfb
 801d36e:	4798      	blx	r3
    {
 801d370:	e091      	b.n	801d496 <m2m_ip_cb+0x57a>
                if(u16ReadSize < u16BufferSize)
 801d372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801d37a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d37e:	881b      	ldrh	r3, [r3, #0]
 801d380:	429a      	cmp	r2, r3
 801d382:	f080 8088 	bcs.w	801d496 <m2m_ip_cb+0x57a>
                    hif_receive(0, NULL, 0, 1);
 801d386:	2301      	movs	r3, #1
 801d388:	2200      	movs	r2, #0
 801d38a:	2100      	movs	r1, #0
 801d38c:	2000      	movs	r0, #0
 801d38e:	f7fc fc9f 	bl	8019cd0 <hif_receive>
    {
 801d392:	e080      	b.n	801d496 <m2m_ip_cb+0x57a>
    else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 801d394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d398:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d39c:	781b      	ldrb	r3, [r3, #0]
 801d39e:	2b45      	cmp	r3, #69	; 0x45
 801d3a0:	d00d      	beq.n	801d3be <m2m_ip_cb+0x4a2>
 801d3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3a6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	2b47      	cmp	r3, #71	; 0x47
 801d3ae:	d006      	beq.n	801d3be <m2m_ip_cb+0x4a2>
 801d3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3b4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d3b8:	781b      	ldrb	r3, [r3, #0]
 801d3ba:	2b4c      	cmp	r3, #76	; 0x4c
 801d3bc:	d143      	bne.n	801d446 <m2m_ip_cb+0x52a>
        uint8           u8CallbackMsgID = SOCKET_MSG_SEND;
 801d3be:	2307      	movs	r3, #7
 801d3c0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
        if(u8OpCode == SOCKET_CMD_SENDTO)
 801d3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3c8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d3cc:	781b      	ldrb	r3, [r3, #0]
 801d3ce:	2b47      	cmp	r3, #71	; 0x47
 801d3d0:	d102      	bne.n	801d3d8 <m2m_ip_cb+0x4bc>
            u8CallbackMsgID = SOCKET_MSG_SENDTO;
 801d3d2:	2308      	movs	r3, #8
 801d3d4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
        if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 801d3d8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801d3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3e0:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	2208      	movs	r2, #8
 801d3e8:	6800      	ldr	r0, [r0, #0]
 801d3ea:	f7fc fc71 	bl	8019cd0 <hif_receive>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d152      	bne.n	801d49a <m2m_ip_cb+0x57e>
            uint16 u16SessionID = 0;
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
            sock = strReply.sock;
 801d3fa:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801d3fe:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
            u16SessionID = strReply.u16SessionID;
 801d402:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801d406:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
            s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 801d40a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d40e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(u16SessionID == gastrSockets[sock].u16SessionID)
 801d412:	f997 3101 	ldrsb.w	r3, [r7, #257]	; 0x101
 801d416:	4a24      	ldr	r2, [pc, #144]	; (801d4a8 <m2m_ip_cb+0x58c>)
 801d418:	011b      	lsls	r3, r3, #4
 801d41a:	4413      	add	r3, r2
 801d41c:	3306      	adds	r3, #6
 801d41e:	881b      	ldrh	r3, [r3, #0]
 801d420:	b29b      	uxth	r3, r3
 801d422:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 801d426:	429a      	cmp	r2, r3
 801d428:	d137      	bne.n	801d49a <m2m_ip_cb+0x57e>
                if(gpfAppSocketCb)
 801d42a:	4b20      	ldr	r3, [pc, #128]	; (801d4ac <m2m_ip_cb+0x590>)
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d033      	beq.n	801d49a <m2m_ip_cb+0x57e>
                    gpfAppSocketCb(sock, u8CallbackMsgID, &s16Rcvd);
 801d432:	4b1e      	ldr	r3, [pc, #120]	; (801d4ac <m2m_ip_cb+0x590>)
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 801d43a:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 801d43e:	f997 0101 	ldrsb.w	r0, [r7, #257]	; 0x101
 801d442:	4798      	blx	r3
    {
 801d444:	e029      	b.n	801d49a <m2m_ip_cb+0x57e>
    else if(u8OpCode == SOCKET_CMD_PING)
 801d446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d44a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d44e:	781b      	ldrb	r3, [r3, #0]
 801d450:	2b52      	cmp	r3, #82	; 0x52
 801d452:	d123      	bne.n	801d49c <m2m_ip_cb+0x580>
        if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 801d454:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d45c:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d460:	2301      	movs	r3, #1
 801d462:	2214      	movs	r2, #20
 801d464:	6800      	ldr	r0, [r0, #0]
 801d466:	f7fc fc33 	bl	8019cd0 <hif_receive>
 801d46a:	4603      	mov	r3, r0
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d115      	bne.n	801d49c <m2m_ip_cb+0x580>
            if((gu32PingId == strPingReply.u32CmdPrivate) && (gfpPingCb != NULL))
 801d470:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d472:	4b0f      	ldr	r3, [pc, #60]	; (801d4b0 <m2m_ip_cb+0x594>)
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	429a      	cmp	r2, r3
 801d478:	d110      	bne.n	801d49c <m2m_ip_cb+0x580>
 801d47a:	4b0e      	ldr	r3, [pc, #56]	; (801d4b4 <m2m_ip_cb+0x598>)
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d00c      	beq.n	801d49c <m2m_ip_cb+0x580>
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 801d482:	4b0c      	ldr	r3, [pc, #48]	; (801d4b4 <m2m_ip_cb+0x598>)
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801d488:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801d48a:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 801d48e:	4798      	blx	r3
}
 801d490:	e004      	b.n	801d49c <m2m_ip_cb+0x580>
    {
 801d492:	bf00      	nop
 801d494:	e002      	b.n	801d49c <m2m_ip_cb+0x580>
    {
 801d496:	bf00      	nop
 801d498:	e000      	b.n	801d49c <m2m_ip_cb+0x580>
    {
 801d49a:	bf00      	nop
}
 801d49c:	bf00      	nop
 801d49e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 801d4a2:	46bd      	mov	sp, r7
 801d4a4:	bd90      	pop	{r4, r7, pc}
 801d4a6:	bf00      	nop
 801d4a8:	2001ded8 	.word	0x2001ded8
 801d4ac:	2001df9c 	.word	0x2001df9c
 801d4b0:	2001dfac 	.word	0x2001dfac
 801d4b4:	2001dfa8 	.word	0x2001dfa8

0801d4b8 <socketInit>:

Return
        None.
*********************************************************************/
void socketInit(void)
{
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	af00      	add	r7, sp, #0
    if(gbSocketInit==0)
 801d4bc:	4b0a      	ldr	r3, [pc, #40]	; (801d4e8 <socketInit+0x30>)
 801d4be:	781b      	ldrb	r3, [r3, #0]
 801d4c0:	b2db      	uxtb	r3, r3
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d10e      	bne.n	801d4e4 <socketInit+0x2c>
    {
        m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 801d4c6:	22c0      	movs	r2, #192	; 0xc0
 801d4c8:	2100      	movs	r1, #0
 801d4ca:	4808      	ldr	r0, [pc, #32]	; (801d4ec <socketInit+0x34>)
 801d4cc:	f7fb fd36 	bl	8018f3c <m2m_memset>
        hif_register_cb(M2M_REQ_GROUP_IP, m2m_ip_cb);
 801d4d0:	4907      	ldr	r1, [pc, #28]	; (801d4f0 <socketInit+0x38>)
 801d4d2:	2002      	movs	r0, #2
 801d4d4:	f7fc fca4 	bl	8019e20 <hif_register_cb>
        gbSocketInit=1;
 801d4d8:	4b03      	ldr	r3, [pc, #12]	; (801d4e8 <socketInit+0x30>)
 801d4da:	2201      	movs	r2, #1
 801d4dc:	701a      	strb	r2, [r3, #0]
        gu16SessionID = 0;
 801d4de:	4b05      	ldr	r3, [pc, #20]	; (801d4f4 <socketInit+0x3c>)
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	801a      	strh	r2, [r3, #0]
    }
}
 801d4e4:	bf00      	nop
 801d4e6:	bd80      	pop	{r7, pc}
 801d4e8:	2001dfa4 	.word	0x2001dfa4
 801d4ec:	2001ded8 	.word	0x2001ded8
 801d4f0:	0801cf1d 	.word	0x0801cf1d
 801d4f4:	2001df98 	.word	0x2001df98

0801d4f8 <registerSocketCallback>:

Return
        None.
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 801d4f8:	b480      	push	{r7}
 801d4fa:	b083      	sub	sp, #12
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	6078      	str	r0, [r7, #4]
 801d500:	6039      	str	r1, [r7, #0]
    gpfAppSocketCb = pfAppSocketCb;
 801d502:	4a06      	ldr	r2, [pc, #24]	; (801d51c <registerSocketCallback+0x24>)
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	6013      	str	r3, [r2, #0]
    gpfAppResolveCb = pfAppResolveCb;
 801d508:	4a05      	ldr	r2, [pc, #20]	; (801d520 <registerSocketCallback+0x28>)
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	6013      	str	r3, [r2, #0]
}
 801d50e:	bf00      	nop
 801d510:	370c      	adds	r7, #12
 801d512:	46bd      	mov	sp, r7
 801d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d518:	4770      	bx	lr
 801d51a:	bf00      	nop
 801d51c:	2001df9c 	.word	0x2001df9c
 801d520:	2001dfa0 	.word	0x2001dfa0

0801d524 <socket>:
Return
        - Negative value for error.
        - ZERO or positive value as a socket ID if successful.
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 801d524:	b580      	push	{r7, lr}
 801d526:	b08c      	sub	sp, #48	; 0x30
 801d528:	af04      	add	r7, sp, #16
 801d52a:	4603      	mov	r3, r0
 801d52c:	80fb      	strh	r3, [r7, #6]
 801d52e:	460b      	mov	r3, r1
 801d530:	717b      	strb	r3, [r7, #5]
 801d532:	4613      	mov	r3, r2
 801d534:	713b      	strb	r3, [r7, #4]
    SOCKET                  sock = -1;
 801d536:	23ff      	movs	r3, #255	; 0xff
 801d538:	77fb      	strb	r3, [r7, #31]
    volatile tstrSocket     *pstrSock;
    static volatile uint8   u8NextTcpSock   = 0;
    static volatile uint8   u8NextUdpSock   = 0;

    /* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
    if(u16Domain == AF_INET)
 801d53a:	88fb      	ldrh	r3, [r7, #6]
 801d53c:	2b02      	cmp	r3, #2
 801d53e:	f040 80c9 	bne.w	801d6d4 <socket+0x1b0>
    {
        if(u8Type == SOCK_STREAM)
 801d542:	797b      	ldrb	r3, [r7, #5]
 801d544:	2b01      	cmp	r3, #1
 801d546:	d149      	bne.n	801d5dc <socket+0xb8>
        {
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 801d548:	2300      	movs	r3, #0
 801d54a:	77bb      	strb	r3, [r7, #30]
 801d54c:	e042      	b.n	801d5d4 <socket+0xb0>
            {
                u8SockID    = u8NextTcpSock;
 801d54e:	4b64      	ldr	r3, [pc, #400]	; (801d6e0 <socket+0x1bc>)
 801d550:	781b      	ldrb	r3, [r3, #0]
 801d552:	74fb      	strb	r3, [r7, #19]
                pstrSock    = &gastrSockets[u8NextTcpSock];
 801d554:	4b62      	ldr	r3, [pc, #392]	; (801d6e0 <socket+0x1bc>)
 801d556:	781b      	ldrb	r3, [r3, #0]
 801d558:	b2db      	uxtb	r3, r3
 801d55a:	011b      	lsls	r3, r3, #4
 801d55c:	4a61      	ldr	r2, [pc, #388]	; (801d6e4 <socket+0x1c0>)
 801d55e:	4413      	add	r3, r2
 801d560:	61bb      	str	r3, [r7, #24]
                u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 801d562:	4b5f      	ldr	r3, [pc, #380]	; (801d6e0 <socket+0x1bc>)
 801d564:	781b      	ldrb	r3, [r3, #0]
 801d566:	b2db      	uxtb	r3, r3
 801d568:	1c5a      	adds	r2, r3, #1
 801d56a:	4b5f      	ldr	r3, [pc, #380]	; (801d6e8 <socket+0x1c4>)
 801d56c:	fb83 1302 	smull	r1, r3, r3, r2
 801d570:	4413      	add	r3, r2
 801d572:	1099      	asrs	r1, r3, #2
 801d574:	17d3      	asrs	r3, r2, #31
 801d576:	1ac9      	subs	r1, r1, r3
 801d578:	460b      	mov	r3, r1
 801d57a:	00db      	lsls	r3, r3, #3
 801d57c:	1a5b      	subs	r3, r3, r1
 801d57e:	1ad1      	subs	r1, r2, r3
 801d580:	b2ca      	uxtb	r2, r1
 801d582:	4b57      	ldr	r3, [pc, #348]	; (801d6e0 <socket+0x1bc>)
 801d584:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 801d586:	69bb      	ldr	r3, [r7, #24]
 801d588:	7a9b      	ldrb	r3, [r3, #10]
 801d58a:	b2db      	uxtb	r3, r3
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d11e      	bne.n	801d5ce <socket+0xaa>
                {
                    sock = (SOCKET)u8SockID;
 801d590:	7cfb      	ldrb	r3, [r7, #19]
 801d592:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d594:	2210      	movs	r2, #16
 801d596:	2100      	movs	r1, #0
 801d598:	69b8      	ldr	r0, [r7, #24]
 801d59a:	f7fb fccf 	bl	8018f3c <m2m_memset>
                    /* In the current implementation, SSL flags only have meaning for the TCP socket case. */
                    if(u8Flags & SOCKET_FLAGS_SSL)
 801d59e:	793b      	ldrb	r3, [r7, #4]
 801d5a0:	f003 0301 	and.w	r3, r3, #1
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d066      	beq.n	801d676 <socket+0x152>
                    {
                        tstrSSLSocketCreateCmd  strSSLCreate;
                        strSSLCreate.sslSock = sock;
 801d5a8:	7ffb      	ldrb	r3, [r7, #31]
 801d5aa:	733b      	strb	r3, [r7, #12]
                        pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE;
 801d5ac:	69bb      	ldr	r3, [r7, #24]
 801d5ae:	2201      	movs	r2, #1
 801d5b0:	72da      	strb	r2, [r3, #11]
                        SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 801d5b2:	f107 020c 	add.w	r2, r7, #12
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	9302      	str	r3, [sp, #8]
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	9301      	str	r3, [sp, #4]
 801d5be:	2300      	movs	r3, #0
 801d5c0:	9300      	str	r3, [sp, #0]
 801d5c2:	2304      	movs	r3, #4
 801d5c4:	2150      	movs	r1, #80	; 0x50
 801d5c6:	2002      	movs	r0, #2
 801d5c8:	f7fb ff38 	bl	801943c <hif_send>
                    }
                    break;
 801d5cc:	e053      	b.n	801d676 <socket+0x152>
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 801d5ce:	7fbb      	ldrb	r3, [r7, #30]
 801d5d0:	3301      	adds	r3, #1
 801d5d2:	77bb      	strb	r3, [r7, #30]
 801d5d4:	7fbb      	ldrb	r3, [r7, #30]
 801d5d6:	2b06      	cmp	r3, #6
 801d5d8:	d9b9      	bls.n	801d54e <socket+0x2a>
 801d5da:	e04d      	b.n	801d678 <socket+0x154>
                }
            }
        }
        else if(u8Type == SOCK_DGRAM)
 801d5dc:	797b      	ldrb	r3, [r7, #5]
 801d5de:	2b02      	cmp	r3, #2
 801d5e0:	d132      	bne.n	801d648 <socket+0x124>
        {
            volatile tstrSocket *pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 801d5e2:	4b42      	ldr	r3, [pc, #264]	; (801d6ec <socket+0x1c8>)
 801d5e4:	617b      	str	r3, [r7, #20]
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	77bb      	strb	r3, [r7, #30]
 801d5ea:	e029      	b.n	801d640 <socket+0x11c>
            {
                u8SockID        = u8NextUdpSock;
 801d5ec:	4b40      	ldr	r3, [pc, #256]	; (801d6f0 <socket+0x1cc>)
 801d5ee:	781b      	ldrb	r3, [r3, #0]
 801d5f0:	74fb      	strb	r3, [r7, #19]
                pstrSock        = &pastrUDPSockets[u8NextUdpSock];
 801d5f2:	4b3f      	ldr	r3, [pc, #252]	; (801d6f0 <socket+0x1cc>)
 801d5f4:	781b      	ldrb	r3, [r3, #0]
 801d5f6:	b2db      	uxtb	r3, r3
 801d5f8:	011b      	lsls	r3, r3, #4
 801d5fa:	697a      	ldr	r2, [r7, #20]
 801d5fc:	4413      	add	r3, r2
 801d5fe:	61bb      	str	r3, [r7, #24]
                u8NextUdpSock   = (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 801d600:	4b3b      	ldr	r3, [pc, #236]	; (801d6f0 <socket+0x1cc>)
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	b2db      	uxtb	r3, r3
 801d606:	3301      	adds	r3, #1
 801d608:	425a      	negs	r2, r3
 801d60a:	f003 0303 	and.w	r3, r3, #3
 801d60e:	f002 0203 	and.w	r2, r2, #3
 801d612:	bf58      	it	pl
 801d614:	4253      	negpl	r3, r2
 801d616:	b2da      	uxtb	r2, r3
 801d618:	4b35      	ldr	r3, [pc, #212]	; (801d6f0 <socket+0x1cc>)
 801d61a:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 801d61c:	69bb      	ldr	r3, [r7, #24]
 801d61e:	7a9b      	ldrb	r3, [r3, #10]
 801d620:	b2db      	uxtb	r3, r3
 801d622:	2b00      	cmp	r3, #0
 801d624:	d109      	bne.n	801d63a <socket+0x116>
                {
                    sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 801d626:	7cfb      	ldrb	r3, [r7, #19]
 801d628:	3307      	adds	r3, #7
 801d62a:	b2db      	uxtb	r3, r3
 801d62c:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d62e:	2210      	movs	r2, #16
 801d630:	2100      	movs	r1, #0
 801d632:	69b8      	ldr	r0, [r7, #24]
 801d634:	f7fb fc82 	bl	8018f3c <m2m_memset>
                    break;
 801d638:	e01e      	b.n	801d678 <socket+0x154>
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 801d63a:	7fbb      	ldrb	r3, [r7, #30]
 801d63c:	3301      	adds	r3, #1
 801d63e:	77bb      	strb	r3, [r7, #30]
 801d640:	7fbb      	ldrb	r3, [r7, #30]
 801d642:	2b03      	cmp	r3, #3
 801d644:	d9d2      	bls.n	801d5ec <socket+0xc8>
 801d646:	e017      	b.n	801d678 <socket+0x154>
                }
            }
        }
        else if(u8Type == SOCK_RAW)
 801d648:	797b      	ldrb	r3, [r7, #5]
 801d64a:	2b03      	cmp	r3, #3
 801d64c:	d114      	bne.n	801d678 <socket+0x154>
        {
            /* Only raw IP packets are supported */
            if(u8Flags & SOCKET_FLAGS_IPPROTO_RAW)
 801d64e:	793b      	ldrb	r3, [r7, #4]
 801d650:	f003 0302 	and.w	r3, r3, #2
 801d654:	2b00      	cmp	r3, #0
 801d656:	d00f      	beq.n	801d678 <socket+0x154>
            {
                pstrSock = &gastrSockets[RAW_SOCK_ID];
 801d658:	4b26      	ldr	r3, [pc, #152]	; (801d6f4 <socket+0x1d0>)
 801d65a:	61bb      	str	r3, [r7, #24]
                if(!pstrSock->bIsUsed)
 801d65c:	69bb      	ldr	r3, [r7, #24]
 801d65e:	7a9b      	ldrb	r3, [r3, #10]
 801d660:	b2db      	uxtb	r3, r3
 801d662:	2b00      	cmp	r3, #0
 801d664:	d108      	bne.n	801d678 <socket+0x154>
                {
                    /* Socket identified by RAW_SOCK_ID is reserved */
                    sock = (SOCKET)RAW_SOCK_ID;
 801d666:	230b      	movs	r3, #11
 801d668:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d66a:	2210      	movs	r2, #16
 801d66c:	2100      	movs	r1, #0
 801d66e:	69b8      	ldr	r0, [r7, #24]
 801d670:	f7fb fc64 	bl	8018f3c <m2m_memset>
 801d674:	e000      	b.n	801d678 <socket+0x154>
                    break;
 801d676:	bf00      	nop
                }
            }
        }

        if(sock >= 0)
 801d678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	db29      	blt.n	801d6d4 <socket+0x1b0>
        {
            pstrSock->bIsUsed = 1;
 801d680:	69bb      	ldr	r3, [r7, #24]
 801d682:	2201      	movs	r2, #1
 801d684:	729a      	strb	r2, [r3, #10]

            /* The session ID is used to distinguish different socket connections
                by comparing the assigned session ID to the one reported by the firmware*/
            ++gu16SessionID;
 801d686:	4b1c      	ldr	r3, [pc, #112]	; (801d6f8 <socket+0x1d4>)
 801d688:	881b      	ldrh	r3, [r3, #0]
 801d68a:	b29b      	uxth	r3, r3
 801d68c:	3301      	adds	r3, #1
 801d68e:	b29a      	uxth	r2, r3
 801d690:	4b19      	ldr	r3, [pc, #100]	; (801d6f8 <socket+0x1d4>)
 801d692:	801a      	strh	r2, [r3, #0]
            if(gu16SessionID == 0)
 801d694:	4b18      	ldr	r3, [pc, #96]	; (801d6f8 <socket+0x1d4>)
 801d696:	881b      	ldrh	r3, [r3, #0]
 801d698:	b29b      	uxth	r3, r3
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d106      	bne.n	801d6ac <socket+0x188>
                ++gu16SessionID;
 801d69e:	4b16      	ldr	r3, [pc, #88]	; (801d6f8 <socket+0x1d4>)
 801d6a0:	881b      	ldrh	r3, [r3, #0]
 801d6a2:	b29b      	uxth	r3, r3
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	b29a      	uxth	r2, r3
 801d6a8:	4b13      	ldr	r3, [pc, #76]	; (801d6f8 <socket+0x1d4>)
 801d6aa:	801a      	strh	r2, [r3, #0]

            pstrSock->u16SessionID = gu16SessionID;
 801d6ac:	4b12      	ldr	r3, [pc, #72]	; (801d6f8 <socket+0x1d4>)
 801d6ae:	881b      	ldrh	r3, [r3, #0]
 801d6b0:	b29a      	uxth	r2, r3
 801d6b2:	69bb      	ldr	r3, [r7, #24]
 801d6b4:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n", sock, gu16SessionID);
 801d6b6:	4811      	ldr	r0, [pc, #68]	; (801d6fc <socket+0x1d8>)
 801d6b8:	f000 fe74 	bl	801e3a4 <iprintf>
 801d6bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d6c0:	4a0d      	ldr	r2, [pc, #52]	; (801d6f8 <socket+0x1d4>)
 801d6c2:	8812      	ldrh	r2, [r2, #0]
 801d6c4:	b292      	uxth	r2, r2
 801d6c6:	4619      	mov	r1, r3
 801d6c8:	480d      	ldr	r0, [pc, #52]	; (801d700 <socket+0x1dc>)
 801d6ca:	f000 fe6b 	bl	801e3a4 <iprintf>
 801d6ce:	200d      	movs	r0, #13
 801d6d0:	f000 fe7a 	bl	801e3c8 <putchar>
        }
    }
    return sock;
 801d6d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d6d8:	4618      	mov	r0, r3
 801d6da:	3720      	adds	r7, #32
 801d6dc:	46bd      	mov	sp, r7
 801d6de:	bd80      	pop	{r7, pc}
 801d6e0:	2001dfb0 	.word	0x2001dfb0
 801d6e4:	2001ded8 	.word	0x2001ded8
 801d6e8:	92492493 	.word	0x92492493
 801d6ec:	2001df48 	.word	0x2001df48
 801d6f0:	2001dfb1 	.word	0x2001dfb1
 801d6f4:	2001df88 	.word	0x2001df88
 801d6f8:	2001df98 	.word	0x2001df98
 801d6fc:	080214f0 	.word	0x080214f0
 801d700:	08021510 	.word	0x08021510

0801d704 <connect>:
        Connect to a remote TCP Server.

Return
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b08a      	sub	sp, #40	; 0x28
 801d708:	af04      	add	r7, sp, #16
 801d70a:	4603      	mov	r3, r0
 801d70c:	6039      	str	r1, [r7, #0]
 801d70e:	71fb      	strb	r3, [r7, #7]
 801d710:	4613      	mov	r3, r2
 801d712:	71bb      	strb	r3, [r7, #6]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 801d714:	23fa      	movs	r3, #250	; 0xfa
 801d716:	75fb      	strb	r3, [r7, #23]
    if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 801d718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	db4f      	blt.n	801d7c0 <connect+0xbc>
 801d720:	683b      	ldr	r3, [r7, #0]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d04c      	beq.n	801d7c0 <connect+0xbc>
 801d726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d72a:	4a28      	ldr	r2, [pc, #160]	; (801d7cc <connect+0xc8>)
 801d72c:	011b      	lsls	r3, r3, #4
 801d72e:	4413      	add	r3, r2
 801d730:	330a      	adds	r3, #10
 801d732:	781b      	ldrb	r3, [r3, #0]
 801d734:	b2db      	uxtb	r3, r3
 801d736:	2b01      	cmp	r3, #1
 801d738:	d142      	bne.n	801d7c0 <connect+0xbc>
 801d73a:	79bb      	ldrb	r3, [r7, #6]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d03f      	beq.n	801d7c0 <connect+0xbc>
    {
        tstrConnectCmd  strConnect;
        uint8           u8Cmd = SOCKET_CMD_CONNECT;
 801d740:	2344      	movs	r3, #68	; 0x44
 801d742:	75bb      	strb	r3, [r7, #22]
        if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
 801d744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d748:	4a20      	ldr	r2, [pc, #128]	; (801d7cc <connect+0xc8>)
 801d74a:	011b      	lsls	r3, r3, #4
 801d74c:	4413      	add	r3, r2
 801d74e:	330b      	adds	r3, #11
 801d750:	781b      	ldrb	r3, [r3, #0]
 801d752:	b2db      	uxtb	r3, r3
 801d754:	f003 0301 	and.w	r3, r3, #1
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d00a      	beq.n	801d772 <connect+0x6e>
        {
            u8Cmd = SOCKET_CMD_SSL_CONNECT;
 801d75c:	234b      	movs	r3, #75	; 0x4b
 801d75e:	75bb      	strb	r3, [r7, #22]
            strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
 801d760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d764:	4a19      	ldr	r2, [pc, #100]	; (801d7cc <connect+0xc8>)
 801d766:	011b      	lsls	r3, r3, #4
 801d768:	4413      	add	r3, r2
 801d76a:	330b      	adds	r3, #11
 801d76c:	781b      	ldrb	r3, [r3, #0]
 801d76e:	b2db      	uxtb	r3, r3
 801d770:	747b      	strb	r3, [r7, #17]
        }
        strConnect.sock = sock;
 801d772:	79fb      	ldrb	r3, [r7, #7]
 801d774:	743b      	strb	r3, [r7, #16]
        m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 801d776:	f107 0308 	add.w	r3, r7, #8
 801d77a:	2208      	movs	r2, #8
 801d77c:	6839      	ldr	r1, [r7, #0]
 801d77e:	4618      	mov	r0, r3
 801d780:	f7fb fbbc 	bl	8018efc <m2m_memcpy>

        strConnect.u16SessionID     = gastrSockets[sock].u16SessionID;
 801d784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d788:	4a10      	ldr	r2, [pc, #64]	; (801d7cc <connect+0xc8>)
 801d78a:	011b      	lsls	r3, r3, #4
 801d78c:	4413      	add	r3, r2
 801d78e:	3306      	adds	r3, #6
 801d790:	881b      	ldrh	r3, [r3, #0]
 801d792:	b29b      	uxth	r3, r3
 801d794:	827b      	strh	r3, [r7, #18]
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect, sizeof(tstrConnectCmd), NULL, 0, 0);
 801d796:	f107 0208 	add.w	r2, r7, #8
 801d79a:	7db9      	ldrb	r1, [r7, #22]
 801d79c:	2300      	movs	r3, #0
 801d79e:	9302      	str	r3, [sp, #8]
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	9301      	str	r3, [sp, #4]
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	9300      	str	r3, [sp, #0]
 801d7a8:	230c      	movs	r3, #12
 801d7aa:	2002      	movs	r0, #2
 801d7ac:	f7fb fe46 	bl	801943c <hif_send>
 801d7b0:	4603      	mov	r3, r0
 801d7b2:	75fb      	strb	r3, [r7, #23]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 801d7b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d001      	beq.n	801d7c0 <connect+0xbc>
        {
            s8Ret = SOCK_ERR_INVALID;
 801d7bc:	23f7      	movs	r3, #247	; 0xf7
 801d7be:	75fb      	strb	r3, [r7, #23]
        }
    }
    return s8Ret;
 801d7c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	3718      	adds	r7, #24
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	bd80      	pop	{r7, pc}
 801d7cc:	2001ded8 	.word	0x2001ded8

0801d7d0 <send>:
Description

Return
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b08e      	sub	sp, #56	; 0x38
 801d7d4:	af04      	add	r7, sp, #16
 801d7d6:	60b9      	str	r1, [r7, #8]
 801d7d8:	4611      	mov	r1, r2
 801d7da:	461a      	mov	r2, r3
 801d7dc:	4603      	mov	r3, r0
 801d7de:	73fb      	strb	r3, [r7, #15]
 801d7e0:	460b      	mov	r3, r1
 801d7e2:	81bb      	strh	r3, [r7, #12]
 801d7e4:	4613      	mov	r3, r2
 801d7e6:	80fb      	strh	r3, [r7, #6]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 801d7e8:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 801d7ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 801d7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	db59      	blt.n	801d8aa <send+0xda>
 801d7f6:	68bb      	ldr	r3, [r7, #8]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d056      	beq.n	801d8aa <send+0xda>
 801d7fc:	89bb      	ldrh	r3, [r7, #12]
 801d7fe:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801d802:	d852      	bhi.n	801d8aa <send+0xda>
 801d804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d808:	4a2b      	ldr	r2, [pc, #172]	; (801d8b8 <send+0xe8>)
 801d80a:	011b      	lsls	r3, r3, #4
 801d80c:	4413      	add	r3, r2
 801d80e:	330a      	adds	r3, #10
 801d810:	781b      	ldrb	r3, [r3, #0]
 801d812:	b2db      	uxtb	r3, r3
 801d814:	2b01      	cmp	r3, #1
 801d816:	d148      	bne.n	801d8aa <send+0xda>
    {
        uint16          u16DataOffset;
        tstrSendCmd     strSend;
        uint8           u8Cmd;

        u8Cmd           = SOCKET_CMD_SEND;
 801d818:	2345      	movs	r3, #69	; 0x45
 801d81a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        u16DataOffset   = TCP_TX_PACKET_OFFSET;
 801d81e:	2350      	movs	r3, #80	; 0x50
 801d820:	84bb      	strh	r3, [r7, #36]	; 0x24

        strSend.sock        = sock;
 801d822:	7bfb      	ldrb	r3, [r7, #15]
 801d824:	743b      	strb	r3, [r7, #16]
        strSend.u16DataSize = NM_BSP_B_L_16(u16SendLength);
 801d826:	89bb      	ldrh	r3, [r7, #12]
 801d828:	827b      	strh	r3, [r7, #18]
        strSend.u16SessionID        = gastrSockets[sock].u16SessionID;
 801d82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d82e:	4a22      	ldr	r2, [pc, #136]	; (801d8b8 <send+0xe8>)
 801d830:	011b      	lsls	r3, r3, #4
 801d832:	4413      	add	r3, r2
 801d834:	3306      	adds	r3, #6
 801d836:	881b      	ldrh	r3, [r3, #0]
 801d838:	b29b      	uxth	r3, r3
 801d83a:	83bb      	strh	r3, [r7, #28]

        if(sock >= TCP_SOCK_MAX)
 801d83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d840:	2b06      	cmp	r3, #6
 801d842:	dd01      	ble.n	801d848 <send+0x78>
        {
            u16DataOffset = UDP_TX_PACKET_OFFSET;
 801d844:	2344      	movs	r3, #68	; 0x44
 801d846:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801d848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d84c:	4a1a      	ldr	r2, [pc, #104]	; (801d8b8 <send+0xe8>)
 801d84e:	011b      	lsls	r3, r3, #4
 801d850:	4413      	add	r3, r2
 801d852:	330b      	adds	r3, #11
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	b2db      	uxtb	r3, r3
 801d858:	f003 0301 	and.w	r3, r3, #1
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d00a      	beq.n	801d876 <send+0xa6>
        {
            u8Cmd           = SOCKET_CMD_SSL_SEND;
 801d860:	234c      	movs	r3, #76	; 0x4c
 801d862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            u16DataOffset   = gastrSockets[sock].u16DataOffset;
 801d866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d86a:	4a13      	ldr	r2, [pc, #76]	; (801d8b8 <send+0xe8>)
 801d86c:	011b      	lsls	r3, r3, #4
 801d86e:	4413      	add	r3, r2
 801d870:	3308      	adds	r3, #8
 801d872:	881b      	ldrh	r3, [r3, #0]
 801d874:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 801d876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d87a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d87e:	b2d9      	uxtb	r1, r3
 801d880:	f107 0210 	add.w	r2, r7, #16
 801d884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d886:	9302      	str	r3, [sp, #8]
 801d888:	89bb      	ldrh	r3, [r7, #12]
 801d88a:	9301      	str	r3, [sp, #4]
 801d88c:	68bb      	ldr	r3, [r7, #8]
 801d88e:	9300      	str	r3, [sp, #0]
 801d890:	2310      	movs	r3, #16
 801d892:	2002      	movs	r0, #2
 801d894:	f7fb fdd2 	bl	801943c <hif_send>
 801d898:	4603      	mov	r3, r0
 801d89a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(s16Ret != SOCK_ERR_NO_ERROR)
 801d89c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d002      	beq.n	801d8aa <send+0xda>
        {
            s16Ret = SOCK_ERR_BUFFER_FULL;
 801d8a4:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 801d8a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }
    return s16Ret;
 801d8aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	3728      	adds	r7, #40	; 0x28
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	bd80      	pop	{r7, pc}
 801d8b6:	bf00      	nop
 801d8b8:	2001ded8 	.word	0x2001ded8

0801d8bc <recv>:

Return

*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b08c      	sub	sp, #48	; 0x30
 801d8c0:	af04      	add	r7, sp, #16
 801d8c2:	60b9      	str	r1, [r7, #8]
 801d8c4:	607b      	str	r3, [r7, #4]
 801d8c6:	4603      	mov	r3, r0
 801d8c8:	73fb      	strb	r3, [r7, #15]
 801d8ca:	4613      	mov	r3, r2
 801d8cc:	81bb      	strh	r3, [r7, #12]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 801d8ce:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 801d8d2:	83fb      	strh	r3, [r7, #30]

    if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 801d8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	db6e      	blt.n	801d9ba <recv+0xfe>
 801d8dc:	68bb      	ldr	r3, [r7, #8]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d06b      	beq.n	801d9ba <recv+0xfe>
 801d8e2:	89bb      	ldrh	r3, [r7, #12]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d068      	beq.n	801d9ba <recv+0xfe>
 801d8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8ec:	4a36      	ldr	r2, [pc, #216]	; (801d9c8 <recv+0x10c>)
 801d8ee:	011b      	lsls	r3, r3, #4
 801d8f0:	4413      	add	r3, r2
 801d8f2:	330a      	adds	r3, #10
 801d8f4:	781b      	ldrb	r3, [r3, #0]
 801d8f6:	b2db      	uxtb	r3, r3
 801d8f8:	2b01      	cmp	r3, #1
 801d8fa:	d15e      	bne.n	801d9ba <recv+0xfe>
    {
        s16Ret = SOCK_ERR_NO_ERROR;
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	83fb      	strh	r3, [r7, #30]
        gastrSockets[sock].pu8UserBuffer        = (uint8*)pvRecvBuf;
 801d900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d904:	4a30      	ldr	r2, [pc, #192]	; (801d9c8 <recv+0x10c>)
 801d906:	011b      	lsls	r3, r3, #4
 801d908:	4413      	add	r3, r2
 801d90a:	68ba      	ldr	r2, [r7, #8]
 801d90c:	601a      	str	r2, [r3, #0]
        gastrSockets[sock].u16UserBufferSize    = u16BufLen;
 801d90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d912:	4a2d      	ldr	r2, [pc, #180]	; (801d9c8 <recv+0x10c>)
 801d914:	011b      	lsls	r3, r3, #4
 801d916:	4413      	add	r3, r2
 801d918:	3304      	adds	r3, #4
 801d91a:	89ba      	ldrh	r2, [r7, #12]
 801d91c:	801a      	strh	r2, [r3, #0]

        if(!gastrSockets[sock].bIsRecvPending)
 801d91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d922:	4a29      	ldr	r2, [pc, #164]	; (801d9c8 <recv+0x10c>)
 801d924:	011b      	lsls	r3, r3, #4
 801d926:	4413      	add	r3, r2
 801d928:	330c      	adds	r3, #12
 801d92a:	781b      	ldrb	r3, [r3, #0]
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d143      	bne.n	801d9ba <recv+0xfe>
        {
            tstrRecvCmd strRecv;
            uint8       u8Cmd = SOCKET_CMD_RECV;
 801d932:	2346      	movs	r3, #70	; 0x46
 801d934:	777b      	strb	r3, [r7, #29]

            gastrSockets[sock].bIsRecvPending = 1;
 801d936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d93a:	4a23      	ldr	r2, [pc, #140]	; (801d9c8 <recv+0x10c>)
 801d93c:	011b      	lsls	r3, r3, #4
 801d93e:	4413      	add	r3, r2
 801d940:	330c      	adds	r3, #12
 801d942:	2201      	movs	r2, #1
 801d944:	701a      	strb	r2, [r3, #0]
            if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801d946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d94a:	4a1f      	ldr	r2, [pc, #124]	; (801d9c8 <recv+0x10c>)
 801d94c:	011b      	lsls	r3, r3, #4
 801d94e:	4413      	add	r3, r2
 801d950:	330b      	adds	r3, #11
 801d952:	781b      	ldrb	r3, [r3, #0]
 801d954:	b2db      	uxtb	r3, r3
 801d956:	f003 0301 	and.w	r3, r3, #1
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d001      	beq.n	801d962 <recv+0xa6>
            {
                u8Cmd = SOCKET_CMD_SSL_RECV;
 801d95e:	234d      	movs	r3, #77	; 0x4d
 801d960:	777b      	strb	r3, [r7, #29]
            }

            /* Check the timeout value. */
            if(u32Timeoutmsec == 0)
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d103      	bne.n	801d970 <recv+0xb4>
                strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 801d968:	f04f 33ff 	mov.w	r3, #4294967295
 801d96c:	613b      	str	r3, [r7, #16]
 801d96e:	e001      	b.n	801d974 <recv+0xb8>
            else
                strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	613b      	str	r3, [r7, #16]
            strRecv.sock = sock;
 801d974:	7bfb      	ldrb	r3, [r7, #15]
 801d976:	753b      	strb	r3, [r7, #20]
            strRecv.u16SessionID        = gastrSockets[sock].u16SessionID;
 801d978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d97c:	4a12      	ldr	r2, [pc, #72]	; (801d9c8 <recv+0x10c>)
 801d97e:	011b      	lsls	r3, r3, #4
 801d980:	4413      	add	r3, r2
 801d982:	3306      	adds	r3, #6
 801d984:	881b      	ldrh	r3, [r3, #0]
 801d986:	b29b      	uxth	r3, r3
 801d988:	82fb      	strh	r3, [r7, #22]
            strRecv.u16BufLen           = u16BufLen;
 801d98a:	89bb      	ldrh	r3, [r7, #12]
 801d98c:	833b      	strh	r3, [r7, #24]

            s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL, 0, 0);
 801d98e:	f107 0210 	add.w	r2, r7, #16
 801d992:	7f79      	ldrb	r1, [r7, #29]
 801d994:	2300      	movs	r3, #0
 801d996:	9302      	str	r3, [sp, #8]
 801d998:	2300      	movs	r3, #0
 801d99a:	9301      	str	r3, [sp, #4]
 801d99c:	2300      	movs	r3, #0
 801d99e:	9300      	str	r3, [sp, #0]
 801d9a0:	230c      	movs	r3, #12
 801d9a2:	2002      	movs	r0, #2
 801d9a4:	f7fb fd4a 	bl	801943c <hif_send>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	83fb      	strh	r3, [r7, #30]
            if(s16Ret != SOCK_ERR_NO_ERROR)
 801d9ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d002      	beq.n	801d9ba <recv+0xfe>
            {
                s16Ret = SOCK_ERR_BUFFER_FULL;
 801d9b4:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 801d9b8:	83fb      	strh	r3, [r7, #30]
            }
        }
    }
    return s16Ret;
 801d9ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 801d9be:	4618      	mov	r0, r3
 801d9c0:	3720      	adds	r7, #32
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	bd80      	pop	{r7, pc}
 801d9c6:	bf00      	nop
 801d9c8:	2001ded8 	.word	0x2001ded8

0801d9cc <close>:

Return
        None.
*********************************************************************/
sint8 close(SOCKET sock)
{
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b088      	sub	sp, #32
 801d9d0:	af04      	add	r7, sp, #16
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	71fb      	strb	r3, [r7, #7]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 801d9d6:	23fa      	movs	r3, #250	; 0xfa
 801d9d8:	73fb      	strb	r3, [r7, #15]

    M2M_INFO("Sock to delete <%d> (used %u)\n", sock, gastrSockets[sock].bIsUsed);
 801d9da:	4831      	ldr	r0, [pc, #196]	; (801daa0 <close+0xd4>)
 801d9dc:	f000 fce2 	bl	801e3a4 <iprintf>
 801d9e0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d9e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9e8:	4a2e      	ldr	r2, [pc, #184]	; (801daa4 <close+0xd8>)
 801d9ea:	011b      	lsls	r3, r3, #4
 801d9ec:	4413      	add	r3, r2
 801d9ee:	330a      	adds	r3, #10
 801d9f0:	781b      	ldrb	r3, [r3, #0]
 801d9f2:	b2db      	uxtb	r3, r3
 801d9f4:	461a      	mov	r2, r3
 801d9f6:	482c      	ldr	r0, [pc, #176]	; (801daa8 <close+0xdc>)
 801d9f8:	f000 fcd4 	bl	801e3a4 <iprintf>
 801d9fc:	200d      	movs	r0, #13
 801d9fe:	f000 fce3 	bl	801e3c8 <putchar>

    if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 801da02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da06:	2b00      	cmp	r3, #0
 801da08:	db43      	blt.n	801da92 <close+0xc6>
 801da0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da0e:	4a25      	ldr	r2, [pc, #148]	; (801daa4 <close+0xd8>)
 801da10:	011b      	lsls	r3, r3, #4
 801da12:	4413      	add	r3, r2
 801da14:	330a      	adds	r3, #10
 801da16:	781b      	ldrb	r3, [r3, #0]
 801da18:	b2db      	uxtb	r3, r3
 801da1a:	2b01      	cmp	r3, #1
 801da1c:	d139      	bne.n	801da92 <close+0xc6>
    {
        uint8   u8Cmd = SOCKET_CMD_CLOSE;
 801da1e:	2349      	movs	r3, #73	; 0x49
 801da20:	73bb      	strb	r3, [r7, #14]
        tstrCloseCmd strclose;
        strclose.sock = sock;
 801da22:	79fb      	ldrb	r3, [r7, #7]
 801da24:	723b      	strb	r3, [r7, #8]
        strclose.u16SessionID       = gastrSockets[sock].u16SessionID;
 801da26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da2a:	4a1e      	ldr	r2, [pc, #120]	; (801daa4 <close+0xd8>)
 801da2c:	011b      	lsls	r3, r3, #4
 801da2e:	4413      	add	r3, r2
 801da30:	3306      	adds	r3, #6
 801da32:	881b      	ldrh	r3, [r3, #0]
 801da34:	b29b      	uxth	r3, r3
 801da36:	817b      	strh	r3, [r7, #10]

        if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801da38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da3c:	4a19      	ldr	r2, [pc, #100]	; (801daa4 <close+0xd8>)
 801da3e:	011b      	lsls	r3, r3, #4
 801da40:	4413      	add	r3, r2
 801da42:	330b      	adds	r3, #11
 801da44:	781b      	ldrb	r3, [r3, #0]
 801da46:	b2db      	uxtb	r3, r3
 801da48:	f003 0301 	and.w	r3, r3, #1
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d001      	beq.n	801da54 <close+0x88>
        {
            u8Cmd = SOCKET_CMD_SSL_CLOSE;
 801da50:	234e      	movs	r3, #78	; 0x4e
 801da52:	73bb      	strb	r3, [r7, #14]
        }
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL, 0, 0);
 801da54:	f107 0208 	add.w	r2, r7, #8
 801da58:	7bb9      	ldrb	r1, [r7, #14]
 801da5a:	2300      	movs	r3, #0
 801da5c:	9302      	str	r3, [sp, #8]
 801da5e:	2300      	movs	r3, #0
 801da60:	9301      	str	r3, [sp, #4]
 801da62:	2300      	movs	r3, #0
 801da64:	9300      	str	r3, [sp, #0]
 801da66:	2304      	movs	r3, #4
 801da68:	2002      	movs	r0, #2
 801da6a:	f7fb fce7 	bl	801943c <hif_send>
 801da6e:	4603      	mov	r3, r0
 801da70:	73fb      	strb	r3, [r7, #15]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 801da72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da76:	2b00      	cmp	r3, #0
 801da78:	d001      	beq.n	801da7e <close+0xb2>
        {
            s8Ret = SOCK_ERR_INVALID;
 801da7a:	23f7      	movs	r3, #247	; 0xf7
 801da7c:	73fb      	strb	r3, [r7, #15]
        }
        m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 801da7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da82:	011b      	lsls	r3, r3, #4
 801da84:	4a07      	ldr	r2, [pc, #28]	; (801daa4 <close+0xd8>)
 801da86:	4413      	add	r3, r2
 801da88:	2210      	movs	r2, #16
 801da8a:	2100      	movs	r1, #0
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7fb fa55 	bl	8018f3c <m2m_memset>
    }
    return s8Ret;
 801da92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da96:	4618      	mov	r0, r3
 801da98:	3710      	adds	r7, #16
 801da9a:	46bd      	mov	sp, r7
 801da9c:	bd80      	pop	{r7, pc}
 801da9e:	bf00      	nop
 801daa0:	080214f0 	.word	0x080214f0
 801daa4:	2001ded8 	.word	0x2001ded8
 801daa8:	0802152c 	.word	0x0802152c

0801daac <gethostbyname>:

Return
        None.
*********************************************************************/
sint8 gethostbyname(uint8 *pcHostName)
{
 801daac:	b580      	push	{r7, lr}
 801daae:	b088      	sub	sp, #32
 801dab0:	af04      	add	r7, sp, #16
 801dab2:	6078      	str	r0, [r7, #4]
    sint8   s8Err = SOCK_ERR_INVALID_ARG;
 801dab4:	23fa      	movs	r3, #250	; 0xfa
 801dab6:	73fb      	strb	r3, [r7, #15]
    uint8   u8HostNameSize = (uint8)m2m_strlen(pcHostName);
 801dab8:	6878      	ldr	r0, [r7, #4]
 801daba:	f7fb fa5c 	bl	8018f76 <m2m_strlen>
 801dabe:	4603      	mov	r3, r0
 801dac0:	73bb      	strb	r3, [r7, #14]
    if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
 801dac2:	7bbb      	ldrb	r3, [r7, #14]
 801dac4:	2b64      	cmp	r3, #100	; 0x64
 801dac6:	d816      	bhi.n	801daf6 <gethostbyname+0x4a>
    {
        s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL, 0, 0);
 801dac8:	7bbb      	ldrb	r3, [r7, #14]
 801daca:	b29b      	uxth	r3, r3
 801dacc:	3301      	adds	r3, #1
 801dace:	b29b      	uxth	r3, r3
 801dad0:	2200      	movs	r2, #0
 801dad2:	9202      	str	r2, [sp, #8]
 801dad4:	2200      	movs	r2, #0
 801dad6:	9201      	str	r2, [sp, #4]
 801dad8:	2200      	movs	r2, #0
 801dada:	9200      	str	r2, [sp, #0]
 801dadc:	687a      	ldr	r2, [r7, #4]
 801dade:	21ca      	movs	r1, #202	; 0xca
 801dae0:	2002      	movs	r0, #2
 801dae2:	f7fb fcab 	bl	801943c <hif_send>
 801dae6:	4603      	mov	r3, r0
 801dae8:	73fb      	strb	r3, [r7, #15]
        if(s8Err != SOCK_ERR_NO_ERROR)
 801daea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d001      	beq.n	801daf6 <gethostbyname+0x4a>
        {
            s8Err = SOCK_ERR_INVALID;
 801daf2:	23f7      	movs	r3, #247	; 0xf7
 801daf4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return s8Err;
 801daf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801dafa:	4618      	mov	r0, r3
 801dafc:	3710      	adds	r7, #16
 801dafe:	46bd      	mov	sp, r7
 801db00:	bd80      	pop	{r7, pc}
	...

0801db04 <event_post>:
    event->next = event_free_list;
    event_free_list = event;
}

void event_post(uint16_t msg_id, uint16_t src_id, void * data)
{
 801db04:	b580      	push	{r7, lr}
 801db06:	b084      	sub	sp, #16
 801db08:	af00      	add	r7, sp, #0
 801db0a:	4603      	mov	r3, r0
 801db0c:	603a      	str	r2, [r7, #0]
 801db0e:	80fb      	strh	r3, [r7, #6]
 801db10:	460b      	mov	r3, r1
 801db12:	80bb      	strh	r3, [r7, #4]

    // get a free event object
    struct event* evt = event_free_list;
 801db14:	4b18      	ldr	r3, [pc, #96]	; (801db78 <event_post+0x74>)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	60bb      	str	r3, [r7, #8]
    if(evt != NULL)
 801db1a:	68bb      	ldr	r3, [r7, #8]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d027      	beq.n	801db70 <event_post+0x6c>
    {
        event_free_list = evt->next;
 801db20:	68bb      	ldr	r3, [r7, #8]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	4a14      	ldr	r2, [pc, #80]	; (801db78 <event_post+0x74>)
 801db26:	6013      	str	r3, [r2, #0]

        evt->next = NULL;
 801db28:	68bb      	ldr	r3, [r7, #8]
 801db2a:	2200      	movs	r2, #0
 801db2c:	601a      	str	r2, [r3, #0]
        evt->data = data;
 801db2e:	68bb      	ldr	r3, [r7, #8]
 801db30:	683a      	ldr	r2, [r7, #0]
 801db32:	609a      	str	r2, [r3, #8]
        evt->msg_id = msg_id;
 801db34:	68bb      	ldr	r3, [r7, #8]
 801db36:	88fa      	ldrh	r2, [r7, #6]
 801db38:	809a      	strh	r2, [r3, #4]
        evt->src_id = src_id;
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	88ba      	ldrh	r2, [r7, #4]
 801db3e:	80da      	strh	r2, [r3, #6]

        if(event_pending_list == NULL)
 801db40:	4b0e      	ldr	r3, [pc, #56]	; (801db7c <event_post+0x78>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d103      	bne.n	801db50 <event_post+0x4c>
        {
            event_pending_list = evt;
 801db48:	4a0c      	ldr	r2, [pc, #48]	; (801db7c <event_post+0x78>)
 801db4a:	68bb      	ldr	r3, [r7, #8]
 801db4c:	6013      	str	r3, [r2, #0]
 801db4e:	e00d      	b.n	801db6c <event_post+0x68>
        }
        else
        {
            struct event* cur = event_pending_list;
 801db50:	4b0a      	ldr	r3, [pc, #40]	; (801db7c <event_post+0x78>)
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	60fb      	str	r3, [r7, #12]
            while(cur->next != NULL)
 801db56:	e002      	b.n	801db5e <event_post+0x5a>
            {
                cur = cur->next;
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	60fb      	str	r3, [r7, #12]
            while(cur->next != NULL)
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d1f8      	bne.n	801db58 <event_post+0x54>
            }
            cur->next = evt;
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	68ba      	ldr	r2, [r7, #8]
 801db6a:	601a      	str	r2, [r3, #0]
        }

        platform_event_signal();
 801db6c:	f000 fa58 	bl	801e020 <platform_event_signal>
    }
}
 801db70:	bf00      	nop
 801db72:	3710      	adds	r7, #16
 801db74:	46bd      	mov	sp, r7
 801db76:	bd80      	pop	{r7, pc}
 801db78:	2001dfb4 	.word	0x2001dfb4
 801db7c:	2001dfb8 	.word	0x2001dfb8

0801db80 <special_events_handler>:

    return evt_num;
}

uint32_t special_events_handler(uint16_t msg_id, uint16_t src_id, uint8_t* data)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b084      	sub	sp, #16
 801db84:	af00      	add	r7, sp, #0
 801db86:	4603      	mov	r3, r0
 801db88:	603a      	str	r2, [r7, #0]
 801db8a:	80fb      	strh	r3, [r7, #6]
 801db8c:	460b      	mov	r3, r1
 801db8e:	80bb      	strh	r3, [r7, #4]
    uint32_t consumed = 0;
 801db90:	2300      	movs	r3, #0
 801db92:	60fb      	str	r3, [r7, #12]

    if (msg_id == watched_event.msg_id
 801db94:	4b12      	ldr	r3, [pc, #72]	; (801dbe0 <special_events_handler+0x60>)
 801db96:	881b      	ldrh	r3, [r3, #0]
 801db98:	88fa      	ldrh	r2, [r7, #6]
 801db9a:	429a      	cmp	r2, r3
 801db9c:	d110      	bne.n	801dbc0 <special_events_handler+0x40>
    &&  src_id == watched_event.src_id)
 801db9e:	4b10      	ldr	r3, [pc, #64]	; (801dbe0 <special_events_handler+0x60>)
 801dba0:	885b      	ldrh	r3, [r3, #2]
 801dba2:	88ba      	ldrh	r2, [r7, #4]
 801dba4:	429a      	cmp	r2, r3
 801dba6:	d10b      	bne.n	801dbc0 <special_events_handler+0x40>
    {
        watched_event.msg_id = 0xFFFF;
 801dba8:	4b0d      	ldr	r3, [pc, #52]	; (801dbe0 <special_events_handler+0x60>)
 801dbaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dbae:	801a      	strh	r2, [r3, #0]
        watched_event.params = data;
 801dbb0:	4a0b      	ldr	r2, [pc, #44]	; (801dbe0 <special_events_handler+0x60>)
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	6053      	str	r3, [r2, #4]
        platform_cmd_cmpl_signal();
 801dbb6:	f000 fa27 	bl	801e008 <platform_cmd_cmpl_signal>

        consumed = 1;
 801dbba:	2301      	movs	r3, #1
 801dbbc:	60fb      	str	r3, [r7, #12]
 801dbbe:	e009      	b.n	801dbd4 <special_events_handler+0x54>
    }
    else if(msg_id == GAPC_CONNECTION_REQ_IND)
 801dbc0:	88fb      	ldrh	r3, [r7, #6]
 801dbc2:	f643 0201 	movw	r2, #14337	; 0x3801
 801dbc6:	4293      	cmp	r3, r2
 801dbc8:	d104      	bne.n	801dbd4 <special_events_handler+0x54>
    {
        gapc_con_req_ind(data);
 801dbca:	6838      	ldr	r0, [r7, #0]
 801dbcc:	f000 f8aa 	bl	801dd24 <gapc_con_req_ind>
        consumed = 1;
 801dbd0:	2301      	movs	r3, #1
 801dbd2:	60fb      	str	r3, [r7, #12]
    }

    return consumed;
 801dbd4:	68fb      	ldr	r3, [r7, #12]
}
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	3710      	adds	r7, #16
 801dbda:	46bd      	mov	sp, r7
 801dbdc:	bd80      	pop	{r7, pc}
 801dbde:	bf00      	nop
 801dbe0:	2001dfbc 	.word	0x2001dfbc

0801dbe4 <gapc_connection_cfm_handler>:
}

at_ble_status_t gapc_connection_cfm_handler(uint8_t *lcsrk,  uint32_t local_signcntr, uint8_t *rcsrk,
                                 uint32_t remote_signcntr, uint8_t auth, uint8_t authorize,
                                 uint16_t handle)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b086      	sub	sp, #24
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	60f8      	str	r0, [r7, #12]
 801dbec:	60b9      	str	r1, [r7, #8]
 801dbee:	607a      	str	r2, [r7, #4]
 801dbf0:	603b      	str	r3, [r7, #0]
	at_ble_status_t status;
    
	INTERFACE_MSG_INIT(GAPC_CONNECTION_CFM,  KE_BUILD_ID(TASK_GAPC, handle));
 801dbf2:	4b4a      	ldr	r3, [pc, #296]	; (801dd1c <gapc_connection_cfm_handler+0x138>)
 801dbf4:	617b      	str	r3, [r7, #20]
 801dbf6:	697b      	ldr	r3, [r7, #20]
 801dbf8:	1c5a      	adds	r2, r3, #1
 801dbfa:	617a      	str	r2, [r7, #20]
 801dbfc:	2205      	movs	r2, #5
 801dbfe:	701a      	strb	r2, [r3, #0]
 801dc00:	697b      	ldr	r3, [r7, #20]
 801dc02:	1c5a      	adds	r2, r3, #1
 801dc04:	617a      	str	r2, [r7, #20]
 801dc06:	2202      	movs	r2, #2
 801dc08:	701a      	strb	r2, [r3, #0]
 801dc0a:	697b      	ldr	r3, [r7, #20]
 801dc0c:	1c5a      	adds	r2, r3, #1
 801dc0e:	617a      	str	r2, [r7, #20]
 801dc10:	2238      	movs	r2, #56	; 0x38
 801dc12:	701a      	strb	r2, [r3, #0]
 801dc14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dc16:	021b      	lsls	r3, r3, #8
 801dc18:	b25b      	sxtb	r3, r3
 801dc1a:	f043 030e 	orr.w	r3, r3, #14
 801dc1e:	b259      	sxtb	r1, r3
 801dc20:	697b      	ldr	r3, [r7, #20]
 801dc22:	1c5a      	adds	r2, r3, #1
 801dc24:	617a      	str	r2, [r7, #20]
 801dc26:	b2ca      	uxtb	r2, r1
 801dc28:	701a      	strb	r2, [r3, #0]
 801dc2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dc2c:	021b      	lsls	r3, r3, #8
 801dc2e:	b29b      	uxth	r3, r3
 801dc30:	0a1b      	lsrs	r3, r3, #8
 801dc32:	b299      	uxth	r1, r3
 801dc34:	697b      	ldr	r3, [r7, #20]
 801dc36:	1c5a      	adds	r2, r3, #1
 801dc38:	617a      	str	r2, [r7, #20]
 801dc3a:	b2ca      	uxtb	r2, r1
 801dc3c:	701a      	strb	r2, [r3, #0]
 801dc3e:	697b      	ldr	r3, [r7, #20]
 801dc40:	1c5a      	adds	r2, r3, #1
 801dc42:	617a      	str	r2, [r7, #20]
 801dc44:	223f      	movs	r2, #63	; 0x3f
 801dc46:	701a      	strb	r2, [r3, #0]
 801dc48:	697b      	ldr	r3, [r7, #20]
 801dc4a:	1c5a      	adds	r2, r3, #1
 801dc4c:	617a      	str	r2, [r7, #20]
 801dc4e:	2200      	movs	r2, #0
 801dc50:	701a      	strb	r2, [r3, #0]
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	3302      	adds	r3, #2
 801dc56:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_BLOCK(lcsrk, KEY_LEN);
 801dc58:	2210      	movs	r2, #16
 801dc5a:	68f9      	ldr	r1, [r7, #12]
 801dc5c:	6978      	ldr	r0, [r7, #20]
 801dc5e:	f000 fe11 	bl	801e884 <memcpy>
 801dc62:	697b      	ldr	r3, [r7, #20]
 801dc64:	3310      	adds	r3, #16
 801dc66:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_UINT32(local_signcntr);
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	1c5a      	adds	r2, r3, #1
 801dc6c:	617a      	str	r2, [r7, #20]
 801dc6e:	68ba      	ldr	r2, [r7, #8]
 801dc70:	b2d2      	uxtb	r2, r2
 801dc72:	701a      	strb	r2, [r3, #0]
 801dc74:	68bb      	ldr	r3, [r7, #8]
 801dc76:	0a19      	lsrs	r1, r3, #8
 801dc78:	697b      	ldr	r3, [r7, #20]
 801dc7a:	1c5a      	adds	r2, r3, #1
 801dc7c:	617a      	str	r2, [r7, #20]
 801dc7e:	b2ca      	uxtb	r2, r1
 801dc80:	701a      	strb	r2, [r3, #0]
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	0c19      	lsrs	r1, r3, #16
 801dc86:	697b      	ldr	r3, [r7, #20]
 801dc88:	1c5a      	adds	r2, r3, #1
 801dc8a:	617a      	str	r2, [r7, #20]
 801dc8c:	b2ca      	uxtb	r2, r1
 801dc8e:	701a      	strb	r2, [r3, #0]
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	0e19      	lsrs	r1, r3, #24
 801dc94:	697b      	ldr	r3, [r7, #20]
 801dc96:	1c5a      	adds	r2, r3, #1
 801dc98:	617a      	str	r2, [r7, #20]
 801dc9a:	b2ca      	uxtb	r2, r1
 801dc9c:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_BLOCK(rcsrk, KEY_LEN);
 801dc9e:	2210      	movs	r2, #16
 801dca0:	6879      	ldr	r1, [r7, #4]
 801dca2:	6978      	ldr	r0, [r7, #20]
 801dca4:	f000 fdee 	bl	801e884 <memcpy>
 801dca8:	697b      	ldr	r3, [r7, #20]
 801dcaa:	3310      	adds	r3, #16
 801dcac:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_UINT32(remote_signcntr);
 801dcae:	697b      	ldr	r3, [r7, #20]
 801dcb0:	1c5a      	adds	r2, r3, #1
 801dcb2:	617a      	str	r2, [r7, #20]
 801dcb4:	683a      	ldr	r2, [r7, #0]
 801dcb6:	b2d2      	uxtb	r2, r2
 801dcb8:	701a      	strb	r2, [r3, #0]
 801dcba:	683b      	ldr	r3, [r7, #0]
 801dcbc:	0a19      	lsrs	r1, r3, #8
 801dcbe:	697b      	ldr	r3, [r7, #20]
 801dcc0:	1c5a      	adds	r2, r3, #1
 801dcc2:	617a      	str	r2, [r7, #20]
 801dcc4:	b2ca      	uxtb	r2, r1
 801dcc6:	701a      	strb	r2, [r3, #0]
 801dcc8:	683b      	ldr	r3, [r7, #0]
 801dcca:	0c19      	lsrs	r1, r3, #16
 801dccc:	697b      	ldr	r3, [r7, #20]
 801dcce:	1c5a      	adds	r2, r3, #1
 801dcd0:	617a      	str	r2, [r7, #20]
 801dcd2:	b2ca      	uxtb	r2, r1
 801dcd4:	701a      	strb	r2, [r3, #0]
 801dcd6:	683b      	ldr	r3, [r7, #0]
 801dcd8:	0e19      	lsrs	r1, r3, #24
 801dcda:	697b      	ldr	r3, [r7, #20]
 801dcdc:	1c5a      	adds	r2, r3, #1
 801dcde:	617a      	str	r2, [r7, #20]
 801dce0:	b2ca      	uxtb	r2, r1
 801dce2:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_UINT8(auth);
 801dce4:	697b      	ldr	r3, [r7, #20]
 801dce6:	1c5a      	adds	r2, r3, #1
 801dce8:	617a      	str	r2, [r7, #20]
 801dcea:	f897 2020 	ldrb.w	r2, [r7, #32]
 801dcee:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_UINT8(authorize);
 801dcf0:	697b      	ldr	r3, [r7, #20]
 801dcf2:	1c5a      	adds	r2, r3, #1
 801dcf4:	617a      	str	r2, [r7, #20]
 801dcf6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801dcfa:	701a      	strb	r2, [r3, #0]
    status = INTERFACE_SEND_NO_WAIT();
 801dcfc:	697b      	ldr	r3, [r7, #20]
 801dcfe:	4a08      	ldr	r2, [pc, #32]	; (801dd20 <gapc_connection_cfm_handler+0x13c>)
 801dd00:	1a9b      	subs	r3, r3, r2
 801dd02:	b29b      	uxth	r3, r3
 801dd04:	4619      	mov	r1, r3
 801dd06:	4805      	ldr	r0, [pc, #20]	; (801dd1c <gapc_connection_cfm_handler+0x138>)
 801dd08:	f000 f93a 	bl	801df80 <interface_send>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	74fb      	strb	r3, [r7, #19]
    INTERFACE_MSG_DONE();
	
	return status;
 801dd10:	7cfb      	ldrb	r3, [r7, #19]
}
 801dd12:	4618      	mov	r0, r3
 801dd14:	3718      	adds	r7, #24
 801dd16:	46bd      	mov	sp, r7
 801dd18:	bd80      	pop	{r7, pc}
 801dd1a:	bf00      	nop
 801dd1c:	2001e07c 	.word	0x2001e07c
 801dd20:	2001e085 	.word	0x2001e085

0801dd24 <gapc_con_req_ind>:
	
	return status;
}

at_ble_status_t gapc_con_req_ind(uint8_t* data)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b088      	sub	sp, #32
 801dd28:	af04      	add	r7, sp, #16
 801dd2a:	6078      	str	r0, [r7, #4]
    static uint8_t dummy_key[KEY_LEN] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    INTERFACE_UNPACK_INIT(data);
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_UINT16(&(device.conn_handle));
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	781b      	ldrb	r3, [r3, #0]
 801dd34:	b21a      	sxth	r2, r3
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	3301      	adds	r3, #1
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	021b      	lsls	r3, r3, #8
 801dd3e:	b21b      	sxth	r3, r3
 801dd40:	4313      	orrs	r3, r2
 801dd42:	b21b      	sxth	r3, r3
 801dd44:	b29a      	uxth	r2, r3
 801dd46:	4b16      	ldr	r3, [pc, #88]	; (801dda0 <gapc_con_req_ind+0x7c>)
 801dd48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	3302      	adds	r3, #2
 801dd50:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_SKIP(7); //we are not interested in those params
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	3307      	adds	r3, #7
 801dd56:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_UINT8(&(device.peer_addr.type));
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	1c5a      	adds	r2, r3, #1
 801dd5c:	60fa      	str	r2, [r7, #12]
 801dd5e:	781a      	ldrb	r2, [r3, #0]
 801dd60:	4b0f      	ldr	r3, [pc, #60]	; (801dda0 <gapc_con_req_ind+0x7c>)
 801dd62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    INTERFACE_UNPACK_BLOCK(device.peer_addr.addr, AT_BLE_ADDR_LEN);
 801dd66:	4b0e      	ldr	r3, [pc, #56]	; (801dda0 <gapc_con_req_ind+0x7c>)
 801dd68:	68fa      	ldr	r2, [r7, #12]
 801dd6a:	334d      	adds	r3, #77	; 0x4d
 801dd6c:	6811      	ldr	r1, [r2, #0]
 801dd6e:	6019      	str	r1, [r3, #0]
 801dd70:	8892      	ldrh	r2, [r2, #4]
 801dd72:	809a      	strh	r2, [r3, #4]
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	3306      	adds	r3, #6
 801dd78:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_DONE();

    return gapc_connection_cfm_handler(dummy_key, 0, dummy_key, 0, GAP_AUTH_REQ_NO_MITM_NO_BOND,
 801dd7a:	4b09      	ldr	r3, [pc, #36]	; (801dda0 <gapc_con_req_ind+0x7c>)
 801dd7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801dd80:	9302      	str	r3, [sp, #8]
 801dd82:	2300      	movs	r3, #0
 801dd84:	9301      	str	r3, [sp, #4]
 801dd86:	2300      	movs	r3, #0
 801dd88:	9300      	str	r3, [sp, #0]
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	4a05      	ldr	r2, [pc, #20]	; (801dda4 <gapc_con_req_ind+0x80>)
 801dd8e:	2100      	movs	r1, #0
 801dd90:	4804      	ldr	r0, [pc, #16]	; (801dda4 <gapc_con_req_ind+0x80>)
 801dd92:	f7ff ff27 	bl	801dbe4 <gapc_connection_cfm_handler>
 801dd96:	4603      	mov	r3, r0
                    GAP_AUTHZ_NOT_SET, device.conn_handle);
}
 801dd98:	4618      	mov	r0, r3
 801dd9a:	3710      	adds	r7, #16
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd80      	pop	{r7, pc}
 801dda0:	2001dfc4 	.word	0x2001dfc4
 801dda4:	2001e06c 	.word	0x2001e06c

0801dda8 <platform_interface_callback>:
#define NMI_BLE_WAITING                 0
#define NMI_BLE_COLLECTING_HDR          1
#define NMI_BLE_COLLECTING_PAYLOAD      2

void platform_interface_callback(uint8_t* data, uint32_t len)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b084      	sub	sp, #16
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
 801ddb0:	6039      	str	r1, [r7, #0]
    static uint32_t header_idx;
    static uint8_t buff[INTERFACE_RCV_BUFF_LEN];
    static uint32_t cur_msg_start = 0;
    static uint32_t write_ptr = 0;

    for(i=0; i<len; i++)
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	60fb      	str	r3, [r7, #12]
 801ddb6:	e0c6      	b.n	801df46 <platform_interface_callback+0x19e>
    {
        if(state == NMI_BLE_WAITING)
 801ddb8:	4b68      	ldr	r3, [pc, #416]	; (801df5c <platform_interface_callback+0x1b4>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d10d      	bne.n	801dddc <platform_interface_callback+0x34>
        {
            if(data[i] == INTERFACE_API_PKT_ID)
 801ddc0:	687a      	ldr	r2, [r7, #4]
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	4413      	add	r3, r2
 801ddc6:	781b      	ldrb	r3, [r3, #0]
 801ddc8:	2b05      	cmp	r3, #5
 801ddca:	f040 80b6 	bne.w	801df3a <platform_interface_callback+0x192>
            {
                state = NMI_BLE_COLLECTING_HDR;
 801ddce:	4b63      	ldr	r3, [pc, #396]	; (801df5c <platform_interface_callback+0x1b4>)
 801ddd0:	2201      	movs	r2, #1
 801ddd2:	601a      	str	r2, [r3, #0]
                header_idx = 0;
 801ddd4:	4b62      	ldr	r3, [pc, #392]	; (801df60 <platform_interface_callback+0x1b8>)
 801ddd6:	2200      	movs	r2, #0
 801ddd8:	601a      	str	r2, [r3, #0]
            }
            continue;
 801ddda:	e0ae      	b.n	801df3a <platform_interface_callback+0x192>
        }

        if(state == NMI_BLE_COLLECTING_HDR)
 801dddc:	4b5f      	ldr	r3, [pc, #380]	; (801df5c <platform_interface_callback+0x1b4>)
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	2b01      	cmp	r3, #1
 801dde2:	d173      	bne.n	801decc <platform_interface_callback+0x124>
        {
            header[header_idx] = data[i];
 801dde4:	687a      	ldr	r2, [r7, #4]
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	441a      	add	r2, r3
 801ddea:	4b5d      	ldr	r3, [pc, #372]	; (801df60 <platform_interface_callback+0x1b8>)
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	7811      	ldrb	r1, [r2, #0]
 801ddf0:	4a5c      	ldr	r2, [pc, #368]	; (801df64 <platform_interface_callback+0x1bc>)
 801ddf2:	54d1      	strb	r1, [r2, r3]
            header_idx++;
 801ddf4:	4b5a      	ldr	r3, [pc, #360]	; (801df60 <platform_interface_callback+0x1b8>)
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	3301      	adds	r3, #1
 801ddfa:	4a59      	ldr	r2, [pc, #356]	; (801df60 <platform_interface_callback+0x1b8>)
 801ddfc:	6013      	str	r3, [r2, #0]

            if(header_idx == INTERFACE_HDR_LENGTH - 1)
 801ddfe:	4b58      	ldr	r3, [pc, #352]	; (801df60 <platform_interface_callback+0x1b8>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	2b08      	cmp	r3, #8
 801de04:	f040 809b 	bne.w	801df3e <platform_interface_callback+0x196>
            {
                state = NMI_BLE_COLLECTING_PAYLOAD;
 801de08:	4b54      	ldr	r3, [pc, #336]	; (801df5c <platform_interface_callback+0x1b4>)
 801de0a:	2202      	movs	r2, #2
 801de0c:	601a      	str	r2, [r3, #0]

                INTERFACE_UNPACK_INIT(header);
 801de0e:	4b55      	ldr	r3, [pc, #340]	; (801df64 <platform_interface_callback+0x1bc>)
 801de10:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&msg_id);
 801de12:	68bb      	ldr	r3, [r7, #8]
 801de14:	781b      	ldrb	r3, [r3, #0]
 801de16:	b21a      	sxth	r2, r3
 801de18:	68bb      	ldr	r3, [r7, #8]
 801de1a:	3301      	adds	r3, #1
 801de1c:	781b      	ldrb	r3, [r3, #0]
 801de1e:	021b      	lsls	r3, r3, #8
 801de20:	b21b      	sxth	r3, r3
 801de22:	4313      	orrs	r3, r2
 801de24:	b21b      	sxth	r3, r3
 801de26:	b29a      	uxth	r2, r3
 801de28:	4b4f      	ldr	r3, [pc, #316]	; (801df68 <platform_interface_callback+0x1c0>)
 801de2a:	801a      	strh	r2, [r3, #0]
 801de2c:	68bb      	ldr	r3, [r7, #8]
 801de2e:	3302      	adds	r3, #2
 801de30:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_SKIP(2); // not interested in destination (always EXT_APP)
 801de32:	68bb      	ldr	r3, [r7, #8]
 801de34:	3302      	adds	r3, #2
 801de36:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&src_id);
 801de38:	68bb      	ldr	r3, [r7, #8]
 801de3a:	781b      	ldrb	r3, [r3, #0]
 801de3c:	b21a      	sxth	r2, r3
 801de3e:	68bb      	ldr	r3, [r7, #8]
 801de40:	3301      	adds	r3, #1
 801de42:	781b      	ldrb	r3, [r3, #0]
 801de44:	021b      	lsls	r3, r3, #8
 801de46:	b21b      	sxth	r3, r3
 801de48:	4313      	orrs	r3, r2
 801de4a:	b21b      	sxth	r3, r3
 801de4c:	b29a      	uxth	r2, r3
 801de4e:	4b47      	ldr	r3, [pc, #284]	; (801df6c <platform_interface_callback+0x1c4>)
 801de50:	801a      	strh	r2, [r3, #0]
 801de52:	68bb      	ldr	r3, [r7, #8]
 801de54:	3302      	adds	r3, #2
 801de56:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&param_len);
 801de58:	68bb      	ldr	r3, [r7, #8]
 801de5a:	781b      	ldrb	r3, [r3, #0]
 801de5c:	b21a      	sxth	r2, r3
 801de5e:	68bb      	ldr	r3, [r7, #8]
 801de60:	3301      	adds	r3, #1
 801de62:	781b      	ldrb	r3, [r3, #0]
 801de64:	021b      	lsls	r3, r3, #8
 801de66:	b21b      	sxth	r3, r3
 801de68:	4313      	orrs	r3, r2
 801de6a:	b21b      	sxth	r3, r3
 801de6c:	b29a      	uxth	r2, r3
 801de6e:	4b40      	ldr	r3, [pc, #256]	; (801df70 <platform_interface_callback+0x1c8>)
 801de70:	801a      	strh	r2, [r3, #0]
 801de72:	68bb      	ldr	r3, [r7, #8]
 801de74:	3302      	adds	r3, #2
 801de76:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_DONE();

                if(param_len == 0)
 801de78:	4b3d      	ldr	r3, [pc, #244]	; (801df70 <platform_interface_callback+0x1c8>)
 801de7a:	881b      	ldrh	r3, [r3, #0]
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d115      	bne.n	801deac <platform_interface_callback+0x104>
                {
                    if(!special_events_handler(msg_id, src_id, NULL))
 801de80:	4b39      	ldr	r3, [pc, #228]	; (801df68 <platform_interface_callback+0x1c0>)
 801de82:	881b      	ldrh	r3, [r3, #0]
 801de84:	4a39      	ldr	r2, [pc, #228]	; (801df6c <platform_interface_callback+0x1c4>)
 801de86:	8811      	ldrh	r1, [r2, #0]
 801de88:	2200      	movs	r2, #0
 801de8a:	4618      	mov	r0, r3
 801de8c:	f7ff fe78 	bl	801db80 <special_events_handler>
 801de90:	4603      	mov	r3, r0
 801de92:	2b00      	cmp	r3, #0
 801de94:	d107      	bne.n	801dea6 <platform_interface_callback+0xfe>
                    {
                        // post it into the event queue
                        event_post(msg_id, src_id, NULL);
 801de96:	4b34      	ldr	r3, [pc, #208]	; (801df68 <platform_interface_callback+0x1c0>)
 801de98:	881b      	ldrh	r3, [r3, #0]
 801de9a:	4a34      	ldr	r2, [pc, #208]	; (801df6c <platform_interface_callback+0x1c4>)
 801de9c:	8811      	ldrh	r1, [r2, #0]
 801de9e:	2200      	movs	r2, #0
 801dea0:	4618      	mov	r0, r3
 801dea2:	f7ff fe2f 	bl	801db04 <event_post>
                    }
                    state = NMI_BLE_WAITING;
 801dea6:	4b2d      	ldr	r3, [pc, #180]	; (801df5c <platform_interface_callback+0x1b4>)
 801dea8:	2200      	movs	r2, #0
 801deaa:	601a      	str	r2, [r3, #0]
                }

                // make sure that we have room for params
                if(sizeof(buff) - write_ptr < param_len)
 801deac:	4b31      	ldr	r3, [pc, #196]	; (801df74 <platform_interface_callback+0x1cc>)
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 801deb4:	4a2e      	ldr	r2, [pc, #184]	; (801df70 <platform_interface_callback+0x1c8>)
 801deb6:	8812      	ldrh	r2, [r2, #0]
 801deb8:	4293      	cmp	r3, r2
 801deba:	d202      	bcs.n	801dec2 <platform_interface_callback+0x11a>
                {
                    write_ptr = 0;
 801debc:	4b2d      	ldr	r3, [pc, #180]	; (801df74 <platform_interface_callback+0x1cc>)
 801debe:	2200      	movs	r2, #0
 801dec0:	601a      	str	r2, [r3, #0]
                }
                cur_msg_start = write_ptr;
 801dec2:	4b2c      	ldr	r3, [pc, #176]	; (801df74 <platform_interface_callback+0x1cc>)
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	4a2c      	ldr	r2, [pc, #176]	; (801df78 <platform_interface_callback+0x1d0>)
 801dec8:	6013      	str	r3, [r2, #0]
            }
            continue;
 801deca:	e038      	b.n	801df3e <platform_interface_callback+0x196>
        }

        if(state == NMI_BLE_COLLECTING_PAYLOAD)
 801decc:	4b23      	ldr	r3, [pc, #140]	; (801df5c <platform_interface_callback+0x1b4>)
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	2b02      	cmp	r3, #2
 801ded2:	d135      	bne.n	801df40 <platform_interface_callback+0x198>
        {
            buff[write_ptr] = data[i];
 801ded4:	687a      	ldr	r2, [r7, #4]
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	441a      	add	r2, r3
 801deda:	4b26      	ldr	r3, [pc, #152]	; (801df74 <platform_interface_callback+0x1cc>)
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	7811      	ldrb	r1, [r2, #0]
 801dee0:	4a26      	ldr	r2, [pc, #152]	; (801df7c <platform_interface_callback+0x1d4>)
 801dee2:	54d1      	strb	r1, [r2, r3]
            write_ptr++;
 801dee4:	4b23      	ldr	r3, [pc, #140]	; (801df74 <platform_interface_callback+0x1cc>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	3301      	adds	r3, #1
 801deea:	4a22      	ldr	r2, [pc, #136]	; (801df74 <platform_interface_callback+0x1cc>)
 801deec:	6013      	str	r3, [r2, #0]

            if(write_ptr - cur_msg_start == param_len)
 801deee:	4b21      	ldr	r3, [pc, #132]	; (801df74 <platform_interface_callback+0x1cc>)
 801def0:	681a      	ldr	r2, [r3, #0]
 801def2:	4b21      	ldr	r3, [pc, #132]	; (801df78 <platform_interface_callback+0x1d0>)
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	1ad3      	subs	r3, r2, r3
 801def8:	4a1d      	ldr	r2, [pc, #116]	; (801df70 <platform_interface_callback+0x1c8>)
 801defa:	8812      	ldrh	r2, [r2, #0]
 801defc:	4293      	cmp	r3, r2
 801defe:	d11f      	bne.n	801df40 <platform_interface_callback+0x198>
            {
                // message fully received
                state = NMI_BLE_WAITING;
 801df00:	4b16      	ldr	r3, [pc, #88]	; (801df5c <platform_interface_callback+0x1b4>)
 801df02:	2200      	movs	r2, #0
 801df04:	601a      	str	r2, [r3, #0]

                // handle message
                if(!special_events_handler(msg_id, src_id, &buff[cur_msg_start]))
 801df06:	4b18      	ldr	r3, [pc, #96]	; (801df68 <platform_interface_callback+0x1c0>)
 801df08:	8818      	ldrh	r0, [r3, #0]
 801df0a:	4b18      	ldr	r3, [pc, #96]	; (801df6c <platform_interface_callback+0x1c4>)
 801df0c:	8819      	ldrh	r1, [r3, #0]
 801df0e:	4b1a      	ldr	r3, [pc, #104]	; (801df78 <platform_interface_callback+0x1d0>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	4a1a      	ldr	r2, [pc, #104]	; (801df7c <platform_interface_callback+0x1d4>)
 801df14:	4413      	add	r3, r2
 801df16:	461a      	mov	r2, r3
 801df18:	f7ff fe32 	bl	801db80 <special_events_handler>
 801df1c:	4603      	mov	r3, r0
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d10e      	bne.n	801df40 <platform_interface_callback+0x198>
                {
                    // post it into the event queue
                    event_post(msg_id, src_id, &buff[cur_msg_start]);
 801df22:	4b11      	ldr	r3, [pc, #68]	; (801df68 <platform_interface_callback+0x1c0>)
 801df24:	8818      	ldrh	r0, [r3, #0]
 801df26:	4b11      	ldr	r3, [pc, #68]	; (801df6c <platform_interface_callback+0x1c4>)
 801df28:	8819      	ldrh	r1, [r3, #0]
 801df2a:	4b13      	ldr	r3, [pc, #76]	; (801df78 <platform_interface_callback+0x1d0>)
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	4a13      	ldr	r2, [pc, #76]	; (801df7c <platform_interface_callback+0x1d4>)
 801df30:	4413      	add	r3, r2
 801df32:	461a      	mov	r2, r3
 801df34:	f7ff fde6 	bl	801db04 <event_post>
 801df38:	e002      	b.n	801df40 <platform_interface_callback+0x198>
            continue;
 801df3a:	bf00      	nop
 801df3c:	e000      	b.n	801df40 <platform_interface_callback+0x198>
            continue;
 801df3e:	bf00      	nop
    for(i=0; i<len; i++)
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	3301      	adds	r3, #1
 801df44:	60fb      	str	r3, [r7, #12]
 801df46:	68fa      	ldr	r2, [r7, #12]
 801df48:	683b      	ldr	r3, [r7, #0]
 801df4a:	429a      	cmp	r2, r3
 801df4c:	f4ff af34 	bcc.w	801ddb8 <platform_interface_callback+0x10>

            }

        }
    }
}
 801df50:	bf00      	nop
 801df52:	bf00      	nop
 801df54:	3710      	adds	r7, #16
 801df56:	46bd      	mov	sp, r7
 801df58:	bd80      	pop	{r7, pc}
 801df5a:	bf00      	nop
 801df5c:	2001e2d4 	.word	0x2001e2d4
 801df60:	2001e2d8 	.word	0x2001e2d8
 801df64:	2001e2dc 	.word	0x2001e2dc
 801df68:	2001e2e4 	.word	0x2001e2e4
 801df6c:	2001e2e6 	.word	0x2001e2e6
 801df70:	2001e2e8 	.word	0x2001e2e8
 801df74:	2001e2ec 	.word	0x2001e2ec
 801df78:	2001e2f0 	.word	0x2001e2f0
 801df7c:	2001e2f4 	.word	0x2001e2f4

0801df80 <interface_send>:

at_ble_status_t interface_send(uint8_t* msg, uint16_t u16TxLen)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	460b      	mov	r3, r1
 801df8a:	807b      	strh	r3, [r7, #2]
    msg[7] = u16TxLen & 0x00FF;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	3307      	adds	r3, #7
 801df90:	887a      	ldrh	r2, [r7, #2]
 801df92:	b2d2      	uxtb	r2, r2
 801df94:	701a      	strb	r2, [r3, #0]
    msg[8] = ((u16TxLen)>>8) & 0x00FF;
 801df96:	887b      	ldrh	r3, [r7, #2]
 801df98:	0a1b      	lsrs	r3, r3, #8
 801df9a:	b29a      	uxth	r2, r3
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	3308      	adds	r3, #8
 801dfa0:	b2d2      	uxtb	r2, r2
 801dfa2:	701a      	strb	r2, [r3, #0]
    
    return platform_interface_send(msg, u16TxLen+INTERFACE_HDR_LENGTH);
 801dfa4:	887b      	ldrh	r3, [r7, #2]
 801dfa6:	3309      	adds	r3, #9
 801dfa8:	4619      	mov	r1, r3
 801dfaa:	6878      	ldr	r0, [r7, #4]
 801dfac:	f000 f812 	bl	801dfd4 <platform_interface_send>
 801dfb0:	4603      	mov	r3, r0
}
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	3708      	adds	r7, #8
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	bd80      	pop	{r7, pc}

0801dfba <platform_receive>:
}

//Called from the app/wifi driver to inject a BLE blob received over the HIF into the bottom of the BLE API
//stack.
void platform_receive(uint8_t* data, uint32_t len)
{
 801dfba:	b580      	push	{r7, lr}
 801dfbc:	b082      	sub	sp, #8
 801dfbe:	af00      	add	r7, sp, #0
 801dfc0:	6078      	str	r0, [r7, #4]
 801dfc2:	6039      	str	r1, [r7, #0]
    platform_interface_callback(data, len);
 801dfc4:	6839      	ldr	r1, [r7, #0]
 801dfc6:	6878      	ldr	r0, [r7, #4]
 801dfc8:	f7ff feee 	bl	801dda8 <platform_interface_callback>
}
 801dfcc:	bf00      	nop
 801dfce:	3708      	adds	r7, #8
 801dfd0:	46bd      	mov	sp, r7
 801dfd2:	bd80      	pop	{r7, pc}

0801dfd4 <platform_interface_send>:
	return ret;
}

//Call the specified callback which will handle sending the BLE API blob over the HIF
at_ble_status_t platform_interface_send(uint8_t* data, uint32_t len)
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b082      	sub	sp, #8
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
 801dfdc:	6039      	str	r1, [r7, #0]
    if (plf_params.ble_write_cb && (plf_params.ble_write_cb(data, len) == 0))
 801dfde:	4b09      	ldr	r3, [pc, #36]	; (801e004 <platform_interface_send+0x30>)
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d009      	beq.n	801dffa <platform_interface_send+0x26>
 801dfe6:	4b07      	ldr	r3, [pc, #28]	; (801e004 <platform_interface_send+0x30>)
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	6839      	ldr	r1, [r7, #0]
 801dfec:	6878      	ldr	r0, [r7, #4]
 801dfee:	4798      	blx	r3
 801dff0:	4603      	mov	r3, r0
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d101      	bne.n	801dffa <platform_interface_send+0x26>
		return AT_BLE_SUCCESS;
 801dff6:	2300      	movs	r3, #0
 801dff8:	e000      	b.n	801dffc <platform_interface_send+0x28>
	return AT_BLE_FAILURE;		
 801dffa:	2301      	movs	r3, #1
}
 801dffc:	4618      	mov	r0, r3
 801dffe:	3708      	adds	r7, #8
 801e000:	46bd      	mov	sp, r7
 801e002:	bd80      	pop	{r7, pc}
 801e004:	2001e4e8 	.word	0x2001e4e8

0801e008 <platform_cmd_cmpl_signal>:

static volatile uint32_t cmd_cmpl_flag = 0;
static volatile uint32_t event_flag = 0;

void platform_cmd_cmpl_signal()
{
 801e008:	b480      	push	{r7}
 801e00a:	af00      	add	r7, sp, #0
    cmd_cmpl_flag = 1;
 801e00c:	4b03      	ldr	r3, [pc, #12]	; (801e01c <platform_cmd_cmpl_signal+0x14>)
 801e00e:	2201      	movs	r2, #1
 801e010:	601a      	str	r2, [r3, #0]
}
 801e012:	bf00      	nop
 801e014:	46bd      	mov	sp, r7
 801e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e01a:	4770      	bx	lr
 801e01c:	2001e4f8 	.word	0x2001e4f8

0801e020 <platform_event_signal>:

    return AT_BLE_SUCCESS;
}

void platform_event_signal()
{
 801e020:	b480      	push	{r7}
 801e022:	af00      	add	r7, sp, #0
    event_flag = 1;
 801e024:	4b03      	ldr	r3, [pc, #12]	; (801e034 <platform_event_signal+0x14>)
 801e026:	2201      	movs	r2, #1
 801e028:	601a      	str	r2, [r3, #0]
}
 801e02a:	bf00      	nop
 801e02c:	46bd      	mov	sp, r7
 801e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e032:	4770      	bx	lr
 801e034:	2001e4fc 	.word	0x2001e4fc

0801e038 <wifiprov_scan_list_ind_send>:
    INTERFACE_MSG_DONE();
    return status;
}

at_ble_status_t wifiprov_scan_list_ind_send(struct wifiprov_scanlist_ind *param)
{
 801e038:	b580      	push	{r7, lr}
 801e03a:	b084      	sub	sp, #16
 801e03c:	af00      	add	r7, sp, #0
 801e03e:	6078      	str	r0, [r7, #4]
    at_ble_status_t status;

    INTERFACE_MSG_INIT(WIFIPROV_SCANLIST_IND, TASK_WIFIPROV);
 801e040:	4b20      	ldr	r3, [pc, #128]	; (801e0c4 <wifiprov_scan_list_ind_send+0x8c>)
 801e042:	60fb      	str	r3, [r7, #12]
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	1c5a      	adds	r2, r3, #1
 801e048:	60fa      	str	r2, [r7, #12]
 801e04a:	2205      	movs	r2, #5
 801e04c:	701a      	strb	r2, [r3, #0]
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	1c5a      	adds	r2, r3, #1
 801e052:	60fa      	str	r2, [r7, #12]
 801e054:	2207      	movs	r2, #7
 801e056:	701a      	strb	r2, [r3, #0]
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	1c5a      	adds	r2, r3, #1
 801e05c:	60fa      	str	r2, [r7, #12]
 801e05e:	22dc      	movs	r2, #220	; 0xdc
 801e060:	701a      	strb	r2, [r3, #0]
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	1c5a      	adds	r2, r3, #1
 801e066:	60fa      	str	r2, [r7, #12]
 801e068:	2237      	movs	r2, #55	; 0x37
 801e06a:	701a      	strb	r2, [r3, #0]
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	1c5a      	adds	r2, r3, #1
 801e070:	60fa      	str	r2, [r7, #12]
 801e072:	2200      	movs	r2, #0
 801e074:	701a      	strb	r2, [r3, #0]
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	1c5a      	adds	r2, r3, #1
 801e07a:	60fa      	str	r2, [r7, #12]
 801e07c:	223f      	movs	r2, #63	; 0x3f
 801e07e:	701a      	strb	r2, [r3, #0]
 801e080:	68fb      	ldr	r3, [r7, #12]
 801e082:	1c5a      	adds	r2, r3, #1
 801e084:	60fa      	str	r2, [r7, #12]
 801e086:	2200      	movs	r2, #0
 801e088:	701a      	strb	r2, [r3, #0]
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	3302      	adds	r3, #2
 801e08e:	60fb      	str	r3, [r7, #12]
    INTERFACE_PACK_ARG_BLOCK(param, sizeof(struct wifiprov_scanlist_ind));  // GTODO: Does this need to be 'repacked' using pack macros?
 801e090:	f240 12ff 	movw	r2, #511	; 0x1ff
 801e094:	6879      	ldr	r1, [r7, #4]
 801e096:	68f8      	ldr	r0, [r7, #12]
 801e098:	f000 fbf4 	bl	801e884 <memcpy>
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801e0a2:	60fb      	str	r3, [r7, #12]
    status = INTERFACE_SEND_NO_WAIT();
 801e0a4:	68fb      	ldr	r3, [r7, #12]
 801e0a6:	4a08      	ldr	r2, [pc, #32]	; (801e0c8 <wifiprov_scan_list_ind_send+0x90>)
 801e0a8:	1a9b      	subs	r3, r3, r2
 801e0aa:	b29b      	uxth	r3, r3
 801e0ac:	4619      	mov	r1, r3
 801e0ae:	4805      	ldr	r0, [pc, #20]	; (801e0c4 <wifiprov_scan_list_ind_send+0x8c>)
 801e0b0:	f7ff ff66 	bl	801df80 <interface_send>
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	72fb      	strb	r3, [r7, #11]
    INTERFACE_MSG_DONE();
    return status;
 801e0b8:	7afb      	ldrb	r3, [r7, #11]
}
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	3710      	adds	r7, #16
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	bd80      	pop	{r7, pc}
 801e0c2:	bf00      	nop
 801e0c4:	2001e07c 	.word	0x2001e07c
 801e0c8:	2001e085 	.word	0x2001e085

0801e0cc <malloc>:
 801e0cc:	4b02      	ldr	r3, [pc, #8]	; (801e0d8 <malloc+0xc>)
 801e0ce:	4601      	mov	r1, r0
 801e0d0:	6818      	ldr	r0, [r3, #0]
 801e0d2:	f000 b82b 	b.w	801e12c <_malloc_r>
 801e0d6:	bf00      	nop
 801e0d8:	200000a0 	.word	0x200000a0

0801e0dc <free>:
 801e0dc:	4b02      	ldr	r3, [pc, #8]	; (801e0e8 <free+0xc>)
 801e0de:	4601      	mov	r1, r0
 801e0e0:	6818      	ldr	r0, [r3, #0]
 801e0e2:	f000 bbdd 	b.w	801e8a0 <_free_r>
 801e0e6:	bf00      	nop
 801e0e8:	200000a0 	.word	0x200000a0

0801e0ec <sbrk_aligned>:
 801e0ec:	b570      	push	{r4, r5, r6, lr}
 801e0ee:	4e0e      	ldr	r6, [pc, #56]	; (801e128 <sbrk_aligned+0x3c>)
 801e0f0:	460c      	mov	r4, r1
 801e0f2:	6831      	ldr	r1, [r6, #0]
 801e0f4:	4605      	mov	r5, r0
 801e0f6:	b911      	cbnz	r1, 801e0fe <sbrk_aligned+0x12>
 801e0f8:	f000 fb6e 	bl	801e7d8 <_sbrk_r>
 801e0fc:	6030      	str	r0, [r6, #0]
 801e0fe:	4621      	mov	r1, r4
 801e100:	4628      	mov	r0, r5
 801e102:	f000 fb69 	bl	801e7d8 <_sbrk_r>
 801e106:	1c43      	adds	r3, r0, #1
 801e108:	d00a      	beq.n	801e120 <sbrk_aligned+0x34>
 801e10a:	1cc4      	adds	r4, r0, #3
 801e10c:	f024 0403 	bic.w	r4, r4, #3
 801e110:	42a0      	cmp	r0, r4
 801e112:	d007      	beq.n	801e124 <sbrk_aligned+0x38>
 801e114:	1a21      	subs	r1, r4, r0
 801e116:	4628      	mov	r0, r5
 801e118:	f000 fb5e 	bl	801e7d8 <_sbrk_r>
 801e11c:	3001      	adds	r0, #1
 801e11e:	d101      	bne.n	801e124 <sbrk_aligned+0x38>
 801e120:	f04f 34ff 	mov.w	r4, #4294967295
 801e124:	4620      	mov	r0, r4
 801e126:	bd70      	pop	{r4, r5, r6, pc}
 801e128:	2001e504 	.word	0x2001e504

0801e12c <_malloc_r>:
 801e12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e130:	1ccd      	adds	r5, r1, #3
 801e132:	f025 0503 	bic.w	r5, r5, #3
 801e136:	3508      	adds	r5, #8
 801e138:	2d0c      	cmp	r5, #12
 801e13a:	bf38      	it	cc
 801e13c:	250c      	movcc	r5, #12
 801e13e:	2d00      	cmp	r5, #0
 801e140:	4607      	mov	r7, r0
 801e142:	db01      	blt.n	801e148 <_malloc_r+0x1c>
 801e144:	42a9      	cmp	r1, r5
 801e146:	d905      	bls.n	801e154 <_malloc_r+0x28>
 801e148:	230c      	movs	r3, #12
 801e14a:	603b      	str	r3, [r7, #0]
 801e14c:	2600      	movs	r6, #0
 801e14e:	4630      	mov	r0, r6
 801e150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e228 <_malloc_r+0xfc>
 801e158:	f000 f868 	bl	801e22c <__malloc_lock>
 801e15c:	f8d8 3000 	ldr.w	r3, [r8]
 801e160:	461c      	mov	r4, r3
 801e162:	bb5c      	cbnz	r4, 801e1bc <_malloc_r+0x90>
 801e164:	4629      	mov	r1, r5
 801e166:	4638      	mov	r0, r7
 801e168:	f7ff ffc0 	bl	801e0ec <sbrk_aligned>
 801e16c:	1c43      	adds	r3, r0, #1
 801e16e:	4604      	mov	r4, r0
 801e170:	d155      	bne.n	801e21e <_malloc_r+0xf2>
 801e172:	f8d8 4000 	ldr.w	r4, [r8]
 801e176:	4626      	mov	r6, r4
 801e178:	2e00      	cmp	r6, #0
 801e17a:	d145      	bne.n	801e208 <_malloc_r+0xdc>
 801e17c:	2c00      	cmp	r4, #0
 801e17e:	d048      	beq.n	801e212 <_malloc_r+0xe6>
 801e180:	6823      	ldr	r3, [r4, #0]
 801e182:	4631      	mov	r1, r6
 801e184:	4638      	mov	r0, r7
 801e186:	eb04 0903 	add.w	r9, r4, r3
 801e18a:	f000 fb25 	bl	801e7d8 <_sbrk_r>
 801e18e:	4581      	cmp	r9, r0
 801e190:	d13f      	bne.n	801e212 <_malloc_r+0xe6>
 801e192:	6821      	ldr	r1, [r4, #0]
 801e194:	1a6d      	subs	r5, r5, r1
 801e196:	4629      	mov	r1, r5
 801e198:	4638      	mov	r0, r7
 801e19a:	f7ff ffa7 	bl	801e0ec <sbrk_aligned>
 801e19e:	3001      	adds	r0, #1
 801e1a0:	d037      	beq.n	801e212 <_malloc_r+0xe6>
 801e1a2:	6823      	ldr	r3, [r4, #0]
 801e1a4:	442b      	add	r3, r5
 801e1a6:	6023      	str	r3, [r4, #0]
 801e1a8:	f8d8 3000 	ldr.w	r3, [r8]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d038      	beq.n	801e222 <_malloc_r+0xf6>
 801e1b0:	685a      	ldr	r2, [r3, #4]
 801e1b2:	42a2      	cmp	r2, r4
 801e1b4:	d12b      	bne.n	801e20e <_malloc_r+0xe2>
 801e1b6:	2200      	movs	r2, #0
 801e1b8:	605a      	str	r2, [r3, #4]
 801e1ba:	e00f      	b.n	801e1dc <_malloc_r+0xb0>
 801e1bc:	6822      	ldr	r2, [r4, #0]
 801e1be:	1b52      	subs	r2, r2, r5
 801e1c0:	d41f      	bmi.n	801e202 <_malloc_r+0xd6>
 801e1c2:	2a0b      	cmp	r2, #11
 801e1c4:	d917      	bls.n	801e1f6 <_malloc_r+0xca>
 801e1c6:	1961      	adds	r1, r4, r5
 801e1c8:	42a3      	cmp	r3, r4
 801e1ca:	6025      	str	r5, [r4, #0]
 801e1cc:	bf18      	it	ne
 801e1ce:	6059      	strne	r1, [r3, #4]
 801e1d0:	6863      	ldr	r3, [r4, #4]
 801e1d2:	bf08      	it	eq
 801e1d4:	f8c8 1000 	streq.w	r1, [r8]
 801e1d8:	5162      	str	r2, [r4, r5]
 801e1da:	604b      	str	r3, [r1, #4]
 801e1dc:	4638      	mov	r0, r7
 801e1de:	f104 060b 	add.w	r6, r4, #11
 801e1e2:	f000 f829 	bl	801e238 <__malloc_unlock>
 801e1e6:	f026 0607 	bic.w	r6, r6, #7
 801e1ea:	1d23      	adds	r3, r4, #4
 801e1ec:	1af2      	subs	r2, r6, r3
 801e1ee:	d0ae      	beq.n	801e14e <_malloc_r+0x22>
 801e1f0:	1b9b      	subs	r3, r3, r6
 801e1f2:	50a3      	str	r3, [r4, r2]
 801e1f4:	e7ab      	b.n	801e14e <_malloc_r+0x22>
 801e1f6:	42a3      	cmp	r3, r4
 801e1f8:	6862      	ldr	r2, [r4, #4]
 801e1fa:	d1dd      	bne.n	801e1b8 <_malloc_r+0x8c>
 801e1fc:	f8c8 2000 	str.w	r2, [r8]
 801e200:	e7ec      	b.n	801e1dc <_malloc_r+0xb0>
 801e202:	4623      	mov	r3, r4
 801e204:	6864      	ldr	r4, [r4, #4]
 801e206:	e7ac      	b.n	801e162 <_malloc_r+0x36>
 801e208:	4634      	mov	r4, r6
 801e20a:	6876      	ldr	r6, [r6, #4]
 801e20c:	e7b4      	b.n	801e178 <_malloc_r+0x4c>
 801e20e:	4613      	mov	r3, r2
 801e210:	e7cc      	b.n	801e1ac <_malloc_r+0x80>
 801e212:	230c      	movs	r3, #12
 801e214:	603b      	str	r3, [r7, #0]
 801e216:	4638      	mov	r0, r7
 801e218:	f000 f80e 	bl	801e238 <__malloc_unlock>
 801e21c:	e797      	b.n	801e14e <_malloc_r+0x22>
 801e21e:	6025      	str	r5, [r4, #0]
 801e220:	e7dc      	b.n	801e1dc <_malloc_r+0xb0>
 801e222:	605b      	str	r3, [r3, #4]
 801e224:	deff      	udf	#255	; 0xff
 801e226:	bf00      	nop
 801e228:	2001e500 	.word	0x2001e500

0801e22c <__malloc_lock>:
 801e22c:	4801      	ldr	r0, [pc, #4]	; (801e234 <__malloc_lock+0x8>)
 801e22e:	f000 bb1f 	b.w	801e870 <__retarget_lock_acquire_recursive>
 801e232:	bf00      	nop
 801e234:	2001e648 	.word	0x2001e648

0801e238 <__malloc_unlock>:
 801e238:	4801      	ldr	r0, [pc, #4]	; (801e240 <__malloc_unlock+0x8>)
 801e23a:	f000 bb1a 	b.w	801e872 <__retarget_lock_release_recursive>
 801e23e:	bf00      	nop
 801e240:	2001e648 	.word	0x2001e648

0801e244 <std>:
 801e244:	2300      	movs	r3, #0
 801e246:	b510      	push	{r4, lr}
 801e248:	4604      	mov	r4, r0
 801e24a:	e9c0 3300 	strd	r3, r3, [r0]
 801e24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e252:	6083      	str	r3, [r0, #8]
 801e254:	8181      	strh	r1, [r0, #12]
 801e256:	6643      	str	r3, [r0, #100]	; 0x64
 801e258:	81c2      	strh	r2, [r0, #14]
 801e25a:	6183      	str	r3, [r0, #24]
 801e25c:	4619      	mov	r1, r3
 801e25e:	2208      	movs	r2, #8
 801e260:	305c      	adds	r0, #92	; 0x5c
 801e262:	f000 fa27 	bl	801e6b4 <memset>
 801e266:	4b05      	ldr	r3, [pc, #20]	; (801e27c <std+0x38>)
 801e268:	6263      	str	r3, [r4, #36]	; 0x24
 801e26a:	4b05      	ldr	r3, [pc, #20]	; (801e280 <std+0x3c>)
 801e26c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e26e:	4b05      	ldr	r3, [pc, #20]	; (801e284 <std+0x40>)
 801e270:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e272:	4b05      	ldr	r3, [pc, #20]	; (801e288 <std+0x44>)
 801e274:	6224      	str	r4, [r4, #32]
 801e276:	6323      	str	r3, [r4, #48]	; 0x30
 801e278:	bd10      	pop	{r4, pc}
 801e27a:	bf00      	nop
 801e27c:	0801e4d1 	.word	0x0801e4d1
 801e280:	0801e4f3 	.word	0x0801e4f3
 801e284:	0801e52b 	.word	0x0801e52b
 801e288:	0801e54f 	.word	0x0801e54f

0801e28c <stdio_exit_handler>:
 801e28c:	4a02      	ldr	r2, [pc, #8]	; (801e298 <stdio_exit_handler+0xc>)
 801e28e:	4903      	ldr	r1, [pc, #12]	; (801e29c <stdio_exit_handler+0x10>)
 801e290:	4803      	ldr	r0, [pc, #12]	; (801e2a0 <stdio_exit_handler+0x14>)
 801e292:	f000 b869 	b.w	801e368 <_fwalk_sglue>
 801e296:	bf00      	nop
 801e298:	20000048 	.word	0x20000048
 801e29c:	0801f29d 	.word	0x0801f29d
 801e2a0:	20000054 	.word	0x20000054

0801e2a4 <cleanup_stdio>:
 801e2a4:	6841      	ldr	r1, [r0, #4]
 801e2a6:	4b0c      	ldr	r3, [pc, #48]	; (801e2d8 <cleanup_stdio+0x34>)
 801e2a8:	4299      	cmp	r1, r3
 801e2aa:	b510      	push	{r4, lr}
 801e2ac:	4604      	mov	r4, r0
 801e2ae:	d001      	beq.n	801e2b4 <cleanup_stdio+0x10>
 801e2b0:	f000 fff4 	bl	801f29c <_fflush_r>
 801e2b4:	68a1      	ldr	r1, [r4, #8]
 801e2b6:	4b09      	ldr	r3, [pc, #36]	; (801e2dc <cleanup_stdio+0x38>)
 801e2b8:	4299      	cmp	r1, r3
 801e2ba:	d002      	beq.n	801e2c2 <cleanup_stdio+0x1e>
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f000 ffed 	bl	801f29c <_fflush_r>
 801e2c2:	68e1      	ldr	r1, [r4, #12]
 801e2c4:	4b06      	ldr	r3, [pc, #24]	; (801e2e0 <cleanup_stdio+0x3c>)
 801e2c6:	4299      	cmp	r1, r3
 801e2c8:	d004      	beq.n	801e2d4 <cleanup_stdio+0x30>
 801e2ca:	4620      	mov	r0, r4
 801e2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2d0:	f000 bfe4 	b.w	801f29c <_fflush_r>
 801e2d4:	bd10      	pop	{r4, pc}
 801e2d6:	bf00      	nop
 801e2d8:	2001e508 	.word	0x2001e508
 801e2dc:	2001e570 	.word	0x2001e570
 801e2e0:	2001e5d8 	.word	0x2001e5d8

0801e2e4 <global_stdio_init.part.0>:
 801e2e4:	b510      	push	{r4, lr}
 801e2e6:	4b0b      	ldr	r3, [pc, #44]	; (801e314 <global_stdio_init.part.0+0x30>)
 801e2e8:	4c0b      	ldr	r4, [pc, #44]	; (801e318 <global_stdio_init.part.0+0x34>)
 801e2ea:	4a0c      	ldr	r2, [pc, #48]	; (801e31c <global_stdio_init.part.0+0x38>)
 801e2ec:	601a      	str	r2, [r3, #0]
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	2104      	movs	r1, #4
 801e2f4:	f7ff ffa6 	bl	801e244 <std>
 801e2f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e2fc:	2201      	movs	r2, #1
 801e2fe:	2109      	movs	r1, #9
 801e300:	f7ff ffa0 	bl	801e244 <std>
 801e304:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e308:	2202      	movs	r2, #2
 801e30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e30e:	2112      	movs	r1, #18
 801e310:	f7ff bf98 	b.w	801e244 <std>
 801e314:	2001e640 	.word	0x2001e640
 801e318:	2001e508 	.word	0x2001e508
 801e31c:	0801e28d 	.word	0x0801e28d

0801e320 <__sfp_lock_acquire>:
 801e320:	4801      	ldr	r0, [pc, #4]	; (801e328 <__sfp_lock_acquire+0x8>)
 801e322:	f000 baa5 	b.w	801e870 <__retarget_lock_acquire_recursive>
 801e326:	bf00      	nop
 801e328:	2001e649 	.word	0x2001e649

0801e32c <__sfp_lock_release>:
 801e32c:	4801      	ldr	r0, [pc, #4]	; (801e334 <__sfp_lock_release+0x8>)
 801e32e:	f000 baa0 	b.w	801e872 <__retarget_lock_release_recursive>
 801e332:	bf00      	nop
 801e334:	2001e649 	.word	0x2001e649

0801e338 <__sinit>:
 801e338:	b510      	push	{r4, lr}
 801e33a:	4604      	mov	r4, r0
 801e33c:	f7ff fff0 	bl	801e320 <__sfp_lock_acquire>
 801e340:	6a23      	ldr	r3, [r4, #32]
 801e342:	b11b      	cbz	r3, 801e34c <__sinit+0x14>
 801e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e348:	f7ff bff0 	b.w	801e32c <__sfp_lock_release>
 801e34c:	4b04      	ldr	r3, [pc, #16]	; (801e360 <__sinit+0x28>)
 801e34e:	6223      	str	r3, [r4, #32]
 801e350:	4b04      	ldr	r3, [pc, #16]	; (801e364 <__sinit+0x2c>)
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d1f5      	bne.n	801e344 <__sinit+0xc>
 801e358:	f7ff ffc4 	bl	801e2e4 <global_stdio_init.part.0>
 801e35c:	e7f2      	b.n	801e344 <__sinit+0xc>
 801e35e:	bf00      	nop
 801e360:	0801e2a5 	.word	0x0801e2a5
 801e364:	2001e640 	.word	0x2001e640

0801e368 <_fwalk_sglue>:
 801e368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e36c:	4607      	mov	r7, r0
 801e36e:	4688      	mov	r8, r1
 801e370:	4614      	mov	r4, r2
 801e372:	2600      	movs	r6, #0
 801e374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e378:	f1b9 0901 	subs.w	r9, r9, #1
 801e37c:	d505      	bpl.n	801e38a <_fwalk_sglue+0x22>
 801e37e:	6824      	ldr	r4, [r4, #0]
 801e380:	2c00      	cmp	r4, #0
 801e382:	d1f7      	bne.n	801e374 <_fwalk_sglue+0xc>
 801e384:	4630      	mov	r0, r6
 801e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e38a:	89ab      	ldrh	r3, [r5, #12]
 801e38c:	2b01      	cmp	r3, #1
 801e38e:	d907      	bls.n	801e3a0 <_fwalk_sglue+0x38>
 801e390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e394:	3301      	adds	r3, #1
 801e396:	d003      	beq.n	801e3a0 <_fwalk_sglue+0x38>
 801e398:	4629      	mov	r1, r5
 801e39a:	4638      	mov	r0, r7
 801e39c:	47c0      	blx	r8
 801e39e:	4306      	orrs	r6, r0
 801e3a0:	3568      	adds	r5, #104	; 0x68
 801e3a2:	e7e9      	b.n	801e378 <_fwalk_sglue+0x10>

0801e3a4 <iprintf>:
 801e3a4:	b40f      	push	{r0, r1, r2, r3}
 801e3a6:	b507      	push	{r0, r1, r2, lr}
 801e3a8:	4906      	ldr	r1, [pc, #24]	; (801e3c4 <iprintf+0x20>)
 801e3aa:	ab04      	add	r3, sp, #16
 801e3ac:	6808      	ldr	r0, [r1, #0]
 801e3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3b2:	6881      	ldr	r1, [r0, #8]
 801e3b4:	9301      	str	r3, [sp, #4]
 801e3b6:	f000 fc41 	bl	801ec3c <_vfiprintf_r>
 801e3ba:	b003      	add	sp, #12
 801e3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801e3c0:	b004      	add	sp, #16
 801e3c2:	4770      	bx	lr
 801e3c4:	200000a0 	.word	0x200000a0

0801e3c8 <putchar>:
 801e3c8:	4b02      	ldr	r3, [pc, #8]	; (801e3d4 <putchar+0xc>)
 801e3ca:	4601      	mov	r1, r0
 801e3cc:	6818      	ldr	r0, [r3, #0]
 801e3ce:	6882      	ldr	r2, [r0, #8]
 801e3d0:	f000 bfee 	b.w	801f3b0 <_putc_r>
 801e3d4:	200000a0 	.word	0x200000a0

0801e3d8 <_puts_r>:
 801e3d8:	6a03      	ldr	r3, [r0, #32]
 801e3da:	b570      	push	{r4, r5, r6, lr}
 801e3dc:	6884      	ldr	r4, [r0, #8]
 801e3de:	4605      	mov	r5, r0
 801e3e0:	460e      	mov	r6, r1
 801e3e2:	b90b      	cbnz	r3, 801e3e8 <_puts_r+0x10>
 801e3e4:	f7ff ffa8 	bl	801e338 <__sinit>
 801e3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3ea:	07db      	lsls	r3, r3, #31
 801e3ec:	d405      	bmi.n	801e3fa <_puts_r+0x22>
 801e3ee:	89a3      	ldrh	r3, [r4, #12]
 801e3f0:	0598      	lsls	r0, r3, #22
 801e3f2:	d402      	bmi.n	801e3fa <_puts_r+0x22>
 801e3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3f6:	f000 fa3b 	bl	801e870 <__retarget_lock_acquire_recursive>
 801e3fa:	89a3      	ldrh	r3, [r4, #12]
 801e3fc:	0719      	lsls	r1, r3, #28
 801e3fe:	d513      	bpl.n	801e428 <_puts_r+0x50>
 801e400:	6923      	ldr	r3, [r4, #16]
 801e402:	b18b      	cbz	r3, 801e428 <_puts_r+0x50>
 801e404:	3e01      	subs	r6, #1
 801e406:	68a3      	ldr	r3, [r4, #8]
 801e408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e40c:	3b01      	subs	r3, #1
 801e40e:	60a3      	str	r3, [r4, #8]
 801e410:	b9e9      	cbnz	r1, 801e44e <_puts_r+0x76>
 801e412:	2b00      	cmp	r3, #0
 801e414:	da2e      	bge.n	801e474 <_puts_r+0x9c>
 801e416:	4622      	mov	r2, r4
 801e418:	210a      	movs	r1, #10
 801e41a:	4628      	mov	r0, r5
 801e41c:	f000 f89b 	bl	801e556 <__swbuf_r>
 801e420:	3001      	adds	r0, #1
 801e422:	d007      	beq.n	801e434 <_puts_r+0x5c>
 801e424:	250a      	movs	r5, #10
 801e426:	e007      	b.n	801e438 <_puts_r+0x60>
 801e428:	4621      	mov	r1, r4
 801e42a:	4628      	mov	r0, r5
 801e42c:	f000 f8d0 	bl	801e5d0 <__swsetup_r>
 801e430:	2800      	cmp	r0, #0
 801e432:	d0e7      	beq.n	801e404 <_puts_r+0x2c>
 801e434:	f04f 35ff 	mov.w	r5, #4294967295
 801e438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e43a:	07da      	lsls	r2, r3, #31
 801e43c:	d405      	bmi.n	801e44a <_puts_r+0x72>
 801e43e:	89a3      	ldrh	r3, [r4, #12]
 801e440:	059b      	lsls	r3, r3, #22
 801e442:	d402      	bmi.n	801e44a <_puts_r+0x72>
 801e444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e446:	f000 fa14 	bl	801e872 <__retarget_lock_release_recursive>
 801e44a:	4628      	mov	r0, r5
 801e44c:	bd70      	pop	{r4, r5, r6, pc}
 801e44e:	2b00      	cmp	r3, #0
 801e450:	da04      	bge.n	801e45c <_puts_r+0x84>
 801e452:	69a2      	ldr	r2, [r4, #24]
 801e454:	429a      	cmp	r2, r3
 801e456:	dc06      	bgt.n	801e466 <_puts_r+0x8e>
 801e458:	290a      	cmp	r1, #10
 801e45a:	d004      	beq.n	801e466 <_puts_r+0x8e>
 801e45c:	6823      	ldr	r3, [r4, #0]
 801e45e:	1c5a      	adds	r2, r3, #1
 801e460:	6022      	str	r2, [r4, #0]
 801e462:	7019      	strb	r1, [r3, #0]
 801e464:	e7cf      	b.n	801e406 <_puts_r+0x2e>
 801e466:	4622      	mov	r2, r4
 801e468:	4628      	mov	r0, r5
 801e46a:	f000 f874 	bl	801e556 <__swbuf_r>
 801e46e:	3001      	adds	r0, #1
 801e470:	d1c9      	bne.n	801e406 <_puts_r+0x2e>
 801e472:	e7df      	b.n	801e434 <_puts_r+0x5c>
 801e474:	6823      	ldr	r3, [r4, #0]
 801e476:	250a      	movs	r5, #10
 801e478:	1c5a      	adds	r2, r3, #1
 801e47a:	6022      	str	r2, [r4, #0]
 801e47c:	701d      	strb	r5, [r3, #0]
 801e47e:	e7db      	b.n	801e438 <_puts_r+0x60>

0801e480 <puts>:
 801e480:	4b02      	ldr	r3, [pc, #8]	; (801e48c <puts+0xc>)
 801e482:	4601      	mov	r1, r0
 801e484:	6818      	ldr	r0, [r3, #0]
 801e486:	f7ff bfa7 	b.w	801e3d8 <_puts_r>
 801e48a:	bf00      	nop
 801e48c:	200000a0 	.word	0x200000a0

0801e490 <siprintf>:
 801e490:	b40e      	push	{r1, r2, r3}
 801e492:	b500      	push	{lr}
 801e494:	b09c      	sub	sp, #112	; 0x70
 801e496:	ab1d      	add	r3, sp, #116	; 0x74
 801e498:	9002      	str	r0, [sp, #8]
 801e49a:	9006      	str	r0, [sp, #24]
 801e49c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e4a0:	4809      	ldr	r0, [pc, #36]	; (801e4c8 <siprintf+0x38>)
 801e4a2:	9107      	str	r1, [sp, #28]
 801e4a4:	9104      	str	r1, [sp, #16]
 801e4a6:	4909      	ldr	r1, [pc, #36]	; (801e4cc <siprintf+0x3c>)
 801e4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4ac:	9105      	str	r1, [sp, #20]
 801e4ae:	6800      	ldr	r0, [r0, #0]
 801e4b0:	9301      	str	r3, [sp, #4]
 801e4b2:	a902      	add	r1, sp, #8
 801e4b4:	f000 fa9a 	bl	801e9ec <_svfiprintf_r>
 801e4b8:	9b02      	ldr	r3, [sp, #8]
 801e4ba:	2200      	movs	r2, #0
 801e4bc:	701a      	strb	r2, [r3, #0]
 801e4be:	b01c      	add	sp, #112	; 0x70
 801e4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4c4:	b003      	add	sp, #12
 801e4c6:	4770      	bx	lr
 801e4c8:	200000a0 	.word	0x200000a0
 801e4cc:	ffff0208 	.word	0xffff0208

0801e4d0 <__sread>:
 801e4d0:	b510      	push	{r4, lr}
 801e4d2:	460c      	mov	r4, r1
 801e4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4d8:	f000 f96c 	bl	801e7b4 <_read_r>
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	bfab      	itete	ge
 801e4e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e4e2:	89a3      	ldrhlt	r3, [r4, #12]
 801e4e4:	181b      	addge	r3, r3, r0
 801e4e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e4ea:	bfac      	ite	ge
 801e4ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801e4ee:	81a3      	strhlt	r3, [r4, #12]
 801e4f0:	bd10      	pop	{r4, pc}

0801e4f2 <__swrite>:
 801e4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4f6:	461f      	mov	r7, r3
 801e4f8:	898b      	ldrh	r3, [r1, #12]
 801e4fa:	05db      	lsls	r3, r3, #23
 801e4fc:	4605      	mov	r5, r0
 801e4fe:	460c      	mov	r4, r1
 801e500:	4616      	mov	r6, r2
 801e502:	d505      	bpl.n	801e510 <__swrite+0x1e>
 801e504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e508:	2302      	movs	r3, #2
 801e50a:	2200      	movs	r2, #0
 801e50c:	f000 f940 	bl	801e790 <_lseek_r>
 801e510:	89a3      	ldrh	r3, [r4, #12]
 801e512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e51a:	81a3      	strh	r3, [r4, #12]
 801e51c:	4632      	mov	r2, r6
 801e51e:	463b      	mov	r3, r7
 801e520:	4628      	mov	r0, r5
 801e522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e526:	f000 b967 	b.w	801e7f8 <_write_r>

0801e52a <__sseek>:
 801e52a:	b510      	push	{r4, lr}
 801e52c:	460c      	mov	r4, r1
 801e52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e532:	f000 f92d 	bl	801e790 <_lseek_r>
 801e536:	1c43      	adds	r3, r0, #1
 801e538:	89a3      	ldrh	r3, [r4, #12]
 801e53a:	bf15      	itete	ne
 801e53c:	6560      	strne	r0, [r4, #84]	; 0x54
 801e53e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e546:	81a3      	strheq	r3, [r4, #12]
 801e548:	bf18      	it	ne
 801e54a:	81a3      	strhne	r3, [r4, #12]
 801e54c:	bd10      	pop	{r4, pc}

0801e54e <__sclose>:
 801e54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e552:	f000 b8b7 	b.w	801e6c4 <_close_r>

0801e556 <__swbuf_r>:
 801e556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e558:	460e      	mov	r6, r1
 801e55a:	4614      	mov	r4, r2
 801e55c:	4605      	mov	r5, r0
 801e55e:	b118      	cbz	r0, 801e568 <__swbuf_r+0x12>
 801e560:	6a03      	ldr	r3, [r0, #32]
 801e562:	b90b      	cbnz	r3, 801e568 <__swbuf_r+0x12>
 801e564:	f7ff fee8 	bl	801e338 <__sinit>
 801e568:	69a3      	ldr	r3, [r4, #24]
 801e56a:	60a3      	str	r3, [r4, #8]
 801e56c:	89a3      	ldrh	r3, [r4, #12]
 801e56e:	071a      	lsls	r2, r3, #28
 801e570:	d525      	bpl.n	801e5be <__swbuf_r+0x68>
 801e572:	6923      	ldr	r3, [r4, #16]
 801e574:	b31b      	cbz	r3, 801e5be <__swbuf_r+0x68>
 801e576:	6823      	ldr	r3, [r4, #0]
 801e578:	6922      	ldr	r2, [r4, #16]
 801e57a:	1a98      	subs	r0, r3, r2
 801e57c:	6963      	ldr	r3, [r4, #20]
 801e57e:	b2f6      	uxtb	r6, r6
 801e580:	4283      	cmp	r3, r0
 801e582:	4637      	mov	r7, r6
 801e584:	dc04      	bgt.n	801e590 <__swbuf_r+0x3a>
 801e586:	4621      	mov	r1, r4
 801e588:	4628      	mov	r0, r5
 801e58a:	f000 fe87 	bl	801f29c <_fflush_r>
 801e58e:	b9e0      	cbnz	r0, 801e5ca <__swbuf_r+0x74>
 801e590:	68a3      	ldr	r3, [r4, #8]
 801e592:	3b01      	subs	r3, #1
 801e594:	60a3      	str	r3, [r4, #8]
 801e596:	6823      	ldr	r3, [r4, #0]
 801e598:	1c5a      	adds	r2, r3, #1
 801e59a:	6022      	str	r2, [r4, #0]
 801e59c:	701e      	strb	r6, [r3, #0]
 801e59e:	6962      	ldr	r2, [r4, #20]
 801e5a0:	1c43      	adds	r3, r0, #1
 801e5a2:	429a      	cmp	r2, r3
 801e5a4:	d004      	beq.n	801e5b0 <__swbuf_r+0x5a>
 801e5a6:	89a3      	ldrh	r3, [r4, #12]
 801e5a8:	07db      	lsls	r3, r3, #31
 801e5aa:	d506      	bpl.n	801e5ba <__swbuf_r+0x64>
 801e5ac:	2e0a      	cmp	r6, #10
 801e5ae:	d104      	bne.n	801e5ba <__swbuf_r+0x64>
 801e5b0:	4621      	mov	r1, r4
 801e5b2:	4628      	mov	r0, r5
 801e5b4:	f000 fe72 	bl	801f29c <_fflush_r>
 801e5b8:	b938      	cbnz	r0, 801e5ca <__swbuf_r+0x74>
 801e5ba:	4638      	mov	r0, r7
 801e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5be:	4621      	mov	r1, r4
 801e5c0:	4628      	mov	r0, r5
 801e5c2:	f000 f805 	bl	801e5d0 <__swsetup_r>
 801e5c6:	2800      	cmp	r0, #0
 801e5c8:	d0d5      	beq.n	801e576 <__swbuf_r+0x20>
 801e5ca:	f04f 37ff 	mov.w	r7, #4294967295
 801e5ce:	e7f4      	b.n	801e5ba <__swbuf_r+0x64>

0801e5d0 <__swsetup_r>:
 801e5d0:	b538      	push	{r3, r4, r5, lr}
 801e5d2:	4b2a      	ldr	r3, [pc, #168]	; (801e67c <__swsetup_r+0xac>)
 801e5d4:	4605      	mov	r5, r0
 801e5d6:	6818      	ldr	r0, [r3, #0]
 801e5d8:	460c      	mov	r4, r1
 801e5da:	b118      	cbz	r0, 801e5e4 <__swsetup_r+0x14>
 801e5dc:	6a03      	ldr	r3, [r0, #32]
 801e5de:	b90b      	cbnz	r3, 801e5e4 <__swsetup_r+0x14>
 801e5e0:	f7ff feaa 	bl	801e338 <__sinit>
 801e5e4:	89a3      	ldrh	r3, [r4, #12]
 801e5e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e5ea:	0718      	lsls	r0, r3, #28
 801e5ec:	d422      	bmi.n	801e634 <__swsetup_r+0x64>
 801e5ee:	06d9      	lsls	r1, r3, #27
 801e5f0:	d407      	bmi.n	801e602 <__swsetup_r+0x32>
 801e5f2:	2309      	movs	r3, #9
 801e5f4:	602b      	str	r3, [r5, #0]
 801e5f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e5fa:	81a3      	strh	r3, [r4, #12]
 801e5fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e600:	e034      	b.n	801e66c <__swsetup_r+0x9c>
 801e602:	0758      	lsls	r0, r3, #29
 801e604:	d512      	bpl.n	801e62c <__swsetup_r+0x5c>
 801e606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e608:	b141      	cbz	r1, 801e61c <__swsetup_r+0x4c>
 801e60a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e60e:	4299      	cmp	r1, r3
 801e610:	d002      	beq.n	801e618 <__swsetup_r+0x48>
 801e612:	4628      	mov	r0, r5
 801e614:	f000 f944 	bl	801e8a0 <_free_r>
 801e618:	2300      	movs	r3, #0
 801e61a:	6363      	str	r3, [r4, #52]	; 0x34
 801e61c:	89a3      	ldrh	r3, [r4, #12]
 801e61e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e622:	81a3      	strh	r3, [r4, #12]
 801e624:	2300      	movs	r3, #0
 801e626:	6063      	str	r3, [r4, #4]
 801e628:	6923      	ldr	r3, [r4, #16]
 801e62a:	6023      	str	r3, [r4, #0]
 801e62c:	89a3      	ldrh	r3, [r4, #12]
 801e62e:	f043 0308 	orr.w	r3, r3, #8
 801e632:	81a3      	strh	r3, [r4, #12]
 801e634:	6923      	ldr	r3, [r4, #16]
 801e636:	b94b      	cbnz	r3, 801e64c <__swsetup_r+0x7c>
 801e638:	89a3      	ldrh	r3, [r4, #12]
 801e63a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e642:	d003      	beq.n	801e64c <__swsetup_r+0x7c>
 801e644:	4621      	mov	r1, r4
 801e646:	4628      	mov	r0, r5
 801e648:	f000 fe76 	bl	801f338 <__smakebuf_r>
 801e64c:	89a0      	ldrh	r0, [r4, #12]
 801e64e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e652:	f010 0301 	ands.w	r3, r0, #1
 801e656:	d00a      	beq.n	801e66e <__swsetup_r+0x9e>
 801e658:	2300      	movs	r3, #0
 801e65a:	60a3      	str	r3, [r4, #8]
 801e65c:	6963      	ldr	r3, [r4, #20]
 801e65e:	425b      	negs	r3, r3
 801e660:	61a3      	str	r3, [r4, #24]
 801e662:	6923      	ldr	r3, [r4, #16]
 801e664:	b943      	cbnz	r3, 801e678 <__swsetup_r+0xa8>
 801e666:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e66a:	d1c4      	bne.n	801e5f6 <__swsetup_r+0x26>
 801e66c:	bd38      	pop	{r3, r4, r5, pc}
 801e66e:	0781      	lsls	r1, r0, #30
 801e670:	bf58      	it	pl
 801e672:	6963      	ldrpl	r3, [r4, #20]
 801e674:	60a3      	str	r3, [r4, #8]
 801e676:	e7f4      	b.n	801e662 <__swsetup_r+0x92>
 801e678:	2000      	movs	r0, #0
 801e67a:	e7f7      	b.n	801e66c <__swsetup_r+0x9c>
 801e67c:	200000a0 	.word	0x200000a0

0801e680 <memmove>:
 801e680:	4288      	cmp	r0, r1
 801e682:	b510      	push	{r4, lr}
 801e684:	eb01 0402 	add.w	r4, r1, r2
 801e688:	d902      	bls.n	801e690 <memmove+0x10>
 801e68a:	4284      	cmp	r4, r0
 801e68c:	4623      	mov	r3, r4
 801e68e:	d807      	bhi.n	801e6a0 <memmove+0x20>
 801e690:	1e43      	subs	r3, r0, #1
 801e692:	42a1      	cmp	r1, r4
 801e694:	d008      	beq.n	801e6a8 <memmove+0x28>
 801e696:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e69e:	e7f8      	b.n	801e692 <memmove+0x12>
 801e6a0:	4402      	add	r2, r0
 801e6a2:	4601      	mov	r1, r0
 801e6a4:	428a      	cmp	r2, r1
 801e6a6:	d100      	bne.n	801e6aa <memmove+0x2a>
 801e6a8:	bd10      	pop	{r4, pc}
 801e6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e6b2:	e7f7      	b.n	801e6a4 <memmove+0x24>

0801e6b4 <memset>:
 801e6b4:	4402      	add	r2, r0
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	4293      	cmp	r3, r2
 801e6ba:	d100      	bne.n	801e6be <memset+0xa>
 801e6bc:	4770      	bx	lr
 801e6be:	f803 1b01 	strb.w	r1, [r3], #1
 801e6c2:	e7f9      	b.n	801e6b8 <memset+0x4>

0801e6c4 <_close_r>:
 801e6c4:	b538      	push	{r3, r4, r5, lr}
 801e6c6:	4d06      	ldr	r5, [pc, #24]	; (801e6e0 <_close_r+0x1c>)
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	4604      	mov	r4, r0
 801e6cc:	4608      	mov	r0, r1
 801e6ce:	602b      	str	r3, [r5, #0]
 801e6d0:	f7e7 fe7f 	bl	80063d2 <_close>
 801e6d4:	1c43      	adds	r3, r0, #1
 801e6d6:	d102      	bne.n	801e6de <_close_r+0x1a>
 801e6d8:	682b      	ldr	r3, [r5, #0]
 801e6da:	b103      	cbz	r3, 801e6de <_close_r+0x1a>
 801e6dc:	6023      	str	r3, [r4, #0]
 801e6de:	bd38      	pop	{r3, r4, r5, pc}
 801e6e0:	2001e644 	.word	0x2001e644

0801e6e4 <_reclaim_reent>:
 801e6e4:	4b29      	ldr	r3, [pc, #164]	; (801e78c <_reclaim_reent+0xa8>)
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	4283      	cmp	r3, r0
 801e6ea:	b570      	push	{r4, r5, r6, lr}
 801e6ec:	4604      	mov	r4, r0
 801e6ee:	d04b      	beq.n	801e788 <_reclaim_reent+0xa4>
 801e6f0:	69c3      	ldr	r3, [r0, #28]
 801e6f2:	b143      	cbz	r3, 801e706 <_reclaim_reent+0x22>
 801e6f4:	68db      	ldr	r3, [r3, #12]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d144      	bne.n	801e784 <_reclaim_reent+0xa0>
 801e6fa:	69e3      	ldr	r3, [r4, #28]
 801e6fc:	6819      	ldr	r1, [r3, #0]
 801e6fe:	b111      	cbz	r1, 801e706 <_reclaim_reent+0x22>
 801e700:	4620      	mov	r0, r4
 801e702:	f000 f8cd 	bl	801e8a0 <_free_r>
 801e706:	6961      	ldr	r1, [r4, #20]
 801e708:	b111      	cbz	r1, 801e710 <_reclaim_reent+0x2c>
 801e70a:	4620      	mov	r0, r4
 801e70c:	f000 f8c8 	bl	801e8a0 <_free_r>
 801e710:	69e1      	ldr	r1, [r4, #28]
 801e712:	b111      	cbz	r1, 801e71a <_reclaim_reent+0x36>
 801e714:	4620      	mov	r0, r4
 801e716:	f000 f8c3 	bl	801e8a0 <_free_r>
 801e71a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e71c:	b111      	cbz	r1, 801e724 <_reclaim_reent+0x40>
 801e71e:	4620      	mov	r0, r4
 801e720:	f000 f8be 	bl	801e8a0 <_free_r>
 801e724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e726:	b111      	cbz	r1, 801e72e <_reclaim_reent+0x4a>
 801e728:	4620      	mov	r0, r4
 801e72a:	f000 f8b9 	bl	801e8a0 <_free_r>
 801e72e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e730:	b111      	cbz	r1, 801e738 <_reclaim_reent+0x54>
 801e732:	4620      	mov	r0, r4
 801e734:	f000 f8b4 	bl	801e8a0 <_free_r>
 801e738:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e73a:	b111      	cbz	r1, 801e742 <_reclaim_reent+0x5e>
 801e73c:	4620      	mov	r0, r4
 801e73e:	f000 f8af 	bl	801e8a0 <_free_r>
 801e742:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e744:	b111      	cbz	r1, 801e74c <_reclaim_reent+0x68>
 801e746:	4620      	mov	r0, r4
 801e748:	f000 f8aa 	bl	801e8a0 <_free_r>
 801e74c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801e74e:	b111      	cbz	r1, 801e756 <_reclaim_reent+0x72>
 801e750:	4620      	mov	r0, r4
 801e752:	f000 f8a5 	bl	801e8a0 <_free_r>
 801e756:	6a23      	ldr	r3, [r4, #32]
 801e758:	b1b3      	cbz	r3, 801e788 <_reclaim_reent+0xa4>
 801e75a:	4620      	mov	r0, r4
 801e75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e760:	4718      	bx	r3
 801e762:	5949      	ldr	r1, [r1, r5]
 801e764:	b941      	cbnz	r1, 801e778 <_reclaim_reent+0x94>
 801e766:	3504      	adds	r5, #4
 801e768:	69e3      	ldr	r3, [r4, #28]
 801e76a:	2d80      	cmp	r5, #128	; 0x80
 801e76c:	68d9      	ldr	r1, [r3, #12]
 801e76e:	d1f8      	bne.n	801e762 <_reclaim_reent+0x7e>
 801e770:	4620      	mov	r0, r4
 801e772:	f000 f895 	bl	801e8a0 <_free_r>
 801e776:	e7c0      	b.n	801e6fa <_reclaim_reent+0x16>
 801e778:	680e      	ldr	r6, [r1, #0]
 801e77a:	4620      	mov	r0, r4
 801e77c:	f000 f890 	bl	801e8a0 <_free_r>
 801e780:	4631      	mov	r1, r6
 801e782:	e7ef      	b.n	801e764 <_reclaim_reent+0x80>
 801e784:	2500      	movs	r5, #0
 801e786:	e7ef      	b.n	801e768 <_reclaim_reent+0x84>
 801e788:	bd70      	pop	{r4, r5, r6, pc}
 801e78a:	bf00      	nop
 801e78c:	200000a0 	.word	0x200000a0

0801e790 <_lseek_r>:
 801e790:	b538      	push	{r3, r4, r5, lr}
 801e792:	4d07      	ldr	r5, [pc, #28]	; (801e7b0 <_lseek_r+0x20>)
 801e794:	4604      	mov	r4, r0
 801e796:	4608      	mov	r0, r1
 801e798:	4611      	mov	r1, r2
 801e79a:	2200      	movs	r2, #0
 801e79c:	602a      	str	r2, [r5, #0]
 801e79e:	461a      	mov	r2, r3
 801e7a0:	f7e7 fe3e 	bl	8006420 <_lseek>
 801e7a4:	1c43      	adds	r3, r0, #1
 801e7a6:	d102      	bne.n	801e7ae <_lseek_r+0x1e>
 801e7a8:	682b      	ldr	r3, [r5, #0]
 801e7aa:	b103      	cbz	r3, 801e7ae <_lseek_r+0x1e>
 801e7ac:	6023      	str	r3, [r4, #0]
 801e7ae:	bd38      	pop	{r3, r4, r5, pc}
 801e7b0:	2001e644 	.word	0x2001e644

0801e7b4 <_read_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	4d07      	ldr	r5, [pc, #28]	; (801e7d4 <_read_r+0x20>)
 801e7b8:	4604      	mov	r4, r0
 801e7ba:	4608      	mov	r0, r1
 801e7bc:	4611      	mov	r1, r2
 801e7be:	2200      	movs	r2, #0
 801e7c0:	602a      	str	r2, [r5, #0]
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	f7e7 fdcc 	bl	8006360 <_read>
 801e7c8:	1c43      	adds	r3, r0, #1
 801e7ca:	d102      	bne.n	801e7d2 <_read_r+0x1e>
 801e7cc:	682b      	ldr	r3, [r5, #0]
 801e7ce:	b103      	cbz	r3, 801e7d2 <_read_r+0x1e>
 801e7d0:	6023      	str	r3, [r4, #0]
 801e7d2:	bd38      	pop	{r3, r4, r5, pc}
 801e7d4:	2001e644 	.word	0x2001e644

0801e7d8 <_sbrk_r>:
 801e7d8:	b538      	push	{r3, r4, r5, lr}
 801e7da:	4d06      	ldr	r5, [pc, #24]	; (801e7f4 <_sbrk_r+0x1c>)
 801e7dc:	2300      	movs	r3, #0
 801e7de:	4604      	mov	r4, r0
 801e7e0:	4608      	mov	r0, r1
 801e7e2:	602b      	str	r3, [r5, #0]
 801e7e4:	f7e7 fe2a 	bl	800643c <_sbrk>
 801e7e8:	1c43      	adds	r3, r0, #1
 801e7ea:	d102      	bne.n	801e7f2 <_sbrk_r+0x1a>
 801e7ec:	682b      	ldr	r3, [r5, #0]
 801e7ee:	b103      	cbz	r3, 801e7f2 <_sbrk_r+0x1a>
 801e7f0:	6023      	str	r3, [r4, #0]
 801e7f2:	bd38      	pop	{r3, r4, r5, pc}
 801e7f4:	2001e644 	.word	0x2001e644

0801e7f8 <_write_r>:
 801e7f8:	b538      	push	{r3, r4, r5, lr}
 801e7fa:	4d07      	ldr	r5, [pc, #28]	; (801e818 <_write_r+0x20>)
 801e7fc:	4604      	mov	r4, r0
 801e7fe:	4608      	mov	r0, r1
 801e800:	4611      	mov	r1, r2
 801e802:	2200      	movs	r2, #0
 801e804:	602a      	str	r2, [r5, #0]
 801e806:	461a      	mov	r2, r3
 801e808:	f7e7 fdc7 	bl	800639a <_write>
 801e80c:	1c43      	adds	r3, r0, #1
 801e80e:	d102      	bne.n	801e816 <_write_r+0x1e>
 801e810:	682b      	ldr	r3, [r5, #0]
 801e812:	b103      	cbz	r3, 801e816 <_write_r+0x1e>
 801e814:	6023      	str	r3, [r4, #0]
 801e816:	bd38      	pop	{r3, r4, r5, pc}
 801e818:	2001e644 	.word	0x2001e644

0801e81c <__errno>:
 801e81c:	4b01      	ldr	r3, [pc, #4]	; (801e824 <__errno+0x8>)
 801e81e:	6818      	ldr	r0, [r3, #0]
 801e820:	4770      	bx	lr
 801e822:	bf00      	nop
 801e824:	200000a0 	.word	0x200000a0

0801e828 <__libc_init_array>:
 801e828:	b570      	push	{r4, r5, r6, lr}
 801e82a:	4d0d      	ldr	r5, [pc, #52]	; (801e860 <__libc_init_array+0x38>)
 801e82c:	4c0d      	ldr	r4, [pc, #52]	; (801e864 <__libc_init_array+0x3c>)
 801e82e:	1b64      	subs	r4, r4, r5
 801e830:	10a4      	asrs	r4, r4, #2
 801e832:	2600      	movs	r6, #0
 801e834:	42a6      	cmp	r6, r4
 801e836:	d109      	bne.n	801e84c <__libc_init_array+0x24>
 801e838:	4d0b      	ldr	r5, [pc, #44]	; (801e868 <__libc_init_array+0x40>)
 801e83a:	4c0c      	ldr	r4, [pc, #48]	; (801e86c <__libc_init_array+0x44>)
 801e83c:	f000 fe46 	bl	801f4cc <_init>
 801e840:	1b64      	subs	r4, r4, r5
 801e842:	10a4      	asrs	r4, r4, #2
 801e844:	2600      	movs	r6, #0
 801e846:	42a6      	cmp	r6, r4
 801e848:	d105      	bne.n	801e856 <__libc_init_array+0x2e>
 801e84a:	bd70      	pop	{r4, r5, r6, pc}
 801e84c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e850:	4798      	blx	r3
 801e852:	3601      	adds	r6, #1
 801e854:	e7ee      	b.n	801e834 <__libc_init_array+0xc>
 801e856:	f855 3b04 	ldr.w	r3, [r5], #4
 801e85a:	4798      	blx	r3
 801e85c:	3601      	adds	r6, #1
 801e85e:	e7f2      	b.n	801e846 <__libc_init_array+0x1e>
 801e860:	080291b8 	.word	0x080291b8
 801e864:	080291b8 	.word	0x080291b8
 801e868:	080291b8 	.word	0x080291b8
 801e86c:	080291bc 	.word	0x080291bc

0801e870 <__retarget_lock_acquire_recursive>:
 801e870:	4770      	bx	lr

0801e872 <__retarget_lock_release_recursive>:
 801e872:	4770      	bx	lr

0801e874 <strcpy>:
 801e874:	4603      	mov	r3, r0
 801e876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e87a:	f803 2b01 	strb.w	r2, [r3], #1
 801e87e:	2a00      	cmp	r2, #0
 801e880:	d1f9      	bne.n	801e876 <strcpy+0x2>
 801e882:	4770      	bx	lr

0801e884 <memcpy>:
 801e884:	440a      	add	r2, r1
 801e886:	4291      	cmp	r1, r2
 801e888:	f100 33ff 	add.w	r3, r0, #4294967295
 801e88c:	d100      	bne.n	801e890 <memcpy+0xc>
 801e88e:	4770      	bx	lr
 801e890:	b510      	push	{r4, lr}
 801e892:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e896:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e89a:	4291      	cmp	r1, r2
 801e89c:	d1f9      	bne.n	801e892 <memcpy+0xe>
 801e89e:	bd10      	pop	{r4, pc}

0801e8a0 <_free_r>:
 801e8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8a2:	2900      	cmp	r1, #0
 801e8a4:	d044      	beq.n	801e930 <_free_r+0x90>
 801e8a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e8aa:	9001      	str	r0, [sp, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	f1a1 0404 	sub.w	r4, r1, #4
 801e8b2:	bfb8      	it	lt
 801e8b4:	18e4      	addlt	r4, r4, r3
 801e8b6:	f7ff fcb9 	bl	801e22c <__malloc_lock>
 801e8ba:	4a1e      	ldr	r2, [pc, #120]	; (801e934 <_free_r+0x94>)
 801e8bc:	9801      	ldr	r0, [sp, #4]
 801e8be:	6813      	ldr	r3, [r2, #0]
 801e8c0:	b933      	cbnz	r3, 801e8d0 <_free_r+0x30>
 801e8c2:	6063      	str	r3, [r4, #4]
 801e8c4:	6014      	str	r4, [r2, #0]
 801e8c6:	b003      	add	sp, #12
 801e8c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e8cc:	f7ff bcb4 	b.w	801e238 <__malloc_unlock>
 801e8d0:	42a3      	cmp	r3, r4
 801e8d2:	d908      	bls.n	801e8e6 <_free_r+0x46>
 801e8d4:	6825      	ldr	r5, [r4, #0]
 801e8d6:	1961      	adds	r1, r4, r5
 801e8d8:	428b      	cmp	r3, r1
 801e8da:	bf01      	itttt	eq
 801e8dc:	6819      	ldreq	r1, [r3, #0]
 801e8de:	685b      	ldreq	r3, [r3, #4]
 801e8e0:	1949      	addeq	r1, r1, r5
 801e8e2:	6021      	streq	r1, [r4, #0]
 801e8e4:	e7ed      	b.n	801e8c2 <_free_r+0x22>
 801e8e6:	461a      	mov	r2, r3
 801e8e8:	685b      	ldr	r3, [r3, #4]
 801e8ea:	b10b      	cbz	r3, 801e8f0 <_free_r+0x50>
 801e8ec:	42a3      	cmp	r3, r4
 801e8ee:	d9fa      	bls.n	801e8e6 <_free_r+0x46>
 801e8f0:	6811      	ldr	r1, [r2, #0]
 801e8f2:	1855      	adds	r5, r2, r1
 801e8f4:	42a5      	cmp	r5, r4
 801e8f6:	d10b      	bne.n	801e910 <_free_r+0x70>
 801e8f8:	6824      	ldr	r4, [r4, #0]
 801e8fa:	4421      	add	r1, r4
 801e8fc:	1854      	adds	r4, r2, r1
 801e8fe:	42a3      	cmp	r3, r4
 801e900:	6011      	str	r1, [r2, #0]
 801e902:	d1e0      	bne.n	801e8c6 <_free_r+0x26>
 801e904:	681c      	ldr	r4, [r3, #0]
 801e906:	685b      	ldr	r3, [r3, #4]
 801e908:	6053      	str	r3, [r2, #4]
 801e90a:	440c      	add	r4, r1
 801e90c:	6014      	str	r4, [r2, #0]
 801e90e:	e7da      	b.n	801e8c6 <_free_r+0x26>
 801e910:	d902      	bls.n	801e918 <_free_r+0x78>
 801e912:	230c      	movs	r3, #12
 801e914:	6003      	str	r3, [r0, #0]
 801e916:	e7d6      	b.n	801e8c6 <_free_r+0x26>
 801e918:	6825      	ldr	r5, [r4, #0]
 801e91a:	1961      	adds	r1, r4, r5
 801e91c:	428b      	cmp	r3, r1
 801e91e:	bf04      	itt	eq
 801e920:	6819      	ldreq	r1, [r3, #0]
 801e922:	685b      	ldreq	r3, [r3, #4]
 801e924:	6063      	str	r3, [r4, #4]
 801e926:	bf04      	itt	eq
 801e928:	1949      	addeq	r1, r1, r5
 801e92a:	6021      	streq	r1, [r4, #0]
 801e92c:	6054      	str	r4, [r2, #4]
 801e92e:	e7ca      	b.n	801e8c6 <_free_r+0x26>
 801e930:	b003      	add	sp, #12
 801e932:	bd30      	pop	{r4, r5, pc}
 801e934:	2001e500 	.word	0x2001e500

0801e938 <__ssputs_r>:
 801e938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e93c:	688e      	ldr	r6, [r1, #8]
 801e93e:	461f      	mov	r7, r3
 801e940:	42be      	cmp	r6, r7
 801e942:	680b      	ldr	r3, [r1, #0]
 801e944:	4682      	mov	sl, r0
 801e946:	460c      	mov	r4, r1
 801e948:	4690      	mov	r8, r2
 801e94a:	d82c      	bhi.n	801e9a6 <__ssputs_r+0x6e>
 801e94c:	898a      	ldrh	r2, [r1, #12]
 801e94e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e952:	d026      	beq.n	801e9a2 <__ssputs_r+0x6a>
 801e954:	6965      	ldr	r5, [r4, #20]
 801e956:	6909      	ldr	r1, [r1, #16]
 801e958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e95c:	eba3 0901 	sub.w	r9, r3, r1
 801e960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e964:	1c7b      	adds	r3, r7, #1
 801e966:	444b      	add	r3, r9
 801e968:	106d      	asrs	r5, r5, #1
 801e96a:	429d      	cmp	r5, r3
 801e96c:	bf38      	it	cc
 801e96e:	461d      	movcc	r5, r3
 801e970:	0553      	lsls	r3, r2, #21
 801e972:	d527      	bpl.n	801e9c4 <__ssputs_r+0x8c>
 801e974:	4629      	mov	r1, r5
 801e976:	f7ff fbd9 	bl	801e12c <_malloc_r>
 801e97a:	4606      	mov	r6, r0
 801e97c:	b360      	cbz	r0, 801e9d8 <__ssputs_r+0xa0>
 801e97e:	6921      	ldr	r1, [r4, #16]
 801e980:	464a      	mov	r2, r9
 801e982:	f7ff ff7f 	bl	801e884 <memcpy>
 801e986:	89a3      	ldrh	r3, [r4, #12]
 801e988:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e990:	81a3      	strh	r3, [r4, #12]
 801e992:	6126      	str	r6, [r4, #16]
 801e994:	6165      	str	r5, [r4, #20]
 801e996:	444e      	add	r6, r9
 801e998:	eba5 0509 	sub.w	r5, r5, r9
 801e99c:	6026      	str	r6, [r4, #0]
 801e99e:	60a5      	str	r5, [r4, #8]
 801e9a0:	463e      	mov	r6, r7
 801e9a2:	42be      	cmp	r6, r7
 801e9a4:	d900      	bls.n	801e9a8 <__ssputs_r+0x70>
 801e9a6:	463e      	mov	r6, r7
 801e9a8:	6820      	ldr	r0, [r4, #0]
 801e9aa:	4632      	mov	r2, r6
 801e9ac:	4641      	mov	r1, r8
 801e9ae:	f7ff fe67 	bl	801e680 <memmove>
 801e9b2:	68a3      	ldr	r3, [r4, #8]
 801e9b4:	1b9b      	subs	r3, r3, r6
 801e9b6:	60a3      	str	r3, [r4, #8]
 801e9b8:	6823      	ldr	r3, [r4, #0]
 801e9ba:	4433      	add	r3, r6
 801e9bc:	6023      	str	r3, [r4, #0]
 801e9be:	2000      	movs	r0, #0
 801e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9c4:	462a      	mov	r2, r5
 801e9c6:	f000 fd49 	bl	801f45c <_realloc_r>
 801e9ca:	4606      	mov	r6, r0
 801e9cc:	2800      	cmp	r0, #0
 801e9ce:	d1e0      	bne.n	801e992 <__ssputs_r+0x5a>
 801e9d0:	6921      	ldr	r1, [r4, #16]
 801e9d2:	4650      	mov	r0, sl
 801e9d4:	f7ff ff64 	bl	801e8a0 <_free_r>
 801e9d8:	230c      	movs	r3, #12
 801e9da:	f8ca 3000 	str.w	r3, [sl]
 801e9de:	89a3      	ldrh	r3, [r4, #12]
 801e9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9e4:	81a3      	strh	r3, [r4, #12]
 801e9e6:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ea:	e7e9      	b.n	801e9c0 <__ssputs_r+0x88>

0801e9ec <_svfiprintf_r>:
 801e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f0:	4698      	mov	r8, r3
 801e9f2:	898b      	ldrh	r3, [r1, #12]
 801e9f4:	061b      	lsls	r3, r3, #24
 801e9f6:	b09d      	sub	sp, #116	; 0x74
 801e9f8:	4607      	mov	r7, r0
 801e9fa:	460d      	mov	r5, r1
 801e9fc:	4614      	mov	r4, r2
 801e9fe:	d50e      	bpl.n	801ea1e <_svfiprintf_r+0x32>
 801ea00:	690b      	ldr	r3, [r1, #16]
 801ea02:	b963      	cbnz	r3, 801ea1e <_svfiprintf_r+0x32>
 801ea04:	2140      	movs	r1, #64	; 0x40
 801ea06:	f7ff fb91 	bl	801e12c <_malloc_r>
 801ea0a:	6028      	str	r0, [r5, #0]
 801ea0c:	6128      	str	r0, [r5, #16]
 801ea0e:	b920      	cbnz	r0, 801ea1a <_svfiprintf_r+0x2e>
 801ea10:	230c      	movs	r3, #12
 801ea12:	603b      	str	r3, [r7, #0]
 801ea14:	f04f 30ff 	mov.w	r0, #4294967295
 801ea18:	e0d0      	b.n	801ebbc <_svfiprintf_r+0x1d0>
 801ea1a:	2340      	movs	r3, #64	; 0x40
 801ea1c:	616b      	str	r3, [r5, #20]
 801ea1e:	2300      	movs	r3, #0
 801ea20:	9309      	str	r3, [sp, #36]	; 0x24
 801ea22:	2320      	movs	r3, #32
 801ea24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ea28:	f8cd 800c 	str.w	r8, [sp, #12]
 801ea2c:	2330      	movs	r3, #48	; 0x30
 801ea2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ebd4 <_svfiprintf_r+0x1e8>
 801ea32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ea36:	f04f 0901 	mov.w	r9, #1
 801ea3a:	4623      	mov	r3, r4
 801ea3c:	469a      	mov	sl, r3
 801ea3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea42:	b10a      	cbz	r2, 801ea48 <_svfiprintf_r+0x5c>
 801ea44:	2a25      	cmp	r2, #37	; 0x25
 801ea46:	d1f9      	bne.n	801ea3c <_svfiprintf_r+0x50>
 801ea48:	ebba 0b04 	subs.w	fp, sl, r4
 801ea4c:	d00b      	beq.n	801ea66 <_svfiprintf_r+0x7a>
 801ea4e:	465b      	mov	r3, fp
 801ea50:	4622      	mov	r2, r4
 801ea52:	4629      	mov	r1, r5
 801ea54:	4638      	mov	r0, r7
 801ea56:	f7ff ff6f 	bl	801e938 <__ssputs_r>
 801ea5a:	3001      	adds	r0, #1
 801ea5c:	f000 80a9 	beq.w	801ebb2 <_svfiprintf_r+0x1c6>
 801ea60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea62:	445a      	add	r2, fp
 801ea64:	9209      	str	r2, [sp, #36]	; 0x24
 801ea66:	f89a 3000 	ldrb.w	r3, [sl]
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	f000 80a1 	beq.w	801ebb2 <_svfiprintf_r+0x1c6>
 801ea70:	2300      	movs	r3, #0
 801ea72:	f04f 32ff 	mov.w	r2, #4294967295
 801ea76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea7a:	f10a 0a01 	add.w	sl, sl, #1
 801ea7e:	9304      	str	r3, [sp, #16]
 801ea80:	9307      	str	r3, [sp, #28]
 801ea82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ea86:	931a      	str	r3, [sp, #104]	; 0x68
 801ea88:	4654      	mov	r4, sl
 801ea8a:	2205      	movs	r2, #5
 801ea8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea90:	4850      	ldr	r0, [pc, #320]	; (801ebd4 <_svfiprintf_r+0x1e8>)
 801ea92:	f7e1 fbc5 	bl	8000220 <memchr>
 801ea96:	9a04      	ldr	r2, [sp, #16]
 801ea98:	b9d8      	cbnz	r0, 801ead2 <_svfiprintf_r+0xe6>
 801ea9a:	06d0      	lsls	r0, r2, #27
 801ea9c:	bf44      	itt	mi
 801ea9e:	2320      	movmi	r3, #32
 801eaa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eaa4:	0711      	lsls	r1, r2, #28
 801eaa6:	bf44      	itt	mi
 801eaa8:	232b      	movmi	r3, #43	; 0x2b
 801eaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eaae:	f89a 3000 	ldrb.w	r3, [sl]
 801eab2:	2b2a      	cmp	r3, #42	; 0x2a
 801eab4:	d015      	beq.n	801eae2 <_svfiprintf_r+0xf6>
 801eab6:	9a07      	ldr	r2, [sp, #28]
 801eab8:	4654      	mov	r4, sl
 801eaba:	2000      	movs	r0, #0
 801eabc:	f04f 0c0a 	mov.w	ip, #10
 801eac0:	4621      	mov	r1, r4
 801eac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eac6:	3b30      	subs	r3, #48	; 0x30
 801eac8:	2b09      	cmp	r3, #9
 801eaca:	d94d      	bls.n	801eb68 <_svfiprintf_r+0x17c>
 801eacc:	b1b0      	cbz	r0, 801eafc <_svfiprintf_r+0x110>
 801eace:	9207      	str	r2, [sp, #28]
 801ead0:	e014      	b.n	801eafc <_svfiprintf_r+0x110>
 801ead2:	eba0 0308 	sub.w	r3, r0, r8
 801ead6:	fa09 f303 	lsl.w	r3, r9, r3
 801eada:	4313      	orrs	r3, r2
 801eadc:	9304      	str	r3, [sp, #16]
 801eade:	46a2      	mov	sl, r4
 801eae0:	e7d2      	b.n	801ea88 <_svfiprintf_r+0x9c>
 801eae2:	9b03      	ldr	r3, [sp, #12]
 801eae4:	1d19      	adds	r1, r3, #4
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	9103      	str	r1, [sp, #12]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	bfbb      	ittet	lt
 801eaee:	425b      	neglt	r3, r3
 801eaf0:	f042 0202 	orrlt.w	r2, r2, #2
 801eaf4:	9307      	strge	r3, [sp, #28]
 801eaf6:	9307      	strlt	r3, [sp, #28]
 801eaf8:	bfb8      	it	lt
 801eafa:	9204      	strlt	r2, [sp, #16]
 801eafc:	7823      	ldrb	r3, [r4, #0]
 801eafe:	2b2e      	cmp	r3, #46	; 0x2e
 801eb00:	d10c      	bne.n	801eb1c <_svfiprintf_r+0x130>
 801eb02:	7863      	ldrb	r3, [r4, #1]
 801eb04:	2b2a      	cmp	r3, #42	; 0x2a
 801eb06:	d134      	bne.n	801eb72 <_svfiprintf_r+0x186>
 801eb08:	9b03      	ldr	r3, [sp, #12]
 801eb0a:	1d1a      	adds	r2, r3, #4
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	9203      	str	r2, [sp, #12]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	bfb8      	it	lt
 801eb14:	f04f 33ff 	movlt.w	r3, #4294967295
 801eb18:	3402      	adds	r4, #2
 801eb1a:	9305      	str	r3, [sp, #20]
 801eb1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ebe4 <_svfiprintf_r+0x1f8>
 801eb20:	7821      	ldrb	r1, [r4, #0]
 801eb22:	2203      	movs	r2, #3
 801eb24:	4650      	mov	r0, sl
 801eb26:	f7e1 fb7b 	bl	8000220 <memchr>
 801eb2a:	b138      	cbz	r0, 801eb3c <_svfiprintf_r+0x150>
 801eb2c:	9b04      	ldr	r3, [sp, #16]
 801eb2e:	eba0 000a 	sub.w	r0, r0, sl
 801eb32:	2240      	movs	r2, #64	; 0x40
 801eb34:	4082      	lsls	r2, r0
 801eb36:	4313      	orrs	r3, r2
 801eb38:	3401      	adds	r4, #1
 801eb3a:	9304      	str	r3, [sp, #16]
 801eb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb40:	4825      	ldr	r0, [pc, #148]	; (801ebd8 <_svfiprintf_r+0x1ec>)
 801eb42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eb46:	2206      	movs	r2, #6
 801eb48:	f7e1 fb6a 	bl	8000220 <memchr>
 801eb4c:	2800      	cmp	r0, #0
 801eb4e:	d038      	beq.n	801ebc2 <_svfiprintf_r+0x1d6>
 801eb50:	4b22      	ldr	r3, [pc, #136]	; (801ebdc <_svfiprintf_r+0x1f0>)
 801eb52:	bb1b      	cbnz	r3, 801eb9c <_svfiprintf_r+0x1b0>
 801eb54:	9b03      	ldr	r3, [sp, #12]
 801eb56:	3307      	adds	r3, #7
 801eb58:	f023 0307 	bic.w	r3, r3, #7
 801eb5c:	3308      	adds	r3, #8
 801eb5e:	9303      	str	r3, [sp, #12]
 801eb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb62:	4433      	add	r3, r6
 801eb64:	9309      	str	r3, [sp, #36]	; 0x24
 801eb66:	e768      	b.n	801ea3a <_svfiprintf_r+0x4e>
 801eb68:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb6c:	460c      	mov	r4, r1
 801eb6e:	2001      	movs	r0, #1
 801eb70:	e7a6      	b.n	801eac0 <_svfiprintf_r+0xd4>
 801eb72:	2300      	movs	r3, #0
 801eb74:	3401      	adds	r4, #1
 801eb76:	9305      	str	r3, [sp, #20]
 801eb78:	4619      	mov	r1, r3
 801eb7a:	f04f 0c0a 	mov.w	ip, #10
 801eb7e:	4620      	mov	r0, r4
 801eb80:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eb84:	3a30      	subs	r2, #48	; 0x30
 801eb86:	2a09      	cmp	r2, #9
 801eb88:	d903      	bls.n	801eb92 <_svfiprintf_r+0x1a6>
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d0c6      	beq.n	801eb1c <_svfiprintf_r+0x130>
 801eb8e:	9105      	str	r1, [sp, #20]
 801eb90:	e7c4      	b.n	801eb1c <_svfiprintf_r+0x130>
 801eb92:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb96:	4604      	mov	r4, r0
 801eb98:	2301      	movs	r3, #1
 801eb9a:	e7f0      	b.n	801eb7e <_svfiprintf_r+0x192>
 801eb9c:	ab03      	add	r3, sp, #12
 801eb9e:	9300      	str	r3, [sp, #0]
 801eba0:	462a      	mov	r2, r5
 801eba2:	4b0f      	ldr	r3, [pc, #60]	; (801ebe0 <_svfiprintf_r+0x1f4>)
 801eba4:	a904      	add	r1, sp, #16
 801eba6:	4638      	mov	r0, r7
 801eba8:	f3af 8000 	nop.w
 801ebac:	1c42      	adds	r2, r0, #1
 801ebae:	4606      	mov	r6, r0
 801ebb0:	d1d6      	bne.n	801eb60 <_svfiprintf_r+0x174>
 801ebb2:	89ab      	ldrh	r3, [r5, #12]
 801ebb4:	065b      	lsls	r3, r3, #25
 801ebb6:	f53f af2d 	bmi.w	801ea14 <_svfiprintf_r+0x28>
 801ebba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebbc:	b01d      	add	sp, #116	; 0x74
 801ebbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc2:	ab03      	add	r3, sp, #12
 801ebc4:	9300      	str	r3, [sp, #0]
 801ebc6:	462a      	mov	r2, r5
 801ebc8:	4b05      	ldr	r3, [pc, #20]	; (801ebe0 <_svfiprintf_r+0x1f4>)
 801ebca:	a904      	add	r1, sp, #16
 801ebcc:	4638      	mov	r0, r7
 801ebce:	f000 f9bd 	bl	801ef4c <_printf_i>
 801ebd2:	e7eb      	b.n	801ebac <_svfiprintf_r+0x1c0>
 801ebd4:	0802917c 	.word	0x0802917c
 801ebd8:	08029186 	.word	0x08029186
 801ebdc:	00000000 	.word	0x00000000
 801ebe0:	0801e939 	.word	0x0801e939
 801ebe4:	08029182 	.word	0x08029182

0801ebe8 <__sfputc_r>:
 801ebe8:	6893      	ldr	r3, [r2, #8]
 801ebea:	3b01      	subs	r3, #1
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	b410      	push	{r4}
 801ebf0:	6093      	str	r3, [r2, #8]
 801ebf2:	da08      	bge.n	801ec06 <__sfputc_r+0x1e>
 801ebf4:	6994      	ldr	r4, [r2, #24]
 801ebf6:	42a3      	cmp	r3, r4
 801ebf8:	db01      	blt.n	801ebfe <__sfputc_r+0x16>
 801ebfa:	290a      	cmp	r1, #10
 801ebfc:	d103      	bne.n	801ec06 <__sfputc_r+0x1e>
 801ebfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec02:	f7ff bca8 	b.w	801e556 <__swbuf_r>
 801ec06:	6813      	ldr	r3, [r2, #0]
 801ec08:	1c58      	adds	r0, r3, #1
 801ec0a:	6010      	str	r0, [r2, #0]
 801ec0c:	7019      	strb	r1, [r3, #0]
 801ec0e:	4608      	mov	r0, r1
 801ec10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec14:	4770      	bx	lr

0801ec16 <__sfputs_r>:
 801ec16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec18:	4606      	mov	r6, r0
 801ec1a:	460f      	mov	r7, r1
 801ec1c:	4614      	mov	r4, r2
 801ec1e:	18d5      	adds	r5, r2, r3
 801ec20:	42ac      	cmp	r4, r5
 801ec22:	d101      	bne.n	801ec28 <__sfputs_r+0x12>
 801ec24:	2000      	movs	r0, #0
 801ec26:	e007      	b.n	801ec38 <__sfputs_r+0x22>
 801ec28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec2c:	463a      	mov	r2, r7
 801ec2e:	4630      	mov	r0, r6
 801ec30:	f7ff ffda 	bl	801ebe8 <__sfputc_r>
 801ec34:	1c43      	adds	r3, r0, #1
 801ec36:	d1f3      	bne.n	801ec20 <__sfputs_r+0xa>
 801ec38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ec3c <_vfiprintf_r>:
 801ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec40:	460d      	mov	r5, r1
 801ec42:	b09d      	sub	sp, #116	; 0x74
 801ec44:	4614      	mov	r4, r2
 801ec46:	4698      	mov	r8, r3
 801ec48:	4606      	mov	r6, r0
 801ec4a:	b118      	cbz	r0, 801ec54 <_vfiprintf_r+0x18>
 801ec4c:	6a03      	ldr	r3, [r0, #32]
 801ec4e:	b90b      	cbnz	r3, 801ec54 <_vfiprintf_r+0x18>
 801ec50:	f7ff fb72 	bl	801e338 <__sinit>
 801ec54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ec56:	07d9      	lsls	r1, r3, #31
 801ec58:	d405      	bmi.n	801ec66 <_vfiprintf_r+0x2a>
 801ec5a:	89ab      	ldrh	r3, [r5, #12]
 801ec5c:	059a      	lsls	r2, r3, #22
 801ec5e:	d402      	bmi.n	801ec66 <_vfiprintf_r+0x2a>
 801ec60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ec62:	f7ff fe05 	bl	801e870 <__retarget_lock_acquire_recursive>
 801ec66:	89ab      	ldrh	r3, [r5, #12]
 801ec68:	071b      	lsls	r3, r3, #28
 801ec6a:	d501      	bpl.n	801ec70 <_vfiprintf_r+0x34>
 801ec6c:	692b      	ldr	r3, [r5, #16]
 801ec6e:	b99b      	cbnz	r3, 801ec98 <_vfiprintf_r+0x5c>
 801ec70:	4629      	mov	r1, r5
 801ec72:	4630      	mov	r0, r6
 801ec74:	f7ff fcac 	bl	801e5d0 <__swsetup_r>
 801ec78:	b170      	cbz	r0, 801ec98 <_vfiprintf_r+0x5c>
 801ec7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ec7c:	07dc      	lsls	r4, r3, #31
 801ec7e:	d504      	bpl.n	801ec8a <_vfiprintf_r+0x4e>
 801ec80:	f04f 30ff 	mov.w	r0, #4294967295
 801ec84:	b01d      	add	sp, #116	; 0x74
 801ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8a:	89ab      	ldrh	r3, [r5, #12]
 801ec8c:	0598      	lsls	r0, r3, #22
 801ec8e:	d4f7      	bmi.n	801ec80 <_vfiprintf_r+0x44>
 801ec90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ec92:	f7ff fdee 	bl	801e872 <__retarget_lock_release_recursive>
 801ec96:	e7f3      	b.n	801ec80 <_vfiprintf_r+0x44>
 801ec98:	2300      	movs	r3, #0
 801ec9a:	9309      	str	r3, [sp, #36]	; 0x24
 801ec9c:	2320      	movs	r3, #32
 801ec9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eca2:	f8cd 800c 	str.w	r8, [sp, #12]
 801eca6:	2330      	movs	r3, #48	; 0x30
 801eca8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ee5c <_vfiprintf_r+0x220>
 801ecac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ecb0:	f04f 0901 	mov.w	r9, #1
 801ecb4:	4623      	mov	r3, r4
 801ecb6:	469a      	mov	sl, r3
 801ecb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ecbc:	b10a      	cbz	r2, 801ecc2 <_vfiprintf_r+0x86>
 801ecbe:	2a25      	cmp	r2, #37	; 0x25
 801ecc0:	d1f9      	bne.n	801ecb6 <_vfiprintf_r+0x7a>
 801ecc2:	ebba 0b04 	subs.w	fp, sl, r4
 801ecc6:	d00b      	beq.n	801ece0 <_vfiprintf_r+0xa4>
 801ecc8:	465b      	mov	r3, fp
 801ecca:	4622      	mov	r2, r4
 801eccc:	4629      	mov	r1, r5
 801ecce:	4630      	mov	r0, r6
 801ecd0:	f7ff ffa1 	bl	801ec16 <__sfputs_r>
 801ecd4:	3001      	adds	r0, #1
 801ecd6:	f000 80a9 	beq.w	801ee2c <_vfiprintf_r+0x1f0>
 801ecda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ecdc:	445a      	add	r2, fp
 801ecde:	9209      	str	r2, [sp, #36]	; 0x24
 801ece0:	f89a 3000 	ldrb.w	r3, [sl]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	f000 80a1 	beq.w	801ee2c <_vfiprintf_r+0x1f0>
 801ecea:	2300      	movs	r3, #0
 801ecec:	f04f 32ff 	mov.w	r2, #4294967295
 801ecf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ecf4:	f10a 0a01 	add.w	sl, sl, #1
 801ecf8:	9304      	str	r3, [sp, #16]
 801ecfa:	9307      	str	r3, [sp, #28]
 801ecfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed00:	931a      	str	r3, [sp, #104]	; 0x68
 801ed02:	4654      	mov	r4, sl
 801ed04:	2205      	movs	r2, #5
 801ed06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed0a:	4854      	ldr	r0, [pc, #336]	; (801ee5c <_vfiprintf_r+0x220>)
 801ed0c:	f7e1 fa88 	bl	8000220 <memchr>
 801ed10:	9a04      	ldr	r2, [sp, #16]
 801ed12:	b9d8      	cbnz	r0, 801ed4c <_vfiprintf_r+0x110>
 801ed14:	06d1      	lsls	r1, r2, #27
 801ed16:	bf44      	itt	mi
 801ed18:	2320      	movmi	r3, #32
 801ed1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed1e:	0713      	lsls	r3, r2, #28
 801ed20:	bf44      	itt	mi
 801ed22:	232b      	movmi	r3, #43	; 0x2b
 801ed24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ed28:	f89a 3000 	ldrb.w	r3, [sl]
 801ed2c:	2b2a      	cmp	r3, #42	; 0x2a
 801ed2e:	d015      	beq.n	801ed5c <_vfiprintf_r+0x120>
 801ed30:	9a07      	ldr	r2, [sp, #28]
 801ed32:	4654      	mov	r4, sl
 801ed34:	2000      	movs	r0, #0
 801ed36:	f04f 0c0a 	mov.w	ip, #10
 801ed3a:	4621      	mov	r1, r4
 801ed3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed40:	3b30      	subs	r3, #48	; 0x30
 801ed42:	2b09      	cmp	r3, #9
 801ed44:	d94d      	bls.n	801ede2 <_vfiprintf_r+0x1a6>
 801ed46:	b1b0      	cbz	r0, 801ed76 <_vfiprintf_r+0x13a>
 801ed48:	9207      	str	r2, [sp, #28]
 801ed4a:	e014      	b.n	801ed76 <_vfiprintf_r+0x13a>
 801ed4c:	eba0 0308 	sub.w	r3, r0, r8
 801ed50:	fa09 f303 	lsl.w	r3, r9, r3
 801ed54:	4313      	orrs	r3, r2
 801ed56:	9304      	str	r3, [sp, #16]
 801ed58:	46a2      	mov	sl, r4
 801ed5a:	e7d2      	b.n	801ed02 <_vfiprintf_r+0xc6>
 801ed5c:	9b03      	ldr	r3, [sp, #12]
 801ed5e:	1d19      	adds	r1, r3, #4
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	9103      	str	r1, [sp, #12]
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	bfbb      	ittet	lt
 801ed68:	425b      	neglt	r3, r3
 801ed6a:	f042 0202 	orrlt.w	r2, r2, #2
 801ed6e:	9307      	strge	r3, [sp, #28]
 801ed70:	9307      	strlt	r3, [sp, #28]
 801ed72:	bfb8      	it	lt
 801ed74:	9204      	strlt	r2, [sp, #16]
 801ed76:	7823      	ldrb	r3, [r4, #0]
 801ed78:	2b2e      	cmp	r3, #46	; 0x2e
 801ed7a:	d10c      	bne.n	801ed96 <_vfiprintf_r+0x15a>
 801ed7c:	7863      	ldrb	r3, [r4, #1]
 801ed7e:	2b2a      	cmp	r3, #42	; 0x2a
 801ed80:	d134      	bne.n	801edec <_vfiprintf_r+0x1b0>
 801ed82:	9b03      	ldr	r3, [sp, #12]
 801ed84:	1d1a      	adds	r2, r3, #4
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	9203      	str	r2, [sp, #12]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	bfb8      	it	lt
 801ed8e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ed92:	3402      	adds	r4, #2
 801ed94:	9305      	str	r3, [sp, #20]
 801ed96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ee6c <_vfiprintf_r+0x230>
 801ed9a:	7821      	ldrb	r1, [r4, #0]
 801ed9c:	2203      	movs	r2, #3
 801ed9e:	4650      	mov	r0, sl
 801eda0:	f7e1 fa3e 	bl	8000220 <memchr>
 801eda4:	b138      	cbz	r0, 801edb6 <_vfiprintf_r+0x17a>
 801eda6:	9b04      	ldr	r3, [sp, #16]
 801eda8:	eba0 000a 	sub.w	r0, r0, sl
 801edac:	2240      	movs	r2, #64	; 0x40
 801edae:	4082      	lsls	r2, r0
 801edb0:	4313      	orrs	r3, r2
 801edb2:	3401      	adds	r4, #1
 801edb4:	9304      	str	r3, [sp, #16]
 801edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801edba:	4829      	ldr	r0, [pc, #164]	; (801ee60 <_vfiprintf_r+0x224>)
 801edbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801edc0:	2206      	movs	r2, #6
 801edc2:	f7e1 fa2d 	bl	8000220 <memchr>
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d03f      	beq.n	801ee4a <_vfiprintf_r+0x20e>
 801edca:	4b26      	ldr	r3, [pc, #152]	; (801ee64 <_vfiprintf_r+0x228>)
 801edcc:	bb1b      	cbnz	r3, 801ee16 <_vfiprintf_r+0x1da>
 801edce:	9b03      	ldr	r3, [sp, #12]
 801edd0:	3307      	adds	r3, #7
 801edd2:	f023 0307 	bic.w	r3, r3, #7
 801edd6:	3308      	adds	r3, #8
 801edd8:	9303      	str	r3, [sp, #12]
 801edda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eddc:	443b      	add	r3, r7
 801edde:	9309      	str	r3, [sp, #36]	; 0x24
 801ede0:	e768      	b.n	801ecb4 <_vfiprintf_r+0x78>
 801ede2:	fb0c 3202 	mla	r2, ip, r2, r3
 801ede6:	460c      	mov	r4, r1
 801ede8:	2001      	movs	r0, #1
 801edea:	e7a6      	b.n	801ed3a <_vfiprintf_r+0xfe>
 801edec:	2300      	movs	r3, #0
 801edee:	3401      	adds	r4, #1
 801edf0:	9305      	str	r3, [sp, #20]
 801edf2:	4619      	mov	r1, r3
 801edf4:	f04f 0c0a 	mov.w	ip, #10
 801edf8:	4620      	mov	r0, r4
 801edfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801edfe:	3a30      	subs	r2, #48	; 0x30
 801ee00:	2a09      	cmp	r2, #9
 801ee02:	d903      	bls.n	801ee0c <_vfiprintf_r+0x1d0>
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d0c6      	beq.n	801ed96 <_vfiprintf_r+0x15a>
 801ee08:	9105      	str	r1, [sp, #20]
 801ee0a:	e7c4      	b.n	801ed96 <_vfiprintf_r+0x15a>
 801ee0c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ee10:	4604      	mov	r4, r0
 801ee12:	2301      	movs	r3, #1
 801ee14:	e7f0      	b.n	801edf8 <_vfiprintf_r+0x1bc>
 801ee16:	ab03      	add	r3, sp, #12
 801ee18:	9300      	str	r3, [sp, #0]
 801ee1a:	462a      	mov	r2, r5
 801ee1c:	4b12      	ldr	r3, [pc, #72]	; (801ee68 <_vfiprintf_r+0x22c>)
 801ee1e:	a904      	add	r1, sp, #16
 801ee20:	4630      	mov	r0, r6
 801ee22:	f3af 8000 	nop.w
 801ee26:	4607      	mov	r7, r0
 801ee28:	1c78      	adds	r0, r7, #1
 801ee2a:	d1d6      	bne.n	801edda <_vfiprintf_r+0x19e>
 801ee2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ee2e:	07d9      	lsls	r1, r3, #31
 801ee30:	d405      	bmi.n	801ee3e <_vfiprintf_r+0x202>
 801ee32:	89ab      	ldrh	r3, [r5, #12]
 801ee34:	059a      	lsls	r2, r3, #22
 801ee36:	d402      	bmi.n	801ee3e <_vfiprintf_r+0x202>
 801ee38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee3a:	f7ff fd1a 	bl	801e872 <__retarget_lock_release_recursive>
 801ee3e:	89ab      	ldrh	r3, [r5, #12]
 801ee40:	065b      	lsls	r3, r3, #25
 801ee42:	f53f af1d 	bmi.w	801ec80 <_vfiprintf_r+0x44>
 801ee46:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee48:	e71c      	b.n	801ec84 <_vfiprintf_r+0x48>
 801ee4a:	ab03      	add	r3, sp, #12
 801ee4c:	9300      	str	r3, [sp, #0]
 801ee4e:	462a      	mov	r2, r5
 801ee50:	4b05      	ldr	r3, [pc, #20]	; (801ee68 <_vfiprintf_r+0x22c>)
 801ee52:	a904      	add	r1, sp, #16
 801ee54:	4630      	mov	r0, r6
 801ee56:	f000 f879 	bl	801ef4c <_printf_i>
 801ee5a:	e7e4      	b.n	801ee26 <_vfiprintf_r+0x1ea>
 801ee5c:	0802917c 	.word	0x0802917c
 801ee60:	08029186 	.word	0x08029186
 801ee64:	00000000 	.word	0x00000000
 801ee68:	0801ec17 	.word	0x0801ec17
 801ee6c:	08029182 	.word	0x08029182

0801ee70 <_printf_common>:
 801ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee74:	4616      	mov	r6, r2
 801ee76:	4699      	mov	r9, r3
 801ee78:	688a      	ldr	r2, [r1, #8]
 801ee7a:	690b      	ldr	r3, [r1, #16]
 801ee7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ee80:	4293      	cmp	r3, r2
 801ee82:	bfb8      	it	lt
 801ee84:	4613      	movlt	r3, r2
 801ee86:	6033      	str	r3, [r6, #0]
 801ee88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ee8c:	4607      	mov	r7, r0
 801ee8e:	460c      	mov	r4, r1
 801ee90:	b10a      	cbz	r2, 801ee96 <_printf_common+0x26>
 801ee92:	3301      	adds	r3, #1
 801ee94:	6033      	str	r3, [r6, #0]
 801ee96:	6823      	ldr	r3, [r4, #0]
 801ee98:	0699      	lsls	r1, r3, #26
 801ee9a:	bf42      	ittt	mi
 801ee9c:	6833      	ldrmi	r3, [r6, #0]
 801ee9e:	3302      	addmi	r3, #2
 801eea0:	6033      	strmi	r3, [r6, #0]
 801eea2:	6825      	ldr	r5, [r4, #0]
 801eea4:	f015 0506 	ands.w	r5, r5, #6
 801eea8:	d106      	bne.n	801eeb8 <_printf_common+0x48>
 801eeaa:	f104 0a19 	add.w	sl, r4, #25
 801eeae:	68e3      	ldr	r3, [r4, #12]
 801eeb0:	6832      	ldr	r2, [r6, #0]
 801eeb2:	1a9b      	subs	r3, r3, r2
 801eeb4:	42ab      	cmp	r3, r5
 801eeb6:	dc26      	bgt.n	801ef06 <_printf_common+0x96>
 801eeb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eebc:	1e13      	subs	r3, r2, #0
 801eebe:	6822      	ldr	r2, [r4, #0]
 801eec0:	bf18      	it	ne
 801eec2:	2301      	movne	r3, #1
 801eec4:	0692      	lsls	r2, r2, #26
 801eec6:	d42b      	bmi.n	801ef20 <_printf_common+0xb0>
 801eec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eecc:	4649      	mov	r1, r9
 801eece:	4638      	mov	r0, r7
 801eed0:	47c0      	blx	r8
 801eed2:	3001      	adds	r0, #1
 801eed4:	d01e      	beq.n	801ef14 <_printf_common+0xa4>
 801eed6:	6823      	ldr	r3, [r4, #0]
 801eed8:	6922      	ldr	r2, [r4, #16]
 801eeda:	f003 0306 	and.w	r3, r3, #6
 801eede:	2b04      	cmp	r3, #4
 801eee0:	bf02      	ittt	eq
 801eee2:	68e5      	ldreq	r5, [r4, #12]
 801eee4:	6833      	ldreq	r3, [r6, #0]
 801eee6:	1aed      	subeq	r5, r5, r3
 801eee8:	68a3      	ldr	r3, [r4, #8]
 801eeea:	bf0c      	ite	eq
 801eeec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eef0:	2500      	movne	r5, #0
 801eef2:	4293      	cmp	r3, r2
 801eef4:	bfc4      	itt	gt
 801eef6:	1a9b      	subgt	r3, r3, r2
 801eef8:	18ed      	addgt	r5, r5, r3
 801eefa:	2600      	movs	r6, #0
 801eefc:	341a      	adds	r4, #26
 801eefe:	42b5      	cmp	r5, r6
 801ef00:	d11a      	bne.n	801ef38 <_printf_common+0xc8>
 801ef02:	2000      	movs	r0, #0
 801ef04:	e008      	b.n	801ef18 <_printf_common+0xa8>
 801ef06:	2301      	movs	r3, #1
 801ef08:	4652      	mov	r2, sl
 801ef0a:	4649      	mov	r1, r9
 801ef0c:	4638      	mov	r0, r7
 801ef0e:	47c0      	blx	r8
 801ef10:	3001      	adds	r0, #1
 801ef12:	d103      	bne.n	801ef1c <_printf_common+0xac>
 801ef14:	f04f 30ff 	mov.w	r0, #4294967295
 801ef18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef1c:	3501      	adds	r5, #1
 801ef1e:	e7c6      	b.n	801eeae <_printf_common+0x3e>
 801ef20:	18e1      	adds	r1, r4, r3
 801ef22:	1c5a      	adds	r2, r3, #1
 801ef24:	2030      	movs	r0, #48	; 0x30
 801ef26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef2a:	4422      	add	r2, r4
 801ef2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ef30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ef34:	3302      	adds	r3, #2
 801ef36:	e7c7      	b.n	801eec8 <_printf_common+0x58>
 801ef38:	2301      	movs	r3, #1
 801ef3a:	4622      	mov	r2, r4
 801ef3c:	4649      	mov	r1, r9
 801ef3e:	4638      	mov	r0, r7
 801ef40:	47c0      	blx	r8
 801ef42:	3001      	adds	r0, #1
 801ef44:	d0e6      	beq.n	801ef14 <_printf_common+0xa4>
 801ef46:	3601      	adds	r6, #1
 801ef48:	e7d9      	b.n	801eefe <_printf_common+0x8e>
	...

0801ef4c <_printf_i>:
 801ef4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ef50:	7e0f      	ldrb	r7, [r1, #24]
 801ef52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ef54:	2f78      	cmp	r7, #120	; 0x78
 801ef56:	4691      	mov	r9, r2
 801ef58:	4680      	mov	r8, r0
 801ef5a:	460c      	mov	r4, r1
 801ef5c:	469a      	mov	sl, r3
 801ef5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ef62:	d807      	bhi.n	801ef74 <_printf_i+0x28>
 801ef64:	2f62      	cmp	r7, #98	; 0x62
 801ef66:	d80a      	bhi.n	801ef7e <_printf_i+0x32>
 801ef68:	2f00      	cmp	r7, #0
 801ef6a:	f000 80d4 	beq.w	801f116 <_printf_i+0x1ca>
 801ef6e:	2f58      	cmp	r7, #88	; 0x58
 801ef70:	f000 80c0 	beq.w	801f0f4 <_printf_i+0x1a8>
 801ef74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ef78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ef7c:	e03a      	b.n	801eff4 <_printf_i+0xa8>
 801ef7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ef82:	2b15      	cmp	r3, #21
 801ef84:	d8f6      	bhi.n	801ef74 <_printf_i+0x28>
 801ef86:	a101      	add	r1, pc, #4	; (adr r1, 801ef8c <_printf_i+0x40>)
 801ef88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ef8c:	0801efe5 	.word	0x0801efe5
 801ef90:	0801eff9 	.word	0x0801eff9
 801ef94:	0801ef75 	.word	0x0801ef75
 801ef98:	0801ef75 	.word	0x0801ef75
 801ef9c:	0801ef75 	.word	0x0801ef75
 801efa0:	0801ef75 	.word	0x0801ef75
 801efa4:	0801eff9 	.word	0x0801eff9
 801efa8:	0801ef75 	.word	0x0801ef75
 801efac:	0801ef75 	.word	0x0801ef75
 801efb0:	0801ef75 	.word	0x0801ef75
 801efb4:	0801ef75 	.word	0x0801ef75
 801efb8:	0801f0fd 	.word	0x0801f0fd
 801efbc:	0801f025 	.word	0x0801f025
 801efc0:	0801f0b7 	.word	0x0801f0b7
 801efc4:	0801ef75 	.word	0x0801ef75
 801efc8:	0801ef75 	.word	0x0801ef75
 801efcc:	0801f11f 	.word	0x0801f11f
 801efd0:	0801ef75 	.word	0x0801ef75
 801efd4:	0801f025 	.word	0x0801f025
 801efd8:	0801ef75 	.word	0x0801ef75
 801efdc:	0801ef75 	.word	0x0801ef75
 801efe0:	0801f0bf 	.word	0x0801f0bf
 801efe4:	682b      	ldr	r3, [r5, #0]
 801efe6:	1d1a      	adds	r2, r3, #4
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	602a      	str	r2, [r5, #0]
 801efec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eff4:	2301      	movs	r3, #1
 801eff6:	e09f      	b.n	801f138 <_printf_i+0x1ec>
 801eff8:	6820      	ldr	r0, [r4, #0]
 801effa:	682b      	ldr	r3, [r5, #0]
 801effc:	0607      	lsls	r7, r0, #24
 801effe:	f103 0104 	add.w	r1, r3, #4
 801f002:	6029      	str	r1, [r5, #0]
 801f004:	d501      	bpl.n	801f00a <_printf_i+0xbe>
 801f006:	681e      	ldr	r6, [r3, #0]
 801f008:	e003      	b.n	801f012 <_printf_i+0xc6>
 801f00a:	0646      	lsls	r6, r0, #25
 801f00c:	d5fb      	bpl.n	801f006 <_printf_i+0xba>
 801f00e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f012:	2e00      	cmp	r6, #0
 801f014:	da03      	bge.n	801f01e <_printf_i+0xd2>
 801f016:	232d      	movs	r3, #45	; 0x2d
 801f018:	4276      	negs	r6, r6
 801f01a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f01e:	485a      	ldr	r0, [pc, #360]	; (801f188 <_printf_i+0x23c>)
 801f020:	230a      	movs	r3, #10
 801f022:	e012      	b.n	801f04a <_printf_i+0xfe>
 801f024:	682b      	ldr	r3, [r5, #0]
 801f026:	6820      	ldr	r0, [r4, #0]
 801f028:	1d19      	adds	r1, r3, #4
 801f02a:	6029      	str	r1, [r5, #0]
 801f02c:	0605      	lsls	r5, r0, #24
 801f02e:	d501      	bpl.n	801f034 <_printf_i+0xe8>
 801f030:	681e      	ldr	r6, [r3, #0]
 801f032:	e002      	b.n	801f03a <_printf_i+0xee>
 801f034:	0641      	lsls	r1, r0, #25
 801f036:	d5fb      	bpl.n	801f030 <_printf_i+0xe4>
 801f038:	881e      	ldrh	r6, [r3, #0]
 801f03a:	4853      	ldr	r0, [pc, #332]	; (801f188 <_printf_i+0x23c>)
 801f03c:	2f6f      	cmp	r7, #111	; 0x6f
 801f03e:	bf0c      	ite	eq
 801f040:	2308      	moveq	r3, #8
 801f042:	230a      	movne	r3, #10
 801f044:	2100      	movs	r1, #0
 801f046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f04a:	6865      	ldr	r5, [r4, #4]
 801f04c:	60a5      	str	r5, [r4, #8]
 801f04e:	2d00      	cmp	r5, #0
 801f050:	bfa2      	ittt	ge
 801f052:	6821      	ldrge	r1, [r4, #0]
 801f054:	f021 0104 	bicge.w	r1, r1, #4
 801f058:	6021      	strge	r1, [r4, #0]
 801f05a:	b90e      	cbnz	r6, 801f060 <_printf_i+0x114>
 801f05c:	2d00      	cmp	r5, #0
 801f05e:	d04b      	beq.n	801f0f8 <_printf_i+0x1ac>
 801f060:	4615      	mov	r5, r2
 801f062:	fbb6 f1f3 	udiv	r1, r6, r3
 801f066:	fb03 6711 	mls	r7, r3, r1, r6
 801f06a:	5dc7      	ldrb	r7, [r0, r7]
 801f06c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f070:	4637      	mov	r7, r6
 801f072:	42bb      	cmp	r3, r7
 801f074:	460e      	mov	r6, r1
 801f076:	d9f4      	bls.n	801f062 <_printf_i+0x116>
 801f078:	2b08      	cmp	r3, #8
 801f07a:	d10b      	bne.n	801f094 <_printf_i+0x148>
 801f07c:	6823      	ldr	r3, [r4, #0]
 801f07e:	07de      	lsls	r6, r3, #31
 801f080:	d508      	bpl.n	801f094 <_printf_i+0x148>
 801f082:	6923      	ldr	r3, [r4, #16]
 801f084:	6861      	ldr	r1, [r4, #4]
 801f086:	4299      	cmp	r1, r3
 801f088:	bfde      	ittt	le
 801f08a:	2330      	movle	r3, #48	; 0x30
 801f08c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f090:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f094:	1b52      	subs	r2, r2, r5
 801f096:	6122      	str	r2, [r4, #16]
 801f098:	f8cd a000 	str.w	sl, [sp]
 801f09c:	464b      	mov	r3, r9
 801f09e:	aa03      	add	r2, sp, #12
 801f0a0:	4621      	mov	r1, r4
 801f0a2:	4640      	mov	r0, r8
 801f0a4:	f7ff fee4 	bl	801ee70 <_printf_common>
 801f0a8:	3001      	adds	r0, #1
 801f0aa:	d14a      	bne.n	801f142 <_printf_i+0x1f6>
 801f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f0b0:	b004      	add	sp, #16
 801f0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0b6:	6823      	ldr	r3, [r4, #0]
 801f0b8:	f043 0320 	orr.w	r3, r3, #32
 801f0bc:	6023      	str	r3, [r4, #0]
 801f0be:	4833      	ldr	r0, [pc, #204]	; (801f18c <_printf_i+0x240>)
 801f0c0:	2778      	movs	r7, #120	; 0x78
 801f0c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f0c6:	6823      	ldr	r3, [r4, #0]
 801f0c8:	6829      	ldr	r1, [r5, #0]
 801f0ca:	061f      	lsls	r7, r3, #24
 801f0cc:	f851 6b04 	ldr.w	r6, [r1], #4
 801f0d0:	d402      	bmi.n	801f0d8 <_printf_i+0x18c>
 801f0d2:	065f      	lsls	r7, r3, #25
 801f0d4:	bf48      	it	mi
 801f0d6:	b2b6      	uxthmi	r6, r6
 801f0d8:	07df      	lsls	r7, r3, #31
 801f0da:	bf48      	it	mi
 801f0dc:	f043 0320 	orrmi.w	r3, r3, #32
 801f0e0:	6029      	str	r1, [r5, #0]
 801f0e2:	bf48      	it	mi
 801f0e4:	6023      	strmi	r3, [r4, #0]
 801f0e6:	b91e      	cbnz	r6, 801f0f0 <_printf_i+0x1a4>
 801f0e8:	6823      	ldr	r3, [r4, #0]
 801f0ea:	f023 0320 	bic.w	r3, r3, #32
 801f0ee:	6023      	str	r3, [r4, #0]
 801f0f0:	2310      	movs	r3, #16
 801f0f2:	e7a7      	b.n	801f044 <_printf_i+0xf8>
 801f0f4:	4824      	ldr	r0, [pc, #144]	; (801f188 <_printf_i+0x23c>)
 801f0f6:	e7e4      	b.n	801f0c2 <_printf_i+0x176>
 801f0f8:	4615      	mov	r5, r2
 801f0fa:	e7bd      	b.n	801f078 <_printf_i+0x12c>
 801f0fc:	682b      	ldr	r3, [r5, #0]
 801f0fe:	6826      	ldr	r6, [r4, #0]
 801f100:	6961      	ldr	r1, [r4, #20]
 801f102:	1d18      	adds	r0, r3, #4
 801f104:	6028      	str	r0, [r5, #0]
 801f106:	0635      	lsls	r5, r6, #24
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	d501      	bpl.n	801f110 <_printf_i+0x1c4>
 801f10c:	6019      	str	r1, [r3, #0]
 801f10e:	e002      	b.n	801f116 <_printf_i+0x1ca>
 801f110:	0670      	lsls	r0, r6, #25
 801f112:	d5fb      	bpl.n	801f10c <_printf_i+0x1c0>
 801f114:	8019      	strh	r1, [r3, #0]
 801f116:	2300      	movs	r3, #0
 801f118:	6123      	str	r3, [r4, #16]
 801f11a:	4615      	mov	r5, r2
 801f11c:	e7bc      	b.n	801f098 <_printf_i+0x14c>
 801f11e:	682b      	ldr	r3, [r5, #0]
 801f120:	1d1a      	adds	r2, r3, #4
 801f122:	602a      	str	r2, [r5, #0]
 801f124:	681d      	ldr	r5, [r3, #0]
 801f126:	6862      	ldr	r2, [r4, #4]
 801f128:	2100      	movs	r1, #0
 801f12a:	4628      	mov	r0, r5
 801f12c:	f7e1 f878 	bl	8000220 <memchr>
 801f130:	b108      	cbz	r0, 801f136 <_printf_i+0x1ea>
 801f132:	1b40      	subs	r0, r0, r5
 801f134:	6060      	str	r0, [r4, #4]
 801f136:	6863      	ldr	r3, [r4, #4]
 801f138:	6123      	str	r3, [r4, #16]
 801f13a:	2300      	movs	r3, #0
 801f13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f140:	e7aa      	b.n	801f098 <_printf_i+0x14c>
 801f142:	6923      	ldr	r3, [r4, #16]
 801f144:	462a      	mov	r2, r5
 801f146:	4649      	mov	r1, r9
 801f148:	4640      	mov	r0, r8
 801f14a:	47d0      	blx	sl
 801f14c:	3001      	adds	r0, #1
 801f14e:	d0ad      	beq.n	801f0ac <_printf_i+0x160>
 801f150:	6823      	ldr	r3, [r4, #0]
 801f152:	079b      	lsls	r3, r3, #30
 801f154:	d413      	bmi.n	801f17e <_printf_i+0x232>
 801f156:	68e0      	ldr	r0, [r4, #12]
 801f158:	9b03      	ldr	r3, [sp, #12]
 801f15a:	4298      	cmp	r0, r3
 801f15c:	bfb8      	it	lt
 801f15e:	4618      	movlt	r0, r3
 801f160:	e7a6      	b.n	801f0b0 <_printf_i+0x164>
 801f162:	2301      	movs	r3, #1
 801f164:	4632      	mov	r2, r6
 801f166:	4649      	mov	r1, r9
 801f168:	4640      	mov	r0, r8
 801f16a:	47d0      	blx	sl
 801f16c:	3001      	adds	r0, #1
 801f16e:	d09d      	beq.n	801f0ac <_printf_i+0x160>
 801f170:	3501      	adds	r5, #1
 801f172:	68e3      	ldr	r3, [r4, #12]
 801f174:	9903      	ldr	r1, [sp, #12]
 801f176:	1a5b      	subs	r3, r3, r1
 801f178:	42ab      	cmp	r3, r5
 801f17a:	dcf2      	bgt.n	801f162 <_printf_i+0x216>
 801f17c:	e7eb      	b.n	801f156 <_printf_i+0x20a>
 801f17e:	2500      	movs	r5, #0
 801f180:	f104 0619 	add.w	r6, r4, #25
 801f184:	e7f5      	b.n	801f172 <_printf_i+0x226>
 801f186:	bf00      	nop
 801f188:	0802918d 	.word	0x0802918d
 801f18c:	0802919e 	.word	0x0802919e

0801f190 <__sflush_r>:
 801f190:	898a      	ldrh	r2, [r1, #12]
 801f192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f196:	4605      	mov	r5, r0
 801f198:	0710      	lsls	r0, r2, #28
 801f19a:	460c      	mov	r4, r1
 801f19c:	d458      	bmi.n	801f250 <__sflush_r+0xc0>
 801f19e:	684b      	ldr	r3, [r1, #4]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	dc05      	bgt.n	801f1b0 <__sflush_r+0x20>
 801f1a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	dc02      	bgt.n	801f1b0 <__sflush_r+0x20>
 801f1aa:	2000      	movs	r0, #0
 801f1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1b2:	2e00      	cmp	r6, #0
 801f1b4:	d0f9      	beq.n	801f1aa <__sflush_r+0x1a>
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f1bc:	682f      	ldr	r7, [r5, #0]
 801f1be:	6a21      	ldr	r1, [r4, #32]
 801f1c0:	602b      	str	r3, [r5, #0]
 801f1c2:	d032      	beq.n	801f22a <__sflush_r+0x9a>
 801f1c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f1c6:	89a3      	ldrh	r3, [r4, #12]
 801f1c8:	075a      	lsls	r2, r3, #29
 801f1ca:	d505      	bpl.n	801f1d8 <__sflush_r+0x48>
 801f1cc:	6863      	ldr	r3, [r4, #4]
 801f1ce:	1ac0      	subs	r0, r0, r3
 801f1d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1d2:	b10b      	cbz	r3, 801f1d8 <__sflush_r+0x48>
 801f1d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f1d6:	1ac0      	subs	r0, r0, r3
 801f1d8:	2300      	movs	r3, #0
 801f1da:	4602      	mov	r2, r0
 801f1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1de:	6a21      	ldr	r1, [r4, #32]
 801f1e0:	4628      	mov	r0, r5
 801f1e2:	47b0      	blx	r6
 801f1e4:	1c43      	adds	r3, r0, #1
 801f1e6:	89a3      	ldrh	r3, [r4, #12]
 801f1e8:	d106      	bne.n	801f1f8 <__sflush_r+0x68>
 801f1ea:	6829      	ldr	r1, [r5, #0]
 801f1ec:	291d      	cmp	r1, #29
 801f1ee:	d82b      	bhi.n	801f248 <__sflush_r+0xb8>
 801f1f0:	4a29      	ldr	r2, [pc, #164]	; (801f298 <__sflush_r+0x108>)
 801f1f2:	410a      	asrs	r2, r1
 801f1f4:	07d6      	lsls	r6, r2, #31
 801f1f6:	d427      	bmi.n	801f248 <__sflush_r+0xb8>
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	6062      	str	r2, [r4, #4]
 801f1fc:	04d9      	lsls	r1, r3, #19
 801f1fe:	6922      	ldr	r2, [r4, #16]
 801f200:	6022      	str	r2, [r4, #0]
 801f202:	d504      	bpl.n	801f20e <__sflush_r+0x7e>
 801f204:	1c42      	adds	r2, r0, #1
 801f206:	d101      	bne.n	801f20c <__sflush_r+0x7c>
 801f208:	682b      	ldr	r3, [r5, #0]
 801f20a:	b903      	cbnz	r3, 801f20e <__sflush_r+0x7e>
 801f20c:	6560      	str	r0, [r4, #84]	; 0x54
 801f20e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f210:	602f      	str	r7, [r5, #0]
 801f212:	2900      	cmp	r1, #0
 801f214:	d0c9      	beq.n	801f1aa <__sflush_r+0x1a>
 801f216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f21a:	4299      	cmp	r1, r3
 801f21c:	d002      	beq.n	801f224 <__sflush_r+0x94>
 801f21e:	4628      	mov	r0, r5
 801f220:	f7ff fb3e 	bl	801e8a0 <_free_r>
 801f224:	2000      	movs	r0, #0
 801f226:	6360      	str	r0, [r4, #52]	; 0x34
 801f228:	e7c0      	b.n	801f1ac <__sflush_r+0x1c>
 801f22a:	2301      	movs	r3, #1
 801f22c:	4628      	mov	r0, r5
 801f22e:	47b0      	blx	r6
 801f230:	1c41      	adds	r1, r0, #1
 801f232:	d1c8      	bne.n	801f1c6 <__sflush_r+0x36>
 801f234:	682b      	ldr	r3, [r5, #0]
 801f236:	2b00      	cmp	r3, #0
 801f238:	d0c5      	beq.n	801f1c6 <__sflush_r+0x36>
 801f23a:	2b1d      	cmp	r3, #29
 801f23c:	d001      	beq.n	801f242 <__sflush_r+0xb2>
 801f23e:	2b16      	cmp	r3, #22
 801f240:	d101      	bne.n	801f246 <__sflush_r+0xb6>
 801f242:	602f      	str	r7, [r5, #0]
 801f244:	e7b1      	b.n	801f1aa <__sflush_r+0x1a>
 801f246:	89a3      	ldrh	r3, [r4, #12]
 801f248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f24c:	81a3      	strh	r3, [r4, #12]
 801f24e:	e7ad      	b.n	801f1ac <__sflush_r+0x1c>
 801f250:	690f      	ldr	r7, [r1, #16]
 801f252:	2f00      	cmp	r7, #0
 801f254:	d0a9      	beq.n	801f1aa <__sflush_r+0x1a>
 801f256:	0793      	lsls	r3, r2, #30
 801f258:	680e      	ldr	r6, [r1, #0]
 801f25a:	bf08      	it	eq
 801f25c:	694b      	ldreq	r3, [r1, #20]
 801f25e:	600f      	str	r7, [r1, #0]
 801f260:	bf18      	it	ne
 801f262:	2300      	movne	r3, #0
 801f264:	eba6 0807 	sub.w	r8, r6, r7
 801f268:	608b      	str	r3, [r1, #8]
 801f26a:	f1b8 0f00 	cmp.w	r8, #0
 801f26e:	dd9c      	ble.n	801f1aa <__sflush_r+0x1a>
 801f270:	6a21      	ldr	r1, [r4, #32]
 801f272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f274:	4643      	mov	r3, r8
 801f276:	463a      	mov	r2, r7
 801f278:	4628      	mov	r0, r5
 801f27a:	47b0      	blx	r6
 801f27c:	2800      	cmp	r0, #0
 801f27e:	dc06      	bgt.n	801f28e <__sflush_r+0xfe>
 801f280:	89a3      	ldrh	r3, [r4, #12]
 801f282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f286:	81a3      	strh	r3, [r4, #12]
 801f288:	f04f 30ff 	mov.w	r0, #4294967295
 801f28c:	e78e      	b.n	801f1ac <__sflush_r+0x1c>
 801f28e:	4407      	add	r7, r0
 801f290:	eba8 0800 	sub.w	r8, r8, r0
 801f294:	e7e9      	b.n	801f26a <__sflush_r+0xda>
 801f296:	bf00      	nop
 801f298:	dfbffffe 	.word	0xdfbffffe

0801f29c <_fflush_r>:
 801f29c:	b538      	push	{r3, r4, r5, lr}
 801f29e:	690b      	ldr	r3, [r1, #16]
 801f2a0:	4605      	mov	r5, r0
 801f2a2:	460c      	mov	r4, r1
 801f2a4:	b913      	cbnz	r3, 801f2ac <_fflush_r+0x10>
 801f2a6:	2500      	movs	r5, #0
 801f2a8:	4628      	mov	r0, r5
 801f2aa:	bd38      	pop	{r3, r4, r5, pc}
 801f2ac:	b118      	cbz	r0, 801f2b6 <_fflush_r+0x1a>
 801f2ae:	6a03      	ldr	r3, [r0, #32]
 801f2b0:	b90b      	cbnz	r3, 801f2b6 <_fflush_r+0x1a>
 801f2b2:	f7ff f841 	bl	801e338 <__sinit>
 801f2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d0f3      	beq.n	801f2a6 <_fflush_r+0xa>
 801f2be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f2c0:	07d0      	lsls	r0, r2, #31
 801f2c2:	d404      	bmi.n	801f2ce <_fflush_r+0x32>
 801f2c4:	0599      	lsls	r1, r3, #22
 801f2c6:	d402      	bmi.n	801f2ce <_fflush_r+0x32>
 801f2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2ca:	f7ff fad1 	bl	801e870 <__retarget_lock_acquire_recursive>
 801f2ce:	4628      	mov	r0, r5
 801f2d0:	4621      	mov	r1, r4
 801f2d2:	f7ff ff5d 	bl	801f190 <__sflush_r>
 801f2d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f2d8:	07da      	lsls	r2, r3, #31
 801f2da:	4605      	mov	r5, r0
 801f2dc:	d4e4      	bmi.n	801f2a8 <_fflush_r+0xc>
 801f2de:	89a3      	ldrh	r3, [r4, #12]
 801f2e0:	059b      	lsls	r3, r3, #22
 801f2e2:	d4e1      	bmi.n	801f2a8 <_fflush_r+0xc>
 801f2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2e6:	f7ff fac4 	bl	801e872 <__retarget_lock_release_recursive>
 801f2ea:	e7dd      	b.n	801f2a8 <_fflush_r+0xc>

0801f2ec <__swhatbuf_r>:
 801f2ec:	b570      	push	{r4, r5, r6, lr}
 801f2ee:	460c      	mov	r4, r1
 801f2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2f4:	2900      	cmp	r1, #0
 801f2f6:	b096      	sub	sp, #88	; 0x58
 801f2f8:	4615      	mov	r5, r2
 801f2fa:	461e      	mov	r6, r3
 801f2fc:	da0d      	bge.n	801f31a <__swhatbuf_r+0x2e>
 801f2fe:	89a3      	ldrh	r3, [r4, #12]
 801f300:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f304:	f04f 0100 	mov.w	r1, #0
 801f308:	bf0c      	ite	eq
 801f30a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f30e:	2340      	movne	r3, #64	; 0x40
 801f310:	2000      	movs	r0, #0
 801f312:	6031      	str	r1, [r6, #0]
 801f314:	602b      	str	r3, [r5, #0]
 801f316:	b016      	add	sp, #88	; 0x58
 801f318:	bd70      	pop	{r4, r5, r6, pc}
 801f31a:	466a      	mov	r2, sp
 801f31c:	f000 f87c 	bl	801f418 <_fstat_r>
 801f320:	2800      	cmp	r0, #0
 801f322:	dbec      	blt.n	801f2fe <__swhatbuf_r+0x12>
 801f324:	9901      	ldr	r1, [sp, #4]
 801f326:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f32a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f32e:	4259      	negs	r1, r3
 801f330:	4159      	adcs	r1, r3
 801f332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f336:	e7eb      	b.n	801f310 <__swhatbuf_r+0x24>

0801f338 <__smakebuf_r>:
 801f338:	898b      	ldrh	r3, [r1, #12]
 801f33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f33c:	079d      	lsls	r5, r3, #30
 801f33e:	4606      	mov	r6, r0
 801f340:	460c      	mov	r4, r1
 801f342:	d507      	bpl.n	801f354 <__smakebuf_r+0x1c>
 801f344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f348:	6023      	str	r3, [r4, #0]
 801f34a:	6123      	str	r3, [r4, #16]
 801f34c:	2301      	movs	r3, #1
 801f34e:	6163      	str	r3, [r4, #20]
 801f350:	b002      	add	sp, #8
 801f352:	bd70      	pop	{r4, r5, r6, pc}
 801f354:	ab01      	add	r3, sp, #4
 801f356:	466a      	mov	r2, sp
 801f358:	f7ff ffc8 	bl	801f2ec <__swhatbuf_r>
 801f35c:	9900      	ldr	r1, [sp, #0]
 801f35e:	4605      	mov	r5, r0
 801f360:	4630      	mov	r0, r6
 801f362:	f7fe fee3 	bl	801e12c <_malloc_r>
 801f366:	b948      	cbnz	r0, 801f37c <__smakebuf_r+0x44>
 801f368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f36c:	059a      	lsls	r2, r3, #22
 801f36e:	d4ef      	bmi.n	801f350 <__smakebuf_r+0x18>
 801f370:	f023 0303 	bic.w	r3, r3, #3
 801f374:	f043 0302 	orr.w	r3, r3, #2
 801f378:	81a3      	strh	r3, [r4, #12]
 801f37a:	e7e3      	b.n	801f344 <__smakebuf_r+0xc>
 801f37c:	89a3      	ldrh	r3, [r4, #12]
 801f37e:	6020      	str	r0, [r4, #0]
 801f380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f384:	81a3      	strh	r3, [r4, #12]
 801f386:	9b00      	ldr	r3, [sp, #0]
 801f388:	6163      	str	r3, [r4, #20]
 801f38a:	9b01      	ldr	r3, [sp, #4]
 801f38c:	6120      	str	r0, [r4, #16]
 801f38e:	b15b      	cbz	r3, 801f3a8 <__smakebuf_r+0x70>
 801f390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f394:	4630      	mov	r0, r6
 801f396:	f000 f851 	bl	801f43c <_isatty_r>
 801f39a:	b128      	cbz	r0, 801f3a8 <__smakebuf_r+0x70>
 801f39c:	89a3      	ldrh	r3, [r4, #12]
 801f39e:	f023 0303 	bic.w	r3, r3, #3
 801f3a2:	f043 0301 	orr.w	r3, r3, #1
 801f3a6:	81a3      	strh	r3, [r4, #12]
 801f3a8:	89a3      	ldrh	r3, [r4, #12]
 801f3aa:	431d      	orrs	r5, r3
 801f3ac:	81a5      	strh	r5, [r4, #12]
 801f3ae:	e7cf      	b.n	801f350 <__smakebuf_r+0x18>

0801f3b0 <_putc_r>:
 801f3b0:	b570      	push	{r4, r5, r6, lr}
 801f3b2:	460d      	mov	r5, r1
 801f3b4:	4614      	mov	r4, r2
 801f3b6:	4606      	mov	r6, r0
 801f3b8:	b118      	cbz	r0, 801f3c2 <_putc_r+0x12>
 801f3ba:	6a03      	ldr	r3, [r0, #32]
 801f3bc:	b90b      	cbnz	r3, 801f3c2 <_putc_r+0x12>
 801f3be:	f7fe ffbb 	bl	801e338 <__sinit>
 801f3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3c4:	07d8      	lsls	r0, r3, #31
 801f3c6:	d405      	bmi.n	801f3d4 <_putc_r+0x24>
 801f3c8:	89a3      	ldrh	r3, [r4, #12]
 801f3ca:	0599      	lsls	r1, r3, #22
 801f3cc:	d402      	bmi.n	801f3d4 <_putc_r+0x24>
 801f3ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3d0:	f7ff fa4e 	bl	801e870 <__retarget_lock_acquire_recursive>
 801f3d4:	68a3      	ldr	r3, [r4, #8]
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	60a3      	str	r3, [r4, #8]
 801f3dc:	da05      	bge.n	801f3ea <_putc_r+0x3a>
 801f3de:	69a2      	ldr	r2, [r4, #24]
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	db12      	blt.n	801f40a <_putc_r+0x5a>
 801f3e4:	b2eb      	uxtb	r3, r5
 801f3e6:	2b0a      	cmp	r3, #10
 801f3e8:	d00f      	beq.n	801f40a <_putc_r+0x5a>
 801f3ea:	6823      	ldr	r3, [r4, #0]
 801f3ec:	1c5a      	adds	r2, r3, #1
 801f3ee:	6022      	str	r2, [r4, #0]
 801f3f0:	701d      	strb	r5, [r3, #0]
 801f3f2:	b2ed      	uxtb	r5, r5
 801f3f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3f6:	07da      	lsls	r2, r3, #31
 801f3f8:	d405      	bmi.n	801f406 <_putc_r+0x56>
 801f3fa:	89a3      	ldrh	r3, [r4, #12]
 801f3fc:	059b      	lsls	r3, r3, #22
 801f3fe:	d402      	bmi.n	801f406 <_putc_r+0x56>
 801f400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f402:	f7ff fa36 	bl	801e872 <__retarget_lock_release_recursive>
 801f406:	4628      	mov	r0, r5
 801f408:	bd70      	pop	{r4, r5, r6, pc}
 801f40a:	4629      	mov	r1, r5
 801f40c:	4622      	mov	r2, r4
 801f40e:	4630      	mov	r0, r6
 801f410:	f7ff f8a1 	bl	801e556 <__swbuf_r>
 801f414:	4605      	mov	r5, r0
 801f416:	e7ed      	b.n	801f3f4 <_putc_r+0x44>

0801f418 <_fstat_r>:
 801f418:	b538      	push	{r3, r4, r5, lr}
 801f41a:	4d07      	ldr	r5, [pc, #28]	; (801f438 <_fstat_r+0x20>)
 801f41c:	2300      	movs	r3, #0
 801f41e:	4604      	mov	r4, r0
 801f420:	4608      	mov	r0, r1
 801f422:	4611      	mov	r1, r2
 801f424:	602b      	str	r3, [r5, #0]
 801f426:	f7e6 ffe0 	bl	80063ea <_fstat>
 801f42a:	1c43      	adds	r3, r0, #1
 801f42c:	d102      	bne.n	801f434 <_fstat_r+0x1c>
 801f42e:	682b      	ldr	r3, [r5, #0]
 801f430:	b103      	cbz	r3, 801f434 <_fstat_r+0x1c>
 801f432:	6023      	str	r3, [r4, #0]
 801f434:	bd38      	pop	{r3, r4, r5, pc}
 801f436:	bf00      	nop
 801f438:	2001e644 	.word	0x2001e644

0801f43c <_isatty_r>:
 801f43c:	b538      	push	{r3, r4, r5, lr}
 801f43e:	4d06      	ldr	r5, [pc, #24]	; (801f458 <_isatty_r+0x1c>)
 801f440:	2300      	movs	r3, #0
 801f442:	4604      	mov	r4, r0
 801f444:	4608      	mov	r0, r1
 801f446:	602b      	str	r3, [r5, #0]
 801f448:	f7e6 ffdf 	bl	800640a <_isatty>
 801f44c:	1c43      	adds	r3, r0, #1
 801f44e:	d102      	bne.n	801f456 <_isatty_r+0x1a>
 801f450:	682b      	ldr	r3, [r5, #0]
 801f452:	b103      	cbz	r3, 801f456 <_isatty_r+0x1a>
 801f454:	6023      	str	r3, [r4, #0]
 801f456:	bd38      	pop	{r3, r4, r5, pc}
 801f458:	2001e644 	.word	0x2001e644

0801f45c <_realloc_r>:
 801f45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f460:	4680      	mov	r8, r0
 801f462:	4614      	mov	r4, r2
 801f464:	460e      	mov	r6, r1
 801f466:	b921      	cbnz	r1, 801f472 <_realloc_r+0x16>
 801f468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f46c:	4611      	mov	r1, r2
 801f46e:	f7fe be5d 	b.w	801e12c <_malloc_r>
 801f472:	b92a      	cbnz	r2, 801f480 <_realloc_r+0x24>
 801f474:	f7ff fa14 	bl	801e8a0 <_free_r>
 801f478:	4625      	mov	r5, r4
 801f47a:	4628      	mov	r0, r5
 801f47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f480:	f000 f81b 	bl	801f4ba <_malloc_usable_size_r>
 801f484:	4284      	cmp	r4, r0
 801f486:	4607      	mov	r7, r0
 801f488:	d802      	bhi.n	801f490 <_realloc_r+0x34>
 801f48a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f48e:	d812      	bhi.n	801f4b6 <_realloc_r+0x5a>
 801f490:	4621      	mov	r1, r4
 801f492:	4640      	mov	r0, r8
 801f494:	f7fe fe4a 	bl	801e12c <_malloc_r>
 801f498:	4605      	mov	r5, r0
 801f49a:	2800      	cmp	r0, #0
 801f49c:	d0ed      	beq.n	801f47a <_realloc_r+0x1e>
 801f49e:	42bc      	cmp	r4, r7
 801f4a0:	4622      	mov	r2, r4
 801f4a2:	4631      	mov	r1, r6
 801f4a4:	bf28      	it	cs
 801f4a6:	463a      	movcs	r2, r7
 801f4a8:	f7ff f9ec 	bl	801e884 <memcpy>
 801f4ac:	4631      	mov	r1, r6
 801f4ae:	4640      	mov	r0, r8
 801f4b0:	f7ff f9f6 	bl	801e8a0 <_free_r>
 801f4b4:	e7e1      	b.n	801f47a <_realloc_r+0x1e>
 801f4b6:	4635      	mov	r5, r6
 801f4b8:	e7df      	b.n	801f47a <_realloc_r+0x1e>

0801f4ba <_malloc_usable_size_r>:
 801f4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f4be:	1f18      	subs	r0, r3, #4
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	bfbc      	itt	lt
 801f4c4:	580b      	ldrlt	r3, [r1, r0]
 801f4c6:	18c0      	addlt	r0, r0, r3
 801f4c8:	4770      	bx	lr
	...

0801f4cc <_init>:
 801f4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4ce:	bf00      	nop
 801f4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4d2:	bc08      	pop	{r3}
 801f4d4:	469e      	mov	lr, r3
 801f4d6:	4770      	bx	lr

0801f4d8 <_fini>:
 801f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4da:	bf00      	nop
 801f4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4de:	bc08      	pop	{r3}
 801f4e0:	469e      	mov	lr, r3
 801f4e2:	4770      	bx	lr
